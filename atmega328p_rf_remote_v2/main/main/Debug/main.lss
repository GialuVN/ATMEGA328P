
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000510  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000509  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b3  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a1  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000313  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_3>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_14>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	5a 01       	movw	r10, r20
  6a:	66 01       	movw	r12, r12
  6c:	9c 01       	movw	r18, r24
  6e:	cc 01       	movw	r24, r24
  70:	d3 01       	movw	r26, r6
  72:	da 01       	movw	r26, r20
  74:	14 02       	muls	r17, r20
  76:	3a 02       	muls	r19, r26

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 31       	cpi	r26, 0x13	; 19
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  98:	0c 94 86 02 	jmp	0x50c	; 0x50c <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:

#include <avr/io.h>
#include "pt2260_dec.h"
int main(void)
{
	wdt_reset();
  a0:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	a8 95       	wdr
  ac:	80 93 60 00 	sts	0x0060, r24
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_250MS);
	timer0_init();
  b6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <timer0_init>
	RF_decode_initial(0x00);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 7e 00 	call	0xfc	; 0xfc <RF_decode_initial>
	RF_decode_setup(300,25);
  c0:	69 e1       	ldi	r22, 0x19	; 25
  c2:	8c e2       	ldi	r24, 0x2C	; 44
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 94 00 	call	0x128	; 0x128 <RF_decode_setup>
	RF_decode_start();
  ca:	0e 94 ed 00 	call	0x1da	; 0x1da <RF_decode_start>
	DDRD|=1<<PORTD4;
  ce:	54 9a       	sbi	0x0a, 4	; 10
	RF_clear_key();
  d0:	0e 94 07 01 	call	0x20e	; 0x20e <RF_clear_key>
    {
		
	if (RF_get_key()==8)
	{
		
		PORTD^=1<<PORTD4;
  d4:	c0 e1       	ldi	r28, 0x10	; 16
	DDRD|=1<<PORTD4;
	RF_clear_key();
    while(1)
    {
		
	if (RF_get_key()==8)
  d6:	0e 94 04 01 	call	0x208	; 0x208 <RF_get_key>
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x36>
	{
		
		PORTD^=1<<PORTD4;
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8c 27       	eor	r24, r28
  e2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	83 ed       	ldi	r24, 0xD3	; 211
  e8:	90 e3       	ldi	r25, 0x30	; 48
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x4a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x54>
  f4:	00 00       	nop
			_delay_ms(1000);
		RF_clear_key();
  f6:	0e 94 07 01 	call	0x20e	; 0x20e <RF_clear_key>
  fa:	ed cf       	rjmp	.-38     	; 0xd6 <main+0x36>

000000fc <RF_decode_initial>:
volatile RF_DECODE rf_decode;
volatile unsigned int x_counter; 

void RF_decode_initial(unsigned char id)
{
	DDR_RF &= ~(1<<IN_RF);
  fc:	20 98       	cbi	0x04, 0	; 4
	POR_RF |=1<<IN_RF;
  fe:	28 9a       	sbi	0x05, 0	; 5
	PCICR |= 1<<PCIE0;	// PCINT0 select
 100:	e8 e6       	ldi	r30, 0x68	; 104
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	91 60       	ori	r25, 0x01	; 1
 108:	90 83       	st	Z, r25
	PCMSK0 |= 1<<PCINT0;
 10a:	eb e6       	ldi	r30, 0x6B	; 107
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	91 60       	ori	r25, 0x01	; 1
 112:	90 83       	st	Z, r25
	rf_decode.rf_id = id;	
 114:	e0 e0       	ldi	r30, 0x00	; 0
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	83 83       	std	Z+3, r24	; 0x03
	rf_decode.rf_stage = 0;
 11a:	14 82       	std	Z+4, r1	; 0x04
	rf_decode.rf_timer = 0;
 11c:	16 82       	std	Z+6, r1	; 0x06
 11e:	15 82       	std	Z+5, r1	; 0x05
	rf_decode.rf_data = 0;
 120:	12 82       	std	Z+2, r1	; 0x02
 122:	11 82       	std	Z+1, r1	; 0x01
	rf_decode.rf_count_bit = 0;	
 124:	17 82       	std	Z+7, r1	; 0x07
 126:	08 95       	ret

00000128 <RF_decode_setup>:
}

void RF_decode_setup(uint16_t start_frame_time ,uint8_t percent)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ec 01       	movw	r28, r24
	rf_decode.rf_min_start = (start_frame_time*(100-percent))/100;
 12e:	46 2f       	mov	r20, r22
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	84 e6       	ldi	r24, 0x64	; 100
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	84 1b       	sub	r24, r20
 138:	95 0b       	sbc	r25, r21
 13a:	8c 9f       	mul	r24, r28
 13c:	90 01       	movw	r18, r0
 13e:	8d 9f       	mul	r24, r29
 140:	30 0d       	add	r19, r0
 142:	9c 9f       	mul	r25, r28
 144:	30 0d       	add	r19, r0
 146:	11 24       	eor	r1, r1
 148:	36 95       	lsr	r19
 14a:	27 95       	ror	r18
 14c:	36 95       	lsr	r19
 14e:	27 95       	ror	r18
 150:	ab e7       	ldi	r26, 0x7B	; 123
 152:	b4 e1       	ldi	r27, 0x14	; 20
 154:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	93 87       	std	Z+11, r25	; 0x0b
 162:	82 87       	std	Z+10, r24	; 0x0a
	rf_decode.rf_max_start = (start_frame_time*(100+percent))/100;
 164:	4c 59       	subi	r20, 0x9C	; 156
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	4c 9f       	mul	r20, r28
 16a:	90 01       	movw	r18, r0
 16c:	4d 9f       	mul	r20, r29
 16e:	30 0d       	add	r19, r0
 170:	5c 9f       	mul	r21, r28
 172:	30 0d       	add	r19, r0
 174:	11 24       	eor	r1, r1
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	91 87       	std	Z+9, r25	; 0x09
 188:	80 87       	std	Z+8, r24	; 0x08
	rf_decode.rf_min_wide = rf_decode.rf_min_start/10;
 18a:	22 85       	ldd	r18, Z+10	; 0x0a
 18c:	33 85       	ldd	r19, Z+11	; 0x0b
 18e:	ad ec       	ldi	r26, 0xCD	; 205
 190:	bc ec       	ldi	r27, 0xCC	; 204
 192:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	87 87       	std	Z+15, r24	; 0x0f
	rf_decode.rf_max_wide = rf_decode.rf_max_start/10;
 1a4:	20 85       	ldd	r18, Z+8	; 0x08
 1a6:	31 85       	ldd	r19, Z+9	; 0x09
 1a8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__umulhisi3>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	86 87       	std	Z+14, r24	; 0x0e
	rf_decode.rf_min_narow = rf_decode.rf_min_wide/3;
 1ba:	97 85       	ldd	r25, Z+15	; 0x0f
 1bc:	2b ea       	ldi	r18, 0xAB	; 171
 1be:	92 9f       	mul	r25, r18
 1c0:	91 2d       	mov	r25, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	96 95       	lsr	r25
 1c6:	95 87       	std	Z+13, r25	; 0x0d
	rf_decode.rf_max_narow = rf_decode.rf_max_wide/3;
 1c8:	86 85       	ldd	r24, Z+14	; 0x0e
 1ca:	82 9f       	mul	r24, r18
 1cc:	81 2d       	mov	r24, r1
 1ce:	11 24       	eor	r1, r1
 1d0:	86 95       	lsr	r24
 1d2:	84 87       	std	Z+12, r24	; 0x0c
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <RF_decode_start>:
	PCICR &=~(1<<PCIE0);	// PCINT0 disable	
}

void RF_decode_start()
{
	rf_decode.rf_stage = 0;
 1da:	10 92 04 01 	sts	0x0104, r1
	PCICR |=(1<<PCIE0);		// PCINT0 enable
 1de:	e8 e6       	ldi	r30, 0x68	; 104
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <timer0_init>:
	return 1;
}

void timer0_init(void)
{
	TIMSK0 |= (1 << OCIE0A);			// COMA     
 1ea:	ee e6       	ldi	r30, 0x6E	; 110
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);				//CTC mode
 1f4:	84 b5       	in	r24, 0x24	; 36
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1<<CS01;					//		clk/8	
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	85 bd       	out	0x25, r24	; 37
	OCR0A   = 99;						 //		50us
 200:	83 e6       	ldi	r24, 0x63	; 99
 202:	87 bd       	out	0x27, r24	; 39
	sei();
 204:	78 94       	sei
 206:	08 95       	ret

00000208 <RF_get_key>:
}
unsigned char RF_get_key(void)
{
	return rf_decode.rf_key;
 208:	80 91 00 01 	lds	r24, 0x0100
}
 20c:	08 95       	ret

0000020e <RF_clear_key>:
void RF_clear_key(void)
{
	rf_decode.rf_key = 0;
 20e:	10 92 00 01 	sts	0x0100, r1
 212:	08 95       	ret

00000214 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	//PORTD^=1<<PORTD4;
	wdt_reset();
 228:	a8 95       	wdr
	if(x_counter!=0) x_counter--;
 22a:	80 91 11 01 	lds	r24, 0x0111
 22e:	90 91 12 01 	lds	r25, 0x0112
 232:	89 2b       	or	r24, r25
 234:	49 f0       	breq	.+18     	; 0x248 <__vector_14+0x34>
 236:	80 91 11 01 	lds	r24, 0x0111
 23a:	90 91 12 01 	lds	r25, 0x0112
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	90 93 12 01 	sts	0x0112, r25
 244:	80 93 11 01 	sts	0x0111, r24
	if(rf_decode.rf_timer<500) rf_decode.rf_timer++;
 248:	80 91 05 01 	lds	r24, 0x0105
 24c:	90 91 06 01 	lds	r25, 0x0106
 250:	84 3f       	cpi	r24, 0xF4	; 244
 252:	91 40       	sbci	r25, 0x01	; 1
 254:	38 f4       	brcc	.+14     	; 0x264 <__vector_14+0x50>
 256:	e0 e0       	ldi	r30, 0x00	; 0
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	85 81       	ldd	r24, Z+5	; 0x05
 25c:	96 81       	ldd	r25, Z+6	; 0x06
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	96 83       	std	Z+6, r25	; 0x06
 262:	85 83       	std	Z+5, r24	; 0x05
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_3>:

ISR(PCINT0_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	switch (rf_decode.rf_stage)
 29a:	e0 91 04 01 	lds	r30, 0x0104
 29e:	8e 2f       	mov	r24, r30
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	91 05       	cpc	r25, r1
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__vector_3+0x32>
 2a8:	ee c0       	rjmp	.+476    	; 0x486 <__vector_3+0x20e>
 2aa:	fc 01       	movw	r30, r24
 2ac:	ec 5c       	subi	r30, 0xCC	; 204
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__tablejump2__>
	{
		case 0:
		if (!(PIN_RF&(1<<IN_RF)))
 2b4:	18 99       	sbic	0x03, 0	; 3
 2b6:	e7 c0       	rjmp	.+462    	; 0x486 <__vector_3+0x20e>
		{
			rf_decode.rf_count_bit=0;
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	17 82       	std	Z+7, r1	; 0x07
			rf_decode.rf_data = 0;
 2be:	12 82       	std	Z+2, r1	; 0x02
 2c0:	11 82       	std	Z+1, r1	; 0x01
			rf_decode.rf_stage=1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer=0;
 2c6:	16 82       	std	Z+6, r1	; 0x06
 2c8:	15 82       	std	Z+5, r1	; 0x05
 2ca:	dd c0       	rjmp	.+442    	; 0x486 <__vector_3+0x20e>
		}
		break;
		case 1:
		if ((rf_decode.rf_timer>=rf_min_range) && (rf_decode.rf_timer<rf_max_range))
 2cc:	80 91 05 01 	lds	r24, 0x0105
 2d0:	90 91 06 01 	lds	r25, 0x0106
 2d4:	80 35       	cpi	r24, 0x50	; 80
 2d6:	91 05       	cpc	r25, r1
 2d8:	60 f1       	brcs	.+88     	; 0x332 <__vector_3+0xba>
 2da:	80 91 05 01 	lds	r24, 0x0105
 2de:	90 91 06 01 	lds	r25, 0x0106
 2e2:	8e 35       	cpi	r24, 0x5E	; 94
 2e4:	91 40       	sbci	r25, 0x01	; 1
 2e6:	28 f5       	brcc	.+74     	; 0x332 <__vector_3+0xba>
		{
			if (rf_decode.rf_check==0) RF_decode_setup(rf_decode.rf_timer,25);
 2e8:	80 91 10 01 	lds	r24, 0x0110
 2ec:	81 11       	cpse	r24, r1
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__vector_3+0x86>
 2f0:	80 91 05 01 	lds	r24, 0x0105
 2f4:	90 91 06 01 	lds	r25, 0x0106
 2f8:	69 e1       	ldi	r22, 0x19	; 25
 2fa:	0e 94 94 00 	call	0x128	; 0x128 <RF_decode_setup>
			
			if ((rf_decode.rf_timer>=rf_decode.rf_min_start) && (rf_decode.rf_timer<rf_decode.rf_max_start))  //250x50= 12.5ms
 2fe:	e0 e0       	ldi	r30, 0x00	; 0
 300:	f1 e0       	ldi	r31, 0x01	; 1
 302:	25 81       	ldd	r18, Z+5	; 0x05
 304:	36 81       	ldd	r19, Z+6	; 0x06
 306:	82 85       	ldd	r24, Z+10	; 0x0a
 308:	93 85       	ldd	r25, Z+11	; 0x0b
 30a:	28 17       	cp	r18, r24
 30c:	39 07       	cpc	r19, r25
 30e:	60 f0       	brcs	.+24     	; 0x328 <__vector_3+0xb0>
 310:	25 81       	ldd	r18, Z+5	; 0x05
 312:	36 81       	ldd	r19, Z+6	; 0x06
 314:	80 85       	ldd	r24, Z+8	; 0x08
 316:	91 85       	ldd	r25, Z+9	; 0x09
 318:	28 17       	cp	r18, r24
 31a:	39 07       	cpc	r19, r25
 31c:	28 f4       	brcc	.+10     	; 0x328 <__vector_3+0xb0>
			{
				 rf_decode.rf_stage = 2;  
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	84 83       	std	Z+4, r24	; 0x04
				 rf_decode.rf_timer = 0;
 322:	16 82       	std	Z+6, r1	; 0x06
 324:	15 82       	std	Z+5, r1	; 0x05
 326:	af c0       	rjmp	.+350    	; 0x486 <__vector_3+0x20e>
			}
			else 
				{
					rf_decode.rf_stage =0;
 328:	e0 e0       	ldi	r30, 0x00	; 0
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	14 82       	std	Z+4, r1	; 0x04
					 rf_decode.rf_check = 0;
 32e:	10 8a       	std	Z+16, r1	; 0x10
 330:	aa c0       	rjmp	.+340    	; 0x486 <__vector_3+0x20e>
				 }
		}
		else rf_decode.rf_stage =0;
 332:	10 92 04 01 	sts	0x0104, r1
 336:	a7 c0       	rjmp	.+334    	; 0x486 <__vector_3+0x20e>
		break;
		case 2:
		if (!(PIN_RF&(1<<IN_RF)))
 338:	18 99       	sbic	0x03, 0	; 3
 33a:	2b c0       	rjmp	.+86     	; 0x392 <__vector_3+0x11a>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_narow) && (rf_decode.rf_timer<rf_decode.rf_max_narow)) rf_decode.rf_stage = 3;
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	25 81       	ldd	r18, Z+5	; 0x05
 342:	36 81       	ldd	r19, Z+6	; 0x06
 344:	85 85       	ldd	r24, Z+13	; 0x0d
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	58 f0       	brcs	.+22     	; 0x364 <__vector_3+0xec>
 34e:	25 81       	ldd	r18, Z+5	; 0x05
 350:	36 81       	ldd	r19, Z+6	; 0x06
 352:	84 85       	ldd	r24, Z+12	; 0x0c
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
 35a:	20 f4       	brcc	.+8      	; 0x364 <__vector_3+0xec>
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	80 93 04 01 	sts	0x0104, r24
 362:	91 c0       	rjmp	.+290    	; 0x486 <__vector_3+0x20e>
			else if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide)) rf_decode.rf_stage = 4;
 364:	e0 e0       	ldi	r30, 0x00	; 0
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	25 81       	ldd	r18, Z+5	; 0x05
 36a:	36 81       	ldd	r19, Z+6	; 0x06
 36c:	87 85       	ldd	r24, Z+15	; 0x0f
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	28 17       	cp	r18, r24
 372:	39 07       	cpc	r19, r25
 374:	58 f0       	brcs	.+22     	; 0x38c <__vector_3+0x114>
 376:	25 81       	ldd	r18, Z+5	; 0x05
 378:	36 81       	ldd	r19, Z+6	; 0x06
 37a:	86 85       	ldd	r24, Z+14	; 0x0e
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	28 17       	cp	r18, r24
 380:	39 07       	cpc	r19, r25
 382:	20 f4       	brcc	.+8      	; 0x38c <__vector_3+0x114>
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	80 93 04 01 	sts	0x0104, r24
 38a:	7d c0       	rjmp	.+250    	; 0x486 <__vector_3+0x20e>
			else rf_decode.rf_stage =0;
 38c:	10 92 04 01 	sts	0x0104, r1
 390:	7a c0       	rjmp	.+244    	; 0x486 <__vector_3+0x20e>
	
		}
		else rf_decode.rf_stage = 0;
 392:	10 92 04 01 	sts	0x0104, r1
 396:	77 c0       	rjmp	.+238    	; 0x486 <__vector_3+0x20e>
		break;
		case 3:
			rf_decode.rf_stage = 5;
 398:	e0 e0       	ldi	r30, 0x00	; 0
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer = 0;
 3a0:	16 82       	std	Z+6, r1	; 0x06
 3a2:	15 82       	std	Z+5, r1	; 0x05
		break;
 3a4:	70 c0       	rjmp	.+224    	; 0x486 <__vector_3+0x20e>
		case 4:
			rf_decode.rf_stage = 6;
 3a6:	e0 e0       	ldi	r30, 0x00	; 0
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	86 e0       	ldi	r24, 0x06	; 6
 3ac:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer = 0;
 3ae:	16 82       	std	Z+6, r1	; 0x06
 3b0:	15 82       	std	Z+5, r1	; 0x05
		break;
 3b2:	69 c0       	rjmp	.+210    	; 0x486 <__vector_3+0x20e>
		case 5:
		if (!(PIN_RF&(1<<IN_RF)))
 3b4:	18 99       	sbic	0x03, 0	; 3
 3b6:	35 c0       	rjmp	.+106    	; 0x422 <__vector_3+0x1aa>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_narow) && (rf_decode.rf_timer<rf_decode.rf_max_narow))
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	25 81       	ldd	r18, Z+5	; 0x05
 3be:	36 81       	ldd	r19, Z+6	; 0x06
 3c0:	85 85       	ldd	r24, Z+13	; 0x0d
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	80 f0       	brcs	.+32     	; 0x3ea <__vector_3+0x172>
 3ca:	25 81       	ldd	r18, Z+5	; 0x05
 3cc:	36 81       	ldd	r19, Z+6	; 0x06
 3ce:	84 85       	ldd	r24, Z+12	; 0x0c
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	28 17       	cp	r18, r24
 3d4:	39 07       	cpc	r19, r25
 3d6:	48 f4       	brcc	.+18     	; 0x3ea <__vector_3+0x172>
			{
				 rf_decode.rf_data <<= 1; //  bit 0
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	92 81       	ldd	r25, Z+2	; 0x02
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	92 83       	std	Z+2, r25	; 0x02
 3e2:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	84 83       	std	Z+4, r24	; 0x04
 3e8:	4e c0       	rjmp	.+156    	; 0x486 <__vector_3+0x20e>
			}
			else if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide))
 3ea:	e0 e0       	ldi	r30, 0x00	; 0
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	25 81       	ldd	r18, Z+5	; 0x05
 3f0:	36 81       	ldd	r19, Z+6	; 0x06
 3f2:	87 85       	ldd	r24, Z+15	; 0x0f
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	28 17       	cp	r18, r24
 3f8:	39 07       	cpc	r19, r25
 3fa:	80 f0       	brcs	.+32     	; 0x41c <__vector_3+0x1a4>
 3fc:	25 81       	ldd	r18, Z+5	; 0x05
 3fe:	36 81       	ldd	r19, Z+6	; 0x06
 400:	86 85       	ldd	r24, Z+14	; 0x0e
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	28 17       	cp	r18, r24
 406:	39 07       	cpc	r19, r25
 408:	48 f4       	brcc	.+18     	; 0x41c <__vector_3+0x1a4>
			{
				 rf_decode.rf_data<<=1;//bit float = bit 0
 40a:	81 81       	ldd	r24, Z+1	; 0x01
 40c:	92 81       	ldd	r25, Z+2	; 0x02
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	92 83       	std	Z+2, r25	; 0x02
 414:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	84 83       	std	Z+4, r24	; 0x04
 41a:	35 c0       	rjmp	.+106    	; 0x486 <__vector_3+0x20e>
			}
			else rf_decode.rf_stage =0;
 41c:	10 92 04 01 	sts	0x0104, r1
 420:	32 c0       	rjmp	.+100    	; 0x486 <__vector_3+0x20e>
			
				 
				
			
		}
		else rf_decode.rf_stage =0;
 422:	10 92 04 01 	sts	0x0104, r1
 426:	2f c0       	rjmp	.+94     	; 0x486 <__vector_3+0x20e>
		break;
		case 6:
		if (!(PIN_RF&(1<<IN_RF)))
 428:	18 99       	sbic	0x03, 0	; 3
 42a:	21 c0       	rjmp	.+66     	; 0x46e <__vector_3+0x1f6>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide)) 
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	25 81       	ldd	r18, Z+5	; 0x05
 432:	36 81       	ldd	r19, Z+6	; 0x06
 434:	87 85       	ldd	r24, Z+15	; 0x0f
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	28 17       	cp	r18, r24
 43a:	39 07       	cpc	r19, r25
 43c:	a8 f0       	brcs	.+42     	; 0x468 <__vector_3+0x1f0>
 43e:	25 81       	ldd	r18, Z+5	; 0x05
 440:	36 81       	ldd	r19, Z+6	; 0x06
 442:	86 85       	ldd	r24, Z+14	; 0x0e
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	28 17       	cp	r18, r24
 448:	39 07       	cpc	r19, r25
 44a:	70 f4       	brcc	.+28     	; 0x468 <__vector_3+0x1f0>
			{
				 rf_decode.rf_data <<= 1;
 44c:	81 81       	ldd	r24, Z+1	; 0x01
 44e:	92 81       	ldd	r25, Z+2	; 0x02
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	92 83       	std	Z+2, r25	; 0x02
 456:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_data|=1;	//  bit 1
 458:	81 81       	ldd	r24, Z+1	; 0x01
 45a:	92 81       	ldd	r25, Z+2	; 0x02
 45c:	81 60       	ori	r24, 0x01	; 1
 45e:	92 83       	std	Z+2, r25	; 0x02
 460:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 462:	87 e0       	ldi	r24, 0x07	; 7
 464:	84 83       	std	Z+4, r24	; 0x04
 466:	0f c0       	rjmp	.+30     	; 0x486 <__vector_3+0x20e>
			}
			else rf_decode.rf_stage =0;
 468:	10 92 04 01 	sts	0x0104, r1
 46c:	0c c0       	rjmp	.+24     	; 0x486 <__vector_3+0x20e>
		}
		else rf_decode.rf_stage =0;
 46e:	10 92 04 01 	sts	0x0104, r1
 472:	09 c0       	rjmp	.+18     	; 0x486 <__vector_3+0x20e>
		break;
		case 7:
				rf_decode.rf_count_bit++;
 474:	e0 e0       	ldi	r30, 0x00	; 0
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	87 81       	ldd	r24, Z+7	; 0x07
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	87 83       	std	Z+7, r24	; 0x07
				rf_decode.rf_stage = 2;  
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	84 83       	std	Z+4, r24	; 0x04
				rf_decode.rf_timer = 0;
 482:	16 82       	std	Z+6, r1	; 0x06
 484:	15 82       	std	Z+5, r1	; 0x05
		default:
		
		
		break;
	}
	if (rf_decode.rf_count_bit>=rf_data_len) 
 486:	80 91 07 01 	lds	r24, 0x0107
 48a:	8c 30       	cpi	r24, 0x0C	; 12
 48c:	c8 f0       	brcs	.+50     	; 0x4c0 <__vector_3+0x248>
	{
		if ((rf_decode.rf_data>>4)==(unsigned int)rf_decode.rf_id) rf_decode.rf_key=rf_decode.rf_data & 0x000f;
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f1 e0       	ldi	r31, 0x01	; 1
 492:	21 81       	ldd	r18, Z+1	; 0x01
 494:	32 81       	ldd	r19, Z+2	; 0x02
 496:	83 81       	ldd	r24, Z+3	; 0x03
 498:	32 95       	swap	r19
 49a:	22 95       	swap	r18
 49c:	2f 70       	andi	r18, 0x0F	; 15
 49e:	23 27       	eor	r18, r19
 4a0:	3f 70       	andi	r19, 0x0F	; 15
 4a2:	23 27       	eor	r18, r19
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	28 17       	cp	r18, r24
 4a8:	39 07       	cpc	r19, r25
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__vector_3+0x23c>
 4ac:	81 81       	ldd	r24, Z+1	; 0x01
 4ae:	92 81       	ldd	r25, Z+2	; 0x02
 4b0:	8f 70       	andi	r24, 0x0F	; 15
 4b2:	80 83       	st	Z, r24
		rf_decode.rf_count_bit=0;
 4b4:	e0 e0       	ldi	r30, 0x00	; 0
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	17 82       	std	Z+7, r1	; 0x07
		rf_decode.rf_stage =0;
 4ba:	14 82       	std	Z+4, r1	; 0x04
		rf_decode.rf_check = 1;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	80 8b       	std	Z+16, r24	; 0x10
	}
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__tablejump2__>:
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	05 90       	lpm	r0, Z+
 4e8:	f4 91       	lpm	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	09 94       	ijmp

000004ee <__umulhisi3>:
 4ee:	a2 9f       	mul	r26, r18
 4f0:	b0 01       	movw	r22, r0
 4f2:	b3 9f       	mul	r27, r19
 4f4:	c0 01       	movw	r24, r0
 4f6:	a3 9f       	mul	r26, r19
 4f8:	70 0d       	add	r23, r0
 4fa:	81 1d       	adc	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	91 1d       	adc	r25, r1
 500:	b2 9f       	mul	r27, r18
 502:	70 0d       	add	r23, r0
 504:	81 1d       	adc	r24, r1
 506:	11 24       	eor	r1, r1
 508:	91 1d       	adc	r25, r1
 50a:	08 95       	ret

0000050c <_exit>:
 50c:	f8 94       	cli

0000050e <__stop_program>:
 50e:	ff cf       	rjmp	.-2      	; 0x50e <__stop_program>
