
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f2a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  00000f9e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001e0  00000000  00000000  00000fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001744  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000085e  00000000  00000000  000028f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a04  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004dc  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000835  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000011be  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001b0  00000000  00000000  00005a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__vector_3>
  10:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_4>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_14>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	41 04       	cpc	r4, r1
  6a:	4b 04       	cpc	r4, r11
  6c:	55 04       	cpc	r5, r5
  6e:	5f 04       	cpc	r5, r15
  70:	69 04       	cpc	r6, r9
  72:	73 04       	cpc	r7, r3
  74:	7d 04       	cpc	r7, r13
  76:	87 04       	cpc	r8, r7
  78:	91 04       	cpc	r9, r1
  7a:	9b 04       	cpc	r9, r11

0000007c <__trampolines_end>:
  7c:	c0 f9       	bld	r28, 0
  7e:	a4 b0       	in	r10, 0x04	; 4
  80:	99 92       	st	Y+, r9
  82:	82 f8       	bld	r8, 2
  84:	80 90 ff 88 	lds	r8, 0x88FF
  88:	83 c6       	rjmp	.+3334   	; 0xd90 <__floatsisf+0x72>
  8a:	a1 86       	std	Z+9, r10	; 0x09
  8c:	8e c2       	rjmp	.+1308   	; 0x5aa <__vector_4+0x130>
  8e:	89 00       	.word	0x0089	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 35       	cpi	r26, 0x52	; 82
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 cb 04 	call	0x996	; 0x996 <main>
  b0:	0c 94 93 07 	jmp	0xf26	; 0xf26 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <SERVO_CTR_initial>:
	//servo_pid_position.servo_position = POSITION;
	//servo_pid_position.servo_integral = 0;
//}
void SERVO_CTR_initial()
{
	SEG7_initial();
  b8:	0e 94 0c 03 	call	0x618	; 0x618 <SEG7_initial>
	SEG7_disp_uint(0,0);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 ba 03 	call	0x774	; 0x774 <SEG7_disp_uint>
  c8:	08 95       	ret

000000ca <SERVO_DC_dir>:
}


void SERVO_DC_dir(unsigned char _dir)
{
	if (_dir) DIR_POR|=1<<DIR_PIN;
  ca:	88 23       	and	r24, r24
  cc:	11 f0       	breq	.+4      	; 0xd2 <SERVO_DC_dir+0x8>
  ce:	2c 9a       	sbi	0x05, 4	; 5
  d0:	08 95       	ret
	else DIR_POR &=~(1<<DIR_PIN);
  d2:	2c 98       	cbi	0x05, 4	; 5
  d4:	08 95       	ret

000000d6 <SERVO_DC_initial>:
volatile SERVO_PID_SPEED servo_pid_speed;
volatile SERVO_PID_POSITION servo_pid_position;
void SERVO_DC_initial()
{
	// encoder input config
	PH1_DDR &= ~(1<<PH1_PIN);
  d6:	3c 98       	cbi	0x07, 4	; 7
	PH2_DDR &= ~(1<<PH2_PIN);
  d8:	3d 98       	cbi	0x07, 5	; 7
	PH1_POR |= (1<<PH1_PIN);
  da:	44 9a       	sbi	0x08, 4	; 8
	PH2_POR |= (1<<PH2_PIN);
  dc:	45 9a       	sbi	0x08, 5	; 8
	PCICR |= 1<<PCIE1;	// PCINT1 select
  de:	e8 e6       	ldi	r30, 0x68	; 104
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT13)|(1<<PCINT12);
  e8:	ec e6       	ldi	r30, 0x6C	; 108
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 63       	ori	r24, 0x30	; 48
  f0:	80 83       	st	Z, r24
	
	//dir control ouput config
	DIR_DDR |= 1<<DIR_PIN;
  f2:	24 9a       	sbi	0x04, 4	; 4
	DIR_POR|=1<<DIR_PIN;
  f4:	2c 9a       	sbi	0x05, 4	; 5
	//pwm control ouput config
	pwm_phasecorrect_timer1_option_initial(clk_timer1_div8,pwm_10bits);
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 ed 04 	call	0x9da	; 0x9da <pwm_phasecorrect_timer1_option_initial>
	//Sampling PID
		TCCR2A = (1 << WGM21);                      // Set the Timer Mode to CTC
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 b0 00 	sts	0x00B0, r24
		OCR2A = 249;                                 // Set 249 as value to count to //f=250 c=4ms
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	80 93 b3 00 	sts	0x00B3, r24
		TIMSK2 |= (1 << OCIE0A);                     //Set the ISR COMPA vector
 10a:	e0 e7       	ldi	r30, 0x70	; 112
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
		TCCR2B |= (1 << CS20) | (1 << CS22) ;        // set pre-scaler to 128 and start the timer
 114:	e1 eb       	ldi	r30, 0xB1	; 177
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	85 60       	ori	r24, 0x05	; 5
 11c:	80 83       	st	Z, r24
		
//		DDRC|=1<<PINC3;
		
	//initial control
	servo_ctr.servo_position =  0;
 11e:	10 92 2b 01 	sts	0x012B, r1
 122:	10 92 2c 01 	sts	0x012C, r1
 126:	10 92 2d 01 	sts	0x012D, r1
 12a:	10 92 2e 01 	sts	0x012E, r1
	servo_ctr.servo_force = 1000;
 12e:	ef e2       	ldi	r30, 0x2F	; 47
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
	SERVO_DC_force(servo_ctr.servo_force);
 13a:	80 81       	ld	r24, Z
 13c:	91 81       	ldd	r25, Z+1	; 0x01
	else DIR_POR &=~(1<<DIR_PIN);
}

void SERVO_DC_force(unsigned int _val)
{
	pwm_servo_timer1_OCR1B_updata(_val);
 13e:	0e 94 02 05 	call	0xa04	; 0xa04 <pwm_servo_timer1_OCR1B_updata>
		
	//initial control
	servo_ctr.servo_position =  0;
	servo_ctr.servo_force = 1000;
	SERVO_DC_force(servo_ctr.servo_force);
	servo_ctr.servo_dir=LEFT;
 142:	ee e1       	ldi	r30, 0x1E	; 30
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	10 82       	st	Z, r1
	SERVO_DC_dir(servo_ctr.servo_dir);
 148:	80 81       	ld	r24, Z
 14a:	0e 94 65 00 	call	0xca	; 0xca <SERVO_DC_dir>
	
	servo_ctr.servo_sample_rate = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 1c 01 	sts	0x011C, r24
 //SERVO_DC_PID_POSITION_UPDATA(1,0,0,9900);
}

void SERVO_DC_PID_SPEED_UPDATA(unsigned int KP,unsigned int KI,unsigned int KD,unsigned int SPEED,unsigned char DIR)
{
	servo_pid_speed.dir = DIR;
 154:	80 93 0a 01 	sts	0x010A, r24
	servo_pid_speed.servo_kd = KD;
 158:	89 e1       	ldi	r24, 0x19	; 25
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 05 01 	sts	0x0105, r25
 160:	80 93 04 01 	sts	0x0104, r24
	servo_pid_speed.servo_ki = KI;
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 03 01 	sts	0x0103, r25
 16c:	80 93 02 01 	sts	0x0102, r24
	servo_pid_speed.servo_kp = KP;
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 01 01 	sts	0x0101, r25
 178:	80 93 00 01 	sts	0x0100, r24
	servo_pid_speed.servo_speed = SPEED;
 17c:	90 93 07 01 	sts	0x0107, r25
 180:	80 93 06 01 	sts	0x0106, r24
	servo_pid_speed.servo_integral = 0;
 184:	10 92 09 01 	sts	0x0109, r1
 188:	10 92 08 01 	sts	0x0108, r1
 18c:	08 95       	ret

0000018e <SERVO_DC_DRIVER>:
	
}


void SERVO_DC_DRIVER(SERVO_DC _val)
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d6 2f       	mov	r29, r22
 194:	c7 2f       	mov	r28, r23
	SERVO_DC_dir(_val.servo_dir);
 196:	0e 94 65 00 	call	0xca	; 0xca <SERVO_DC_dir>
	else DIR_POR &=~(1<<DIR_PIN);
}

void SERVO_DC_force(unsigned int _val)
{
	pwm_servo_timer1_OCR1B_updata(_val);
 19a:	8d 2f       	mov	r24, r29
 19c:	9c 2f       	mov	r25, r28
 19e:	0e 94 02 05 	call	0xa04	; 0xa04 <pwm_servo_timer1_OCR1B_updata>

void SERVO_DC_DRIVER(SERVO_DC _val)
{
	SERVO_DC_dir(_val.servo_dir);
	SERVO_DC_force(_val.servo_force);
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <SERVO_DC_PID_SPEED>:
	//return _servo_temp;
	//
//}

SERVO_DC SERVO_DC_PID_SPEED(unsigned int KP,unsigned int KI,unsigned int KD,unsigned int SPEED,unsigned char DIR)
{
 1a8:	2f 92       	push	r2
 1aa:	3f 92       	push	r3
 1ac:	4f 92       	push	r4
 1ae:	5f 92       	push	r5
 1b0:	6f 92       	push	r6
 1b2:	7f 92       	push	r7
 1b4:	8f 92       	push	r8
 1b6:	9f 92       	push	r9
 1b8:	af 92       	push	r10
 1ba:	bf 92       	push	r11
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <SERVO_DC_PID_SPEED+0x26>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <SERVO_DC_PID_SPEED+0x28>
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	4b 01       	movw	r8, r22
 1d8:	3a 01       	movw	r6, r20
 1da:	59 01       	movw	r10, r18
 1dc:	09 83       	std	Y+1, r16	; 0x01
	SERVO_DC _servo_temp;
	unsigned int _temp = abs(servo_ctr.servo_speed-SPEED);
 1de:	20 91 23 01 	lds	r18, 0x0123
 1e2:	30 91 24 01 	lds	r19, 0x0124
 1e6:	2a 19       	sub	r18, r10
 1e8:	3b 09       	sbc	r19, r11
 1ea:	3d 83       	std	Y+5, r19	; 0x05
 1ec:	2c 83       	std	Y+4, r18	; 0x04
 1ee:	33 23       	and	r19, r19
 1f0:	34 f4       	brge	.+12     	; 0x1fe <SERVO_DC_PID_SPEED+0x56>
 1f2:	44 27       	eor	r20, r20
 1f4:	55 27       	eor	r21, r21
 1f6:	42 1b       	sub	r20, r18
 1f8:	53 0b       	sbc	r21, r19
 1fa:	5d 83       	std	Y+5, r21	; 0x05
 1fc:	4c 83       	std	Y+4, r20	; 0x04
	unsigned int _kp_temp =(KP*_temp*(SERVO_MAX_SPEED/(float)SERVO_MAX_FORCE));
 1fe:	ec 81       	ldd	r30, Y+4	; 0x04
 200:	fd 81       	ldd	r31, Y+5	; 0x05
 202:	e8 9f       	mul	r30, r24
 204:	b0 01       	movw	r22, r0
 206:	e9 9f       	mul	r30, r25
 208:	70 0d       	add	r23, r0
 20a:	f8 9f       	mul	r31, r24
 20c:	70 0d       	add	r23, r0
 20e:	11 24       	eor	r1, r1
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 218:	29 e8       	ldi	r18, 0x89	; 137
 21a:	35 e2       	ldi	r19, 0x25	; 37
 21c:	46 e1       	ldi	r20, 0x16	; 22
 21e:	5e e3       	ldi	r21, 0x3E	; 62
 220:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 224:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fixunssfsi>
 228:	6b 01       	movw	r12, r22
 22a:	7c 01       	movw	r14, r24
 22c:	7b 83       	std	Y+3, r23	; 0x03
 22e:	6a 83       	std	Y+2, r22	; 0x02
	unsigned int _kd_temp = KD*servo_ctr.servo_accelerator;
 230:	80 91 25 01 	lds	r24, 0x0125
 234:	90 91 26 01 	lds	r25, 0x0126
 238:	68 9e       	mul	r6, r24
 23a:	10 01       	movw	r2, r0
 23c:	69 9e       	mul	r6, r25
 23e:	30 0c       	add	r3, r0
 240:	78 9e       	mul	r7, r24
 242:	30 0c       	add	r3, r0
 244:	11 24       	eor	r1, r1
	unsigned int _ki_temp;
	servo_pid_speed.servo_integral += KI*_temp*(SERVO_MAX_SPEED/(float)SERVO_MAX_FORCE)/(float)10;
 246:	08 e0       	ldi	r16, 0x08	; 8
 248:	11 e0       	ldi	r17, 0x01	; 1
 24a:	f8 01       	movw	r30, r16
 24c:	60 81       	ld	r22, Z
 24e:	71 81       	ldd	r23, Z+1	; 0x01
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 258:	2b 01       	movw	r4, r22
 25a:	3c 01       	movw	r6, r24
 25c:	2c 81       	ldd	r18, Y+4	; 0x04
 25e:	3d 81       	ldd	r19, Y+5	; 0x05
 260:	28 9d       	mul	r18, r8
 262:	c0 01       	movw	r24, r0
 264:	29 9d       	mul	r18, r9
 266:	90 0d       	add	r25, r0
 268:	38 9d       	mul	r19, r8
 26a:	90 0d       	add	r25, r0
 26c:	11 24       	eor	r1, r1
 26e:	bc 01       	movw	r22, r24
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__floatunsisf>
 278:	29 e8       	ldi	r18, 0x89	; 137
 27a:	35 e2       	ldi	r19, 0x25	; 37
 27c:	46 e1       	ldi	r20, 0x16	; 22
 27e:	5e e3       	ldi	r21, 0x3E	; 62
 280:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e2       	ldi	r20, 0x20	; 32
 28a:	51 e4       	ldi	r21, 0x41	; 65
 28c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__divsf3>
 290:	9b 01       	movw	r18, r22
 292:	ac 01       	movw	r20, r24
 294:	c3 01       	movw	r24, r6
 296:	b2 01       	movw	r22, r4
 298:	0e 94 95 05 	call	0xb2a	; 0xb2a <__addsf3>
 29c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__fixunssfsi>
 2a0:	f8 01       	movw	r30, r16
 2a2:	71 83       	std	Z+1, r23	; 0x01
 2a4:	60 83       	st	Z, r22
	_ki_temp =servo_pid_speed.servo_integral;
 2a6:	40 81       	ld	r20, Z
 2a8:	51 81       	ldd	r21, Z+1	; 0x01
	_servo_temp.servo_dir=DIR;
	_servo_temp.servo_force = servo_ctr.servo_force;
 2aa:	80 91 2f 01 	lds	r24, 0x012F
 2ae:	90 91 30 01 	lds	r25, 0x0130
	
	if (servo_ctr.servo_speed>SPEED)
 2b2:	20 91 23 01 	lds	r18, 0x0123
 2b6:	30 91 24 01 	lds	r19, 0x0124
 2ba:	a2 16       	cp	r10, r18
 2bc:	b3 06       	cpc	r11, r19
 2be:	10 f5       	brcc	.+68     	; 0x304 <SERVO_DC_PID_SPEED+0x15c>
	{
		if (_servo_temp.servo_force>=_kp_temp) _servo_temp.servo_force-=_kp_temp;
 2c0:	8c 15       	cp	r24, r12
 2c2:	9d 05       	cpc	r25, r13
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <SERVO_DC_PID_SPEED+0x122>
 2c6:	8c 19       	sub	r24, r12
 2c8:	9d 09       	sbc	r25, r13
		if (_servo_temp.servo_force>=KI*_ki_temp) _servo_temp.servo_force-=KI*_ki_temp;
 2ca:	84 9e       	mul	r8, r20
 2cc:	90 01       	movw	r18, r0
 2ce:	85 9e       	mul	r8, r21
 2d0:	30 0d       	add	r19, r0
 2d2:	94 9e       	mul	r9, r20
 2d4:	30 0d       	add	r19, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	82 17       	cp	r24, r18
 2da:	93 07       	cpc	r25, r19
 2dc:	18 f0       	brcs	.+6      	; 0x2e4 <SERVO_DC_PID_SPEED+0x13c>
 2de:	82 1b       	sub	r24, r18
 2e0:	93 0b       	sbc	r25, r19
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <SERVO_DC_PID_SPEED+0x142>
		else
		{
				if ( (_servo_temp.servo_force>0)) _servo_temp.servo_force-=1;
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	09 f0       	breq	.+2      	; 0x2ea <SERVO_DC_PID_SPEED+0x142>
 2e8:	01 97       	sbiw	r24, 0x01	; 1
		}
		if (servo_ctr.servo_accelerator>0)
 2ea:	20 91 25 01 	lds	r18, 0x0125
 2ee:	30 91 26 01 	lds	r19, 0x0126
 2f2:	12 16       	cp	r1, r18
 2f4:	13 06       	cpc	r1, r19
 2f6:	e4 f5       	brge	.+120    	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
		{
				if (_servo_temp.servo_force>=_kd_temp) _servo_temp.servo_force-=_kd_temp;
 2f8:	82 15       	cp	r24, r2
 2fa:	93 05       	cpc	r25, r3
 2fc:	c8 f1       	brcs	.+114    	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
 2fe:	82 19       	sub	r24, r2
 300:	93 09       	sbc	r25, r3
 302:	36 c0       	rjmp	.+108    	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
		}
	}
	else if (servo_ctr.servo_speed<SPEED)
 304:	20 91 23 01 	lds	r18, 0x0123
 308:	30 91 24 01 	lds	r19, 0x0124
 30c:	2a 15       	cp	r18, r10
 30e:	3b 05       	cpc	r19, r11
 310:	48 f5       	brcc	.+82     	; 0x364 <SERVO_DC_PID_SPEED+0x1bc>
	{
		if ((_servo_temp.servo_force+_kp_temp)<=SERVO_MAX_FORCE) _servo_temp.servo_force+=_kp_temp;
 312:	c8 0e       	add	r12, r24
 314:	d9 1e       	adc	r13, r25
 316:	c1 14       	cp	r12, r1
 318:	34 e0       	ldi	r19, 0x04	; 4
 31a:	d3 06       	cpc	r13, r19
 31c:	08 f0       	brcs	.+2      	; 0x320 <SERVO_DC_PID_SPEED+0x178>
	unsigned int _kd_temp = KD*servo_ctr.servo_accelerator;
	unsigned int _ki_temp;
	servo_pid_speed.servo_integral += KI*_temp*(SERVO_MAX_SPEED/(float)SERVO_MAX_FORCE)/(float)10;
	_ki_temp =servo_pid_speed.servo_integral;
	_servo_temp.servo_dir=DIR;
	_servo_temp.servo_force = servo_ctr.servo_force;
 31e:	6c 01       	movw	r12, r24
		}
	}
	else if (servo_ctr.servo_speed<SPEED)
	{
		if ((_servo_temp.servo_force+_kp_temp)<=SERVO_MAX_FORCE) _servo_temp.servo_force+=_kp_temp;
		if (((_servo_temp.servo_force+_ki_temp)<=SERVO_MAX_FORCE)) _servo_temp.servo_force+=_ki_temp;
 320:	c6 01       	movw	r24, r12
 322:	84 0f       	add	r24, r20
 324:	95 1f       	adc	r25, r21
 326:	81 15       	cp	r24, r1
 328:	44 e0       	ldi	r20, 0x04	; 4
 32a:	94 07       	cpc	r25, r20
 32c:	38 f0       	brcs	.+14     	; 0x33c <SERVO_DC_PID_SPEED+0x194>
		else
		{
				if ( (_servo_temp.servo_force+1)<=SERVO_MAX_FORCE) _servo_temp.servo_force+=1;
 32e:	c6 01       	movw	r24, r12
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	81 15       	cp	r24, r1
 334:	54 e0       	ldi	r21, 0x04	; 4
 336:	95 07       	cpc	r25, r21
 338:	08 f0       	brcs	.+2      	; 0x33c <SERVO_DC_PID_SPEED+0x194>
 33a:	c6 01       	movw	r24, r12
		}
		
		if (servo_ctr.servo_accelerator<0)
 33c:	20 91 25 01 	lds	r18, 0x0125
 340:	30 91 26 01 	lds	r19, 0x0126
 344:	33 23       	and	r19, r19
 346:	a4 f4       	brge	.+40     	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
		{
				if ((_servo_temp.servo_force+abs(_kd_temp))<=SERVO_MAX_FORCE) _servo_temp.servo_force+=abs(_kd_temp);
 348:	91 01       	movw	r18, r2
 34a:	33 20       	and	r3, r3
 34c:	24 f4       	brge	.+8      	; 0x356 <SERVO_DC_PID_SPEED+0x1ae>
 34e:	22 27       	eor	r18, r18
 350:	33 27       	eor	r19, r19
 352:	22 19       	sub	r18, r2
 354:	33 09       	sbc	r19, r3
 356:	28 0f       	add	r18, r24
 358:	39 1f       	adc	r19, r25
 35a:	21 15       	cp	r18, r1
 35c:	e4 e0       	ldi	r30, 0x04	; 4
 35e:	3e 07       	cpc	r19, r30
 360:	30 f0       	brcs	.+12     	; 0x36e <SERVO_DC_PID_SPEED+0x1c6>
 362:	06 c0       	rjmp	.+12     	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
		}
	}
	else servo_pid_speed.servo_integral = 0;
 364:	10 92 09 01 	sts	0x0109, r1
 368:	10 92 08 01 	sts	0x0108, r1
 36c:	01 c0       	rjmp	.+2      	; 0x370 <SERVO_DC_PID_SPEED+0x1c8>
				if ( (_servo_temp.servo_force+1)<=SERVO_MAX_FORCE) _servo_temp.servo_force+=1;
		}
		
		if (servo_ctr.servo_accelerator<0)
		{
				if ((_servo_temp.servo_force+abs(_kd_temp))<=SERVO_MAX_FORCE) _servo_temp.servo_force+=abs(_kd_temp);
 36e:	c9 01       	movw	r24, r18
		}
	}
	else servo_pid_speed.servo_integral = 0;
	 servo_ctr.servo_force=_servo_temp.servo_force;
 370:	90 93 30 01 	sts	0x0130, r25
 374:	80 93 2f 01 	sts	0x012F, r24
	return _servo_temp;
}
 378:	68 2f       	mov	r22, r24
 37a:	79 2f       	mov	r23, r25
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	9f 90       	pop	r9
 39e:	8f 90       	pop	r8
 3a0:	7f 90       	pop	r7
 3a2:	6f 90       	pop	r6
 3a4:	5f 90       	pop	r5
 3a6:	4f 90       	pop	r4
 3a8:	3f 90       	pop	r3
 3aa:	2f 90       	pop	r2
 3ac:	08 95       	ret

000003ae <__vector_7>:


ISR(TIMER2_COMPA_vect)
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	0f 93       	push	r16
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
		if (servo_ctr.servo_sample_counter==0)
 3d2:	80 91 1b 01 	lds	r24, 0x011B
 3d6:	81 11       	cpse	r24, r1
 3d8:	39 c0       	rjmp	.+114    	; 0x44c <__vector_7+0x9e>
		{
			servo_ctr.servo_sample_counter=servo_ctr.servo_sample_rate;
 3da:	80 91 1c 01 	lds	r24, 0x011C
 3de:	80 93 1b 01 	sts	0x011B, r24
			servo_ctr.servo_speed =servo_ctr.servo_speed_sample;
 3e2:	af e1       	ldi	r26, 0x1F	; 31
 3e4:	b1 e0       	ldi	r27, 0x01	; 1
 3e6:	8d 91       	ld	r24, X+
 3e8:	9c 91       	ld	r25, X
 3ea:	11 97       	sbiw	r26, 0x01	; 1
 3ec:	e3 e2       	ldi	r30, 0x23	; 35
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	91 83       	std	Z+1, r25	; 0x01
 3f2:	80 83       	st	Z, r24
			servo_ctr.servo_speed_sample=0;
 3f4:	11 96       	adiw	r26, 0x01	; 1
 3f6:	1c 92       	st	X, r1
 3f8:	1e 92       	st	-X, r1
			servo_ctr.servo_accelerator =(int)servo_ctr.servo_speed -(int)servo_ctr.servo_pre_speed;
 3fa:	80 81       	ld	r24, Z
 3fc:	91 81       	ldd	r25, Z+1	; 0x01
 3fe:	a1 e2       	ldi	r26, 0x21	; 33
 400:	b1 e0       	ldi	r27, 0x01	; 1
 402:	2d 91       	ld	r18, X+
 404:	3c 91       	ld	r19, X
 406:	11 97       	sbiw	r26, 0x01	; 1
 408:	82 1b       	sub	r24, r18
 40a:	93 0b       	sbc	r25, r19
 40c:	90 93 26 01 	sts	0x0126, r25
 410:	80 93 25 01 	sts	0x0125, r24
			servo_ctr.servo_pre_speed = servo_ctr.servo_speed;
 414:	80 81       	ld	r24, Z
 416:	91 81       	ldd	r25, Z+1	; 0x01
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	9c 93       	st	X, r25
 41c:	8e 93       	st	-X, r24
			
			//SEG7_disp_uint(servo_ctr.servo_position,servo_ctr.servo_speed);
			
			SERVO_DC_DRIVER(SERVO_DC_PID_SPEED(servo_pid_speed.servo_kp,servo_pid_speed.servo_ki,servo_pid_speed.servo_kd,servo_pid_speed.servo_speed,servo_pid_speed.dir));
 41e:	00 91 0a 01 	lds	r16, 0x010A
 422:	20 91 06 01 	lds	r18, 0x0106
 426:	30 91 07 01 	lds	r19, 0x0107
 42a:	40 91 04 01 	lds	r20, 0x0104
 42e:	50 91 05 01 	lds	r21, 0x0105
 432:	60 91 02 01 	lds	r22, 0x0102
 436:	70 91 03 01 	lds	r23, 0x0103
 43a:	80 91 00 01 	lds	r24, 0x0100
 43e:	90 91 01 01 	lds	r25, 0x0101
 442:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <SERVO_DC_PID_SPEED>
 446:	0e 94 c7 00 	call	0x18e	; 0x18e <SERVO_DC_DRIVER>
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__vector_7+0xa8>
		}
		
	else servo_ctr.servo_sample_counter--;
 44c:	eb e1       	ldi	r30, 0x1B	; 27
 44e:	f1 e0       	ldi	r31, 0x01	; 1
 450:	80 81       	ld	r24, Z
 452:	81 50       	subi	r24, 0x01	; 1
 454:	80 83       	st	Z, r24
	
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 91       	pop	r16
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_4>:




ISR(PCINT1_vect)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	unsigned char pre_dir_temp = 0;
	if (PH1_IN&(1<<PH1_PIN)) pre_dir_temp =1;
 492:	86 b1       	in	r24, 0x06	; 6
 494:	82 95       	swap	r24
 496:	81 70       	andi	r24, 0x01	; 1
	if (PH2_IN&(1<<PH2_PIN)) pre_dir_temp|=1<<1;
 498:	35 99       	sbic	0x06, 5	; 6
 49a:	82 60       	ori	r24, 0x02	; 2
	switch (pre_dir_temp)
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	b1 f0       	breq	.+44     	; 0x4cc <__vector_4+0x52>
 4a0:	28 f0       	brcs	.+10     	; 0x4ac <__vector_4+0x32>
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	11 f1       	breq	.+68     	; 0x4ea <__vector_4+0x70>
 4a6:	83 30       	cpi	r24, 0x03	; 3
 4a8:	81 f1       	breq	.+96     	; 0x50a <__vector_4+0x90>
 4aa:	3d c0       	rjmp	.+122    	; 0x526 <__vector_4+0xac>
	{
		case 0:
		if (servo_ctr.servo_pre_dir==1) servo_ctr.servo_dir = LEFT;
 4ac:	90 91 1d 01 	lds	r25, 0x011D
 4b0:	91 30       	cpi	r25, 0x01	; 1
 4b2:	19 f4       	brne	.+6      	; 0x4ba <__vector_4+0x40>
 4b4:	10 92 1e 01 	sts	0x011E, r1
 4b8:	36 c0       	rjmp	.+108    	; 0x526 <__vector_4+0xac>
		else if (servo_ctr.servo_pre_dir==2) servo_ctr.servo_dir = RIGHT;
 4ba:	90 91 1d 01 	lds	r25, 0x011D
 4be:	92 30       	cpi	r25, 0x02	; 2
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__vector_4+0x4a>
 4c2:	7f c0       	rjmp	.+254    	; 0x5c2 <__vector_4+0x148>
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	90 93 1e 01 	sts	0x011E, r25
 4ca:	2d c0       	rjmp	.+90     	; 0x526 <__vector_4+0xac>
		else return;
		break;
		case 1:
		if (servo_ctr.servo_pre_dir==3) servo_ctr.servo_dir = LEFT;
 4cc:	90 91 1d 01 	lds	r25, 0x011D
 4d0:	93 30       	cpi	r25, 0x03	; 3
 4d2:	19 f4       	brne	.+6      	; 0x4da <__vector_4+0x60>
 4d4:	10 92 1e 01 	sts	0x011E, r1
 4d8:	26 c0       	rjmp	.+76     	; 0x526 <__vector_4+0xac>
		else if (servo_ctr.servo_pre_dir==0) servo_ctr.servo_dir = RIGHT;
 4da:	90 91 1d 01 	lds	r25, 0x011D
 4de:	91 11       	cpse	r25, r1
 4e0:	70 c0       	rjmp	.+224    	; 0x5c2 <__vector_4+0x148>
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	90 93 1e 01 	sts	0x011E, r25
 4e8:	1e c0       	rjmp	.+60     	; 0x526 <__vector_4+0xac>
		else return;
		break;
		case 2:
		if (servo_ctr.servo_pre_dir==0) servo_ctr.servo_dir = LEFT;
 4ea:	90 91 1d 01 	lds	r25, 0x011D
 4ee:	91 11       	cpse	r25, r1
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <__vector_4+0x7e>
 4f2:	10 92 1e 01 	sts	0x011E, r1
 4f6:	17 c0       	rjmp	.+46     	; 0x526 <__vector_4+0xac>
		else if (servo_ctr.servo_pre_dir==3) servo_ctr.servo_dir = RIGHT;
 4f8:	90 91 1d 01 	lds	r25, 0x011D
 4fc:	93 30       	cpi	r25, 0x03	; 3
 4fe:	09 f0       	breq	.+2      	; 0x502 <__vector_4+0x88>
 500:	60 c0       	rjmp	.+192    	; 0x5c2 <__vector_4+0x148>
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	90 93 1e 01 	sts	0x011E, r25
 508:	0e c0       	rjmp	.+28     	; 0x526 <__vector_4+0xac>
		else return;
		break;
		case 3:
		if (servo_ctr.servo_pre_dir==2) servo_ctr.servo_dir = LEFT;
 50a:	90 91 1d 01 	lds	r25, 0x011D
 50e:	92 30       	cpi	r25, 0x02	; 2
 510:	19 f4       	brne	.+6      	; 0x518 <__vector_4+0x9e>
 512:	10 92 1e 01 	sts	0x011E, r1
 516:	07 c0       	rjmp	.+14     	; 0x526 <__vector_4+0xac>
		else if (servo_ctr.servo_pre_dir==1) servo_ctr.servo_dir = RIGHT;
 518:	90 91 1d 01 	lds	r25, 0x011D
 51c:	91 30       	cpi	r25, 0x01	; 1
 51e:	09 f0       	breq	.+2      	; 0x522 <__vector_4+0xa8>
 520:	50 c0       	rjmp	.+160    	; 0x5c2 <__vector_4+0x148>
 522:	90 93 1e 01 	sts	0x011E, r25
		break;
		default:
		break;
		//return;
	}
	servo_ctr.servo_pre_dir = pre_dir_temp;
 526:	80 93 1d 01 	sts	0x011D, r24
	servo_ctr.servo_speed_sample++;
 52a:	ef e1       	ldi	r30, 0x1F	; 31
 52c:	f1 e0       	ldi	r31, 0x01	; 1
 52e:	80 81       	ld	r24, Z
 530:	91 81       	ldd	r25, Z+1	; 0x01
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	91 83       	std	Z+1, r25	; 0x01
 536:	80 83       	st	Z, r24
	if (servo_ctr.servo_dir)
 538:	80 91 1e 01 	lds	r24, 0x011E
 53c:	88 23       	and	r24, r24
 53e:	11 f1       	breq	.+68     	; 0x584 <__vector_4+0x10a>
	{
		if (servo_ctr.servo_position>=SERVO_MAX_POSITION)
 540:	80 91 2b 01 	lds	r24, 0x012B
 544:	90 91 2c 01 	lds	r25, 0x012C
 548:	a0 91 2d 01 	lds	r26, 0x012D
 54c:	b0 91 2e 01 	lds	r27, 0x012E
 550:	81 15       	cp	r24, r1
 552:	98 42       	sbci	r25, 0x28	; 40
 554:	ab 46       	sbci	r26, 0x6B	; 107
 556:	be 4e       	sbci	r27, 0xEE	; 238
 558:	20 f0       	brcs	.+8      	; 0x562 <__vector_4+0xe8>
		{
			servo_ctr.servo_range_check = SERVO_MAX_RANGE;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	80 93 1a 01 	sts	0x011A, r24
			 return;
 560:	30 c0       	rjmp	.+96     	; 0x5c2 <__vector_4+0x148>
		}
		else 
		{
			servo_ctr.servo_range_check = SERVO_IN_RANGE;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 1a 01 	sts	0x011A, r24
			servo_ctr.servo_position++;
 568:	eb e2       	ldi	r30, 0x2B	; 43
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	80 81       	ld	r24, Z
 56e:	91 81       	ldd	r25, Z+1	; 0x01
 570:	a2 81       	ldd	r26, Z+2	; 0x02
 572:	b3 81       	ldd	r27, Z+3	; 0x03
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	a1 1d       	adc	r26, r1
 578:	b1 1d       	adc	r27, r1
 57a:	80 83       	st	Z, r24
 57c:	91 83       	std	Z+1, r25	; 0x01
 57e:	a2 83       	std	Z+2, r26	; 0x02
 580:	b3 83       	std	Z+3, r27	; 0x03
 582:	1f c0       	rjmp	.+62     	; 0x5c2 <__vector_4+0x148>
		}
	}
	else
	{
		if (servo_ctr.servo_position<=0) 
 584:	80 91 2b 01 	lds	r24, 0x012B
 588:	90 91 2c 01 	lds	r25, 0x012C
 58c:	a0 91 2d 01 	lds	r26, 0x012D
 590:	b0 91 2e 01 	lds	r27, 0x012E
 594:	89 2b       	or	r24, r25
 596:	8a 2b       	or	r24, r26
 598:	8b 2b       	or	r24, r27
 59a:	19 f4       	brne	.+6      	; 0x5a2 <__vector_4+0x128>
		{
			servo_ctr.servo_range_check = SERVO_MIN_RANGE;
 59c:	10 92 1a 01 	sts	0x011A, r1
			return;
 5a0:	10 c0       	rjmp	.+32     	; 0x5c2 <__vector_4+0x148>
		}
		else 
		{
			servo_ctr.servo_range_check = SERVO_IN_RANGE;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	80 93 1a 01 	sts	0x011A, r24
			servo_ctr.servo_position--;
 5a8:	eb e2       	ldi	r30, 0x2B	; 43
 5aa:	f1 e0       	ldi	r31, 0x01	; 1
 5ac:	80 81       	ld	r24, Z
 5ae:	91 81       	ldd	r25, Z+1	; 0x01
 5b0:	a2 81       	ldd	r26, Z+2	; 0x02
 5b2:	b3 81       	ldd	r27, Z+3	; 0x03
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	a1 09       	sbc	r26, r1
 5b8:	b1 09       	sbc	r27, r1
 5ba:	80 83       	st	Z, r24
 5bc:	91 83       	std	Z+1, r25	; 0x01
 5be:	a2 83       	std	Z+2, r26	; 0x02
 5c0:	b3 83       	std	Z+3, r27	; 0x03
		}
	}
	
 5c2:	ff 91       	pop	r31
 5c4:	ef 91       	pop	r30
 5c6:	bf 91       	pop	r27
 5c8:	af 91       	pop	r26
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	2f 91       	pop	r18
 5d0:	0f 90       	pop	r0
 5d2:	0f be       	out	0x3f, r0	; 63
 5d4:	0f 90       	pop	r0
 5d6:	1f 90       	pop	r1
 5d8:	18 95       	reti

000005da <hc595_set_spi>:
 5da:	39 9a       	sbi	0x07, 1	; 7
 5dc:	38 9a       	sbi	0x07, 0	; 7
 5de:	3a 9a       	sbi	0x07, 2	; 7
 5e0:	40 9a       	sbi	0x08, 0	; 8
 5e2:	41 98       	cbi	0x08, 1	; 8
 5e4:	42 98       	cbi	0x08, 2	; 8
 5e6:	08 95       	ret

000005e8 <hc595_byte_transmit>:
 5e8:	27 e0       	ldi	r18, 0x07	; 7
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 2e       	mov	r0, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <hc595_byte_transmit+0x10>
 5f4:	55 95       	asr	r21
 5f6:	47 95       	ror	r20
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <hc595_byte_transmit+0xc>
 5fc:	40 ff       	sbrs	r20, 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <hc595_byte_transmit+0x1c>
 600:	40 9a       	sbi	0x08, 0	; 8
 602:	01 c0       	rjmp	.+2      	; 0x606 <hc595_byte_transmit+0x1e>
 604:	40 98       	cbi	0x08, 0	; 8
 606:	41 9a       	sbi	0x08, 1	; 8
 608:	41 98       	cbi	0x08, 1	; 8
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	31 09       	sbc	r19, r1
 60e:	78 f7       	brcc	.-34     	; 0x5ee <hc595_byte_transmit+0x6>
 610:	08 95       	ret

00000612 <hc595_latch>:
 612:	42 9a       	sbi	0x08, 2	; 8
 614:	42 98       	cbi	0x08, 2	; 8
 616:	08 95       	ret

00000618 <SEG7_initial>:
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	84 bd       	out	0x24, r24	; 36
 61c:	89 ef       	ldi	r24, 0xF9	; 249
 61e:	87 bd       	out	0x27, r24	; 39
 620:	ee e6       	ldi	r30, 0x6E	; 110
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	82 60       	ori	r24, 0x02	; 2
 628:	80 83       	st	Z, r24
 62a:	85 b5       	in	r24, 0x25	; 37
 62c:	83 60       	ori	r24, 0x03	; 3
 62e:	85 bd       	out	0x25, r24	; 37
 630:	0e 94 ed 02 	call	0x5da	; 0x5da <hc595_set_spi>
 634:	08 95       	ret

00000636 <HEX2BCD_uint>:
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	ac 01       	movw	r20, r24
 63c:	fb 01       	movw	r30, r22
 63e:	80 31       	cpi	r24, 0x10	; 16
 640:	27 e2       	ldi	r18, 0x27	; 39
 642:	92 07       	cpc	r25, r18
 644:	08 f0       	brcs	.+2      	; 0x648 <HEX2BCD_uint+0x12>
 646:	8b c0       	rjmp	.+278    	; 0x75e <HEX2BCD_uint+0x128>
 648:	9c 01       	movw	r18, r24
 64a:	ad ec       	ldi	r26, 0xCD	; 205
 64c:	bc ec       	ldi	r27, 0xCC	; 204
 64e:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 652:	ec 01       	movw	r28, r24
 654:	d6 95       	lsr	r29
 656:	c7 95       	ror	r28
 658:	d6 95       	lsr	r29
 65a:	c7 95       	ror	r28
 65c:	d6 95       	lsr	r29
 65e:	c7 95       	ror	r28
 660:	9e 01       	movw	r18, r28
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	ce 01       	movw	r24, r28
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	82 0f       	add	r24, r18
 676:	93 1f       	adc	r25, r19
 678:	9a 01       	movw	r18, r20
 67a:	28 1b       	sub	r18, r24
 67c:	39 0b       	sbc	r19, r25
 67e:	23 83       	std	Z+3, r18	; 0x03
 680:	9e 01       	movw	r18, r28
 682:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	96 95       	lsr	r25
 68c:	87 95       	ror	r24
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	9c 01       	movw	r18, r24
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	82 0f       	add	r24, r18
 6a6:	93 1f       	adc	r25, r19
 6a8:	c8 1b       	sub	r28, r24
 6aa:	d9 0b       	sbc	r29, r25
 6ac:	c2 83       	std	Z+2, r28	; 0x02
 6ae:	9a 01       	movw	r18, r20
 6b0:	36 95       	lsr	r19
 6b2:	27 95       	ror	r18
 6b4:	36 95       	lsr	r19
 6b6:	27 95       	ror	r18
 6b8:	ab e7       	ldi	r26, 0x7B	; 123
 6ba:	b4 e1       	ldi	r27, 0x14	; 20
 6bc:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 6c0:	ec 01       	movw	r28, r24
 6c2:	d6 95       	lsr	r29
 6c4:	c7 95       	ror	r28
 6c6:	9e 01       	movw	r18, r28
 6c8:	ad ec       	ldi	r26, 0xCD	; 205
 6ca:	bc ec       	ldi	r27, 0xCC	; 204
 6cc:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	9c 01       	movw	r18, r24
 6de:	22 0f       	add	r18, r18
 6e0:	33 1f       	adc	r19, r19
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	82 0f       	add	r24, r18
 6f0:	93 1f       	adc	r25, r19
 6f2:	c8 1b       	sub	r28, r24
 6f4:	d9 0b       	sbc	r29, r25
 6f6:	c1 83       	std	Z+1, r28	; 0x01
 6f8:	9a 01       	movw	r18, r20
 6fa:	36 95       	lsr	r19
 6fc:	27 95       	ror	r18
 6fe:	36 95       	lsr	r19
 700:	27 95       	ror	r18
 702:	36 95       	lsr	r19
 704:	27 95       	ror	r18
 706:	a5 ec       	ldi	r26, 0xC5	; 197
 708:	b0 e2       	ldi	r27, 0x20	; 32
 70a:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 70e:	ac 01       	movw	r20, r24
 710:	52 95       	swap	r21
 712:	42 95       	swap	r20
 714:	4f 70       	andi	r20, 0x0F	; 15
 716:	45 27       	eor	r20, r21
 718:	5f 70       	andi	r21, 0x0F	; 15
 71a:	45 27       	eor	r20, r21
 71c:	9a 01       	movw	r18, r20
 71e:	ad ec       	ldi	r26, 0xCD	; 205
 720:	bc ec       	ldi	r27, 0xCC	; 204
 722:	0e 94 84 07 	call	0xf08	; 0xf08 <__umulhisi3>
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	96 95       	lsr	r25
 72c:	87 95       	ror	r24
 72e:	96 95       	lsr	r25
 730:	87 95       	ror	r24
 732:	9c 01       	movw	r18, r24
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	82 0f       	add	r24, r18
 746:	93 1f       	adc	r25, r19
 748:	48 1b       	sub	r20, r24
 74a:	59 0b       	sbc	r21, r25
 74c:	40 83       	st	Z, r20
 74e:	07 c0       	rjmp	.+14     	; 0x75e <HEX2BCD_uint+0x128>
 750:	90 81       	ld	r25, Z
 752:	91 11       	cpse	r25, r1
 754:	0c c0       	rjmp	.+24     	; 0x76e <HEX2BCD_uint+0x138>
 756:	21 93       	st	Z+, r18
 758:	81 50       	subi	r24, 0x01	; 1
 75a:	d1 f7       	brne	.-12     	; 0x750 <HEX2BCD_uint+0x11a>
 75c:	08 c0       	rjmp	.+16     	; 0x76e <HEX2BCD_uint+0x138>
 75e:	80 81       	ld	r24, Z
 760:	81 11       	cpse	r24, r1
 762:	05 c0       	rjmp	.+10     	; 0x76e <HEX2BCD_uint+0x138>
 764:	8a e0       	ldi	r24, 0x0A	; 10
 766:	81 93       	st	Z+, r24
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	2a e0       	ldi	r18, 0x0A	; 10
 76c:	f1 cf       	rjmp	.-30     	; 0x750 <HEX2BCD_uint+0x11a>
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	08 95       	ret

00000774 <SEG7_disp_uint>:
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	00 d0       	rcall	.+0      	; 0x77e <SEG7_disp_uint+0xa>
 77e:	00 d0       	rcall	.+0      	; 0x780 <SEG7_disp_uint+0xc>
 780:	cd b7       	in	r28, 0x3d	; 61
 782:	de b7       	in	r29, 0x3e	; 62
 784:	8b 01       	movw	r16, r22
 786:	80 31       	cpi	r24, 0x10	; 16
 788:	27 e2       	ldi	r18, 0x27	; 39
 78a:	92 07       	cpc	r25, r18
 78c:	08 f5       	brcc	.+66     	; 0x7d0 <SEG7_disp_uint+0x5c>
 78e:	be 01       	movw	r22, r28
 790:	6f 5f       	subi	r22, 0xFF	; 255
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	0e 94 1b 03 	call	0x636	; 0x636 <HEX2BCD_uint>
 798:	e9 81       	ldd	r30, Y+1	; 0x01
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	e4 58       	subi	r30, 0x84	; 132
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	e4 91       	lpm	r30, Z
 7a2:	e0 93 34 01 	sts	0x0134, r30
 7a6:	ea 81       	ldd	r30, Y+2	; 0x02
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	e4 58       	subi	r30, 0x84	; 132
 7ac:	ff 4f       	sbci	r31, 0xFF	; 255
 7ae:	e4 91       	lpm	r30, Z
 7b0:	e0 93 35 01 	sts	0x0135, r30
 7b4:	eb 81       	ldd	r30, Y+3	; 0x03
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e4 58       	subi	r30, 0x84	; 132
 7ba:	ff 4f       	sbci	r31, 0xFF	; 255
 7bc:	e4 91       	lpm	r30, Z
 7be:	e0 93 36 01 	sts	0x0136, r30
 7c2:	ec 81       	ldd	r30, Y+4	; 0x04
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	e4 58       	subi	r30, 0x84	; 132
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	e4 91       	lpm	r30, Z
 7cc:	e0 93 37 01 	sts	0x0137, r30
 7d0:	00 31       	cpi	r16, 0x10	; 16
 7d2:	87 e2       	ldi	r24, 0x27	; 39
 7d4:	18 07       	cpc	r17, r24
 7d6:	10 f5       	brcc	.+68     	; 0x81c <SEG7_disp_uint+0xa8>
 7d8:	be 01       	movw	r22, r28
 7da:	6f 5f       	subi	r22, 0xFF	; 255
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	c8 01       	movw	r24, r16
 7e0:	0e 94 1b 03 	call	0x636	; 0x636 <HEX2BCD_uint>
 7e4:	e9 81       	ldd	r30, Y+1	; 0x01
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	e4 58       	subi	r30, 0x84	; 132
 7ea:	ff 4f       	sbci	r31, 0xFF	; 255
 7ec:	e4 91       	lpm	r30, Z
 7ee:	e0 93 38 01 	sts	0x0138, r30
 7f2:	ea 81       	ldd	r30, Y+2	; 0x02
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	e4 58       	subi	r30, 0x84	; 132
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	e4 91       	lpm	r30, Z
 7fc:	e0 93 39 01 	sts	0x0139, r30
 800:	eb 81       	ldd	r30, Y+3	; 0x03
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	e4 58       	subi	r30, 0x84	; 132
 806:	ff 4f       	sbci	r31, 0xFF	; 255
 808:	e4 91       	lpm	r30, Z
 80a:	e0 93 3a 01 	sts	0x013A, r30
 80e:	ec 81       	ldd	r30, Y+4	; 0x04
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	e4 58       	subi	r30, 0x84	; 132
 814:	ff 4f       	sbci	r31, 0xFF	; 255
 816:	e4 91       	lpm	r30, Z
 818:	e0 93 3b 01 	sts	0x013B, r30
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <SEG7_send>:
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	16 2f       	mov	r17, r22
 836:	c1 e0       	ldi	r28, 0x01	; 1
 838:	d0 e0       	ldi	r29, 0x00	; 0
 83a:	9e 01       	movw	r18, r28
 83c:	02 c0       	rjmp	.+4      	; 0x842 <SEG7_send+0x14>
 83e:	22 0f       	add	r18, r18
 840:	33 1f       	adc	r19, r19
 842:	8a 95       	dec	r24
 844:	e2 f7       	brpl	.-8      	; 0x83e <SEG7_send+0x10>
 846:	e9 01       	movw	r28, r18
 848:	c0 95       	com	r28
 84a:	d0 95       	com	r29
 84c:	8d 2f       	mov	r24, r29
 84e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <hc595_byte_transmit>
 852:	8c 2f       	mov	r24, r28
 854:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <hc595_byte_transmit>
 858:	81 2f       	mov	r24, r17
 85a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <hc595_byte_transmit>
 85e:	0e 94 09 03 	call	0x612	; 0x612 <hc595_latch>
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	08 95       	ret

0000086a <SEG7_scan>:
 86a:	80 91 3e 01 	lds	r24, 0x013E
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	8a 30       	cpi	r24, 0x0A	; 10
 872:	91 05       	cpc	r25, r1
 874:	08 f0       	brcs	.+2      	; 0x878 <SEG7_scan+0xe>
 876:	68 c0       	rjmp	.+208    	; 0x948 <__stack+0x49>
 878:	fc 01       	movw	r30, r24
 87a:	ec 5c       	subi	r30, 0xCC	; 204
 87c:	ff 4f       	sbci	r31, 0xFF	; 255
 87e:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__tablejump2__>
 882:	60 91 35 01 	lds	r22, 0x0135
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 93 3e 01 	sts	0x013E, r24
 894:	08 95       	ret
 896:	60 91 36 01 	lds	r22, 0x0136
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 8a2:	82 e0       	ldi	r24, 0x02	; 2
 8a4:	80 93 3e 01 	sts	0x013E, r24
 8a8:	08 95       	ret
 8aa:	60 91 37 01 	lds	r22, 0x0137
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	82 e0       	ldi	r24, 0x02	; 2
 8b2:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	80 93 3e 01 	sts	0x013E, r24
 8bc:	08 95       	ret
 8be:	60 91 39 01 	lds	r22, 0x0139
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 8ca:	84 e0       	ldi	r24, 0x04	; 4
 8cc:	80 93 3e 01 	sts	0x013E, r24
 8d0:	08 95       	ret
 8d2:	60 91 3a 01 	lds	r22, 0x013A
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	84 e0       	ldi	r24, 0x04	; 4
 8da:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	80 93 3e 01 	sts	0x013E, r24
 8e4:	08 95       	ret
 8e6:	60 91 3b 01 	lds	r22, 0x013B
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	85 e0       	ldi	r24, 0x05	; 5
 8ee:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 8f2:	86 e0       	ldi	r24, 0x06	; 6
 8f4:	80 93 3e 01 	sts	0x013E, r24
 8f8:	08 95       	ret
 8fa:	60 91 34 01 	lds	r22, 0x0134
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	86 e0       	ldi	r24, 0x06	; 6
 902:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 906:	87 e0       	ldi	r24, 0x07	; 7
 908:	80 93 3e 01 	sts	0x013E, r24
 90c:	08 95       	ret
 90e:	60 91 38 01 	lds	r22, 0x0138
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	87 e0       	ldi	r24, 0x07	; 7
 916:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 91a:	88 e0       	ldi	r24, 0x08	; 8
 91c:	80 93 3e 01 	sts	0x013E, r24
 920:	08 95       	ret
 922:	60 91 3c 01 	lds	r22, 0x013C
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	88 e0       	ldi	r24, 0x08	; 8
 92a:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 92e:	89 e0       	ldi	r24, 0x09	; 9
 930:	80 93 3e 01 	sts	0x013E, r24
 934:	08 95       	ret
 936:	60 91 3d 01 	lds	r22, 0x013D
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	89 e0       	ldi	r24, 0x09	; 9
 93e:	0e 94 17 04 	call	0x82e	; 0x82e <SEG7_send>
 942:	10 92 3e 01 	sts	0x013E, r1
 946:	08 95       	ret
 948:	10 92 3e 01 	sts	0x013E, r1
 94c:	08 95       	ret

0000094e <__vector_14>:
 94e:	1f 92       	push	r1
 950:	0f 92       	push	r0
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	0f 92       	push	r0
 956:	11 24       	eor	r1, r1
 958:	2f 93       	push	r18
 95a:	3f 93       	push	r19
 95c:	4f 93       	push	r20
 95e:	5f 93       	push	r21
 960:	6f 93       	push	r22
 962:	7f 93       	push	r23
 964:	8f 93       	push	r24
 966:	9f 93       	push	r25
 968:	af 93       	push	r26
 96a:	bf 93       	push	r27
 96c:	ef 93       	push	r30
 96e:	ff 93       	push	r31
 970:	0e 94 35 04 	call	0x86a	; 0x86a <SEG7_scan>
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0f be       	out	0x3f, r0	; 63
 990:	0f 90       	pop	r0
 992:	1f 90       	pop	r1
 994:	18 95       	reti

00000996 <main>:



int main(void)
{
	SERVO_DC_initial();
 996:	0e 94 6b 00 	call	0xd6	; 0xd6 <SERVO_DC_initial>
	SERVO_CTR_initial();
 99a:	0e 94 5c 00 	call	0xb8	; 0xb8 <SERVO_CTR_initial>
//	RF_decode_initial(0xDA);
	sei();
 99e:	78 94       	sei
	//SERVO_DC_PID_SPEED_UPDATA(30,20,55,10,RIGHT);
	
	e = 100;
	e-=1000;
 9a0:	8c e7       	ldi	r24, 0x7C	; 124
 9a2:	9c ef       	ldi	r25, 0xFC	; 252
 9a4:	90 93 4e 01 	sts	0x014E, r25
 9a8:	80 93 4d 01 	sts	0x014D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ac:	2f ef       	ldi	r18, 0xFF	; 255
 9ae:	81 ee       	ldi	r24, 0xE1	; 225
 9b0:	94 e0       	ldi	r25, 0x04	; 4
 9b2:	21 50       	subi	r18, 0x01	; 1
 9b4:	80 40       	sbci	r24, 0x00	; 0
 9b6:	90 40       	sbci	r25, 0x00	; 0
 9b8:	e1 f7       	brne	.-8      	; 0x9b2 <main+0x1c>
 9ba:	00 c0       	rjmp	.+0      	; 0x9bc <main+0x26>
 9bc:	00 00       	nop
	
    while(1)
    {
		_delay_ms(100);
		SEG7_disp_uint(abs(e),50);
 9be:	80 91 4d 01 	lds	r24, 0x014D
 9c2:	90 91 4e 01 	lds	r25, 0x014E
 9c6:	99 23       	and	r25, r25
 9c8:	1c f4       	brge	.+6      	; 0x9d0 <main+0x3a>
 9ca:	91 95       	neg	r25
 9cc:	81 95       	neg	r24
 9ce:	91 09       	sbc	r25, r1
 9d0:	62 e3       	ldi	r22, 0x32	; 50
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	0e 94 ba 03 	call	0x774	; 0x774 <SEG7_disp_uint>
 9d8:	e9 cf       	rjmp	.-46     	; 0x9ac <main+0x16>

000009da <pwm_phasecorrect_timer1_option_initial>:
 9da:	94 b1       	in	r25, 0x04	; 4
 9dc:	96 60       	ori	r25, 0x06	; 6
 9de:	94 b9       	out	0x04, r25	; 4
 9e0:	60 6a       	ori	r22, 0xA0	; 160
 9e2:	60 93 80 00 	sts	0x0080, r22
 9e6:	80 93 81 00 	sts	0x0081, r24
 9ea:	10 92 85 00 	sts	0x0085, r1
 9ee:	10 92 84 00 	sts	0x0084, r1
 9f2:	10 92 89 00 	sts	0x0089, r1
 9f6:	10 92 88 00 	sts	0x0088, r1
 9fa:	10 92 8b 00 	sts	0x008B, r1
 9fe:	10 92 8a 00 	sts	0x008A, r1
 a02:	08 95       	ret

00000a04 <pwm_servo_timer1_OCR1B_updata>:
 a04:	90 93 8b 00 	sts	0x008B, r25
 a08:	80 93 8a 00 	sts	0x008A, r24
 a0c:	08 95       	ret

00000a0e <RF_decode_stop>:
 a0e:	e8 e6       	ldi	r30, 0x68	; 104
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	8e 7f       	andi	r24, 0xFE	; 254
 a16:	80 83       	st	Z, r24
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	80 93 51 01 	sts	0x0151, r24
 a1e:	08 95       	ret

00000a20 <__vector_3>:
 a20:	1f 92       	push	r1
 a22:	0f 92       	push	r0
 a24:	0f b6       	in	r0, 0x3f	; 63
 a26:	0f 92       	push	r0
 a28:	11 24       	eor	r1, r1
 a2a:	2f 93       	push	r18
 a2c:	3f 93       	push	r19
 a2e:	4f 93       	push	r20
 a30:	5f 93       	push	r21
 a32:	6f 93       	push	r22
 a34:	7f 93       	push	r23
 a36:	8f 93       	push	r24
 a38:	9f 93       	push	r25
 a3a:	af 93       	push	r26
 a3c:	bf 93       	push	r27
 a3e:	ef 93       	push	r30
 a40:	ff 93       	push	r31
 a42:	18 99       	sbic	0x03, 0	; 3
 a44:	60 c0       	rjmp	.+192    	; 0xb06 <__vector_3+0xe6>
 a46:	18 9b       	sbis	0x03, 0	; 3
 a48:	56 c0       	rjmp	.+172    	; 0xaf6 <__vector_3+0xd6>
 a4a:	5d c0       	rjmp	.+186    	; 0xb06 <__vector_3+0xe6>
 a4c:	18 99       	sbic	0x03, 0	; 3
 a4e:	5b c0       	rjmp	.+182    	; 0xb06 <__vector_3+0xe6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a50:	ef e1       	ldi	r30, 0x1F	; 31
 a52:	f3 e0       	ldi	r31, 0x03	; 3
 a54:	31 97       	sbiw	r30, 0x01	; 1
 a56:	f1 f7       	brne	.-4      	; 0xa54 <__vector_3+0x34>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <__vector_3+0x3a>
 a5a:	00 00       	nop
 a5c:	81 50       	subi	r24, 0x01	; 1
 a5e:	b1 f7       	brne	.-20     	; 0xa4c <__vector_3+0x2c>
 a60:	18 99       	sbic	0x03, 0	; 3
 a62:	51 c0       	rjmp	.+162    	; 0xb06 <__vector_3+0xe6>
 a64:	2c e0       	ldi	r18, 0x0C	; 12
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	18 9b       	sbis	0x03, 0	; 3
 a6c:	fe cf       	rjmp	.-4      	; 0xa6a <__vector_3+0x4a>
 a6e:	ef e1       	ldi	r30, 0x1F	; 31
 a70:	fd e0       	ldi	r31, 0x0D	; 13
 a72:	31 97       	sbiw	r30, 0x01	; 1
 a74:	f1 f7       	brne	.-4      	; 0xa72 <__vector_3+0x52>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <__vector_3+0x58>
 a78:	00 00       	nop
 a7a:	18 9b       	sbis	0x03, 0	; 3
 a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <__vector_3+0x82>
 a7e:	18 99       	sbic	0x03, 0	; 3
 a80:	fe cf       	rjmp	.-4      	; 0xa7e <__vector_3+0x5e>
 a82:	18 9b       	sbis	0x03, 0	; 3
 a84:	fe cf       	rjmp	.-4      	; 0xa82 <__vector_3+0x62>
 a86:	ef e1       	ldi	r30, 0x1F	; 31
 a88:	fd e0       	ldi	r31, 0x0D	; 13
 a8a:	31 97       	sbiw	r30, 0x01	; 1
 a8c:	f1 f7       	brne	.-4      	; 0xa8a <__vector_3+0x6a>
 a8e:	00 c0       	rjmp	.+0      	; 0xa90 <__vector_3+0x70>
 a90:	00 00       	nop
 a92:	18 9b       	sbis	0x03, 0	; 3
 a94:	38 c0       	rjmp	.+112    	; 0xb06 <__vector_3+0xe6>
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	81 60       	ori	r24, 0x01	; 1
 a9c:	18 99       	sbic	0x03, 0	; 3
 a9e:	fe cf       	rjmp	.-4      	; 0xa9c <__vector_3+0x7c>
 aa0:	12 c0       	rjmp	.+36     	; 0xac6 <__vector_3+0xa6>
 aa2:	18 9b       	sbis	0x03, 0	; 3
 aa4:	fe cf       	rjmp	.-4      	; 0xaa2 <__vector_3+0x82>
 aa6:	ef e1       	ldi	r30, 0x1F	; 31
 aa8:	fd e0       	ldi	r31, 0x0D	; 13
 aaa:	31 97       	sbiw	r30, 0x01	; 1
 aac:	f1 f7       	brne	.-4      	; 0xaaa <__vector_3+0x8a>
 aae:	00 c0       	rjmp	.+0      	; 0xab0 <__vector_3+0x90>
 ab0:	00 00       	nop
 ab2:	18 99       	sbic	0x03, 0	; 3
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <__vector_3+0x9c>
 ab6:	88 0f       	add	r24, r24
 ab8:	99 1f       	adc	r25, r25
 aba:	05 c0       	rjmp	.+10     	; 0xac6 <__vector_3+0xa6>
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	81 60       	ori	r24, 0x01	; 1
 ac2:	18 99       	sbic	0x03, 0	; 3
 ac4:	fe cf       	rjmp	.-4      	; 0xac2 <__vector_3+0xa2>
 ac6:	21 50       	subi	r18, 0x01	; 1
 ac8:	81 f6       	brne	.-96     	; 0xa6a <__vector_3+0x4a>
 aca:	20 91 50 01 	lds	r18, 0x0150
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	ac 01       	movw	r20, r24
 ad2:	52 95       	swap	r21
 ad4:	42 95       	swap	r20
 ad6:	4f 70       	andi	r20, 0x0F	; 15
 ad8:	45 27       	eor	r20, r21
 ada:	5f 70       	andi	r21, 0x0F	; 15
 adc:	45 27       	eor	r20, r21
 ade:	42 17       	cp	r20, r18
 ae0:	53 07       	cpc	r21, r19
 ae2:	89 f4       	brne	.+34     	; 0xb06 <__vector_3+0xe6>
 ae4:	8f 70       	andi	r24, 0x0F	; 15
 ae6:	99 27       	eor	r25, r25
 ae8:	00 97       	sbiw	r24, 0x00	; 0
 aea:	69 f0       	breq	.+26     	; 0xb06 <__vector_3+0xe6>
 aec:	80 93 4f 01 	sts	0x014F, r24
 af0:	0e 94 07 05 	call	0xa0e	; 0xa0e <RF_decode_stop>
 af4:	08 c0       	rjmp	.+16     	; 0xb06 <__vector_3+0xe6>
 af6:	8f e1       	ldi	r24, 0x1F	; 31
 af8:	93 e0       	ldi	r25, 0x03	; 3
 afa:	01 97       	sbiw	r24, 0x01	; 1
 afc:	f1 f7       	brne	.-4      	; 0xafa <__vector_3+0xda>
 afe:	00 c0       	rjmp	.+0      	; 0xb00 <__vector_3+0xe0>
 b00:	00 00       	nop
 b02:	81 e3       	ldi	r24, 0x31	; 49
 b04:	a3 cf       	rjmp	.-186    	; 0xa4c <__vector_3+0x2c>
 b06:	ff 91       	pop	r31
 b08:	ef 91       	pop	r30
 b0a:	bf 91       	pop	r27
 b0c:	af 91       	pop	r26
 b0e:	9f 91       	pop	r25
 b10:	8f 91       	pop	r24
 b12:	7f 91       	pop	r23
 b14:	6f 91       	pop	r22
 b16:	5f 91       	pop	r21
 b18:	4f 91       	pop	r20
 b1a:	3f 91       	pop	r19
 b1c:	2f 91       	pop	r18
 b1e:	0f 90       	pop	r0
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	0f 90       	pop	r0
 b24:	1f 90       	pop	r1
 b26:	18 95       	reti

00000b28 <__subsf3>:
 b28:	50 58       	subi	r21, 0x80	; 128

00000b2a <__addsf3>:
 b2a:	bb 27       	eor	r27, r27
 b2c:	aa 27       	eor	r26, r26
 b2e:	0e d0       	rcall	.+28     	; 0xb4c <__addsf3x>
 b30:	48 c1       	rjmp	.+656    	; 0xdc2 <__fp_round>
 b32:	39 d1       	rcall	.+626    	; 0xda6 <__fp_pscA>
 b34:	30 f0       	brcs	.+12     	; 0xb42 <__addsf3+0x18>
 b36:	3e d1       	rcall	.+636    	; 0xdb4 <__fp_pscB>
 b38:	20 f0       	brcs	.+8      	; 0xb42 <__addsf3+0x18>
 b3a:	31 f4       	brne	.+12     	; 0xb48 <__addsf3+0x1e>
 b3c:	9f 3f       	cpi	r25, 0xFF	; 255
 b3e:	11 f4       	brne	.+4      	; 0xb44 <__addsf3+0x1a>
 b40:	1e f4       	brtc	.+6      	; 0xb48 <__addsf3+0x1e>
 b42:	2e c1       	rjmp	.+604    	; 0xda0 <__fp_nan>
 b44:	0e f4       	brtc	.+2      	; 0xb48 <__addsf3+0x1e>
 b46:	e0 95       	com	r30
 b48:	e7 fb       	bst	r30, 7
 b4a:	24 c1       	rjmp	.+584    	; 0xd94 <__fp_inf>

00000b4c <__addsf3x>:
 b4c:	e9 2f       	mov	r30, r25
 b4e:	4a d1       	rcall	.+660    	; 0xde4 <__fp_split3>
 b50:	80 f3       	brcs	.-32     	; 0xb32 <__addsf3+0x8>
 b52:	ba 17       	cp	r27, r26
 b54:	62 07       	cpc	r22, r18
 b56:	73 07       	cpc	r23, r19
 b58:	84 07       	cpc	r24, r20
 b5a:	95 07       	cpc	r25, r21
 b5c:	18 f0       	brcs	.+6      	; 0xb64 <__addsf3x+0x18>
 b5e:	71 f4       	brne	.+28     	; 0xb7c <__addsf3x+0x30>
 b60:	9e f5       	brtc	.+102    	; 0xbc8 <__addsf3x+0x7c>
 b62:	62 c1       	rjmp	.+708    	; 0xe28 <__fp_zero>
 b64:	0e f4       	brtc	.+2      	; 0xb68 <__addsf3x+0x1c>
 b66:	e0 95       	com	r30
 b68:	0b 2e       	mov	r0, r27
 b6a:	ba 2f       	mov	r27, r26
 b6c:	a0 2d       	mov	r26, r0
 b6e:	0b 01       	movw	r0, r22
 b70:	b9 01       	movw	r22, r18
 b72:	90 01       	movw	r18, r0
 b74:	0c 01       	movw	r0, r24
 b76:	ca 01       	movw	r24, r20
 b78:	a0 01       	movw	r20, r0
 b7a:	11 24       	eor	r1, r1
 b7c:	ff 27       	eor	r31, r31
 b7e:	59 1b       	sub	r21, r25
 b80:	99 f0       	breq	.+38     	; 0xba8 <__addsf3x+0x5c>
 b82:	59 3f       	cpi	r21, 0xF9	; 249
 b84:	50 f4       	brcc	.+20     	; 0xb9a <__addsf3x+0x4e>
 b86:	50 3e       	cpi	r21, 0xE0	; 224
 b88:	68 f1       	brcs	.+90     	; 0xbe4 <__addsf3x+0x98>
 b8a:	1a 16       	cp	r1, r26
 b8c:	f0 40       	sbci	r31, 0x00	; 0
 b8e:	a2 2f       	mov	r26, r18
 b90:	23 2f       	mov	r18, r19
 b92:	34 2f       	mov	r19, r20
 b94:	44 27       	eor	r20, r20
 b96:	58 5f       	subi	r21, 0xF8	; 248
 b98:	f3 cf       	rjmp	.-26     	; 0xb80 <__addsf3x+0x34>
 b9a:	46 95       	lsr	r20
 b9c:	37 95       	ror	r19
 b9e:	27 95       	ror	r18
 ba0:	a7 95       	ror	r26
 ba2:	f0 40       	sbci	r31, 0x00	; 0
 ba4:	53 95       	inc	r21
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__addsf3x+0x4e>
 ba8:	7e f4       	brtc	.+30     	; 0xbc8 <__addsf3x+0x7c>
 baa:	1f 16       	cp	r1, r31
 bac:	ba 0b       	sbc	r27, r26
 bae:	62 0b       	sbc	r22, r18
 bb0:	73 0b       	sbc	r23, r19
 bb2:	84 0b       	sbc	r24, r20
 bb4:	ba f0       	brmi	.+46     	; 0xbe4 <__addsf3x+0x98>
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	a1 f0       	breq	.+40     	; 0xbe2 <__addsf3x+0x96>
 bba:	ff 0f       	add	r31, r31
 bbc:	bb 1f       	adc	r27, r27
 bbe:	66 1f       	adc	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	c2 f7       	brpl	.-16     	; 0xbb6 <__addsf3x+0x6a>
 bc6:	0e c0       	rjmp	.+28     	; 0xbe4 <__addsf3x+0x98>
 bc8:	ba 0f       	add	r27, r26
 bca:	62 1f       	adc	r22, r18
 bcc:	73 1f       	adc	r23, r19
 bce:	84 1f       	adc	r24, r20
 bd0:	48 f4       	brcc	.+18     	; 0xbe4 <__addsf3x+0x98>
 bd2:	87 95       	ror	r24
 bd4:	77 95       	ror	r23
 bd6:	67 95       	ror	r22
 bd8:	b7 95       	ror	r27
 bda:	f7 95       	ror	r31
 bdc:	9e 3f       	cpi	r25, 0xFE	; 254
 bde:	08 f0       	brcs	.+2      	; 0xbe2 <__addsf3x+0x96>
 be0:	b3 cf       	rjmp	.-154    	; 0xb48 <__addsf3+0x1e>
 be2:	93 95       	inc	r25
 be4:	88 0f       	add	r24, r24
 be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0x9e>
 be8:	99 27       	eor	r25, r25
 bea:	ee 0f       	add	r30, r30
 bec:	97 95       	ror	r25
 bee:	87 95       	ror	r24
 bf0:	08 95       	ret

00000bf2 <__divsf3>:
 bf2:	0c d0       	rcall	.+24     	; 0xc0c <__divsf3x>
 bf4:	e6 c0       	rjmp	.+460    	; 0xdc2 <__fp_round>
 bf6:	de d0       	rcall	.+444    	; 0xdb4 <__fp_pscB>
 bf8:	40 f0       	brcs	.+16     	; 0xc0a <__divsf3+0x18>
 bfa:	d5 d0       	rcall	.+426    	; 0xda6 <__fp_pscA>
 bfc:	30 f0       	brcs	.+12     	; 0xc0a <__divsf3+0x18>
 bfe:	21 f4       	brne	.+8      	; 0xc08 <__divsf3+0x16>
 c00:	5f 3f       	cpi	r21, 0xFF	; 255
 c02:	19 f0       	breq	.+6      	; 0xc0a <__divsf3+0x18>
 c04:	c7 c0       	rjmp	.+398    	; 0xd94 <__fp_inf>
 c06:	51 11       	cpse	r21, r1
 c08:	10 c1       	rjmp	.+544    	; 0xe2a <__fp_szero>
 c0a:	ca c0       	rjmp	.+404    	; 0xda0 <__fp_nan>

00000c0c <__divsf3x>:
 c0c:	eb d0       	rcall	.+470    	; 0xde4 <__fp_split3>
 c0e:	98 f3       	brcs	.-26     	; 0xbf6 <__divsf3+0x4>

00000c10 <__divsf3_pse>:
 c10:	99 23       	and	r25, r25
 c12:	c9 f3       	breq	.-14     	; 0xc06 <__divsf3+0x14>
 c14:	55 23       	and	r21, r21
 c16:	b1 f3       	breq	.-20     	; 0xc04 <__divsf3+0x12>
 c18:	95 1b       	sub	r25, r21
 c1a:	55 0b       	sbc	r21, r21
 c1c:	bb 27       	eor	r27, r27
 c1e:	aa 27       	eor	r26, r26
 c20:	62 17       	cp	r22, r18
 c22:	73 07       	cpc	r23, r19
 c24:	84 07       	cpc	r24, r20
 c26:	38 f0       	brcs	.+14     	; 0xc36 <__divsf3_pse+0x26>
 c28:	9f 5f       	subi	r25, 0xFF	; 255
 c2a:	5f 4f       	sbci	r21, 0xFF	; 255
 c2c:	22 0f       	add	r18, r18
 c2e:	33 1f       	adc	r19, r19
 c30:	44 1f       	adc	r20, r20
 c32:	aa 1f       	adc	r26, r26
 c34:	a9 f3       	breq	.-22     	; 0xc20 <__divsf3_pse+0x10>
 c36:	33 d0       	rcall	.+102    	; 0xc9e <__divsf3_pse+0x8e>
 c38:	0e 2e       	mov	r0, r30
 c3a:	3a f0       	brmi	.+14     	; 0xc4a <__divsf3_pse+0x3a>
 c3c:	e0 e8       	ldi	r30, 0x80	; 128
 c3e:	30 d0       	rcall	.+96     	; 0xca0 <__divsf3_pse+0x90>
 c40:	91 50       	subi	r25, 0x01	; 1
 c42:	50 40       	sbci	r21, 0x00	; 0
 c44:	e6 95       	lsr	r30
 c46:	00 1c       	adc	r0, r0
 c48:	ca f7       	brpl	.-14     	; 0xc3c <__divsf3_pse+0x2c>
 c4a:	29 d0       	rcall	.+82     	; 0xc9e <__divsf3_pse+0x8e>
 c4c:	fe 2f       	mov	r31, r30
 c4e:	27 d0       	rcall	.+78     	; 0xc9e <__divsf3_pse+0x8e>
 c50:	66 0f       	add	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	bb 1f       	adc	r27, r27
 c58:	26 17       	cp	r18, r22
 c5a:	37 07       	cpc	r19, r23
 c5c:	48 07       	cpc	r20, r24
 c5e:	ab 07       	cpc	r26, r27
 c60:	b0 e8       	ldi	r27, 0x80	; 128
 c62:	09 f0       	breq	.+2      	; 0xc66 <__divsf3_pse+0x56>
 c64:	bb 0b       	sbc	r27, r27
 c66:	80 2d       	mov	r24, r0
 c68:	bf 01       	movw	r22, r30
 c6a:	ff 27       	eor	r31, r31
 c6c:	93 58       	subi	r25, 0x83	; 131
 c6e:	5f 4f       	sbci	r21, 0xFF	; 255
 c70:	2a f0       	brmi	.+10     	; 0xc7c <__divsf3_pse+0x6c>
 c72:	9e 3f       	cpi	r25, 0xFE	; 254
 c74:	51 05       	cpc	r21, r1
 c76:	68 f0       	brcs	.+26     	; 0xc92 <__divsf3_pse+0x82>
 c78:	8d c0       	rjmp	.+282    	; 0xd94 <__fp_inf>
 c7a:	d7 c0       	rjmp	.+430    	; 0xe2a <__fp_szero>
 c7c:	5f 3f       	cpi	r21, 0xFF	; 255
 c7e:	ec f3       	brlt	.-6      	; 0xc7a <__divsf3_pse+0x6a>
 c80:	98 3e       	cpi	r25, 0xE8	; 232
 c82:	dc f3       	brlt	.-10     	; 0xc7a <__divsf3_pse+0x6a>
 c84:	86 95       	lsr	r24
 c86:	77 95       	ror	r23
 c88:	67 95       	ror	r22
 c8a:	b7 95       	ror	r27
 c8c:	f7 95       	ror	r31
 c8e:	9f 5f       	subi	r25, 0xFF	; 255
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__divsf3_pse+0x74>
 c92:	88 0f       	add	r24, r24
 c94:	91 1d       	adc	r25, r1
 c96:	96 95       	lsr	r25
 c98:	87 95       	ror	r24
 c9a:	97 f9       	bld	r25, 7
 c9c:	08 95       	ret
 c9e:	e1 e0       	ldi	r30, 0x01	; 1
 ca0:	66 0f       	add	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	bb 1f       	adc	r27, r27
 ca8:	62 17       	cp	r22, r18
 caa:	73 07       	cpc	r23, r19
 cac:	84 07       	cpc	r24, r20
 cae:	ba 07       	cpc	r27, r26
 cb0:	20 f0       	brcs	.+8      	; 0xcba <__divsf3_pse+0xaa>
 cb2:	62 1b       	sub	r22, r18
 cb4:	73 0b       	sbc	r23, r19
 cb6:	84 0b       	sbc	r24, r20
 cb8:	ba 0b       	sbc	r27, r26
 cba:	ee 1f       	adc	r30, r30
 cbc:	88 f7       	brcc	.-30     	; 0xca0 <__divsf3_pse+0x90>
 cbe:	e0 95       	com	r30
 cc0:	08 95       	ret

00000cc2 <__fixunssfsi>:
 cc2:	98 d0       	rcall	.+304    	; 0xdf4 <__fp_splitA>
 cc4:	88 f0       	brcs	.+34     	; 0xce8 <__fixunssfsi+0x26>
 cc6:	9f 57       	subi	r25, 0x7F	; 127
 cc8:	90 f0       	brcs	.+36     	; 0xcee <__fixunssfsi+0x2c>
 cca:	b9 2f       	mov	r27, r25
 ccc:	99 27       	eor	r25, r25
 cce:	b7 51       	subi	r27, 0x17	; 23
 cd0:	a0 f0       	brcs	.+40     	; 0xcfa <__fixunssfsi+0x38>
 cd2:	d1 f0       	breq	.+52     	; 0xd08 <__fixunssfsi+0x46>
 cd4:	66 0f       	add	r22, r22
 cd6:	77 1f       	adc	r23, r23
 cd8:	88 1f       	adc	r24, r24
 cda:	99 1f       	adc	r25, r25
 cdc:	1a f0       	brmi	.+6      	; 0xce4 <__fixunssfsi+0x22>
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__fixunssfsi+0x12>
 ce2:	12 c0       	rjmp	.+36     	; 0xd08 <__fixunssfsi+0x46>
 ce4:	b1 30       	cpi	r27, 0x01	; 1
 ce6:	81 f0       	breq	.+32     	; 0xd08 <__fixunssfsi+0x46>
 ce8:	9f d0       	rcall	.+318    	; 0xe28 <__fp_zero>
 cea:	b1 e0       	ldi	r27, 0x01	; 1
 cec:	08 95       	ret
 cee:	9c c0       	rjmp	.+312    	; 0xe28 <__fp_zero>
 cf0:	67 2f       	mov	r22, r23
 cf2:	78 2f       	mov	r23, r24
 cf4:	88 27       	eor	r24, r24
 cf6:	b8 5f       	subi	r27, 0xF8	; 248
 cf8:	39 f0       	breq	.+14     	; 0xd08 <__fixunssfsi+0x46>
 cfa:	b9 3f       	cpi	r27, 0xF9	; 249
 cfc:	cc f3       	brlt	.-14     	; 0xcf0 <__fixunssfsi+0x2e>
 cfe:	86 95       	lsr	r24
 d00:	77 95       	ror	r23
 d02:	67 95       	ror	r22
 d04:	b3 95       	inc	r27
 d06:	d9 f7       	brne	.-10     	; 0xcfe <__fixunssfsi+0x3c>
 d08:	3e f4       	brtc	.+14     	; 0xd18 <__fixunssfsi+0x56>
 d0a:	90 95       	com	r25
 d0c:	80 95       	com	r24
 d0e:	70 95       	com	r23
 d10:	61 95       	neg	r22
 d12:	7f 4f       	sbci	r23, 0xFF	; 255
 d14:	8f 4f       	sbci	r24, 0xFF	; 255
 d16:	9f 4f       	sbci	r25, 0xFF	; 255
 d18:	08 95       	ret

00000d1a <__floatunsisf>:
 d1a:	e8 94       	clt
 d1c:	09 c0       	rjmp	.+18     	; 0xd30 <__floatsisf+0x12>

00000d1e <__floatsisf>:
 d1e:	97 fb       	bst	r25, 7
 d20:	3e f4       	brtc	.+14     	; 0xd30 <__floatsisf+0x12>
 d22:	90 95       	com	r25
 d24:	80 95       	com	r24
 d26:	70 95       	com	r23
 d28:	61 95       	neg	r22
 d2a:	7f 4f       	sbci	r23, 0xFF	; 255
 d2c:	8f 4f       	sbci	r24, 0xFF	; 255
 d2e:	9f 4f       	sbci	r25, 0xFF	; 255
 d30:	99 23       	and	r25, r25
 d32:	a9 f0       	breq	.+42     	; 0xd5e <__floatsisf+0x40>
 d34:	f9 2f       	mov	r31, r25
 d36:	96 e9       	ldi	r25, 0x96	; 150
 d38:	bb 27       	eor	r27, r27
 d3a:	93 95       	inc	r25
 d3c:	f6 95       	lsr	r31
 d3e:	87 95       	ror	r24
 d40:	77 95       	ror	r23
 d42:	67 95       	ror	r22
 d44:	b7 95       	ror	r27
 d46:	f1 11       	cpse	r31, r1
 d48:	f8 cf       	rjmp	.-16     	; 0xd3a <__floatsisf+0x1c>
 d4a:	fa f4       	brpl	.+62     	; 0xd8a <__floatsisf+0x6c>
 d4c:	bb 0f       	add	r27, r27
 d4e:	11 f4       	brne	.+4      	; 0xd54 <__floatsisf+0x36>
 d50:	60 ff       	sbrs	r22, 0
 d52:	1b c0       	rjmp	.+54     	; 0xd8a <__floatsisf+0x6c>
 d54:	6f 5f       	subi	r22, 0xFF	; 255
 d56:	7f 4f       	sbci	r23, 0xFF	; 255
 d58:	8f 4f       	sbci	r24, 0xFF	; 255
 d5a:	9f 4f       	sbci	r25, 0xFF	; 255
 d5c:	16 c0       	rjmp	.+44     	; 0xd8a <__floatsisf+0x6c>
 d5e:	88 23       	and	r24, r24
 d60:	11 f0       	breq	.+4      	; 0xd66 <__floatsisf+0x48>
 d62:	96 e9       	ldi	r25, 0x96	; 150
 d64:	11 c0       	rjmp	.+34     	; 0xd88 <__floatsisf+0x6a>
 d66:	77 23       	and	r23, r23
 d68:	21 f0       	breq	.+8      	; 0xd72 <__floatsisf+0x54>
 d6a:	9e e8       	ldi	r25, 0x8E	; 142
 d6c:	87 2f       	mov	r24, r23
 d6e:	76 2f       	mov	r23, r22
 d70:	05 c0       	rjmp	.+10     	; 0xd7c <__floatsisf+0x5e>
 d72:	66 23       	and	r22, r22
 d74:	71 f0       	breq	.+28     	; 0xd92 <__floatsisf+0x74>
 d76:	96 e8       	ldi	r25, 0x86	; 134
 d78:	86 2f       	mov	r24, r22
 d7a:	70 e0       	ldi	r23, 0x00	; 0
 d7c:	60 e0       	ldi	r22, 0x00	; 0
 d7e:	2a f0       	brmi	.+10     	; 0xd8a <__floatsisf+0x6c>
 d80:	9a 95       	dec	r25
 d82:	66 0f       	add	r22, r22
 d84:	77 1f       	adc	r23, r23
 d86:	88 1f       	adc	r24, r24
 d88:	da f7       	brpl	.-10     	; 0xd80 <__floatsisf+0x62>
 d8a:	88 0f       	add	r24, r24
 d8c:	96 95       	lsr	r25
 d8e:	87 95       	ror	r24
 d90:	97 f9       	bld	r25, 7
 d92:	08 95       	ret

00000d94 <__fp_inf>:
 d94:	97 f9       	bld	r25, 7
 d96:	9f 67       	ori	r25, 0x7F	; 127
 d98:	80 e8       	ldi	r24, 0x80	; 128
 d9a:	70 e0       	ldi	r23, 0x00	; 0
 d9c:	60 e0       	ldi	r22, 0x00	; 0
 d9e:	08 95       	ret

00000da0 <__fp_nan>:
 da0:	9f ef       	ldi	r25, 0xFF	; 255
 da2:	80 ec       	ldi	r24, 0xC0	; 192
 da4:	08 95       	ret

00000da6 <__fp_pscA>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	16 16       	cp	r1, r22
 dac:	17 06       	cpc	r1, r23
 dae:	18 06       	cpc	r1, r24
 db0:	09 06       	cpc	r0, r25
 db2:	08 95       	ret

00000db4 <__fp_pscB>:
 db4:	00 24       	eor	r0, r0
 db6:	0a 94       	dec	r0
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	05 06       	cpc	r0, r21
 dc0:	08 95       	ret

00000dc2 <__fp_round>:
 dc2:	09 2e       	mov	r0, r25
 dc4:	03 94       	inc	r0
 dc6:	00 0c       	add	r0, r0
 dc8:	11 f4       	brne	.+4      	; 0xdce <__fp_round+0xc>
 dca:	88 23       	and	r24, r24
 dcc:	52 f0       	brmi	.+20     	; 0xde2 <__fp_round+0x20>
 dce:	bb 0f       	add	r27, r27
 dd0:	40 f4       	brcc	.+16     	; 0xde2 <__fp_round+0x20>
 dd2:	bf 2b       	or	r27, r31
 dd4:	11 f4       	brne	.+4      	; 0xdda <__fp_round+0x18>
 dd6:	60 ff       	sbrs	r22, 0
 dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__fp_round+0x20>
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	08 95       	ret

00000de4 <__fp_split3>:
 de4:	57 fd       	sbrc	r21, 7
 de6:	90 58       	subi	r25, 0x80	; 128
 de8:	44 0f       	add	r20, r20
 dea:	55 1f       	adc	r21, r21
 dec:	59 f0       	breq	.+22     	; 0xe04 <__fp_splitA+0x10>
 dee:	5f 3f       	cpi	r21, 0xFF	; 255
 df0:	71 f0       	breq	.+28     	; 0xe0e <__fp_splitA+0x1a>
 df2:	47 95       	ror	r20

00000df4 <__fp_splitA>:
 df4:	88 0f       	add	r24, r24
 df6:	97 fb       	bst	r25, 7
 df8:	99 1f       	adc	r25, r25
 dfa:	61 f0       	breq	.+24     	; 0xe14 <__fp_splitA+0x20>
 dfc:	9f 3f       	cpi	r25, 0xFF	; 255
 dfe:	79 f0       	breq	.+30     	; 0xe1e <__fp_splitA+0x2a>
 e00:	87 95       	ror	r24
 e02:	08 95       	ret
 e04:	12 16       	cp	r1, r18
 e06:	13 06       	cpc	r1, r19
 e08:	14 06       	cpc	r1, r20
 e0a:	55 1f       	adc	r21, r21
 e0c:	f2 cf       	rjmp	.-28     	; 0xdf2 <__fp_split3+0xe>
 e0e:	46 95       	lsr	r20
 e10:	f1 df       	rcall	.-30     	; 0xdf4 <__fp_splitA>
 e12:	08 c0       	rjmp	.+16     	; 0xe24 <__fp_splitA+0x30>
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	99 1f       	adc	r25, r25
 e1c:	f1 cf       	rjmp	.-30     	; 0xe00 <__fp_splitA+0xc>
 e1e:	86 95       	lsr	r24
 e20:	71 05       	cpc	r23, r1
 e22:	61 05       	cpc	r22, r1
 e24:	08 94       	sec
 e26:	08 95       	ret

00000e28 <__fp_zero>:
 e28:	e8 94       	clt

00000e2a <__fp_szero>:
 e2a:	bb 27       	eor	r27, r27
 e2c:	66 27       	eor	r22, r22
 e2e:	77 27       	eor	r23, r23
 e30:	cb 01       	movw	r24, r22
 e32:	97 f9       	bld	r25, 7
 e34:	08 95       	ret

00000e36 <__mulsf3>:
 e36:	0b d0       	rcall	.+22     	; 0xe4e <__mulsf3x>
 e38:	c4 cf       	rjmp	.-120    	; 0xdc2 <__fp_round>
 e3a:	b5 df       	rcall	.-150    	; 0xda6 <__fp_pscA>
 e3c:	28 f0       	brcs	.+10     	; 0xe48 <__mulsf3+0x12>
 e3e:	ba df       	rcall	.-140    	; 0xdb4 <__fp_pscB>
 e40:	18 f0       	brcs	.+6      	; 0xe48 <__mulsf3+0x12>
 e42:	95 23       	and	r25, r21
 e44:	09 f0       	breq	.+2      	; 0xe48 <__mulsf3+0x12>
 e46:	a6 cf       	rjmp	.-180    	; 0xd94 <__fp_inf>
 e48:	ab cf       	rjmp	.-170    	; 0xda0 <__fp_nan>
 e4a:	11 24       	eor	r1, r1
 e4c:	ee cf       	rjmp	.-36     	; 0xe2a <__fp_szero>

00000e4e <__mulsf3x>:
 e4e:	ca df       	rcall	.-108    	; 0xde4 <__fp_split3>
 e50:	a0 f3       	brcs	.-24     	; 0xe3a <__mulsf3+0x4>

00000e52 <__mulsf3_pse>:
 e52:	95 9f       	mul	r25, r21
 e54:	d1 f3       	breq	.-12     	; 0xe4a <__mulsf3+0x14>
 e56:	95 0f       	add	r25, r21
 e58:	50 e0       	ldi	r21, 0x00	; 0
 e5a:	55 1f       	adc	r21, r21
 e5c:	62 9f       	mul	r22, r18
 e5e:	f0 01       	movw	r30, r0
 e60:	72 9f       	mul	r23, r18
 e62:	bb 27       	eor	r27, r27
 e64:	f0 0d       	add	r31, r0
 e66:	b1 1d       	adc	r27, r1
 e68:	63 9f       	mul	r22, r19
 e6a:	aa 27       	eor	r26, r26
 e6c:	f0 0d       	add	r31, r0
 e6e:	b1 1d       	adc	r27, r1
 e70:	aa 1f       	adc	r26, r26
 e72:	64 9f       	mul	r22, r20
 e74:	66 27       	eor	r22, r22
 e76:	b0 0d       	add	r27, r0
 e78:	a1 1d       	adc	r26, r1
 e7a:	66 1f       	adc	r22, r22
 e7c:	82 9f       	mul	r24, r18
 e7e:	22 27       	eor	r18, r18
 e80:	b0 0d       	add	r27, r0
 e82:	a1 1d       	adc	r26, r1
 e84:	62 1f       	adc	r22, r18
 e86:	73 9f       	mul	r23, r19
 e88:	b0 0d       	add	r27, r0
 e8a:	a1 1d       	adc	r26, r1
 e8c:	62 1f       	adc	r22, r18
 e8e:	83 9f       	mul	r24, r19
 e90:	a0 0d       	add	r26, r0
 e92:	61 1d       	adc	r22, r1
 e94:	22 1f       	adc	r18, r18
 e96:	74 9f       	mul	r23, r20
 e98:	33 27       	eor	r19, r19
 e9a:	a0 0d       	add	r26, r0
 e9c:	61 1d       	adc	r22, r1
 e9e:	23 1f       	adc	r18, r19
 ea0:	84 9f       	mul	r24, r20
 ea2:	60 0d       	add	r22, r0
 ea4:	21 1d       	adc	r18, r1
 ea6:	82 2f       	mov	r24, r18
 ea8:	76 2f       	mov	r23, r22
 eaa:	6a 2f       	mov	r22, r26
 eac:	11 24       	eor	r1, r1
 eae:	9f 57       	subi	r25, 0x7F	; 127
 eb0:	50 40       	sbci	r21, 0x00	; 0
 eb2:	8a f0       	brmi	.+34     	; 0xed6 <__mulsf3_pse+0x84>
 eb4:	e1 f0       	breq	.+56     	; 0xeee <__mulsf3_pse+0x9c>
 eb6:	88 23       	and	r24, r24
 eb8:	4a f0       	brmi	.+18     	; 0xecc <__mulsf3_pse+0x7a>
 eba:	ee 0f       	add	r30, r30
 ebc:	ff 1f       	adc	r31, r31
 ebe:	bb 1f       	adc	r27, r27
 ec0:	66 1f       	adc	r22, r22
 ec2:	77 1f       	adc	r23, r23
 ec4:	88 1f       	adc	r24, r24
 ec6:	91 50       	subi	r25, 0x01	; 1
 ec8:	50 40       	sbci	r21, 0x00	; 0
 eca:	a9 f7       	brne	.-22     	; 0xeb6 <__mulsf3_pse+0x64>
 ecc:	9e 3f       	cpi	r25, 0xFE	; 254
 ece:	51 05       	cpc	r21, r1
 ed0:	70 f0       	brcs	.+28     	; 0xeee <__mulsf3_pse+0x9c>
 ed2:	60 cf       	rjmp	.-320    	; 0xd94 <__fp_inf>
 ed4:	aa cf       	rjmp	.-172    	; 0xe2a <__fp_szero>
 ed6:	5f 3f       	cpi	r21, 0xFF	; 255
 ed8:	ec f3       	brlt	.-6      	; 0xed4 <__mulsf3_pse+0x82>
 eda:	98 3e       	cpi	r25, 0xE8	; 232
 edc:	dc f3       	brlt	.-10     	; 0xed4 <__mulsf3_pse+0x82>
 ede:	86 95       	lsr	r24
 ee0:	77 95       	ror	r23
 ee2:	67 95       	ror	r22
 ee4:	b7 95       	ror	r27
 ee6:	f7 95       	ror	r31
 ee8:	e7 95       	ror	r30
 eea:	9f 5f       	subi	r25, 0xFF	; 255
 eec:	c1 f7       	brne	.-16     	; 0xede <__mulsf3_pse+0x8c>
 eee:	fe 2b       	or	r31, r30
 ef0:	88 0f       	add	r24, r24
 ef2:	91 1d       	adc	r25, r1
 ef4:	96 95       	lsr	r25
 ef6:	87 95       	ror	r24
 ef8:	97 f9       	bld	r25, 7
 efa:	08 95       	ret

00000efc <__tablejump2__>:
 efc:	ee 0f       	add	r30, r30
 efe:	ff 1f       	adc	r31, r31

00000f00 <__tablejump__>:
 f00:	05 90       	lpm	r0, Z+
 f02:	f4 91       	lpm	r31, Z
 f04:	e0 2d       	mov	r30, r0
 f06:	09 94       	ijmp

00000f08 <__umulhisi3>:
 f08:	a2 9f       	mul	r26, r18
 f0a:	b0 01       	movw	r22, r0
 f0c:	b3 9f       	mul	r27, r19
 f0e:	c0 01       	movw	r24, r0
 f10:	a3 9f       	mul	r26, r19
 f12:	70 0d       	add	r23, r0
 f14:	81 1d       	adc	r24, r1
 f16:	11 24       	eor	r1, r1
 f18:	91 1d       	adc	r25, r1
 f1a:	b2 9f       	mul	r27, r18
 f1c:	70 0d       	add	r23, r0
 f1e:	81 1d       	adc	r24, r1
 f20:	11 24       	eor	r1, r1
 f22:	91 1d       	adc	r25, r1
 f24:	08 95       	ret

00000f26 <_exit>:
 f26:	f8 94       	cli

00000f28 <__stop_program>:
 f28:	ff cf       	rjmp	.-2      	; 0xf28 <__stop_program>
