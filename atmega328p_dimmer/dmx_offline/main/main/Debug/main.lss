
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00002358  000023ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  00800104  00800104  000023f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039d8  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000709  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e54  00000000  00000000  000067c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b8  00000000  00000000  00007620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef6  00000000  00000000  00007fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000435e  00000000  00000000  00008ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_1>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_7>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_16>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	28 05       	cpc	r18, r8
      6a:	25 05       	cpc	r18, r5
      6c:	22 05       	cpc	r18, r2
      6e:	1f 05       	cpc	r17, r15
      70:	1c 05       	cpc	r17, r12
      72:	19 05       	cpc	r17, r9
      74:	16 05       	cpc	r17, r6
      76:	e0 05       	cpc	r30, r0
      78:	87 06       	cpc	r8, r23
      7a:	60 0e       	add	r6, r16
      7c:	62 0e       	add	r6, r18
      7e:	64 0e       	add	r6, r20
      80:	66 0e       	add	r6, r22
      82:	68 0e       	add	r6, r24
      84:	6a 0e       	add	r6, r26
      86:	6c 0e       	add	r6, r28
      88:	6e 0e       	add	r6, r30
      8a:	70 0e       	add	r7, r16
      8c:	72 0e       	add	r7, r18
      8e:	74 0e       	add	r7, r20
      90:	76 0e       	add	r7, r22
      92:	78 0e       	add	r7, r24
      94:	7a 0e       	add	r7, r26
      96:	7c 0e       	add	r7, r28

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_clear_bss>:
      a4:	22 e0       	ldi	r18, 0x02	; 2
      a6:	a4 e0       	ldi	r26, 0x04	; 4
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a7 35       	cpi	r26, 0x57	; 87
      b0:	b2 07       	cpc	r27, r18
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e8 e5       	ldi	r30, 0x58	; 88
      bc:	f3 e2       	ldi	r31, 0x23	; 35
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 30       	cpi	r26, 0x04	; 4
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
      ca:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <main>
      ce:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <_Z18dmxcontrol_defaultv>:
	if (from_val>to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].on_delay=Random_range(from_val,to_val);
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	a2 e2       	ldi	r26, 0x22	; 34
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	ee e2       	ldi	r30, 0x2E	; 46
      e0:	f1 e0       	ldi	r31, 0x01	; 1
      e2:	42 e1       	ldi	r20, 0x12	; 18
      e4:	52 e0       	ldi	r21, 0x02	; 2
      e6:	62 e3       	ldi	r22, 0x32	; 50
      e8:	24 e6       	ldi	r18, 0x64	; 100
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	8a e0       	ldi	r24, 0x0A	; 10
      ee:	9f ef       	ldi	r25, 0xFF	; 255
      f0:	ed 01       	movw	r28, r26
      f2:	21 97       	sbiw	r28, 0x01	; 1
      f4:	68 83       	st	Y, r22
      f6:	1c 92       	st	X, r1
      f8:	12 96       	adiw	r26, 0x02	; 2
      fa:	1c 92       	st	X, r1
      fc:	1e 92       	st	-X, r1
      fe:	11 97       	sbiw	r26, 0x01	; 1
     100:	14 96       	adiw	r26, 0x04	; 4
     102:	3c 93       	st	X, r19
     104:	2e 93       	st	-X, r18
     106:	13 97       	sbiw	r26, 0x03	; 3
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].fade_in=Random_range(from_val,to_val);
     108:	ef 01       	movw	r28, r30
     10a:	27 97       	sbiw	r28, 0x07	; 7
     10c:	88 83       	st	Y, r24
     10e:	17 96       	adiw	r26, 0x07	; 7
     110:	3c 93       	st	X, r19
     112:	2e 93       	st	-X, r18
     114:	16 97       	sbiw	r26, 0x06	; 6
     116:	23 96       	adiw	r28, 0x03	; 3
     118:	88 83       	st	Y, r24
     11a:	21 96       	adiw	r28, 0x01	; 1
     11c:	98 83       	st	Y, r25
     11e:	21 96       	adiw	r28, 0x01	; 1
     120:	18 82       	st	Y, r1
     122:	21 96       	adiw	r28, 0x01	; 1
     124:	18 82       	st	Y, r1
     126:	10 82       	st	Z, r1
     128:	1f 96       	adiw	r26, 0x0f	; 15
     12a:	3f 96       	adiw	r30, 0x0f	; 15
     12c:	a4 17       	cp	r26, r20
     12e:	b5 07       	cpc	r27, r21
     130:	f9 f6       	brne	.-66     	; 0xf0 <_Z18dmxcontrol_defaultv+0x1a>
     132:	10 92 0d 01 	sts	0x010D, r1
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <_Z20dmxctr_config_vectorhh6selectjj>:
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].hold=Random_range(from_val,to_val);
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	00 d0       	rcall	.+0      	; 0x162 <_Z20dmxctr_config_vectorhh6selectjj+0x26>
     162:	00 d0       	rcall	.+0      	; 0x164 <_Z20dmxctr_config_vectorhh6selectjj+0x28>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	68 2e       	mov	r6, r24
     16a:	d6 2e       	mov	r13, r22
     16c:	54 2e       	mov	r5, r20
     16e:	79 01       	movw	r14, r18
     170:	c6 2e       	mov	r12, r22
     172:	c8 1a       	sub	r12, r24
     174:	77 24       	eor	r7, r7
     176:	73 94       	inc	r7
     178:	7c 0c       	add	r7, r12
     17a:	c9 01       	movw	r24, r18
     17c:	80 1b       	sub	r24, r16
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].fade_out=Random_range(from_val,to_val);
     17e:	91 0b       	sbc	r25, r17
     180:	bc 01       	movw	r22, r24
     182:	22 f4       	brpl	.+8      	; 0x18c <_Z20dmxctr_config_vectorhh6selectjj+0x50>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	68 1b       	sub	r22, r24
     18a:	79 0b       	sbc	r23, r25
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     194:	4b 01       	movw	r8, r22
     196:	5c 01       	movw	r10, r24
     198:	67 2d       	mov	r22, r7
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	61 50       	subi	r22, 0x01	; 1
     19e:	71 09       	sbc	r23, r1
     1a0:	07 2e       	mov	r0, r23
     1a2:	00 0c       	add	r0, r0
     1a4:	88 0b       	sbc	r24, r24
     1a6:	99 0b       	sbc	r25, r25
     1a8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	c5 01       	movw	r24, r10
     1b2:	b4 01       	movw	r22, r8
     1b4:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__divsf3>
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].repeat=Random_range(from_val,to_val);
     1b8:	4b 01       	movw	r8, r22
     1ba:	5c 01       	movw	r10, r24
     1bc:	0e 15       	cp	r16, r14
     1be:	1f 05       	cpc	r17, r15
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <_Z20dmxctr_config_vectorhh6selectjj+0x88>
     1c2:	90 c1       	rjmp	.+800    	; 0x4e4 <_Z20dmxctr_config_vectorhh6selectjj+0x3a8>
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	58 16       	cp	r5, r24
     1c8:	c9 f0       	breq	.+50     	; 0x1fc <_Z20dmxctr_config_vectorhh6selectjj+0xc0>
     1ca:	85 15       	cp	r24, r5
     1cc:	30 f0       	brcs	.+12     	; 0x1da <_Z20dmxctr_config_vectorhh6selectjj+0x9e>
     1ce:	55 20       	and	r5, r5
     1d0:	d9 f0       	breq	.+54     	; 0x208 <_Z20dmxctr_config_vectorhh6selectjj+0xcc>
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	59 16       	cp	r5, r25
     1d6:	a9 f0       	breq	.+42     	; 0x202 <_Z20dmxctr_config_vectorhh6selectjj+0xc6>
     1d8:	d4 c3       	rjmp	.+1960   	; 0x982 <__stack+0x83>
     1da:	a4 e0       	ldi	r26, 0x04	; 4
     1dc:	5a 16       	cp	r5, r26
     1de:	41 f0       	breq	.+16     	; 0x1f0 <_Z20dmxctr_config_vectorhh6selectjj+0xb4>
     1e0:	5a 16       	cp	r5, r26
     1e2:	48 f0       	brcs	.+18     	; 0x1f6 <_Z20dmxctr_config_vectorhh6selectjj+0xba>
     1e4:	b5 e0       	ldi	r27, 0x05	; 5
     1e6:	5b 12       	cpse	r5, r27
     1e8:	cc c3       	rjmp	.+1944   	; 0x982 <__stack+0x83>
     1ea:	71 10       	cpse	r7, r1
     1ec:	03 c1       	rjmp	.+518    	; 0x3f4 <_Z20dmxctr_config_vectorhh6selectjj+0x2b8>
     1ee:	c9 c3       	rjmp	.+1938   	; 0x982 <__stack+0x83>
     1f0:	71 10       	cpse	r7, r1
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].gray=Random_range(from_val,to_val);
     1f2:	c4 c0       	rjmp	.+392    	; 0x37c <_Z20dmxctr_config_vectorhh6selectjj+0x240>
     1f4:	c6 c3       	rjmp	.+1932   	; 0x982 <__stack+0x83>
     1f6:	71 10       	cpse	r7, r1
     1f8:	84 c0       	rjmp	.+264    	; 0x302 <_Z20dmxctr_config_vectorhh6selectjj+0x1c6>
     1fa:	c3 c3       	rjmp	.+1926   	; 0x982 <__stack+0x83>
     1fc:	71 10       	cpse	r7, r1
     1fe:	45 c0       	rjmp	.+138    	; 0x28a <_Z20dmxctr_config_vectorhh6selectjj+0x14e>
     200:	c0 c3       	rjmp	.+1920   	; 0x982 <__stack+0x83>
     202:	71 10       	cpse	r7, r1
     204:	33 c1       	rjmp	.+614    	; 0x46c <_Z20dmxctr_config_vectorhh6selectjj+0x330>
     206:	bd c3       	rjmp	.+1914   	; 0x982 <__stack+0x83>
     208:	77 20       	and	r7, r7
     20a:	09 f4       	brne	.+2      	; 0x20e <_Z20dmxctr_config_vectorhh6selectjj+0xd2>
     20c:	ba c3       	rjmp	.+1908   	; 0x982 <__stack+0x83>
     20e:	ef e0       	ldi	r30, 0x0F	; 15
     210:	6e 9e       	mul	r6, r30
     212:	90 01       	movw	r18, r0
     214:	11 24       	eor	r1, r1
     216:	c9 01       	movw	r24, r18
     218:	8b 5d       	subi	r24, 0xDB	; 219
     21a:	9e 4f       	sbci	r25, 0xFE	; 254
     21c:	1c 01       	movw	r2, r24
     21e:	ec 2c       	mov	r14, r12
     220:	f1 2c       	mov	r15, r1
     222:	9f ef       	ldi	r25, 0xFF	; 255
     224:	e9 1a       	sub	r14, r25
     226:	f9 0a       	sbc	r15, r25
     228:	c1 2c       	mov	r12, r1
     22a:	d1 2c       	mov	r13, r1
			default:
			break;
		}
	}

	else if (from_val<to_val)
     22c:	c8 01       	movw	r24, r16
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e0       	ldi	r27, 0x00	; 0
     232:	89 83       	std	Y+1, r24	; 0x01
	{
		switch (selection)
     234:	9a 83       	std	Y+2, r25	; 0x02
     236:	ab 83       	std	Y+3, r26	; 0x03
     238:	bc 83       	std	Y+4, r27	; 0x04
     23a:	b6 01       	movw	r22, r12
     23c:	0d 2c       	mov	r0, r13
     23e:	00 0c       	add	r0, r0
     240:	88 0b       	sbc	r24, r24
     242:	99 0b       	sbc	r25, r25
     244:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     248:	a5 01       	movw	r20, r10
     24a:	94 01       	movw	r18, r8
     24c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     250:	2b 01       	movw	r4, r22
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
     252:	3c 01       	movw	r6, r24
     254:	69 81       	ldd	r22, Y+1	; 0x01
     256:	7a 81       	ldd	r23, Y+2	; 0x02
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     260:	9b 01       	movw	r18, r22
     262:	ac 01       	movw	r20, r24
     264:	c3 01       	movw	r24, r6
     266:	b2 01       	movw	r22, r4
     268:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
     26c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     270:	d1 01       	movw	r26, r2
     272:	6d 93       	st	X+, r22
     274:	7c 93       	st	X, r23
     276:	bf ef       	ldi	r27, 0xFF	; 255
     278:	cb 1a       	sub	r12, r27
     27a:	db 0a       	sbc	r13, r27
     27c:	ef e0       	ldi	r30, 0x0F	; 15
     27e:	2e 0e       	add	r2, r30
     280:	31 1c       	adc	r3, r1
     282:	ce 14       	cp	r12, r14
     284:	df 04       	cpc	r13, r15
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
     286:	c9 f6       	brne	.-78     	; 0x23a <_Z20dmxctr_config_vectorhh6selectjj+0xfe>
     288:	7c c3       	rjmp	.+1784   	; 0x982 <__stack+0x83>
     28a:	ff e0       	ldi	r31, 0x0F	; 15
     28c:	6f 9e       	mul	r6, r31
     28e:	90 01       	movw	r18, r0
     290:	11 24       	eor	r1, r1
     292:	c9 01       	movw	r24, r18
     294:	89 5d       	subi	r24, 0xD9	; 217
     296:	9e 4f       	sbci	r25, 0xFE	; 254
     298:	1c 01       	movw	r2, r24
     29a:	d1 2c       	mov	r13, r1
     29c:	9f ef       	ldi	r25, 0xFF	; 255
     29e:	c9 1a       	sub	r12, r25
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=Random_range(from_val,to_val);
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
     2a0:	d9 0a       	sbc	r13, r25
     2a2:	e1 2c       	mov	r14, r1
     2a4:	f1 2c       	mov	r15, r1
     2a6:	c8 01       	movw	r24, r16
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	89 83       	std	Y+1, r24	; 0x01
     2ae:	9a 83       	std	Y+2, r25	; 0x02
     2b0:	ab 83       	std	Y+3, r26	; 0x03
     2b2:	bc 83       	std	Y+4, r27	; 0x04
     2b4:	b7 01       	movw	r22, r14
     2b6:	0f 2c       	mov	r0, r15
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=Random_range(from_val,to_val);
     2b8:	00 0c       	add	r0, r0
     2ba:	88 0b       	sbc	r24, r24
     2bc:	99 0b       	sbc	r25, r25
     2be:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     2c2:	a5 01       	movw	r20, r10
     2c4:	94 01       	movw	r18, r8
     2c6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     2ca:	2b 01       	movw	r4, r22
     2cc:	3c 01       	movw	r6, r24
     2ce:	69 81       	ldd	r22, Y+1	; 0x01
     2d0:	7a 81       	ldd	r23, Y+2	; 0x02
	else if (from_val<to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=Random_range(from_val,to_val);
     2d2:	8b 81       	ldd	r24, Y+3	; 0x03
     2d4:	9c 81       	ldd	r25, Y+4	; 0x04
     2d6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     2da:	9b 01       	movw	r18, r22
     2dc:	ac 01       	movw	r20, r24
     2de:	c3 01       	movw	r24, r6
     2e0:	b2 01       	movw	r22, r4
     2e2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     2e6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     2ea:	d1 01       	movw	r26, r2
     2ec:	6c 93       	st	X, r22
     2ee:	bf ef       	ldi	r27, 0xFF	; 255
     2f0:	eb 1a       	sub	r14, r27
     2f2:	fb 0a       	sbc	r15, r27
     2f4:	ef e0       	ldi	r30, 0x0F	; 15
     2f6:	2e 0e       	add	r2, r30
     2f8:	31 1c       	adc	r3, r1
     2fa:	ec 14       	cp	r14, r12
     2fc:	fd 04       	cpc	r15, r13
     2fe:	d1 f6       	brne	.-76     	; 0x2b4 <_Z20dmxctr_config_vectorhh6selectjj+0x178>
     300:	40 c3       	rjmp	.+1664   	; 0x982 <__stack+0x83>
     302:	ff e0       	ldi	r31, 0x0F	; 15
     304:	6f 9e       	mul	r6, r31
     306:	90 01       	movw	r18, r0
     308:	11 24       	eor	r1, r1
     30a:	c9 01       	movw	r24, r18
     30c:	88 5d       	subi	r24, 0xD8	; 216
     30e:	9e 4f       	sbci	r25, 0xFE	; 254
     310:	1c 01       	movw	r2, r24
     312:	d1 2c       	mov	r13, r1
     314:	9f ef       	ldi	r25, 0xFF	; 255
     316:	c9 1a       	sub	r12, r25
     318:	d9 0a       	sbc	r13, r25
     31a:	e1 2c       	mov	r14, r1
     31c:	f1 2c       	mov	r15, r1
     31e:	c8 01       	movw	r24, r16
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	89 83       	std	Y+1, r24	; 0x01
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	ab 83       	std	Y+3, r26	; 0x03
     32a:	bc 83       	std	Y+4, r27	; 0x04
     32c:	b7 01       	movw	r22, r14
     32e:	0f 2c       	mov	r0, r15
     330:	00 0c       	add	r0, r0
     332:	88 0b       	sbc	r24, r24
     334:	99 0b       	sbc	r25, r25
     336:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     33a:	a5 01       	movw	r20, r10
     33c:	94 01       	movw	r18, r8
     33e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     342:	2b 01       	movw	r4, r22
     344:	3c 01       	movw	r6, r24
     346:	69 81       	ldd	r22, Y+1	; 0x01
     348:	7a 81       	ldd	r23, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     352:	9b 01       	movw	r18, r22
     354:	ac 01       	movw	r20, r24
     356:	c3 01       	movw	r24, r6
     358:	b2 01       	movw	r22, r4
     35a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     35e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
     362:	d1 01       	movw	r26, r2
     364:	6d 93       	st	X+, r22
     366:	7c 93       	st	X, r23
     368:	bf ef       	ldi	r27, 0xFF	; 255
     36a:	eb 1a       	sub	r14, r27
     36c:	fb 0a       	sbc	r15, r27
     36e:	ef e0       	ldi	r30, 0x0F	; 15
     370:	2e 0e       	add	r2, r30
     372:	31 1c       	adc	r3, r1
     374:	ec 14       	cp	r14, r12
     376:	fd 04       	cpc	r15, r13
     378:	c9 f6       	brne	.-78     	; 0x32c <_Z20dmxctr_config_vectorhh6selectjj+0x1f0>
     37a:	03 c3       	rjmp	.+1542   	; 0x982 <__stack+0x83>
     37c:	ff e0       	ldi	r31, 0x0F	; 15
     37e:	6f 9e       	mul	r6, r31
     380:	90 01       	movw	r18, r0
     382:	11 24       	eor	r1, r1
     384:	c9 01       	movw	r24, r18
     386:	86 5d       	subi	r24, 0xD6	; 214
     388:	9e 4f       	sbci	r25, 0xFE	; 254
     38a:	1c 01       	movw	r2, r24
     38c:	d1 2c       	mov	r13, r1
     38e:	9f ef       	ldi	r25, 0xFF	; 255
     390:	c9 1a       	sub	r12, r25
     392:	d9 0a       	sbc	r13, r25
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	c8 01       	movw	r24, r16
     39a:	a0 e0       	ldi	r26, 0x00	; 0
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	89 83       	std	Y+1, r24	; 0x01
     3a0:	9a 83       	std	Y+2, r25	; 0x02
     3a2:	ab 83       	std	Y+3, r26	; 0x03
     3a4:	bc 83       	std	Y+4, r27	; 0x04
     3a6:	b7 01       	movw	r22, r14
     3a8:	0f 2c       	mov	r0, r15
     3aa:	00 0c       	add	r0, r0
     3ac:	88 0b       	sbc	r24, r24
     3ae:	99 0b       	sbc	r25, r25
     3b0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     3b4:	a5 01       	movw	r20, r10
     3b6:	94 01       	movw	r18, r8
     3b8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     3bc:	2b 01       	movw	r4, r22
     3be:	3c 01       	movw	r6, r24
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	c3 01       	movw	r24, r6
     3d2:	b2 01       	movw	r22, r4
     3d4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
     3d8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     3dc:	d1 01       	movw	r26, r2
     3de:	6c 93       	st	X, r22
     3e0:	bf ef       	ldi	r27, 0xFF	; 255
     3e2:	eb 1a       	sub	r14, r27
     3e4:	fb 0a       	sbc	r15, r27
     3e6:	ef e0       	ldi	r30, 0x0F	; 15
     3e8:	2e 0e       	add	r2, r30
     3ea:	31 1c       	adc	r3, r1
     3ec:	ec 14       	cp	r14, r12
     3ee:	fd 04       	cpc	r15, r13
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <_Z20dmxctr_config_vectorhh6selectjj+0x26a>
     3f2:	c7 c2       	rjmp	.+1422   	; 0x982 <__stack+0x83>
     3f4:	ff e0       	ldi	r31, 0x0F	; 15
     3f6:	6f 9e       	mul	r6, r31
     3f8:	90 01       	movw	r18, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	c9 01       	movw	r24, r18
     3fe:	84 5d       	subi	r24, 0xD4	; 212
     400:	9e 4f       	sbci	r25, 0xFE	; 254
     402:	1c 01       	movw	r2, r24
     404:	d1 2c       	mov	r13, r1
     406:	9f ef       	ldi	r25, 0xFF	; 255
     408:	c9 1a       	sub	r12, r25
     40a:	d9 0a       	sbc	r13, r25
     40c:	e1 2c       	mov	r14, r1
     40e:	f1 2c       	mov	r15, r1
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=Random_range(from_val,to_val);
     410:	c8 01       	movw	r24, r16
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	89 83       	std	Y+1, r24	; 0x01
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	ab 83       	std	Y+3, r26	; 0x03
     41c:	bc 83       	std	Y+4, r27	; 0x04
     41e:	b7 01       	movw	r22, r14
     420:	0f 2c       	mov	r0, r15
     422:	00 0c       	add	r0, r0
     424:	88 0b       	sbc	r24, r24
     426:	99 0b       	sbc	r25, r25
     428:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     42c:	a5 01       	movw	r20, r10
     42e:	94 01       	movw	r18, r8
     430:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     434:	2b 01       	movw	r4, r22
     436:	3c 01       	movw	r6, r24
     438:	69 81       	ldd	r22, Y+1	; 0x01
     43a:	7a 81       	ldd	r23, Y+2	; 0x02
     43c:	8b 81       	ldd	r24, Y+3	; 0x03
     43e:	9c 81       	ldd	r25, Y+4	; 0x04
     440:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     444:	9b 01       	movw	r18, r22
     446:	ac 01       	movw	r20, r24
     448:	c3 01       	movw	r24, r6
			
		}
	}
	else
	{
		switch (selection)
     44a:	b2 01       	movw	r22, r4
     44c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     450:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     454:	d1 01       	movw	r26, r2
     456:	6c 93       	st	X, r22
     458:	bf ef       	ldi	r27, 0xFF	; 255
     45a:	eb 1a       	sub	r14, r27
     45c:	fb 0a       	sbc	r15, r27
     45e:	ef e0       	ldi	r30, 0x0F	; 15
     460:	2e 0e       	add	r2, r30
     462:	31 1c       	adc	r3, r1
     464:	ec 14       	cp	r14, r12
     466:	fd 04       	cpc	r15, r13
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
     468:	d1 f6       	brne	.-76     	; 0x41e <_Z20dmxctr_config_vectorhh6selectjj+0x2e2>
     46a:	8b c2       	rjmp	.+1302   	; 0x982 <__stack+0x83>
     46c:	ff e0       	ldi	r31, 0x0F	; 15
     46e:	6f 9e       	mul	r6, r31
     470:	90 01       	movw	r18, r0
     472:	11 24       	eor	r1, r1
     474:	c9 01       	movw	r24, r18
     476:	80 5e       	subi	r24, 0xE0	; 224
     478:	9e 4f       	sbci	r25, 0xFE	; 254
     47a:	1c 01       	movw	r2, r24
     47c:	d1 2c       	mov	r13, r1
     47e:	9f ef       	ldi	r25, 0xFF	; 255
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
     480:	c9 1a       	sub	r12, r25
     482:	d9 0a       	sbc	r13, r25
     484:	e1 2c       	mov	r14, r1
     486:	f1 2c       	mov	r15, r1
     488:	c8 01       	movw	r24, r16
     48a:	a0 e0       	ldi	r26, 0x00	; 0
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	89 83       	std	Y+1, r24	; 0x01
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	ab 83       	std	Y+3, r26	; 0x03
     494:	bc 83       	std	Y+4, r27	; 0x04
     496:	b7 01       	movw	r22, r14
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
     498:	0f 2c       	mov	r0, r15
     49a:	00 0c       	add	r0, r0
     49c:	88 0b       	sbc	r24, r24
     49e:	99 0b       	sbc	r25, r25
     4a0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     4a4:	a5 01       	movw	r20, r10
     4a6:	94 01       	movw	r18, r8
     4a8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     4ac:	2b 01       	movw	r4, r22
     4ae:	3c 01       	movw	r6, r24
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
     4b0:	69 81       	ldd	r22, Y+1	; 0x01
     4b2:	7a 81       	ldd	r23, Y+2	; 0x02
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	c3 01       	movw	r24, r6
     4c2:	b2 01       	movw	r22, r4
     4c4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=from_val;
     4c8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     4cc:	d1 01       	movw	r26, r2
     4ce:	6c 93       	st	X, r22
     4d0:	bf ef       	ldi	r27, 0xFF	; 255
     4d2:	eb 1a       	sub	r14, r27
     4d4:	fb 0a       	sbc	r15, r27
     4d6:	ef e0       	ldi	r30, 0x0F	; 15
     4d8:	2e 0e       	add	r2, r30
     4da:	31 1c       	adc	r3, r1
     4dc:	ec 14       	cp	r14, r12
	else
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=from_val;
     4de:	fd 04       	cpc	r15, r13
     4e0:	d1 f6       	brne	.-76     	; 0x496 <_Z20dmxctr_config_vectorhh6selectjj+0x35a>
     4e2:	4f c2       	rjmp	.+1182   	; 0x982 <__stack+0x83>
     4e4:	e0 16       	cp	r14, r16
     4e6:	f1 06       	cpc	r15, r17
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <_Z20dmxctr_config_vectorhh6selectjj+0x3b0>
     4ea:	89 c1       	rjmp	.+786    	; 0x7fe <_Z20dmxctr_config_vectorhh6selectjj+0x6c2>
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	5f 16       	cp	r5, r31
     4f0:	c9 f0       	breq	.+50     	; 0x524 <_Z20dmxctr_config_vectorhh6selectjj+0x3e8>
     4f2:	f5 15       	cp	r31, r5
     4f4:	30 f0       	brcs	.+12     	; 0x502 <_Z20dmxctr_config_vectorhh6selectjj+0x3c6>
     4f6:	55 20       	and	r5, r5
     4f8:	d9 f0       	breq	.+54     	; 0x530 <_Z20dmxctr_config_vectorhh6selectjj+0x3f4>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	58 16       	cp	r5, r24
     4fe:	a9 f0       	breq	.+42     	; 0x52a <_Z20dmxctr_config_vectorhh6selectjj+0x3ee>
     500:	40 c2       	rjmp	.+1152   	; 0x982 <__stack+0x83>
     502:	94 e0       	ldi	r25, 0x04	; 4
     504:	59 16       	cp	r5, r25
     506:	41 f0       	breq	.+16     	; 0x518 <_Z20dmxctr_config_vectorhh6selectjj+0x3dc>
     508:	59 16       	cp	r5, r25
     50a:	48 f0       	brcs	.+18     	; 0x51e <_Z20dmxctr_config_vectorhh6selectjj+0x3e2>
     50c:	a5 e0       	ldi	r26, 0x05	; 5
     50e:	5a 12       	cpse	r5, r26
     510:	38 c2       	rjmp	.+1136   	; 0x982 <__stack+0x83>
     512:	71 10       	cpse	r7, r1
     514:	fe c0       	rjmp	.+508    	; 0x712 <_Z20dmxctr_config_vectorhh6selectjj+0x5d6>
     516:	35 c2       	rjmp	.+1130   	; 0x982 <__stack+0x83>
     518:	71 10       	cpse	r7, r1
     51a:	c0 c0       	rjmp	.+384    	; 0x69c <_Z20dmxctr_config_vectorhh6selectjj+0x560>
     51c:	32 c2       	rjmp	.+1124   	; 0x982 <__stack+0x83>
     51e:	71 10       	cpse	r7, r1
     520:	81 c0       	rjmp	.+258    	; 0x624 <_Z20dmxctr_config_vectorhh6selectjj+0x4e8>
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
     522:	2f c2       	rjmp	.+1118   	; 0x982 <__stack+0x83>
     524:	71 10       	cpse	r7, r1
     526:	43 c0       	rjmp	.+134    	; 0x5ae <_Z20dmxctr_config_vectorhh6selectjj+0x472>
     528:	2c c2       	rjmp	.+1112   	; 0x982 <__stack+0x83>
     52a:	71 10       	cpse	r7, r1
     52c:	2d c1       	rjmp	.+602    	; 0x788 <_Z20dmxctr_config_vectorhh6selectjj+0x64c>
     52e:	29 c2       	rjmp	.+1106   	; 0x982 <__stack+0x83>
     530:	77 20       	and	r7, r7
     532:	09 f4       	brne	.+2      	; 0x536 <_Z20dmxctr_config_vectorhh6selectjj+0x3fa>
     534:	26 c2       	rjmp	.+1100   	; 0x982 <__stack+0x83>
     536:	bf e0       	ldi	r27, 0x0F	; 15
     538:	db 9e       	mul	r13, r27
     53a:	90 01       	movw	r18, r0
     53c:	11 24       	eor	r1, r1
     53e:	f9 01       	movw	r30, r18
     540:	eb 5d       	subi	r30, 0xDB	; 219
     542:	fe 4f       	sbci	r31, 0xFE	; 254
     544:	1f 01       	movw	r2, r30
     546:	d1 2c       	mov	r13, r1
     548:	ff ef       	ldi	r31, 0xFF	; 255
     54a:	cf 1a       	sub	r12, r31
     54c:	df 0a       	sbc	r13, r31
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	c7 01       	movw	r24, r14
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	9a 83       	std	Y+2, r25	; 0x02
     55c:	ab 83       	std	Y+3, r26	; 0x03
     55e:	bc 83       	std	Y+4, r27	; 0x04
     560:	b8 01       	movw	r22, r16
     562:	01 2e       	mov	r0, r17
     564:	00 0c       	add	r0, r0
     566:	88 0b       	sbc	r24, r24
     568:	99 0b       	sbc	r25, r25
     56a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     56e:	a5 01       	movw	r20, r10
     570:	94 01       	movw	r18, r8
     572:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     576:	2b 01       	movw	r4, r22
     578:	3c 01       	movw	r6, r24
     57a:	69 81       	ldd	r22, Y+1	; 0x01
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
     57c:	7a 81       	ldd	r23, Y+2	; 0x02
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	9c 81       	ldd	r25, Y+4	; 0x04
     582:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	c3 01       	movw	r24, r6
     58c:	b2 01       	movw	r22, r4
     58e:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     592:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     596:	d1 01       	movw	r26, r2
     598:	6d 93       	st	X+, r22
     59a:	7c 93       	st	X, r23
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	bf e0       	ldi	r27, 0x0F	; 15
     5a2:	2b 1a       	sub	r2, r27
     5a4:	31 08       	sbc	r3, r1
     5a6:	0c 15       	cp	r16, r12
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
     5a8:	1d 05       	cpc	r17, r13
     5aa:	d1 f6       	brne	.-76     	; 0x560 <_Z20dmxctr_config_vectorhh6selectjj+0x424>
     5ac:	ea c1       	rjmp	.+980    	; 0x982 <__stack+0x83>
     5ae:	ef e0       	ldi	r30, 0x0F	; 15
     5b0:	de 9e       	mul	r13, r30
     5b2:	90 01       	movw	r18, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	c9 01       	movw	r24, r18
     5b8:	89 5d       	subi	r24, 0xD9	; 217
     5ba:	9e 4f       	sbci	r25, 0xFE	; 254
     5bc:	1c 01       	movw	r2, r24
     5be:	d1 2c       	mov	r13, r1
     5c0:	9f ef       	ldi	r25, 0xFF	; 255
     5c2:	c9 1a       	sub	r12, r25
     5c4:	d9 0a       	sbc	r13, r25
     5c6:	00 e0       	ldi	r16, 0x00	; 0
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	c7 01       	movw	r24, r14
     5cc:	a0 e0       	ldi	r26, 0x00	; 0
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	89 83       	std	Y+1, r24	; 0x01
     5d2:	9a 83       	std	Y+2, r25	; 0x02
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=from_val;
     5d4:	ab 83       	std	Y+3, r26	; 0x03
     5d6:	bc 83       	std	Y+4, r27	; 0x04
     5d8:	b8 01       	movw	r22, r16
     5da:	01 2e       	mov	r0, r17
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     5e6:	a5 01       	movw	r20, r10
     5e8:	94 01       	movw	r18, r8
     5ea:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     5ee:	2b 01       	movw	r4, r22
     5f0:	3c 01       	movw	r6, r24
     5f2:	69 81       	ldd	r22, Y+1	; 0x01
     5f4:	7a 81       	ldd	r23, Y+2	; 0x02
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
			default:
			break;
		}
	}
	
}
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     60a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     60e:	d1 01       	movw	r26, r2
     610:	6c 93       	st	X, r22
     612:	0f 5f       	subi	r16, 0xFF	; 255
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	bf e0       	ldi	r27, 0x0F	; 15
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=ratio*i+from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=ratio*i+from_val;
     618:	2b 1a       	sub	r2, r27
     61a:	31 08       	sbc	r3, r1
     61c:	0c 15       	cp	r16, r12
     61e:	1d 05       	cpc	r17, r13
     620:	d9 f6       	brne	.-74     	; 0x5d8 <_Z20dmxctr_config_vectorhh6selectjj+0x49c>
     622:	af c1       	rjmp	.+862    	; 0x982 <__stack+0x83>
     624:	ef e0       	ldi	r30, 0x0F	; 15
     626:	de 9e       	mul	r13, r30
     628:	90 01       	movw	r18, r0
     62a:	11 24       	eor	r1, r1
     62c:	c9 01       	movw	r24, r18
     62e:	88 5d       	subi	r24, 0xD8	; 216
     630:	9e 4f       	sbci	r25, 0xFE	; 254
     632:	1c 01       	movw	r2, r24
     634:	d1 2c       	mov	r13, r1
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	c9 1a       	sub	r12, r25
     63a:	d9 0a       	sbc	r13, r25
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=ratio*i+from_val;
     63c:	00 e0       	ldi	r16, 0x00	; 0
     63e:	10 e0       	ldi	r17, 0x00	; 0
     640:	c7 01       	movw	r24, r14
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	ab 83       	std	Y+3, r26	; 0x03
     64c:	bc 83       	std	Y+4, r27	; 0x04
     64e:	b8 01       	movw	r22, r16
     650:	01 2e       	mov	r0, r17
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     65c:	a5 01       	movw	r20, r10
     65e:	94 01       	movw	r18, r8
     660:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     664:	2b 01       	movw	r4, r22
     666:	3c 01       	movw	r6, r24
     668:	69 81       	ldd	r22, Y+1	; 0x01
     66a:	7a 81       	ldd	r23, Y+2	; 0x02
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	9c 81       	ldd	r25, Y+4	; 0x04
     670:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	c3 01       	movw	r24, r6
     67a:	b2 01       	movw	r22, r4
     67c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     680:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     684:	d1 01       	movw	r26, r2
     686:	6d 93       	st	X+, r22
     688:	7c 93       	st	X, r23
     68a:	0f 5f       	subi	r16, 0xFF	; 255
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	bf e0       	ldi	r27, 0x0F	; 15
     690:	2b 1a       	sub	r2, r27
     692:	31 08       	sbc	r3, r1
     694:	0c 15       	cp	r16, r12
     696:	1d 05       	cpc	r17, r13
     698:	d1 f6       	brne	.-76     	; 0x64e <_Z20dmxctr_config_vectorhh6selectjj+0x512>
     69a:	73 c1       	rjmp	.+742    	; 0x982 <__stack+0x83>
     69c:	ef e0       	ldi	r30, 0x0F	; 15
     69e:	de 9e       	mul	r13, r30
     6a0:	90 01       	movw	r18, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	c9 01       	movw	r24, r18
     6a6:	86 5d       	subi	r24, 0xD6	; 214
     6a8:	9e 4f       	sbci	r25, 0xFE	; 254
     6aa:	1c 01       	movw	r2, r24
     6ac:	d1 2c       	mov	r13, r1
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
     6b0:	c9 1a       	sub	r12, r25
     6b2:	d9 0a       	sbc	r13, r25
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=ratio*i+from_val;
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	c7 01       	movw	r24, r14
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	89 83       	std	Y+1, r24	; 0x01
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	ab 83       	std	Y+3, r26	; 0x03
     6c4:	bc 83       	std	Y+4, r27	; 0x04
     6c6:	b8 01       	movw	r22, r16
     6c8:	01 2e       	mov	r0, r17
     6ca:	00 0c       	add	r0, r0
     6cc:	88 0b       	sbc	r24, r24
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     6d4:	a5 01       	movw	r20, r10
     6d6:	94 01       	movw	r18, r8
     6d8:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     6dc:	2b 01       	movw	r4, r22
     6de:	3c 01       	movw	r6, r24
     6e0:	69 81       	ldd	r22, Y+1	; 0x01
     6e2:	7a 81       	ldd	r23, Y+2	; 0x02
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	c3 01       	movw	r24, r6
     6f2:	b2 01       	movw	r22, r4
     6f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     6f8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     6fc:	d1 01       	movw	r26, r2
     6fe:	6c 93       	st	X, r22
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	bf e0       	ldi	r27, 0x0F	; 15
     706:	2b 1a       	sub	r2, r27
     708:	31 08       	sbc	r3, r1
     70a:	0c 15       	cp	r16, r12
     70c:	1d 05       	cpc	r17, r13
     70e:	d9 f6       	brne	.-74     	; 0x6c6 <_Z20dmxctr_config_vectorhh6selectjj+0x58a>
     710:	38 c1       	rjmp	.+624    	; 0x982 <__stack+0x83>
     712:	ef e0       	ldi	r30, 0x0F	; 15
     714:	de 9e       	mul	r13, r30
     716:	90 01       	movw	r18, r0
     718:	11 24       	eor	r1, r1
     71a:	c9 01       	movw	r24, r18
     71c:	84 5d       	subi	r24, 0xD4	; 212
     71e:	9e 4f       	sbci	r25, 0xFE	; 254
     720:	1c 01       	movw	r2, r24
     722:	d1 2c       	mov	r13, r1
     724:	9f ef       	ldi	r25, 0xFF	; 255
     726:	c9 1a       	sub	r12, r25
     728:	d9 0a       	sbc	r13, r25
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=ratio*i+from_val;
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	c7 01       	movw	r24, r14
     730:	a0 e0       	ldi	r26, 0x00	; 0
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	89 83       	std	Y+1, r24	; 0x01
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	ab 83       	std	Y+3, r26	; 0x03
     73a:	bc 83       	std	Y+4, r27	; 0x04
     73c:	b8 01       	movw	r22, r16
     73e:	01 2e       	mov	r0, r17
     740:	00 0c       	add	r0, r0
     742:	88 0b       	sbc	r24, r24
     744:	99 0b       	sbc	r25, r25
     746:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     74a:	a5 01       	movw	r20, r10
     74c:	94 01       	movw	r18, r8
     74e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     752:	2b 01       	movw	r4, r22
     754:	3c 01       	movw	r6, r24
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	c3 01       	movw	r24, r6
     768:	b2 01       	movw	r22, r4
     76a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     76e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     772:	d1 01       	movw	r26, r2
     774:	6c 93       	st	X, r22
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	bf e0       	ldi	r27, 0x0F	; 15
     77c:	2b 1a       	sub	r2, r27
     77e:	31 08       	sbc	r3, r1
     780:	0c 15       	cp	r16, r12
     782:	1d 05       	cpc	r17, r13
     784:	d9 f6       	brne	.-74     	; 0x73c <_Z20dmxctr_config_vectorhh6selectjj+0x600>
     786:	fd c0       	rjmp	.+506    	; 0x982 <__stack+0x83>
     788:	ef e0       	ldi	r30, 0x0F	; 15
     78a:	de 9e       	mul	r13, r30
     78c:	90 01       	movw	r18, r0
     78e:	11 24       	eor	r1, r1
     790:	c9 01       	movw	r24, r18
     792:	80 5e       	subi	r24, 0xE0	; 224
     794:	9e 4f       	sbci	r25, 0xFE	; 254
     796:	1c 01       	movw	r2, r24
     798:	d1 2c       	mov	r13, r1
     79a:	9f ef       	ldi	r25, 0xFF	; 255
     79c:	c9 1a       	sub	r12, r25
     79e:	d9 0a       	sbc	r13, r25
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=ratio*i+from_val;
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	c7 01       	movw	r24, r14
     7a6:	a0 e0       	ldi	r26, 0x00	; 0
     7a8:	b0 e0       	ldi	r27, 0x00	; 0
     7aa:	89 83       	std	Y+1, r24	; 0x01
     7ac:	9a 83       	std	Y+2, r25	; 0x02
     7ae:	ab 83       	std	Y+3, r26	; 0x03
     7b0:	bc 83       	std	Y+4, r27	; 0x04
     7b2:	b8 01       	movw	r22, r16
     7b4:	01 2e       	mov	r0, r17
     7b6:	00 0c       	add	r0, r0
     7b8:	88 0b       	sbc	r24, r24
     7ba:	99 0b       	sbc	r25, r25
     7bc:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatsisf>
     7c0:	a5 01       	movw	r20, r10
     7c2:	94 01       	movw	r18, r8
     7c4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__mulsf3>
     7c8:	2b 01       	movw	r4, r22
     7ca:	3c 01       	movw	r6, r24
     7cc:	69 81       	ldd	r22, Y+1	; 0x01
     7ce:	7a 81       	ldd	r23, Y+2	; 0x02
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__floatunsisf>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	c3 01       	movw	r24, r6
     7de:	b2 01       	movw	r22, r4
     7e0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__addsf3>
     7e4:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fixunssfsi>
     7e8:	d1 01       	movw	r26, r2
     7ea:	6c 93       	st	X, r22
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	bf e0       	ldi	r27, 0x0F	; 15
     7f2:	2b 1a       	sub	r2, r27
     7f4:	31 08       	sbc	r3, r1
     7f6:	0c 15       	cp	r16, r12
     7f8:	1d 05       	cpc	r17, r13
     7fa:	d9 f6       	brne	.-74     	; 0x7b2 <_Z20dmxctr_config_vectorhh6selectjj+0x676>
     7fc:	c2 c0       	rjmp	.+388    	; 0x982 <__stack+0x83>
			
		}
	}
	else
	{
		switch (selection)
     7fe:	e2 e0       	ldi	r30, 0x02	; 2
     800:	5e 16       	cp	r5, r30
     802:	c9 f0       	breq	.+50     	; 0x836 <_Z20dmxctr_config_vectorhh6selectjj+0x6fa>
     804:	e5 15       	cp	r30, r5
     806:	30 f0       	brcs	.+12     	; 0x814 <_Z20dmxctr_config_vectorhh6selectjj+0x6d8>
     808:	55 20       	and	r5, r5
     80a:	d9 f0       	breq	.+54     	; 0x842 <_Z20dmxctr_config_vectorhh6selectjj+0x706>
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	5f 16       	cp	r5, r31
     810:	a9 f0       	breq	.+42     	; 0x83c <_Z20dmxctr_config_vectorhh6selectjj+0x700>
     812:	b7 c0       	rjmp	.+366    	; 0x982 <__stack+0x83>
     814:	84 e0       	ldi	r24, 0x04	; 4
     816:	58 16       	cp	r5, r24
     818:	41 f0       	breq	.+16     	; 0x82a <_Z20dmxctr_config_vectorhh6selectjj+0x6ee>
     81a:	58 16       	cp	r5, r24
     81c:	48 f0       	brcs	.+18     	; 0x830 <_Z20dmxctr_config_vectorhh6selectjj+0x6f4>
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	59 12       	cpse	r5, r25
     822:	af c0       	rjmp	.+350    	; 0x982 <__stack+0x83>
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
     824:	71 10       	cpse	r7, r1
     826:	7a c0       	rjmp	.+244    	; 0x91c <__stack+0x1d>
     828:	ac c0       	rjmp	.+344    	; 0x982 <__stack+0x83>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
     82a:	71 10       	cpse	r7, r1
     82c:	5d c0       	rjmp	.+186    	; 0x8e8 <_Z20dmxctr_config_vectorhh6selectjj+0x7ac>
     82e:	a9 c0       	rjmp	.+338    	; 0x982 <__stack+0x83>
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
     830:	71 10       	cpse	r7, r1
     832:	3f c0       	rjmp	.+126    	; 0x8b2 <_Z20dmxctr_config_vectorhh6selectjj+0x776>
     834:	a6 c0       	rjmp	.+332    	; 0x982 <__stack+0x83>
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
     836:	71 10       	cpse	r7, r1
     838:	22 c0       	rjmp	.+68     	; 0x87e <_Z20dmxctr_config_vectorhh6selectjj+0x742>
     83a:	a3 c0       	rjmp	.+326    	; 0x982 <__stack+0x83>
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
     83c:	71 10       	cpse	r7, r1
     83e:	88 c0       	rjmp	.+272    	; 0x950 <__stack+0x51>
     840:	a0 c0       	rjmp	.+320    	; 0x982 <__stack+0x83>
	else
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
     842:	77 20       	and	r7, r7
     844:	09 f4       	brne	.+2      	; 0x848 <_Z20dmxctr_config_vectorhh6selectjj+0x70c>
     846:	9d c0       	rjmp	.+314    	; 0x982 <__stack+0x83>
     848:	8d 2d       	mov	r24, r13
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2f e0       	ldi	r18, 0x0F	; 15
     84e:	28 9f       	mul	r18, r24
     850:	f0 01       	movw	r30, r0
     852:	29 9f       	mul	r18, r25
     854:	f0 0d       	add	r31, r0
     856:	11 24       	eor	r1, r1
     858:	eb 5d       	subi	r30, 0xDB	; 219
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	ac 01       	movw	r20, r24
     85e:	4c 19       	sub	r20, r12
     860:	51 09       	sbc	r21, r1
     862:	24 9f       	mul	r18, r20
     864:	c0 01       	movw	r24, r0
     866:	25 9f       	mul	r18, r21
     868:	90 0d       	add	r25, r0
     86a:	11 24       	eor	r1, r1
     86c:	8a 5e       	subi	r24, 0xEA	; 234
     86e:	9e 4f       	sbci	r25, 0xFE	; 254
     870:	f1 82       	std	Z+1, r15	; 0x01
     872:	e0 82       	st	Z, r14
     874:	3f 97       	sbiw	r30, 0x0f	; 15
     876:	e8 17       	cp	r30, r24
     878:	f9 07       	cpc	r31, r25
     87a:	d1 f7       	brne	.-12     	; 0x870 <_Z20dmxctr_config_vectorhh6selectjj+0x734>
     87c:	82 c0       	rjmp	.+260    	; 0x982 <__stack+0x83>
     87e:	8d 2d       	mov	r24, r13
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	2f e0       	ldi	r18, 0x0F	; 15
     884:	28 9f       	mul	r18, r24
     886:	f0 01       	movw	r30, r0
     888:	29 9f       	mul	r18, r25
     88a:	f0 0d       	add	r31, r0
     88c:	11 24       	eor	r1, r1
     88e:	e9 5d       	subi	r30, 0xD9	; 217
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	ac 01       	movw	r20, r24
     894:	4c 19       	sub	r20, r12
     896:	51 09       	sbc	r21, r1
     898:	24 9f       	mul	r18, r20
     89a:	c0 01       	movw	r24, r0
     89c:	25 9f       	mul	r18, r21
     89e:	90 0d       	add	r25, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	88 5e       	subi	r24, 0xE8	; 232
     8a4:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
     8a6:	e0 82       	st	Z, r14
     8a8:	3f 97       	sbiw	r30, 0x0f	; 15
     8aa:	e8 17       	cp	r30, r24
     8ac:	f9 07       	cpc	r31, r25
     8ae:	d9 f7       	brne	.-10     	; 0x8a6 <_Z20dmxctr_config_vectorhh6selectjj+0x76a>
     8b0:	68 c0       	rjmp	.+208    	; 0x982 <__stack+0x83>
     8b2:	8d 2d       	mov	r24, r13
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2f e0       	ldi	r18, 0x0F	; 15
     8b8:	28 9f       	mul	r18, r24
     8ba:	f0 01       	movw	r30, r0
     8bc:	29 9f       	mul	r18, r25
     8be:	f0 0d       	add	r31, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	e8 5d       	subi	r30, 0xD8	; 216
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	ac 01       	movw	r20, r24
     8c8:	4c 19       	sub	r20, r12
     8ca:	51 09       	sbc	r21, r1
     8cc:	24 9f       	mul	r18, r20
     8ce:	c0 01       	movw	r24, r0
     8d0:	25 9f       	mul	r18, r21
     8d2:	90 0d       	add	r25, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	87 5e       	subi	r24, 0xE7	; 231
     8d8:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
     8da:	f1 82       	std	Z+1, r15	; 0x01
     8dc:	e0 82       	st	Z, r14
     8de:	3f 97       	sbiw	r30, 0x0f	; 15
     8e0:	e8 17       	cp	r30, r24
     8e2:	f9 07       	cpc	r31, r25
     8e4:	d1 f7       	brne	.-12     	; 0x8da <_Z20dmxctr_config_vectorhh6selectjj+0x79e>
     8e6:	4d c0       	rjmp	.+154    	; 0x982 <__stack+0x83>
     8e8:	8d 2d       	mov	r24, r13
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2f e0       	ldi	r18, 0x0F	; 15
     8ee:	28 9f       	mul	r18, r24
     8f0:	f0 01       	movw	r30, r0
     8f2:	29 9f       	mul	r18, r25
     8f4:	f0 0d       	add	r31, r0
     8f6:	11 24       	eor	r1, r1
     8f8:	e6 5d       	subi	r30, 0xD6	; 214
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	ac 01       	movw	r20, r24
     8fe:	4c 19       	sub	r20, r12
     900:	51 09       	sbc	r21, r1
     902:	24 9f       	mul	r18, r20
     904:	c0 01       	movw	r24, r0
     906:	25 9f       	mul	r18, r21
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	85 5e       	subi	r24, 0xE5	; 229
     90e:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
     910:	e0 82       	st	Z, r14
     912:	3f 97       	sbiw	r30, 0x0f	; 15
     914:	e8 17       	cp	r30, r24
     916:	f9 07       	cpc	r31, r25
     918:	d9 f7       	brne	.-10     	; 0x910 <__stack+0x11>
     91a:	33 c0       	rjmp	.+102    	; 0x982 <__stack+0x83>
     91c:	8d 2d       	mov	r24, r13
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2f e0       	ldi	r18, 0x0F	; 15
     922:	28 9f       	mul	r18, r24
     924:	f0 01       	movw	r30, r0
     926:	29 9f       	mul	r18, r25
     928:	f0 0d       	add	r31, r0
     92a:	11 24       	eor	r1, r1
     92c:	e4 5d       	subi	r30, 0xD4	; 212
     92e:	fe 4f       	sbci	r31, 0xFE	; 254
     930:	ac 01       	movw	r20, r24
     932:	4c 19       	sub	r20, r12
     934:	51 09       	sbc	r21, r1
     936:	24 9f       	mul	r18, r20
     938:	c0 01       	movw	r24, r0
     93a:	25 9f       	mul	r18, r21
     93c:	90 0d       	add	r25, r0
     93e:	11 24       	eor	r1, r1
     940:	83 5e       	subi	r24, 0xE3	; 227
     942:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
     944:	e0 82       	st	Z, r14
     946:	3f 97       	sbiw	r30, 0x0f	; 15
     948:	e8 17       	cp	r30, r24
     94a:	f9 07       	cpc	r31, r25
     94c:	d9 f7       	brne	.-10     	; 0x944 <__stack+0x45>
     94e:	19 c0       	rjmp	.+50     	; 0x982 <__stack+0x83>
     950:	8d 2d       	mov	r24, r13
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2f e0       	ldi	r18, 0x0F	; 15
     956:	28 9f       	mul	r18, r24
     958:	f0 01       	movw	r30, r0
     95a:	29 9f       	mul	r18, r25
     95c:	f0 0d       	add	r31, r0
     95e:	11 24       	eor	r1, r1
     960:	e0 5e       	subi	r30, 0xE0	; 224
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	ac 01       	movw	r20, r24
     966:	4c 19       	sub	r20, r12
     968:	51 09       	sbc	r21, r1
     96a:	24 9f       	mul	r18, r20
     96c:	c0 01       	movw	r24, r0
     96e:	25 9f       	mul	r18, r21
     970:	90 0d       	add	r25, r0
     972:	11 24       	eor	r1, r1
     974:	8f 5e       	subi	r24, 0xEF	; 239
     976:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
     978:	e0 82       	st	Z, r14
     97a:	3f 97       	sbiw	r30, 0x0f	; 15
     97c:	e8 17       	cp	r30, r24
     97e:	f9 07       	cpc	r31, r25
     980:	d9 f7       	brne	.-10     	; 0x978 <__stack+0x79>
			default:
			break;
		}
	}
	
}
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	5f 90       	pop	r5
     9a8:	4f 90       	pop	r4
     9aa:	3f 90       	pop	r3
     9ac:	2f 90       	pop	r2
     9ae:	08 95       	ret

000009b0 <_Z17dmxctr_config_refhhhh>:


void dmxctr_config_ref(uint8_t bot,uint8_t top,uint8_t max_gray,uint8_t min_gray)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
	uint8_t n_point = top-bot+1;
     9b4:	68 1b       	sub	r22, r24
	for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].top_gray=max_gray;
     9b6:	6f 3f       	cpi	r22, 0xFF	; 255
     9b8:	19 f1       	breq	.+70     	; 0xa00 <_Z17dmxctr_config_refhhhh+0x50>
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	3f e0       	ldi	r19, 0x0F	; 15
     9be:	38 9f       	mul	r19, r24
     9c0:	f0 01       	movw	r30, r0
     9c2:	39 9f       	mul	r19, r25
     9c4:	f0 0d       	add	r31, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	df 01       	movw	r26, r30
     9ca:	af 5d       	subi	r26, 0xDF	; 223
     9cc:	be 4f       	sbci	r27, 0xFE	; 254
     9ce:	ec 01       	movw	r28, r24
     9d0:	c6 0f       	add	r28, r22
     9d2:	d1 1d       	adc	r29, r1
     9d4:	3c 9f       	mul	r19, r28
     9d6:	c0 01       	movw	r24, r0
     9d8:	3d 9f       	mul	r19, r29
     9da:	90 0d       	add	r25, r0
     9dc:	11 24       	eor	r1, r1
     9de:	bc 01       	movw	r22, r24
     9e0:	60 5d       	subi	r22, 0xD0	; 208
     9e2:	7e 4f       	sbci	r23, 0xFE	; 254
     9e4:	4c 93       	st	X, r20
     9e6:	1f 96       	adiw	r26, 0x0f	; 15
     9e8:	a6 17       	cp	r26, r22
     9ea:	b7 07       	cpc	r27, r23
     9ec:	d9 f7       	brne	.-10     	; 0x9e4 <_Z17dmxctr_config_refhhhh+0x34>
     9ee:	ee 5d       	subi	r30, 0xDE	; 222
     9f0:	fe 4f       	sbci	r31, 0xFE	; 254
     9f2:	8f 5c       	subi	r24, 0xCF	; 207
     9f4:	9e 4f       	sbci	r25, 0xFE	; 254
	for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].bot_gray=min_gray;
     9f6:	20 83       	st	Z, r18
     9f8:	3f 96       	adiw	r30, 0x0f	; 15
     9fa:	e8 17       	cp	r30, r24
     9fc:	f9 07       	cpc	r31, r25
     9fe:	d9 f7       	brne	.-10     	; 0x9f6 <_Z17dmxctr_config_refhhhh+0x46>
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <_Z19dmxctr_config_valuehh6selectj>:


//update : 18/1/2015
void dmxctr_config_value(uint8_t bot,uint8_t top,SELECT selection,uint16_t val)
{
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
	uint8_t n_point = top-bot+1;
     a0e:	68 1b       	sub	r22, r24
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	96 0f       	add	r25, r22
		switch (selection)
     a14:	c4 2e       	mov	r12, r20
     a16:	d1 2c       	mov	r13, r1
     a18:	49 e0       	ldi	r20, 0x09	; 9
     a1a:	c4 16       	cp	r12, r20
     a1c:	d1 04       	cpc	r13, r1
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <_Z19dmxctr_config_valuehh6selectj+0x1c>
     a20:	98 c1       	rjmp	.+816    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     a22:	f6 01       	movw	r30, r12
     a24:	ec 5c       	subi	r30, 0xCC	; 204
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__tablejump2__>
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
			break;
			case mode:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0xf0)|((uint8_t)val & 0x0f);
     a2c:	91 11       	cpse	r25, r1
     a2e:	ac c0       	rjmp	.+344    	; 0xb88 <_Z19dmxctr_config_valuehh6selectj+0x182>
     a30:	90 c1       	rjmp	.+800    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
     a32:	91 11       	cpse	r25, r1
     a34:	76 c0       	rjmp	.+236    	; 0xb22 <_Z19dmxctr_config_valuehh6selectj+0x11c>
     a36:	8d c1       	rjmp	.+794    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
     a38:	91 11       	cpse	r25, r1
     a3a:	5a c0       	rjmp	.+180    	; 0xaf0 <_Z19dmxctr_config_valuehh6selectj+0xea>
     a3c:	8a c1       	rjmp	.+788    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
     a3e:	91 11       	cpse	r25, r1
     a40:	3d c0       	rjmp	.+122    	; 0xabc <_Z19dmxctr_config_valuehh6selectj+0xb6>
     a42:	87 c1       	rjmp	.+782    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
     a44:	91 11       	cpse	r25, r1
     a46:	21 c0       	rjmp	.+66     	; 0xa8a <_Z19dmxctr_config_valuehh6selectj+0x84>
     a48:	84 c1       	rjmp	.+776    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
     a4a:	91 11       	cpse	r25, r1
     a4c:	83 c0       	rjmp	.+262    	; 0xb54 <_Z19dmxctr_config_valuehh6selectj+0x14e>
     a4e:	81 c1       	rjmp	.+770    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
{
	uint8_t n_point = top-bot+1;
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=val;
     a50:	99 23       	and	r25, r25
     a52:	09 f4       	brne	.+2      	; 0xa56 <_Z19dmxctr_config_valuehh6selectj+0x50>
     a54:	7e c1       	rjmp	.+764    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	7f e0       	ldi	r23, 0x0F	; 15
     a5a:	78 9f       	mul	r23, r24
     a5c:	f0 01       	movw	r30, r0
     a5e:	79 9f       	mul	r23, r25
     a60:	f0 0d       	add	r31, r0
     a62:	11 24       	eor	r1, r1
     a64:	eb 5d       	subi	r30, 0xDB	; 219
     a66:	fe 4f       	sbci	r31, 0xFE	; 254
     a68:	86 0f       	add	r24, r22
     a6a:	91 1d       	adc	r25, r1
     a6c:	78 9f       	mul	r23, r24
     a6e:	a0 01       	movw	r20, r0
     a70:	79 9f       	mul	r23, r25
     a72:	50 0d       	add	r21, r0
     a74:	11 24       	eor	r1, r1
     a76:	ca 01       	movw	r24, r20
     a78:	8c 5c       	subi	r24, 0xCC	; 204
     a7a:	9e 4f       	sbci	r25, 0xFE	; 254
     a7c:	31 83       	std	Z+1, r19	; 0x01
     a7e:	20 83       	st	Z, r18
     a80:	3f 96       	adiw	r30, 0x0f	; 15
     a82:	e8 17       	cp	r30, r24
     a84:	f9 07       	cpc	r31, r25
     a86:	d1 f7       	brne	.-12     	; 0xa7c <_Z19dmxctr_config_valuehh6selectj+0x76>
     a88:	64 c1       	rjmp	.+712    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	7f e0       	ldi	r23, 0x0F	; 15
     a8e:	78 9f       	mul	r23, r24
     a90:	f0 01       	movw	r30, r0
     a92:	79 9f       	mul	r23, r25
     a94:	f0 0d       	add	r31, r0
     a96:	11 24       	eor	r1, r1
     a98:	e9 5d       	subi	r30, 0xD9	; 217
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	86 0f       	add	r24, r22
     a9e:	91 1d       	adc	r25, r1
     aa0:	78 9f       	mul	r23, r24
     aa2:	a0 01       	movw	r20, r0
     aa4:	79 9f       	mul	r23, r25
     aa6:	50 0d       	add	r21, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	ca 01       	movw	r24, r20
     aac:	8a 5c       	subi	r24, 0xCA	; 202
     aae:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
     ab0:	20 83       	st	Z, r18
     ab2:	3f 96       	adiw	r30, 0x0f	; 15
     ab4:	e8 17       	cp	r30, r24
     ab6:	f9 07       	cpc	r31, r25
     ab8:	d9 f7       	brne	.-10     	; 0xab0 <_Z19dmxctr_config_valuehh6selectj+0xaa>
     aba:	4b c1       	rjmp	.+662    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	7f e0       	ldi	r23, 0x0F	; 15
     ac0:	78 9f       	mul	r23, r24
     ac2:	f0 01       	movw	r30, r0
     ac4:	79 9f       	mul	r23, r25
     ac6:	f0 0d       	add	r31, r0
     ac8:	11 24       	eor	r1, r1
     aca:	e8 5d       	subi	r30, 0xD8	; 216
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	86 0f       	add	r24, r22
     ad0:	91 1d       	adc	r25, r1
     ad2:	78 9f       	mul	r23, r24
     ad4:	a0 01       	movw	r20, r0
     ad6:	79 9f       	mul	r23, r25
     ad8:	50 0d       	add	r21, r0
     ada:	11 24       	eor	r1, r1
     adc:	ca 01       	movw	r24, r20
     ade:	89 5c       	subi	r24, 0xC9	; 201
     ae0:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
     ae2:	31 83       	std	Z+1, r19	; 0x01
     ae4:	20 83       	st	Z, r18
     ae6:	3f 96       	adiw	r30, 0x0f	; 15
     ae8:	e8 17       	cp	r30, r24
     aea:	f9 07       	cpc	r31, r25
     aec:	d1 f7       	brne	.-12     	; 0xae2 <_Z19dmxctr_config_valuehh6selectj+0xdc>
     aee:	31 c1       	rjmp	.+610    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	7f e0       	ldi	r23, 0x0F	; 15
     af4:	78 9f       	mul	r23, r24
     af6:	f0 01       	movw	r30, r0
     af8:	79 9f       	mul	r23, r25
     afa:	f0 0d       	add	r31, r0
     afc:	11 24       	eor	r1, r1
     afe:	e6 5d       	subi	r30, 0xD6	; 214
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	86 0f       	add	r24, r22
     b04:	91 1d       	adc	r25, r1
     b06:	78 9f       	mul	r23, r24
     b08:	a0 01       	movw	r20, r0
     b0a:	79 9f       	mul	r23, r25
     b0c:	50 0d       	add	r21, r0
     b0e:	11 24       	eor	r1, r1
     b10:	ca 01       	movw	r24, r20
     b12:	87 5c       	subi	r24, 0xC7	; 199
     b14:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
     b16:	20 83       	st	Z, r18
     b18:	3f 96       	adiw	r30, 0x0f	; 15
     b1a:	e8 17       	cp	r30, r24
     b1c:	f9 07       	cpc	r31, r25
     b1e:	d9 f7       	brne	.-10     	; 0xb16 <_Z19dmxctr_config_valuehh6selectj+0x110>
     b20:	18 c1       	rjmp	.+560    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	7f e0       	ldi	r23, 0x0F	; 15
     b26:	78 9f       	mul	r23, r24
     b28:	f0 01       	movw	r30, r0
     b2a:	79 9f       	mul	r23, r25
     b2c:	f0 0d       	add	r31, r0
     b2e:	11 24       	eor	r1, r1
     b30:	e4 5d       	subi	r30, 0xD4	; 212
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	86 0f       	add	r24, r22
     b36:	91 1d       	adc	r25, r1
     b38:	78 9f       	mul	r23, r24
     b3a:	a0 01       	movw	r20, r0
     b3c:	79 9f       	mul	r23, r25
     b3e:	50 0d       	add	r21, r0
     b40:	11 24       	eor	r1, r1
     b42:	ca 01       	movw	r24, r20
     b44:	85 5c       	subi	r24, 0xC5	; 197
     b46:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
     b48:	20 83       	st	Z, r18
     b4a:	3f 96       	adiw	r30, 0x0f	; 15
     b4c:	e8 17       	cp	r30, r24
     b4e:	f9 07       	cpc	r31, r25
     b50:	d9 f7       	brne	.-10     	; 0xb48 <_Z19dmxctr_config_valuehh6selectj+0x142>
     b52:	ff c0       	rjmp	.+510    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	7f e0       	ldi	r23, 0x0F	; 15
     b58:	78 9f       	mul	r23, r24
     b5a:	f0 01       	movw	r30, r0
     b5c:	79 9f       	mul	r23, r25
     b5e:	f0 0d       	add	r31, r0
     b60:	11 24       	eor	r1, r1
     b62:	e0 5e       	subi	r30, 0xE0	; 224
     b64:	fe 4f       	sbci	r31, 0xFE	; 254
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	86 0f       	add	r24, r22
     b6a:	91 1d       	adc	r25, r1
     b6c:	78 9f       	mul	r23, r24
     b6e:	a0 01       	movw	r20, r0
     b70:	79 9f       	mul	r23, r25
     b72:	50 0d       	add	r21, r0
     b74:	11 24       	eor	r1, r1
     b76:	ca 01       	movw	r24, r20
     b78:	80 5e       	subi	r24, 0xE0	; 224
     b7a:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
     b7c:	20 83       	st	Z, r18
     b7e:	3f 96       	adiw	r30, 0x0f	; 15
     b80:	e8 17       	cp	r30, r24
     b82:	f9 07       	cpc	r31, r25
     b84:	d9 f7       	brne	.-10     	; 0xb7c <_Z19dmxctr_config_valuehh6selectj+0x176>
     b86:	e5 c0       	rjmp	.+458    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	3f e0       	ldi	r19, 0x0F	; 15
     b8c:	38 9f       	mul	r19, r24
     b8e:	f0 01       	movw	r30, r0
     b90:	39 9f       	mul	r19, r25
     b92:	f0 0d       	add	r31, r0
     b94:	11 24       	eor	r1, r1
     b96:	e2 5d       	subi	r30, 0xD2	; 210
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	86 0f       	add	r24, r22
     b9c:	91 1d       	adc	r25, r1
     b9e:	38 9f       	mul	r19, r24
     ba0:	a0 01       	movw	r20, r0
     ba2:	39 9f       	mul	r19, r25
     ba4:	50 0d       	add	r21, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	43 5c       	subi	r20, 0xC3	; 195
     baa:	5e 4f       	sbci	r21, 0xFE	; 254
			break;
			case mode:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0xf0)|((uint8_t)val & 0x0f);
     bac:	2f 70       	andi	r18, 0x0F	; 15
     bae:	80 81       	ld	r24, Z
     bb0:	80 7f       	andi	r24, 0xF0	; 240
     bb2:	82 2b       	or	r24, r18
     bb4:	80 83       	st	Z, r24
     bb6:	3f 96       	adiw	r30, 0x0f	; 15
     bb8:	e4 17       	cp	r30, r20
     bba:	f5 07       	cpc	r31, r21
     bbc:	c1 f7       	brne	.-16     	; 0xbae <_Z19dmxctr_config_valuehh6selectj+0x1a8>
     bbe:	c9 c0       	rjmp	.+402    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case output:
			switch (val)
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	31 05       	cpc	r19, r1
     bc4:	a9 f0       	breq	.+42     	; 0xbf0 <_Z19dmxctr_config_valuehh6selectj+0x1ea>
     bc6:	38 f4       	brcc	.+14     	; 0xbd6 <_Z19dmxctr_config_valuehh6selectj+0x1d0>
     bc8:	21 15       	cp	r18, r1
     bca:	31 05       	cpc	r19, r1
     bcc:	b9 f0       	breq	.+46     	; 0xbfc <_Z19dmxctr_config_valuehh6selectj+0x1f6>
     bce:	21 30       	cpi	r18, 0x01	; 1
     bd0:	31 05       	cpc	r19, r1
     bd2:	89 f0       	breq	.+34     	; 0xbf6 <_Z19dmxctr_config_valuehh6selectj+0x1f0>
     bd4:	be c0       	rjmp	.+380    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     bd6:	23 30       	cpi	r18, 0x03	; 3
     bd8:	31 05       	cpc	r19, r1
     bda:	39 f0       	breq	.+14     	; 0xbea <_Z19dmxctr_config_valuehh6selectj+0x1e4>
     bdc:	24 30       	cpi	r18, 0x04	; 4
     bde:	31 05       	cpc	r19, r1
     be0:	09 f0       	breq	.+2      	; 0xbe4 <_Z19dmxctr_config_valuehh6selectj+0x1de>
     be2:	b7 c0       	rjmp	.+366    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
     be4:	91 11       	cpse	r25, r1
     be6:	42 c0       	rjmp	.+132    	; 0xc6c <_Z19dmxctr_config_valuehh6selectj+0x266>
     be8:	b4 c0       	rjmp	.+360    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
				break;
				case output_haft_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft_reverse<<4;
     bea:	91 11       	cpse	r25, r1
     bec:	75 c0       	rjmp	.+234    	; 0xcd8 <_Z19dmxctr_config_valuehh6selectj+0x2d2>
     bee:	b1 c0       	rjmp	.+354    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
     bf0:	91 11       	cpse	r25, r1
     bf2:	57 c0       	rjmp	.+174    	; 0xca2 <_Z19dmxctr_config_valuehh6selectj+0x29c>
     bf4:	ae c0       	rjmp	.+348    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				case output_normal:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_normal<<4;
				break;
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
     bf6:	91 11       	cpse	r25, r1
     bf8:	1e c0       	rjmp	.+60     	; 0xc36 <_Z19dmxctr_config_valuehh6selectj+0x230>
     bfa:	ab c0       	rjmp	.+342    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case output:
			switch (val)
			{
				case output_normal:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_normal<<4;
     bfc:	99 23       	and	r25, r25
     bfe:	09 f4       	brne	.+2      	; 0xc02 <_Z19dmxctr_config_valuehh6selectj+0x1fc>
     c00:	a8 c0       	rjmp	.+336    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	4f e0       	ldi	r20, 0x0F	; 15
     c06:	48 9f       	mul	r20, r24
     c08:	f0 01       	movw	r30, r0
     c0a:	49 9f       	mul	r20, r25
     c0c:	f0 0d       	add	r31, r0
     c0e:	11 24       	eor	r1, r1
     c10:	e2 5d       	subi	r30, 0xD2	; 210
     c12:	fe 4f       	sbci	r31, 0xFE	; 254
     c14:	86 0f       	add	r24, r22
     c16:	91 1d       	adc	r25, r1
     c18:	48 9f       	mul	r20, r24
     c1a:	90 01       	movw	r18, r0
     c1c:	49 9f       	mul	r20, r25
     c1e:	30 0d       	add	r19, r0
     c20:	11 24       	eor	r1, r1
     c22:	23 5c       	subi	r18, 0xC3	; 195
     c24:	3e 4f       	sbci	r19, 0xFE	; 254
     c26:	80 81       	ld	r24, Z
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	80 83       	st	Z, r24
     c2c:	3f 96       	adiw	r30, 0x0f	; 15
     c2e:	e2 17       	cp	r30, r18
     c30:	f3 07       	cpc	r31, r19
     c32:	c9 f7       	brne	.-14     	; 0xc26 <_Z19dmxctr_config_valuehh6selectj+0x220>
     c34:	8e c0       	rjmp	.+284    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	4f e0       	ldi	r20, 0x0F	; 15
     c3a:	48 9f       	mul	r20, r24
     c3c:	f0 01       	movw	r30, r0
     c3e:	49 9f       	mul	r20, r25
     c40:	f0 0d       	add	r31, r0
     c42:	11 24       	eor	r1, r1
     c44:	e2 5d       	subi	r30, 0xD2	; 210
     c46:	fe 4f       	sbci	r31, 0xFE	; 254
     c48:	86 0f       	add	r24, r22
     c4a:	91 1d       	adc	r25, r1
     c4c:	48 9f       	mul	r20, r24
     c4e:	90 01       	movw	r18, r0
     c50:	49 9f       	mul	r20, r25
     c52:	30 0d       	add	r19, r0
     c54:	11 24       	eor	r1, r1
     c56:	23 5c       	subi	r18, 0xC3	; 195
     c58:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 70       	andi	r24, 0x0F	; 15
     c5e:	80 61       	ori	r24, 0x10	; 16
     c60:	80 83       	st	Z, r24
     c62:	3f 96       	adiw	r30, 0x0f	; 15
     c64:	e2 17       	cp	r30, r18
     c66:	f3 07       	cpc	r31, r19
     c68:	c1 f7       	brne	.-16     	; 0xc5a <_Z19dmxctr_config_valuehh6selectj+0x254>
     c6a:	73 c0       	rjmp	.+230    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	4f e0       	ldi	r20, 0x0F	; 15
     c70:	48 9f       	mul	r20, r24
     c72:	f0 01       	movw	r30, r0
     c74:	49 9f       	mul	r20, r25
     c76:	f0 0d       	add	r31, r0
     c78:	11 24       	eor	r1, r1
     c7a:	e2 5d       	subi	r30, 0xD2	; 210
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	86 0f       	add	r24, r22
     c80:	91 1d       	adc	r25, r1
     c82:	48 9f       	mul	r20, r24
     c84:	90 01       	movw	r18, r0
     c86:	49 9f       	mul	r20, r25
     c88:	30 0d       	add	r19, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	23 5c       	subi	r18, 0xC3	; 195
     c8e:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
     c90:	80 81       	ld	r24, Z
     c92:	8f 70       	andi	r24, 0x0F	; 15
     c94:	80 64       	ori	r24, 0x40	; 64
     c96:	80 83       	st	Z, r24
     c98:	3f 96       	adiw	r30, 0x0f	; 15
     c9a:	e2 17       	cp	r30, r18
     c9c:	f3 07       	cpc	r31, r19
     c9e:	c1 f7       	brne	.-16     	; 0xc90 <_Z19dmxctr_config_valuehh6selectj+0x28a>
     ca0:	58 c0       	rjmp	.+176    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	4f e0       	ldi	r20, 0x0F	; 15
     ca6:	48 9f       	mul	r20, r24
     ca8:	f0 01       	movw	r30, r0
     caa:	49 9f       	mul	r20, r25
     cac:	f0 0d       	add	r31, r0
     cae:	11 24       	eor	r1, r1
     cb0:	e2 5d       	subi	r30, 0xD2	; 210
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	86 0f       	add	r24, r22
     cb6:	91 1d       	adc	r25, r1
     cb8:	48 9f       	mul	r20, r24
     cba:	90 01       	movw	r18, r0
     cbc:	49 9f       	mul	r20, r25
     cbe:	30 0d       	add	r19, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	23 5c       	subi	r18, 0xC3	; 195
     cc4:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
     cc6:	80 81       	ld	r24, Z
     cc8:	8f 70       	andi	r24, 0x0F	; 15
     cca:	80 62       	ori	r24, 0x20	; 32
     ccc:	80 83       	st	Z, r24
     cce:	3f 96       	adiw	r30, 0x0f	; 15
     cd0:	e2 17       	cp	r30, r18
     cd2:	f3 07       	cpc	r31, r19
     cd4:	c1 f7       	brne	.-16     	; 0xcc6 <_Z19dmxctr_config_valuehh6selectj+0x2c0>
     cd6:	3d c0       	rjmp	.+122    	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	4f e0       	ldi	r20, 0x0F	; 15
     cdc:	48 9f       	mul	r20, r24
     cde:	f0 01       	movw	r30, r0
     ce0:	49 9f       	mul	r20, r25
     ce2:	f0 0d       	add	r31, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	e2 5d       	subi	r30, 0xD2	; 210
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	86 0f       	add	r24, r22
     cec:	91 1d       	adc	r25, r1
     cee:	48 9f       	mul	r20, r24
     cf0:	90 01       	movw	r18, r0
     cf2:	49 9f       	mul	r20, r25
     cf4:	30 0d       	add	r19, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	23 5c       	subi	r18, 0xC3	; 195
     cfa:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_haft_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft_reverse<<4;
     cfc:	80 81       	ld	r24, Z
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	80 63       	ori	r24, 0x30	; 48
     d02:	80 83       	st	Z, r24
     d04:	3f 96       	adiw	r30, 0x0f	; 15
     d06:	e2 17       	cp	r30, r18
     d08:	f3 07       	cpc	r31, r19
     d0a:	c1 f7       	brne	.-16     	; 0xcfc <_Z19dmxctr_config_valuehh6selectj+0x2f6>
     d0c:	22 c0       	rjmp	.+68     	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				default:
				break;
			}
			break;
			case enable:
			if (val!=0) val = 0;
     d0e:	23 2b       	or	r18, r19
     d10:	11 f4       	brne	.+4      	; 0xd16 <_Z19dmxctr_config_valuehh6selectj+0x310>
			else val = 255;
     d12:	4f ef       	ldi	r20, 0xFF	; 255
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <_Z19dmxctr_config_valuehh6selectj+0x312>
				default:
				break;
			}
			break;
			case enable:
			if (val!=0) val = 0;
     d16:	40 e0       	ldi	r20, 0x00	; 0
			else val = 255;
			
			for (uint8_t i = 0; i <n_point; i++)
     d18:	99 23       	and	r25, r25
     d1a:	d9 f0       	breq	.+54     	; 0xd52 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	5f e0       	ldi	r21, 0x0F	; 15
     d20:	58 9f       	mul	r21, r24
     d22:	f0 01       	movw	r30, r0
     d24:	59 9f       	mul	r21, r25
     d26:	f0 0d       	add	r31, r0
     d28:	11 24       	eor	r1, r1
     d2a:	e3 5d       	subi	r30, 0xD3	; 211
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	86 0f       	add	r24, r22
     d30:	91 1d       	adc	r25, r1
     d32:	58 9f       	mul	r21, r24
     d34:	90 01       	movw	r18, r0
     d36:	59 9f       	mul	r21, r25
     d38:	30 0d       	add	r19, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	c9 01       	movw	r24, r18
     d3e:	84 5c       	subi	r24, 0xC4	; 196
     d40:	9e 4f       	sbci	r25, 0xFE	; 254
			{
				dmxcontrol[i+bot].count_repeat = 0;
     d42:	10 82       	st	Z, r1
     d44:	df 01       	movw	r26, r30
     d46:	12 97       	sbiw	r26, 0x02	; 2
				 dmxcontrol[i+bot].stage=val;
     d48:	4c 93       	st	X, r20
     d4a:	3f 96       	adiw	r30, 0x0f	; 15
			break;
			case enable:
			if (val!=0) val = 0;
			else val = 255;
			
			for (uint8_t i = 0; i <n_point; i++)
     d4c:	e8 17       	cp	r30, r24
     d4e:	f9 07       	cpc	r31, r25
     d50:	c1 f7       	brne	.-16     	; 0xd42 <_Z19dmxctr_config_valuehh6selectj+0x33c>
			}
			break;
			default:
			break;
		}
}
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	08 95       	ret

00000d5c <_Z11dmxctr_openv>:


void dmxctr_open(void) {en = 1;}
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	80 93 0d 01 	sts	0x010D, r24
     d62:	08 95       	ret

00000d64 <_Z12dmxctr_closev>:
void dmxctr_close(void) {en = 0;}
     d64:	10 92 0d 01 	sts	0x010D, r1
     d68:	08 95       	ret

00000d6a <_Z12dmxctr_usingjj>:
	return 1;
}

void dmxctr_using(uint16_t bot,uint16_t top)
{
	bot_channel = bot;
     d6a:	90 93 0b 01 	sts	0x010B, r25
     d6e:	80 93 0a 01 	sts	0x010A, r24
	top_channel = top;
     d72:	70 93 09 01 	sts	0x0109, r23
     d76:	60 93 08 01 	sts	0x0108, r22
     d7a:	08 95       	ret

00000d7c <_Z8gray_adjhh>:
/*                                                                      */
/************************************************************************/
//update : 18/1/2015

 void gray_adj(uint8_t bot,uint8_t top)
{
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
     d8a:	60 31       	cpi	r22, 0x10	; 16
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <_Z8gray_adjhh+0x14>
     d8e:	d5 c0       	rjmp	.+426    	; 0xf3a <_Z8gray_adjhh+0x1be>
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
     d90:	a8 2f       	mov	r26, r24
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	6a 1b       	sub	r22, r26
     d98:	7b 0b       	sbc	r23, r27
     d9a:	6f 5f       	subi	r22, 0xFF	; 255
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	16 16       	cp	r1, r22
     da0:	17 06       	cpc	r1, r23
     da2:	0c f0       	brlt	.+2      	; 0xda6 <_Z8gray_adjhh+0x2a>
     da4:	c6 c0       	rjmp	.+396    	; 0xf32 <_Z8gray_adjhh+0x1b6>
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch (dmxcontrol[i].mode>>4)
     dac:	8f e0       	ldi	r24, 0x0F	; 15
			if (dmxcontrol[i].gray>=(RESOLUS/2)) channel_buff[bot+i]=dmxcontrol[i].top_gray;
			else channel_buff[bot+i]=dmxcontrol[i].bot_gray;
			break;
			case output_haft:
			_temp = dmxcontrol[i].gray;
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=(((RESOLUS/2)-1)-_temp)*2+1;
     dae:	08 e1       	ldi	r16, 0x18	; 24
     db0:	10 e0       	ldi	r17, 0x00	; 0
			else channel_buff[bot+i]=(_temp-(RESOLUS/2))*2+1;
			break;
			case output_haft_reverse:
			_temp =dmxcontrol[i].gray;
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=RESOLUS-(((RESOLUS/2)-1-_temp)*2+1);
			else channel_buff[bot+i]=RESOLUS-((_temp-(RESOLUS/2))*2+1);
     db2:	0f 2e       	mov	r0, r31
     db4:	f9 e1       	ldi	r31, 0x19	; 25
     db6:	cf 2e       	mov	r12, r31
     db8:	d1 2c       	mov	r13, r1
     dba:	f0 2d       	mov	r31, r0
		{
			case output_normal:
			channel_buff[bot+i]=dmxcontrol[i].gray;
			break;
			case output_reverse:
			channel_buff[bot+i]=RESOLUS-dmxcontrol[i].gray;
     dbc:	0f 2e       	mov	r0, r31
     dbe:	f2 e3       	ldi	r31, 0x32	; 50
     dc0:	ff 2e       	mov	r15, r31
     dc2:	f0 2d       	mov	r31, r0
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
	{
		switch (dmxcontrol[i].mode>>4)
     dc4:	84 9f       	mul	r24, r20
     dc6:	f0 01       	movw	r30, r0
     dc8:	85 9f       	mul	r24, r21
     dca:	f0 0d       	add	r31, r0
     dcc:	11 24       	eor	r1, r1
     dce:	e0 5e       	subi	r30, 0xE0	; 224
     dd0:	fe 4f       	sbci	r31, 0xFE	; 254
     dd2:	26 85       	ldd	r18, Z+14	; 0x0e
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	35 95       	asr	r19
     dd8:	27 95       	ror	r18
     dda:	35 95       	asr	r19
     ddc:	27 95       	ror	r18
     dde:	35 95       	asr	r19
     de0:	27 95       	ror	r18
     de2:	35 95       	asr	r19
     de4:	27 95       	ror	r18
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <_Z8gray_adjhh+0x72>
     dec:	5c c0       	rjmp	.+184    	; 0xea6 <_Z8gray_adjhh+0x12a>
     dee:	3c f4       	brge	.+14     	; 0xdfe <_Z8gray_adjhh+0x82>
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	61 f0       	breq	.+24     	; 0xe0e <_Z8gray_adjhh+0x92>
     df6:	21 30       	cpi	r18, 0x01	; 1
     df8:	31 05       	cpc	r19, r1
     dfa:	c9 f0       	breq	.+50     	; 0xe2e <_Z8gray_adjhh+0xb2>
     dfc:	93 c0       	rjmp	.+294    	; 0xf24 <_Z8gray_adjhh+0x1a8>
     dfe:	23 30       	cpi	r18, 0x03	; 3
     e00:	31 05       	cpc	r19, r1
     e02:	09 f4       	brne	.+2      	; 0xe06 <_Z8gray_adjhh+0x8a>
     e04:	70 c0       	rjmp	.+224    	; 0xee6 <_Z8gray_adjhh+0x16a>
     e06:	24 30       	cpi	r18, 0x04	; 4
     e08:	31 05       	cpc	r19, r1
     e0a:	19 f1       	breq	.+70     	; 0xe52 <_Z8gray_adjhh+0xd6>
     e0c:	8b c0       	rjmp	.+278    	; 0xf24 <_Z8gray_adjhh+0x1a8>
		{
			case output_normal:
			channel_buff[bot+i]=dmxcontrol[i].gray;
     e0e:	fa 01       	movw	r30, r20
     e10:	e0 5f       	subi	r30, 0xF0	; 240
     e12:	fd 4f       	sbci	r31, 0xFD	; 253
     e14:	ea 0f       	add	r30, r26
     e16:	fb 1f       	adc	r31, r27
     e18:	84 9f       	mul	r24, r20
     e1a:	90 01       	movw	r18, r0
     e1c:	85 9f       	mul	r24, r21
     e1e:	30 0d       	add	r19, r0
     e20:	11 24       	eor	r1, r1
     e22:	20 5e       	subi	r18, 0xE0	; 224
     e24:	3e 4f       	sbci	r19, 0xFE	; 254
     e26:	e9 01       	movw	r28, r18
     e28:	28 81       	ld	r18, Y
     e2a:	20 83       	st	Z, r18
			break;
     e2c:	7b c0       	rjmp	.+246    	; 0xf24 <_Z8gray_adjhh+0x1a8>
			case output_reverse:
			channel_buff[bot+i]=RESOLUS-dmxcontrol[i].gray;
     e2e:	fa 01       	movw	r30, r20
     e30:	e0 5f       	subi	r30, 0xF0	; 240
     e32:	fd 4f       	sbci	r31, 0xFD	; 253
     e34:	ea 0f       	add	r30, r26
     e36:	fb 1f       	adc	r31, r27
     e38:	84 9f       	mul	r24, r20
     e3a:	90 01       	movw	r18, r0
     e3c:	85 9f       	mul	r24, r21
     e3e:	30 0d       	add	r19, r0
     e40:	11 24       	eor	r1, r1
     e42:	20 5e       	subi	r18, 0xE0	; 224
     e44:	3e 4f       	sbci	r19, 0xFE	; 254
     e46:	e9 01       	movw	r28, r18
     e48:	28 81       	ld	r18, Y
     e4a:	df 2d       	mov	r29, r15
     e4c:	d2 1b       	sub	r29, r18
     e4e:	d0 83       	st	Z, r29
			break;
     e50:	69 c0       	rjmp	.+210    	; 0xf24 <_Z8gray_adjhh+0x1a8>
			case output_logic:
			if (dmxcontrol[i].gray>=(RESOLUS/2)) channel_buff[bot+i]=dmxcontrol[i].top_gray;
     e52:	84 9f       	mul	r24, r20
     e54:	f0 01       	movw	r30, r0
     e56:	85 9f       	mul	r24, r21
     e58:	f0 0d       	add	r31, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	e0 5e       	subi	r30, 0xE0	; 224
     e5e:	fe 4f       	sbci	r31, 0xFE	; 254
     e60:	20 81       	ld	r18, Z
     e62:	29 31       	cpi	r18, 0x19	; 25
     e64:	80 f0       	brcs	.+32     	; 0xe86 <_Z8gray_adjhh+0x10a>
     e66:	fa 01       	movw	r30, r20
     e68:	e0 5f       	subi	r30, 0xF0	; 240
     e6a:	fd 4f       	sbci	r31, 0xFD	; 253
     e6c:	ea 0f       	add	r30, r26
     e6e:	fb 1f       	adc	r31, r27
     e70:	84 9f       	mul	r24, r20
     e72:	90 01       	movw	r18, r0
     e74:	85 9f       	mul	r24, r21
     e76:	30 0d       	add	r19, r0
     e78:	11 24       	eor	r1, r1
     e7a:	20 5e       	subi	r18, 0xE0	; 224
     e7c:	3e 4f       	sbci	r19, 0xFE	; 254
     e7e:	e9 01       	movw	r28, r18
     e80:	29 81       	ldd	r18, Y+1	; 0x01
     e82:	20 83       	st	Z, r18
     e84:	4f c0       	rjmp	.+158    	; 0xf24 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=dmxcontrol[i].bot_gray;
     e86:	fa 01       	movw	r30, r20
     e88:	e0 5f       	subi	r30, 0xF0	; 240
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	ea 0f       	add	r30, r26
     e8e:	fb 1f       	adc	r31, r27
     e90:	84 9f       	mul	r24, r20
     e92:	90 01       	movw	r18, r0
     e94:	85 9f       	mul	r24, r21
     e96:	30 0d       	add	r19, r0
     e98:	11 24       	eor	r1, r1
     e9a:	20 5e       	subi	r18, 0xE0	; 224
     e9c:	3e 4f       	sbci	r19, 0xFE	; 254
     e9e:	e9 01       	movw	r28, r18
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	20 83       	st	Z, r18
     ea4:	3f c0       	rjmp	.+126    	; 0xf24 <_Z8gray_adjhh+0x1a8>
			break;
			case output_haft:
			_temp = dmxcontrol[i].gray;
     ea6:	84 9f       	mul	r24, r20
     ea8:	f0 01       	movw	r30, r0
     eaa:	85 9f       	mul	r24, r21
     eac:	f0 0d       	add	r31, r0
     eae:	11 24       	eor	r1, r1
     eb0:	e0 5e       	subi	r30, 0xE0	; 224
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	20 81       	ld	r18, Z
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=(((RESOLUS/2)-1)-_temp)*2+1;
     eb6:	29 31       	cpi	r18, 0x19	; 25
     eb8:	68 f4       	brcc	.+26     	; 0xed4 <_Z8gray_adjhh+0x158>
     eba:	40 5f       	subi	r20, 0xF0	; 240
     ebc:	5d 4f       	sbci	r21, 0xFD	; 253
     ebe:	fa 01       	movw	r30, r20
     ec0:	ea 0f       	add	r30, r26
     ec2:	fb 1f       	adc	r31, r27
     ec4:	a8 01       	movw	r20, r16
     ec6:	42 1b       	sub	r20, r18
     ec8:	51 09       	sbc	r21, r1
     eca:	9a 01       	movw	r18, r20
     ecc:	22 0f       	add	r18, r18
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	20 83       	st	Z, r18
     ed2:	28 c0       	rjmp	.+80     	; 0xf24 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=(_temp-(RESOLUS/2))*2+1;
     ed4:	40 5f       	subi	r20, 0xF0	; 240
     ed6:	5d 4f       	sbci	r21, 0xFD	; 253
     ed8:	fa 01       	movw	r30, r20
     eda:	ea 0f       	add	r30, r26
     edc:	fb 1f       	adc	r31, r27
     ede:	22 0f       	add	r18, r18
     ee0:	21 53       	subi	r18, 0x31	; 49
     ee2:	20 83       	st	Z, r18
     ee4:	1f c0       	rjmp	.+62     	; 0xf24 <_Z8gray_adjhh+0x1a8>
			break;
			case output_haft_reverse:
			_temp =dmxcontrol[i].gray;
     ee6:	84 9f       	mul	r24, r20
     ee8:	f0 01       	movw	r30, r0
     eea:	85 9f       	mul	r24, r21
     eec:	f0 0d       	add	r31, r0
     eee:	11 24       	eor	r1, r1
     ef0:	e0 5e       	subi	r30, 0xE0	; 224
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	20 81       	ld	r18, Z
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=RESOLUS-(((RESOLUS/2)-1-_temp)*2+1);
     ef6:	29 31       	cpi	r18, 0x19	; 25
     ef8:	48 f4       	brcc	.+18     	; 0xf0c <_Z8gray_adjhh+0x190>
     efa:	40 5f       	subi	r20, 0xF0	; 240
     efc:	5d 4f       	sbci	r21, 0xFD	; 253
     efe:	fa 01       	movw	r30, r20
     f00:	ea 0f       	add	r30, r26
     f02:	fb 1f       	adc	r31, r27
     f04:	22 0f       	add	r18, r18
     f06:	2f 5f       	subi	r18, 0xFF	; 255
     f08:	20 83       	st	Z, r18
     f0a:	0c c0       	rjmp	.+24     	; 0xf24 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=RESOLUS-((_temp-(RESOLUS/2))*2+1);
     f0c:	40 5f       	subi	r20, 0xF0	; 240
     f0e:	5d 4f       	sbci	r21, 0xFD	; 253
     f10:	fa 01       	movw	r30, r20
     f12:	ea 0f       	add	r30, r26
     f14:	fb 1f       	adc	r31, r27
     f16:	e6 01       	movw	r28, r12
     f18:	c2 1b       	sub	r28, r18
     f1a:	d1 09       	sbc	r29, r1
     f1c:	9e 01       	movw	r18, r28
     f1e:	22 0f       	add	r18, r18
     f20:	2f 5c       	subi	r18, 0xCF	; 207
     f22:	20 83       	st	Z, r18
 void gray_adj(uint8_t bot,uint8_t top)
{
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
     f24:	9f 5f       	subi	r25, 0xFF	; 255
     f26:	49 2f       	mov	r20, r25
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	46 17       	cp	r20, r22
     f2c:	57 07       	cpc	r21, r23
     f2e:	0c f4       	brge	.+2      	; 0xf32 <_Z8gray_adjhh+0x1b6>
     f30:	49 cf       	rjmp	.-366    	; 0xdc4 <_Z8gray_adjhh+0x48>
			break;
			default:
			break;
		}
	}
	dimmer_updata(channel_buff);
     f32:	80 e1       	ldi	r24, 0x10	; 16
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_Z13dimmer_updataPKh>
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <_Z8delay_msm>:


void delay_ms(uint32_t val)
{
	
	ms_counter = val;
     f4a:	60 93 04 01 	sts	0x0104, r22
     f4e:	70 93 05 01 	sts	0x0105, r23
     f52:	80 93 06 01 	sts	0x0106, r24
     f56:	90 93 07 01 	sts	0x0107, r25
	while(ms_counter!=0){};
     f5a:	80 91 04 01 	lds	r24, 0x0104
     f5e:	90 91 05 01 	lds	r25, 0x0105
     f62:	a0 91 06 01 	lds	r26, 0x0106
     f66:	b0 91 07 01 	lds	r27, 0x0107
     f6a:	89 2b       	or	r24, r25
     f6c:	8a 2b       	or	r24, r26
     f6e:	8b 2b       	or	r24, r27
     f70:	a1 f7       	brne	.-24     	; 0xf5a <_Z8delay_msm+0x10>
}
     f72:	08 95       	ret

00000f74 <_Z11timer0_initv>:
	return 1;
}

void timer0_init(void)
{
	TCCR0B |= (5 << CS00);
     f74:	85 b5       	in	r24, 0x25	; 37
     f76:	85 60       	ori	r24, 0x05	; 5
     f78:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
     f7a:	ee e6       	ldi	r30, 0x6E	; 110
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	80 83       	st	Z, r24
	TIFR0 &=~(1<<TOV0);
     f84:	a8 98       	cbi	0x15, 0	; 21
	TCNT0  = 0;
     f86:	16 bc       	out	0x26, r1	; 38
     f88:	08 95       	ret

00000f8a <_Z12rota_disablev>:
			}
	}
}

void rota_enable(void){rota_en = 1;}
void rota_disable(void){rota_en = 0;}
     f8a:	10 92 0c 01 	sts	0x010C, r1
     f8e:	08 95       	ret

00000f90 <_Z18rota_group_defaultv>:
     f90:	10 92 0c 01 	sts	0x010C, r1
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
}

void rota_group_set(uint8_t group_number,uint8_t g_bot,uint8_t g_top,uint8_t speed,uint8_t dir,uint8_t _enable)
{
	if(g_top>=MAX_ROTA_CHANNEL) return;
	rota_ctr[group_number].G_bot = g_bot;
     f98:	c9 01       	movw	r24, r18
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	fc 01       	movw	r30, r24
     fa0:	e2 0f       	add	r30, r18
     fa2:	f3 1f       	adc	r31, r19
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e2 5f       	subi	r30, 0xF2	; 242
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	14 82       	std	Z+4, r1	; 0x04
	rota_ctr[group_number].G_top = g_top;
     fae:	15 82       	std	Z+5, r1	; 0x05
	rota_ctr[group_number].G_dir = dir;
     fb0:	11 82       	std	Z+1, r1	; 0x01
	rota_ctr[group_number].G_enable = _enable;
     fb2:	10 82       	st	Z, r1
	rota_ctr[group_number].G_speed = speed;
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	e2 5f       	subi	r30, 0xF2	; 242
     fc0:	fe 4f       	sbci	r31, 0xFE	; 254
     fc2:	12 82       	std	Z+2, r1	; 0x02
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
void rota_disable(void){rota_en = 0;}

void rota_group_default(void)
{
	rota_disable();
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++) rota_group_set(i,0,0,0,0,0);	
     fc8:	23 30       	cpi	r18, 0x03	; 3
     fca:	31 05       	cpc	r19, r1
     fcc:	29 f7       	brne	.-54     	; 0xf98 <_Z18rota_group_defaultv+0x8>
}
     fce:	08 95       	ret

00000fd0 <_Z4rotajjh>:

void rota(uint16_t bot,uint16_t top,uint8_t dir)
{
	uint8_t _buff;
	
	if (dir)
     fd0:	44 23       	and	r20, r20
     fd2:	d9 f0       	breq	.+54     	; 0x100a <_Z4rotajjh+0x3a>
	{
		_buff=rota_buff[bot];
     fd4:	fc 01       	movw	r30, r24
     fd6:	e0 5e       	subi	r30, 0xE0	; 224
     fd8:	fd 4f       	sbci	r31, 0xFD	; 253
     fda:	50 81       	ld	r21, Z
		for (uint16_t i = 0;i<(top-bot);i++)
     fdc:	68 17       	cp	r22, r24
     fde:	79 07       	cpc	r23, r25
     fe0:	79 f0       	breq	.+30     	; 0x1000 <_Z4rotajjh+0x30>
		{
			rota_buff[i+bot]=rota_buff[bot+i+1];
     fe2:	9c 01       	movw	r18, r24
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	f9 01       	movw	r30, r18
     fea:	e0 5e       	subi	r30, 0xE0	; 224
     fec:	fd 4f       	sbci	r31, 0xFD	; 253
     fee:	40 81       	ld	r20, Z
     ff0:	fc 01       	movw	r30, r24
     ff2:	e0 5e       	subi	r30, 0xE0	; 224
     ff4:	fd 4f       	sbci	r31, 0xFD	; 253
     ff6:	40 83       	st	Z, r20
     ff8:	c9 01       	movw	r24, r18
	uint8_t _buff;
	
	if (dir)
	{
		_buff=rota_buff[bot];
		for (uint16_t i = 0;i<(top-bot);i++)
     ffa:	26 17       	cp	r18, r22
     ffc:	37 07       	cpc	r19, r23
     ffe:	89 f7       	brne	.-30     	; 0xfe2 <_Z4rotajjh+0x12>
		{
			rota_buff[i+bot]=rota_buff[bot+i+1];
		}
		
		rota_buff[top] = _buff;
    1000:	fb 01       	movw	r30, r22
    1002:	e0 5e       	subi	r30, 0xE0	; 224
    1004:	fd 4f       	sbci	r31, 0xFD	; 253
    1006:	50 83       	st	Z, r21
    1008:	08 95       	ret
	}
	
	else
	{
		_buff=rota_buff[top];
    100a:	fb 01       	movw	r30, r22
    100c:	e0 5e       	subi	r30, 0xE0	; 224
    100e:	fd 4f       	sbci	r31, 0xFD	; 253
    1010:	50 81       	ld	r21, Z
		for (uint16_t i = 0;i<(top-bot);i++)
    1012:	68 17       	cp	r22, r24
    1014:	79 07       	cpc	r23, r25
    1016:	79 f0       	breq	.+30     	; 0x1036 <_Z4rotajjh+0x66>
		{
			rota_buff[top-i]=rota_buff[top-1-i];
    1018:	9b 01       	movw	r18, r22
    101a:	21 50       	subi	r18, 0x01	; 1
    101c:	31 09       	sbc	r19, r1
    101e:	f9 01       	movw	r30, r18
    1020:	e0 5e       	subi	r30, 0xE0	; 224
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	40 81       	ld	r20, Z
    1026:	fb 01       	movw	r30, r22
    1028:	e0 5e       	subi	r30, 0xE0	; 224
    102a:	fd 4f       	sbci	r31, 0xFD	; 253
    102c:	40 83       	st	Z, r20
    102e:	b9 01       	movw	r22, r18
	}
	
	else
	{
		_buff=rota_buff[top];
		for (uint16_t i = 0;i<(top-bot);i++)
    1030:	28 17       	cp	r18, r24
    1032:	39 07       	cpc	r19, r25
    1034:	89 f7       	brne	.-30     	; 0x1018 <_Z4rotajjh+0x48>
		{
			rota_buff[top-i]=rota_buff[top-1-i];
		}
		rota_buff[bot] = _buff;
    1036:	fc 01       	movw	r30, r24
    1038:	e0 5e       	subi	r30, 0xE0	; 224
    103a:	fd 4f       	sbci	r31, 0xFD	; 253
    103c:	50 83       	st	Z, r21
    103e:	08 95       	ret

00001040 <_Z12rota_managerv>:
{
	rota_group_set(_slot,rota_ctr[_slot].G_bot,rota_ctr[_slot].G_top,1,left,_DISABLE);
}

void rota_manager(void)
{
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	d0 e0       	ldi	r29, 0x00	; 0
				else
				{
					rota(rota_ctr[i].G_bot,rota_ctr[i].G_top,rota_ctr[i].G_dir);
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
    1056:	f1 2c       	mov	r15, r1
    1058:	00 e0       	ldi	r16, 0x00	; 0
    105a:	10 e0       	ldi	r17, 0x00	; 0

void rota_manager(void)
{
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++)
	{
			if (rota_ctr[i].G_enable)
    105c:	6e 01       	movw	r12, r28
    105e:	fe 01       	movw	r30, r28
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ec 0f       	add	r30, r28
    1066:	fd 1f       	adc	r31, r29
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	e2 5f       	subi	r30, 0xF2	; 242
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <_Z12rota_managerv+0x38>
    1076:	6e c0       	rjmp	.+220    	; 0x1154 <_Z12rota_managerv+0x114>
			{
				if (rota_ctr[i].G_counter!=0) rota_ctr[i].G_counter--;
    1078:	fe 01       	movw	r30, r28
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ec 0f       	add	r30, r28
    1080:	fd 1f       	adc	r31, r29
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e2 5f       	subi	r30, 0xF2	; 242
    1088:	fe 4f       	sbci	r31, 0xFE	; 254
    108a:	83 81       	ldd	r24, Z+3	; 0x03
    108c:	88 23       	and	r24, r24
    108e:	69 f0       	breq	.+26     	; 0x10aa <_Z12rota_managerv+0x6a>
    1090:	fe 01       	movw	r30, r28
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	ec 0f       	add	r30, r28
    1098:	fd 1f       	adc	r31, r29
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e2 5f       	subi	r30, 0xF2	; 242
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	83 81       	ldd	r24, Z+3	; 0x03
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	83 83       	std	Z+3, r24	; 0x03
    10a8:	1c c0       	rjmp	.+56     	; 0x10e2 <_Z12rota_managerv+0xa2>
				else
				{
					rota(rota_ctr[i].G_bot,rota_ctr[i].G_top,rota_ctr[i].G_dir);
    10aa:	5e 01       	movw	r10, r28
    10ac:	aa 0c       	add	r10, r10
    10ae:	bb 1c       	adc	r11, r11
    10b0:	ac 0e       	add	r10, r28
    10b2:	bd 1e       	adc	r11, r29
    10b4:	c5 01       	movw	r24, r10
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 5f       	subi	r18, 0xF2	; 242
    10be:	3e 4f       	sbci	r19, 0xFE	; 254
    10c0:	59 01       	movw	r10, r18
    10c2:	d9 01       	movw	r26, r18
    10c4:	11 96       	adiw	r26, 0x01	; 1
    10c6:	4c 91       	ld	r20, X
    10c8:	11 97       	sbiw	r26, 0x01	; 1
    10ca:	15 96       	adiw	r26, 0x05	; 5
    10cc:	6c 91       	ld	r22, X
    10ce:	15 97       	sbiw	r26, 0x05	; 5
    10d0:	14 96       	adiw	r26, 0x04	; 4
    10d2:	8c 91       	ld	r24, X
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_Z4rotajjh>
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
    10dc:	f5 01       	movw	r30, r10
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	83 83       	std	Z+3, r24	; 0x03
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
    10e2:	f6 01       	movw	r30, r12
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	ec 0d       	add	r30, r12
    10ea:	fd 1d       	adc	r31, r13
    10ec:	ee 0f       	add	r30, r30
    10ee:	ff 1f       	adc	r31, r31
    10f0:	e2 5f       	subi	r30, 0xF2	; 242
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	85 81       	ldd	r24, Z+5	; 0x05
    10f6:	24 81       	ldd	r18, Z+4	; 0x04
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	82 1b       	sub	r24, r18
    10fc:	91 09       	sbc	r25, r1
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	18 16       	cp	r1, r24
    1102:	19 06       	cpc	r1, r25
    1104:	3c f5       	brge	.+78     	; 0x1154 <_Z12rota_managerv+0x114>
    1106:	8f 2d       	mov	r24, r15
    1108:	90 2f       	mov	r25, r16
    110a:	41 2f       	mov	r20, r17
    110c:	df 01       	movw	r26, r30
    110e:	34 96       	adiw	r30, 0x04	; 4
    1110:	6d 01       	movw	r12, r26
    1112:	25 e0       	ldi	r18, 0x05	; 5
    1114:	c2 0e       	add	r12, r18
    1116:	d1 1c       	adc	r13, r1
    1118:	50 81       	ld	r21, Z
    111a:	20 81       	ld	r18, Z
    111c:	bc 01       	movw	r22, r24
    111e:	62 0f       	add	r22, r18
    1120:	71 1d       	adc	r23, r1
    1122:	9b 01       	movw	r18, r22
    1124:	20 5e       	subi	r18, 0xE0	; 224
    1126:	3d 4f       	sbci	r19, 0xFD	; 253
    1128:	d9 01       	movw	r26, r18
    112a:	2c 91       	ld	r18, X
    112c:	80 5f       	subi	r24, 0xF0	; 240
    112e:	9d 4f       	sbci	r25, 0xFD	; 253
    1130:	85 0f       	add	r24, r21
    1132:	91 1d       	adc	r25, r1
    1134:	dc 01       	movw	r26, r24
    1136:	2c 93       	st	X, r18
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	84 2f       	mov	r24, r20
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	d6 01       	movw	r26, r12
    1140:	2c 91       	ld	r18, X
    1142:	50 81       	ld	r21, Z
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	25 1b       	sub	r18, r21
    1148:	31 09       	sbc	r19, r1
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	82 17       	cp	r24, r18
    1150:	93 07       	cpc	r25, r19
    1152:	14 f3       	brlt	.-60     	; 0x1118 <_Z12rota_managerv+0xd8>
    1154:	21 96       	adiw	r28, 0x01	; 1
	rota_group_set(_slot,rota_ctr[_slot].G_bot,rota_ctr[_slot].G_top,1,left,_DISABLE);
}

void rota_manager(void)
{
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++)
    1156:	c3 30       	cpi	r28, 0x03	; 3
    1158:	d1 05       	cpc	r29, r1
    115a:	09 f0       	breq	.+2      	; 0x115e <_Z12rota_managerv+0x11e>
    115c:	7f cf       	rjmp	.-258    	; 0x105c <_Z12rota_managerv+0x1c>
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
			}
	}
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	08 95       	ret

00001172 <__vector_16>:
}



ISR(TIMER0_OVF_vect)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
	wdt_reset();
    119c:	a8 95       	wdr
	TCNT0 = 240;
    119e:	80 ef       	ldi	r24, 0xF0	; 240
    11a0:	86 bd       	out	0x26, r24	; 38
	if(ms_counter!=0) ms_counter--;
    11a2:	80 91 04 01 	lds	r24, 0x0104
    11a6:	90 91 05 01 	lds	r25, 0x0105
    11aa:	a0 91 06 01 	lds	r26, 0x0106
    11ae:	b0 91 07 01 	lds	r27, 0x0107
    11b2:	89 2b       	or	r24, r25
    11b4:	8a 2b       	or	r24, r26
    11b6:	8b 2b       	or	r24, r27
    11b8:	99 f0       	breq	.+38     	; 0x11e0 <__vector_16+0x6e>
    11ba:	80 91 04 01 	lds	r24, 0x0104
    11be:	90 91 05 01 	lds	r25, 0x0105
    11c2:	a0 91 06 01 	lds	r26, 0x0106
    11c6:	b0 91 07 01 	lds	r27, 0x0107
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	a1 09       	sbc	r26, r1
    11ce:	b1 09       	sbc	r27, r1
    11d0:	80 93 04 01 	sts	0x0104, r24
    11d4:	90 93 05 01 	sts	0x0105, r25
    11d8:	a0 93 06 01 	sts	0x0106, r26
    11dc:	b0 93 07 01 	sts	0x0107, r27
	if (en)
    11e0:	80 91 0d 01 	lds	r24, 0x010D
    11e4:	88 23       	and	r24, r24
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__vector_16+0x78>
    11e8:	ed c1       	rjmp	.+986    	; 0x15c4 <__vector_16+0x452>
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
    11ea:	80 91 08 01 	lds	r24, 0x0108
    11ee:	90 91 09 01 	lds	r25, 0x0109
    11f2:	20 91 0a 01 	lds	r18, 0x010A
    11f6:	30 91 0b 01 	lds	r19, 0x010B
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	09 f4       	brne	.+2      	; 0x1204 <__vector_16+0x92>
    1202:	d6 c1       	rjmp	.+940    	; 0x15b0 <__vector_16+0x43e>
    1204:	20 e0       	ldi	r18, 0x00	; 0
		{
			switch(dmxcontrol[i].stage)
    1206:	3f e0       	ldi	r19, 0x0F	; 15
				if (dmxcontrol[i].counter==0)
				{
					if (dmxcontrol[i].gray >=dmxcontrol[i].top_gray)
					{
						dmxcontrol[i].counter = dmxcontrol[i].hold;
						dmxcontrol[i].stage = 3;
    1208:	03 e0       	ldi	r16, 0x03	; 3
				else dmxcontrol[i].counter--;
				break;
				case 4:
				if (dmxcontrol[i].counter==0)
				{
					if (dmxcontrol[i].gray <=dmxcontrol[i].bot_gray) dmxcontrol[i].stage = 5;
    120a:	d5 e0       	ldi	r29, 0x05	; 5
				break;
				case 3:
				if (dmxcontrol[i].counter==0)
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
					dmxcontrol[i].stage = 4;
    120c:	c4 e0       	ldi	r28, 0x04	; 4
						{
							dmxcontrol[i].stage = 5;
							if (dmxcontrol[i].gray>dmxcontrol[i].bot_gray) dmxcontrol[i].gray--;
							else
							{
								dmxcontrol[i].stage = 255;
    120e:	1f ef       	ldi	r17, 0xFF	; 255
		{
			switch(dmxcontrol[i].stage)
			{
				case 0:
				dmxcontrol[i].counter = dmxcontrol[i].on_delay;
				dmxcontrol[i].stage = 1;
    1210:	a1 e0       	ldi	r26, 0x01	; 1
				break;
				case 1:
				if (dmxcontrol[i].counter==0)
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
					dmxcontrol[i].stage = 2;
    1212:	b2 e0       	ldi	r27, 0x02	; 2
	if(ms_counter!=0) ms_counter--;
	if (en)
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
		{
			switch(dmxcontrol[i].stage)
    1214:	42 2f       	mov	r20, r18
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	34 9f       	mul	r19, r20
    121a:	f0 01       	movw	r30, r0
    121c:	35 9f       	mul	r19, r21
    121e:	f0 0d       	add	r31, r0
    1220:	11 24       	eor	r1, r1
    1222:	e0 5e       	subi	r30, 0xE0	; 224
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	83 85       	ldd	r24, Z+11	; 0x0b
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	09 f4       	brne	.+2      	; 0x122e <__vector_16+0xbc>
    122c:	3f c0       	rjmp	.+126    	; 0x12ac <__vector_16+0x13a>
    122e:	28 f4       	brcc	.+10     	; 0x123a <__vector_16+0xc8>
    1230:	88 23       	and	r24, r24
    1232:	61 f0       	breq	.+24     	; 0x124c <__vector_16+0xda>
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	b9 f0       	breq	.+46     	; 0x1266 <__vector_16+0xf4>
    1238:	a9 c1       	rjmp	.+850    	; 0x158c <__vector_16+0x41a>
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	09 f4       	brne	.+2      	; 0x1240 <__vector_16+0xce>
    123e:	95 c0       	rjmp	.+298    	; 0x136a <__vector_16+0x1f8>
    1240:	08 f4       	brcc	.+2      	; 0x1244 <__vector_16+0xd2>
    1242:	70 c0       	rjmp	.+224    	; 0x1324 <__vector_16+0x1b2>
    1244:	85 30       	cpi	r24, 0x05	; 5
    1246:	09 f4       	brne	.+2      	; 0x124a <__vector_16+0xd8>
    1248:	cf c0       	rjmp	.+414    	; 0x13e8 <__vector_16+0x276>
    124a:	a0 c1       	rjmp	.+832    	; 0x158c <__vector_16+0x41a>
			{
				case 0:
				dmxcontrol[i].counter = dmxcontrol[i].on_delay;
    124c:	34 9f       	mul	r19, r20
    124e:	f0 01       	movw	r30, r0
    1250:	35 9f       	mul	r19, r21
    1252:	f0 0d       	add	r31, r0
    1254:	11 24       	eor	r1, r1
    1256:	e0 5e       	subi	r30, 0xE0	; 224
    1258:	fe 4f       	sbci	r31, 0xFE	; 254
    125a:	85 81       	ldd	r24, Z+5	; 0x05
    125c:	96 81       	ldd	r25, Z+6	; 0x06
    125e:	94 83       	std	Z+4, r25	; 0x04
    1260:	83 83       	std	Z+3, r24	; 0x03
				dmxcontrol[i].stage = 1;
    1262:	a3 87       	std	Z+11, r26	; 0x0b
				break;
    1264:	93 c1       	rjmp	.+806    	; 0x158c <__vector_16+0x41a>
				case 1:
				if (dmxcontrol[i].counter==0)
    1266:	34 9f       	mul	r19, r20
    1268:	f0 01       	movw	r30, r0
    126a:	35 9f       	mul	r19, r21
    126c:	f0 0d       	add	r31, r0
    126e:	11 24       	eor	r1, r1
    1270:	e0 5e       	subi	r30, 0xE0	; 224
    1272:	fe 4f       	sbci	r31, 0xFE	; 254
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	94 81       	ldd	r25, Z+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	69 f4       	brne	.+26     	; 0x1296 <__vector_16+0x124>
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
    127c:	34 9f       	mul	r19, r20
    127e:	f0 01       	movw	r30, r0
    1280:	35 9f       	mul	r19, r21
    1282:	f0 0d       	add	r31, r0
    1284:	11 24       	eor	r1, r1
    1286:	e0 5e       	subi	r30, 0xE0	; 224
    1288:	fe 4f       	sbci	r31, 0xFE	; 254
    128a:	87 81       	ldd	r24, Z+7	; 0x07
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	94 83       	std	Z+4, r25	; 0x04
    1290:	83 83       	std	Z+3, r24	; 0x03
					dmxcontrol[i].stage = 2;
    1292:	b3 87       	std	Z+11, r27	; 0x0b
    1294:	7b c1       	rjmp	.+758    	; 0x158c <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    1296:	34 9f       	mul	r19, r20
    1298:	f0 01       	movw	r30, r0
    129a:	35 9f       	mul	r19, r21
    129c:	f0 0d       	add	r31, r0
    129e:	11 24       	eor	r1, r1
    12a0:	e0 5e       	subi	r30, 0xE0	; 224
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	94 83       	std	Z+4, r25	; 0x04
    12a8:	83 83       	std	Z+3, r24	; 0x03
    12aa:	70 c1       	rjmp	.+736    	; 0x158c <__vector_16+0x41a>
				break;
				case 2:
				
				if (dmxcontrol[i].counter==0)
    12ac:	34 9f       	mul	r19, r20
    12ae:	f0 01       	movw	r30, r0
    12b0:	35 9f       	mul	r19, r21
    12b2:	f0 0d       	add	r31, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	e0 5e       	subi	r30, 0xE0	; 224
    12b8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ba:	83 81       	ldd	r24, Z+3	; 0x03
    12bc:	94 81       	ldd	r25, Z+4	; 0x04
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	31 f5       	brne	.+76     	; 0x130e <__vector_16+0x19c>
				{
					if (dmxcontrol[i].gray >=dmxcontrol[i].top_gray)
    12c2:	34 9f       	mul	r19, r20
    12c4:	f0 01       	movw	r30, r0
    12c6:	35 9f       	mul	r19, r21
    12c8:	f0 0d       	add	r31, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	e0 5e       	subi	r30, 0xE0	; 224
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	89 17       	cp	r24, r25
    12d6:	68 f0       	brcs	.+26     	; 0x12f2 <__vector_16+0x180>
					{
						dmxcontrol[i].counter = dmxcontrol[i].hold;
    12d8:	34 9f       	mul	r19, r20
    12da:	f0 01       	movw	r30, r0
    12dc:	35 9f       	mul	r19, r21
    12de:	f0 0d       	add	r31, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	e0 5e       	subi	r30, 0xE0	; 224
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	80 85       	ldd	r24, Z+8	; 0x08
    12e8:	91 85       	ldd	r25, Z+9	; 0x09
    12ea:	94 83       	std	Z+4, r25	; 0x04
    12ec:	83 83       	std	Z+3, r24	; 0x03
						dmxcontrol[i].stage = 3;
    12ee:	03 87       	std	Z+11, r16	; 0x0b
						break;
    12f0:	4d c1       	rjmp	.+666    	; 0x158c <__vector_16+0x41a>
					}
					else dmxcontrol[i].gray++;
    12f2:	34 9f       	mul	r19, r20
    12f4:	f0 01       	movw	r30, r0
    12f6:	35 9f       	mul	r19, r21
    12f8:	f0 0d       	add	r31, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	e0 5e       	subi	r30, 0xE0	; 224
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
    1304:	87 81       	ldd	r24, Z+7	; 0x07
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	94 83       	std	Z+4, r25	; 0x04
    130a:	83 83       	std	Z+3, r24	; 0x03
    130c:	3f c1       	rjmp	.+638    	; 0x158c <__vector_16+0x41a>
				}
				
				else dmxcontrol[i].counter--;
    130e:	34 9f       	mul	r19, r20
    1310:	f0 01       	movw	r30, r0
    1312:	35 9f       	mul	r19, r21
    1314:	f0 0d       	add	r31, r0
    1316:	11 24       	eor	r1, r1
    1318:	e0 5e       	subi	r30, 0xE0	; 224
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	94 83       	std	Z+4, r25	; 0x04
    1320:	83 83       	std	Z+3, r24	; 0x03
    1322:	34 c1       	rjmp	.+616    	; 0x158c <__vector_16+0x41a>
				break;
				case 3:
				if (dmxcontrol[i].counter==0)
    1324:	34 9f       	mul	r19, r20
    1326:	f0 01       	movw	r30, r0
    1328:	35 9f       	mul	r19, r21
    132a:	f0 0d       	add	r31, r0
    132c:	11 24       	eor	r1, r1
    132e:	e0 5e       	subi	r30, 0xE0	; 224
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	83 81       	ldd	r24, Z+3	; 0x03
    1334:	94 81       	ldd	r25, Z+4	; 0x04
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f4       	brne	.+26     	; 0x1354 <__vector_16+0x1e2>
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    133a:	34 9f       	mul	r19, r20
    133c:	f0 01       	movw	r30, r0
    133e:	35 9f       	mul	r19, r21
    1340:	f0 0d       	add	r31, r0
    1342:	11 24       	eor	r1, r1
    1344:	e0 5e       	subi	r30, 0xE0	; 224
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	82 85       	ldd	r24, Z+10	; 0x0a
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	94 83       	std	Z+4, r25	; 0x04
    134e:	83 83       	std	Z+3, r24	; 0x03
					dmxcontrol[i].stage = 4;
    1350:	c3 87       	std	Z+11, r28	; 0x0b
    1352:	1c c1       	rjmp	.+568    	; 0x158c <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    1354:	34 9f       	mul	r19, r20
    1356:	f0 01       	movw	r30, r0
    1358:	35 9f       	mul	r19, r21
    135a:	f0 0d       	add	r31, r0
    135c:	11 24       	eor	r1, r1
    135e:	e0 5e       	subi	r30, 0xE0	; 224
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	94 83       	std	Z+4, r25	; 0x04
    1366:	83 83       	std	Z+3, r24	; 0x03
    1368:	11 c1       	rjmp	.+546    	; 0x158c <__vector_16+0x41a>
				break;
				case 4:
				if (dmxcontrol[i].counter==0)
    136a:	34 9f       	mul	r19, r20
    136c:	f0 01       	movw	r30, r0
    136e:	35 9f       	mul	r19, r21
    1370:	f0 0d       	add	r31, r0
    1372:	11 24       	eor	r1, r1
    1374:	e0 5e       	subi	r30, 0xE0	; 224
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	83 81       	ldd	r24, Z+3	; 0x03
    137a:	94 81       	ldd	r25, Z+4	; 0x04
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	49 f5       	brne	.+82     	; 0x13d2 <__vector_16+0x260>
				{
					if (dmxcontrol[i].gray <=dmxcontrol[i].bot_gray) dmxcontrol[i].stage = 5;
    1380:	34 9f       	mul	r19, r20
    1382:	f0 01       	movw	r30, r0
    1384:	35 9f       	mul	r19, r21
    1386:	f0 0d       	add	r31, r0
    1388:	11 24       	eor	r1, r1
    138a:	e0 5e       	subi	r30, 0xE0	; 224
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	80 81       	ld	r24, Z
    1390:	92 81       	ldd	r25, Z+2	; 0x02
    1392:	98 17       	cp	r25, r24
    1394:	48 f0       	brcs	.+18     	; 0x13a8 <__vector_16+0x236>
    1396:	34 9f       	mul	r19, r20
    1398:	f0 01       	movw	r30, r0
    139a:	35 9f       	mul	r19, r21
    139c:	f0 0d       	add	r31, r0
    139e:	11 24       	eor	r1, r1
    13a0:	e0 5e       	subi	r30, 0xE0	; 224
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	d3 87       	std	Z+11, r29	; 0x0b
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <__vector_16+0x248>
					else dmxcontrol[i].gray--;
    13a8:	34 9f       	mul	r19, r20
    13aa:	f0 01       	movw	r30, r0
    13ac:	35 9f       	mul	r19, r21
    13ae:	f0 0d       	add	r31, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	e0 5e       	subi	r30, 0xE0	; 224
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    13ba:	34 9f       	mul	r19, r20
    13bc:	f0 01       	movw	r30, r0
    13be:	35 9f       	mul	r19, r21
    13c0:	f0 0d       	add	r31, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	e0 5e       	subi	r30, 0xE0	; 224
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	82 85       	ldd	r24, Z+10	; 0x0a
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	94 83       	std	Z+4, r25	; 0x04
    13ce:	83 83       	std	Z+3, r24	; 0x03
    13d0:	dd c0       	rjmp	.+442    	; 0x158c <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    13d2:	34 9f       	mul	r19, r20
    13d4:	f0 01       	movw	r30, r0
    13d6:	35 9f       	mul	r19, r21
    13d8:	f0 0d       	add	r31, r0
    13da:	11 24       	eor	r1, r1
    13dc:	e0 5e       	subi	r30, 0xE0	; 224
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	94 83       	std	Z+4, r25	; 0x04
    13e4:	83 83       	std	Z+3, r24	; 0x03
    13e6:	d2 c0       	rjmp	.+420    	; 0x158c <__vector_16+0x41a>
				break;
				case 5:
				switch (dmxcontrol[i].mode&0x0f)
    13e8:	34 9f       	mul	r19, r20
    13ea:	f0 01       	movw	r30, r0
    13ec:	35 9f       	mul	r19, r21
    13ee:	f0 0d       	add	r31, r0
    13f0:	11 24       	eor	r1, r1
    13f2:	e0 5e       	subi	r30, 0xE0	; 224
    13f4:	fe 4f       	sbci	r31, 0xFE	; 254
    13f6:	86 85       	ldd	r24, Z+14	; 0x0e
    13f8:	8f 70       	andi	r24, 0x0F	; 15
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	71 f0       	breq	.+28     	; 0x141a <__vector_16+0x2a8>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__vector_16+0x296>
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	09 f4       	brne	.+2      	; 0x1406 <__vector_16+0x294>
    1404:	62 c0       	rjmp	.+196    	; 0x14ca <__vector_16+0x358>
    1406:	b9 c0       	rjmp	.+370    	; 0x157a <__vector_16+0x408>
				{
					case 0: //repeat to minus
					dmxcontrol[i].stage = 0;
    1408:	34 9f       	mul	r19, r20
    140a:	f0 01       	movw	r30, r0
    140c:	35 9f       	mul	r19, r21
    140e:	f0 0d       	add	r31, r0
    1410:	11 24       	eor	r1, r1
    1412:	e0 5e       	subi	r30, 0xE0	; 224
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	13 86       	std	Z+11, r1	; 0x0b
					break;
    1418:	b9 c0       	rjmp	.+370    	; 0x158c <__vector_16+0x41a>
					
					case 1: //repeat n time and off
					
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
    141a:	34 9f       	mul	r19, r20
    141c:	f0 01       	movw	r30, r0
    141e:	35 9f       	mul	r19, r21
    1420:	f0 0d       	add	r31, r0
    1422:	11 24       	eor	r1, r1
    1424:	e0 5e       	subi	r30, 0xE0	; 224
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	85 85       	ldd	r24, Z+13	; 0x0d
    142a:	94 85       	ldd	r25, Z+12	; 0x0c
    142c:	89 17       	cp	r24, r25
    142e:	08 f4       	brcc	.+2      	; 0x1432 <__vector_16+0x2c0>
    1430:	41 c0       	rjmp	.+130    	; 0x14b4 <__vector_16+0x342>
					{
						if (dmxcontrol[i].counter==0)
    1432:	34 9f       	mul	r19, r20
    1434:	f0 01       	movw	r30, r0
    1436:	35 9f       	mul	r19, r21
    1438:	f0 0d       	add	r31, r0
    143a:	11 24       	eor	r1, r1
    143c:	e0 5e       	subi	r30, 0xE0	; 224
    143e:	fe 4f       	sbci	r31, 0xFE	; 254
    1440:	83 81       	ldd	r24, Z+3	; 0x03
    1442:	94 81       	ldd	r25, Z+4	; 0x04
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	59 f5       	brne	.+86     	; 0x149e <__vector_16+0x32c>
						{
							dmxcontrol[i].stage = 5;
    1448:	34 9f       	mul	r19, r20
    144a:	f0 01       	movw	r30, r0
    144c:	35 9f       	mul	r19, r21
    144e:	f0 0d       	add	r31, r0
    1450:	11 24       	eor	r1, r1
    1452:	e0 5e       	subi	r30, 0xE0	; 224
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	d3 87       	std	Z+11, r29	; 0x0b
							if (dmxcontrol[i].gray>dmxcontrol[i].bot_gray) dmxcontrol[i].gray--;
    1458:	80 81       	ld	r24, Z
    145a:	92 81       	ldd	r25, Z+2	; 0x02
    145c:	98 17       	cp	r25, r24
    145e:	50 f4       	brcc	.+20     	; 0x1474 <__vector_16+0x302>
    1460:	34 9f       	mul	r19, r20
    1462:	f0 01       	movw	r30, r0
    1464:	35 9f       	mul	r19, r21
    1466:	f0 0d       	add	r31, r0
    1468:	11 24       	eor	r1, r1
    146a:	e0 5e       	subi	r30, 0xE0	; 224
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	81 50       	subi	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <__vector_16+0x314>
							else
							{
								dmxcontrol[i].stage = 255;
    1474:	34 9f       	mul	r19, r20
    1476:	f0 01       	movw	r30, r0
    1478:	35 9f       	mul	r19, r21
    147a:	f0 0d       	add	r31, r0
    147c:	11 24       	eor	r1, r1
    147e:	e0 5e       	subi	r30, 0xE0	; 224
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
    1484:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    1486:	34 9f       	mul	r19, r20
    1488:	f0 01       	movw	r30, r0
    148a:	35 9f       	mul	r19, r21
    148c:	f0 0d       	add	r31, r0
    148e:	11 24       	eor	r1, r1
    1490:	e0 5e       	subi	r30, 0xE0	; 224
    1492:	fe 4f       	sbci	r31, 0xFE	; 254
    1494:	82 85       	ldd	r24, Z+10	; 0x0a
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	94 83       	std	Z+4, r25	; 0x04
    149a:	83 83       	std	Z+3, r24	; 0x03
    149c:	77 c0       	rjmp	.+238    	; 0x158c <__vector_16+0x41a>
						}
						else dmxcontrol[i].counter--;
    149e:	34 9f       	mul	r19, r20
    14a0:	f0 01       	movw	r30, r0
    14a2:	35 9f       	mul	r19, r21
    14a4:	f0 0d       	add	r31, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	e0 5e       	subi	r30, 0xE0	; 224
    14aa:	fe 4f       	sbci	r31, 0xFE	; 254
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	94 83       	std	Z+4, r25	; 0x04
    14b0:	83 83       	std	Z+3, r24	; 0x03
    14b2:	6c c0       	rjmp	.+216    	; 0x158c <__vector_16+0x41a>
					}
					else
					{
						dmxcontrol[i].stage =0;
    14b4:	34 9f       	mul	r19, r20
    14b6:	f0 01       	movw	r30, r0
    14b8:	35 9f       	mul	r19, r21
    14ba:	f0 0d       	add	r31, r0
    14bc:	11 24       	eor	r1, r1
    14be:	e0 5e       	subi	r30, 0xE0	; 224
    14c0:	fe 4f       	sbci	r31, 0xFE	; 254
    14c2:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	85 87       	std	Z+13, r24	; 0x0d
    14c8:	61 c0       	rjmp	.+194    	; 0x158c <__vector_16+0x41a>
					}
					
					break;
					case 2://repeat n time and on
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
    14ca:	34 9f       	mul	r19, r20
    14cc:	f0 01       	movw	r30, r0
    14ce:	35 9f       	mul	r19, r21
    14d0:	f0 0d       	add	r31, r0
    14d2:	11 24       	eor	r1, r1
    14d4:	e0 5e       	subi	r30, 0xE0	; 224
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	85 85       	ldd	r24, Z+13	; 0x0d
    14da:	94 85       	ldd	r25, Z+12	; 0x0c
    14dc:	89 17       	cp	r24, r25
    14de:	08 f4       	brcc	.+2      	; 0x14e2 <__vector_16+0x370>
    14e0:	41 c0       	rjmp	.+130    	; 0x1564 <__vector_16+0x3f2>
					{
						dmxcontrol[i].stage = 5;
    14e2:	34 9f       	mul	r19, r20
    14e4:	f0 01       	movw	r30, r0
    14e6:	35 9f       	mul	r19, r21
    14e8:	f0 0d       	add	r31, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	e0 5e       	subi	r30, 0xE0	; 224
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	d3 87       	std	Z+11, r29	; 0x0b
						
						if (dmxcontrol[i].counter==0)
    14f2:	83 81       	ldd	r24, Z+3	; 0x03
    14f4:	94 81       	ldd	r25, Z+4	; 0x04
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	51 f5       	brne	.+84     	; 0x154e <__vector_16+0x3dc>
						{
							if (dmxcontrol[i].gray<dmxcontrol[i].top_gray) dmxcontrol[i].gray++;
    14fa:	34 9f       	mul	r19, r20
    14fc:	f0 01       	movw	r30, r0
    14fe:	35 9f       	mul	r19, r21
    1500:	f0 0d       	add	r31, r0
    1502:	11 24       	eor	r1, r1
    1504:	e0 5e       	subi	r30, 0xE0	; 224
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	89 17       	cp	r24, r25
    150e:	50 f4       	brcc	.+20     	; 0x1524 <__vector_16+0x3b2>
    1510:	34 9f       	mul	r19, r20
    1512:	f0 01       	movw	r30, r0
    1514:	35 9f       	mul	r19, r21
    1516:	f0 0d       	add	r31, r0
    1518:	11 24       	eor	r1, r1
    151a:	e0 5e       	subi	r30, 0xE0	; 224
    151c:	fe 4f       	sbci	r31, 0xFE	; 254
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	80 83       	st	Z, r24
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <__vector_16+0x3c4>
							else
							{
								dmxcontrol[i].stage = 255;
    1524:	34 9f       	mul	r19, r20
    1526:	f0 01       	movw	r30, r0
    1528:	35 9f       	mul	r19, r21
    152a:	f0 0d       	add	r31, r0
    152c:	11 24       	eor	r1, r1
    152e:	e0 5e       	subi	r30, 0xE0	; 224
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
    1534:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    1536:	34 9f       	mul	r19, r20
    1538:	f0 01       	movw	r30, r0
    153a:	35 9f       	mul	r19, r21
    153c:	f0 0d       	add	r31, r0
    153e:	11 24       	eor	r1, r1
    1540:	e0 5e       	subi	r30, 0xE0	; 224
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	82 85       	ldd	r24, Z+10	; 0x0a
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	94 83       	std	Z+4, r25	; 0x04
    154a:	83 83       	std	Z+3, r24	; 0x03
    154c:	1f c0       	rjmp	.+62     	; 0x158c <__vector_16+0x41a>
						}
						else dmxcontrol[i].counter--;
    154e:	34 9f       	mul	r19, r20
    1550:	f0 01       	movw	r30, r0
    1552:	35 9f       	mul	r19, r21
    1554:	f0 0d       	add	r31, r0
    1556:	11 24       	eor	r1, r1
    1558:	e0 5e       	subi	r30, 0xE0	; 224
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	94 83       	std	Z+4, r25	; 0x04
    1560:	83 83       	std	Z+3, r24	; 0x03
    1562:	14 c0       	rjmp	.+40     	; 0x158c <__vector_16+0x41a>
					}
					else
					{
						dmxcontrol[i].stage = 0;
    1564:	34 9f       	mul	r19, r20
    1566:	f0 01       	movw	r30, r0
    1568:	35 9f       	mul	r19, r21
    156a:	f0 0d       	add	r31, r0
    156c:	11 24       	eor	r1, r1
    156e:	e0 5e       	subi	r30, 0xE0	; 224
    1570:	fe 4f       	sbci	r31, 0xFE	; 254
    1572:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	85 87       	std	Z+13, r24	; 0x0d
    1578:	09 c0       	rjmp	.+18     	; 0x158c <__vector_16+0x41a>
					}
					break;
					default:// one circle
					dmxcontrol[i].stage = 255;
    157a:	34 9f       	mul	r19, r20
    157c:	f0 01       	movw	r30, r0
    157e:	35 9f       	mul	r19, r21
    1580:	f0 0d       	add	r31, r0
    1582:	11 24       	eor	r1, r1
    1584:	e0 5e       	subi	r30, 0xE0	; 224
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	13 87       	std	Z+11, r17	; 0x0b
					dmxcontrol[i].count_repeat = 0;
    158a:	15 86       	std	Z+13, r1	; 0x0d
	wdt_reset();
	TCNT0 = 240;
	if(ms_counter!=0) ms_counter--;
	if (en)
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	80 91 08 01 	lds	r24, 0x0108
    1592:	90 91 09 01 	lds	r25, 0x0109
    1596:	60 91 0a 01 	lds	r22, 0x010A
    159a:	70 91 0b 01 	lds	r23, 0x010B
    159e:	42 2f       	mov	r20, r18
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	86 1b       	sub	r24, r22
    15a6:	97 0b       	sbc	r25, r23
    15a8:	48 17       	cp	r20, r24
    15aa:	59 07       	cpc	r21, r25
    15ac:	08 f4       	brcc	.+2      	; 0x15b0 <__vector_16+0x43e>
    15ae:	32 ce       	rjmp	.-924    	; 0x1214 <__vector_16+0xa2>
				break;
				default:
				break;
			}
		}
		 gray_adj(bot_channel,top_channel);
    15b0:	60 91 08 01 	lds	r22, 0x0108
    15b4:	70 91 09 01 	lds	r23, 0x0109
    15b8:	80 91 0a 01 	lds	r24, 0x010A
    15bc:	90 91 0b 01 	lds	r25, 0x010B
    15c0:	0e 94 be 06 	call	0xd7c	; 0xd7c <_Z8gray_adjhh>
	}
	 if (rota_en) rota_manager();
    15c4:	80 91 0c 01 	lds	r24, 0x010C
    15c8:	81 11       	cpse	r24, r1
    15ca:	0e 94 20 08 	call	0x1040	; 0x1040 <_Z12rota_managerv>
}
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	bf 91       	pop	r27
    15d8:	af 91       	pop	r26
    15da:	9f 91       	pop	r25
    15dc:	8f 91       	pop	r24
    15de:	7f 91       	pop	r23
    15e0:	6f 91       	pop	r22
    15e2:	5f 91       	pop	r21
    15e4:	4f 91       	pop	r20
    15e6:	3f 91       	pop	r19
    15e8:	2f 91       	pop	r18
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <main>:
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    15f8:	9c e0       	ldi	r25, 0x0C	; 12
    15fa:	88 e1       	ldi	r24, 0x18	; 24
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	a8 95       	wdr
    1602:	80 93 60 00 	sts	0x0060, r24
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	90 93 60 00 	sts	0x0060, r25

int main(void)
{
	
	wdt_enable(WDTO_250MS);
	timer0_init();
    160c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_Z11timer0_initv>
	dmxcontrol_default();
    1610:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z18dmxcontrol_defaultv>
	rota_group_default();
    1614:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z18rota_group_defaultv>
	dmxctr_using(A1,A16);
    1618:	6f e0       	ldi	r22, 0x0F	; 15
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z12dmxctr_usingjj>
	dmxctr_open();
    1624:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z11dmxctr_openv>
	rota_disable();
    1628:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_Z12rota_disablev>
	dimmer_init();
    162c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_Z11dimmer_initv>
	dmxcontrol_default();
    1630:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z18dmxcontrol_defaultv>
	rota_group_default();
    1634:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z18rota_group_defaultv>
	dmxctr_config_value(0,MAX_AUTO_CHANNEL-1,enable,1);
    1638:	21 e0       	ldi	r18, 0x01	; 1
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	6f e0       	ldi	r22, 0x0F	; 15
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
	star_mode = random()%4;
    1646:	0e 94 39 11 	call	0x2272	; 0x2272 <random>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	83 70       	andi	r24, 0x03	; 3
    1650:	99 27       	eor	r25, r25
    1652:	aa 27       	eor	r26, r26
    1654:	b0 78       	andi	r27, 0x80	; 128
    1656:	bb 23       	and	r27, r27
    1658:	54 f4       	brge	.+20     	; 0x166e <main+0x76>
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	a1 09       	sbc	r26, r1
    165e:	b1 09       	sbc	r27, r1
    1660:	8c 6f       	ori	r24, 0xFC	; 252
    1662:	9f 6f       	ori	r25, 0xFF	; 255
    1664:	af 6f       	ori	r26, 0xFF	; 255
    1666:	bf 6f       	ori	r27, 0xFF	; 255
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	a1 1d       	adc	r26, r1
    166c:	b1 1d       	adc	r27, r1
    166e:	80 93 31 02 	sts	0x0231, r24
	wind_mode =  random()%4;
    1672:	0e 94 39 11 	call	0x2272	; 0x2272 <random>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	83 70       	andi	r24, 0x03	; 3
    167c:	99 27       	eor	r25, r25
    167e:	aa 27       	eor	r26, r26
    1680:	b0 78       	andi	r27, 0x80	; 128
    1682:	bb 23       	and	r27, r27
    1684:	54 f4       	brge	.+20     	; 0x169a <main+0xa2>
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	a1 09       	sbc	r26, r1
    168a:	b1 09       	sbc	r27, r1
    168c:	8c 6f       	ori	r24, 0xFC	; 252
    168e:	9f 6f       	ori	r25, 0xFF	; 255
    1690:	af 6f       	ori	r26, 0xFF	; 255
    1692:	bf 6f       	ori	r27, 0xFF	; 255
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	a1 1d       	adc	r26, r1
    1698:	b1 1d       	adc	r27, r1
    169a:	80 93 30 02 	sts	0x0230, r24
	//light_appear(0,15, gray_scale,2,10,1);
	
		
		while(1)
		{
			dmxctr_config_ref(0,MAX_AUTO_CHANNEL-1,RESOLUS,0);
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	42 e3       	ldi	r20, 0x32	; 50
    16a2:	6f e0       	ldi	r22, 0x0F	; 15
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z17dmxctr_config_refhhhh>
			dmxctr_config_value(0,15,enable,1);
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	48 e0       	ldi	r20, 0x08	; 8
    16b0:	6f e0       	ldi	r22, 0x0F	; 15
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
			dmxctr_using(0,15);
    16b8:	6f e0       	ldi	r22, 0x0F	; 15
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_Z12dmxctr_usingjj>
			
			dmxctr_close();
    16c4:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z12dmxctr_closev>
			
			switch (wind_mode)
    16c8:	80 91 30 02 	lds	r24, 0x0230
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <main+0xda>
    16d0:	42 c0       	rjmp	.+132    	; 0x1756 <main+0x15e>
    16d2:	20 f0       	brcs	.+8      	; 0x16dc <main+0xe4>
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	09 f4       	brne	.+2      	; 0x16da <main+0xe2>
    16d8:	7b c0       	rjmp	.+246    	; 0x17d0 <main+0x1d8>
    16da:	b7 c0       	rjmp	.+366    	; 0x184a <main+0x252>
			{
				case 0:
				//GIO THU VAO 2
				dmxctr_config_vector(A10,A15,gray,RESOLUS,0);
    16dc:	00 e0       	ldi	r16, 0x00	; 0
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	22 e3       	ldi	r18, 0x32	; 50
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	6e e0       	ldi	r22, 0x0E	; 14
    16e8:	89 e0       	ldi	r24, 0x09	; 9
    16ea:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    16ee:	0c e2       	ldi	r16, 0x2C	; 44
    16f0:	11 e0       	ldi	r17, 0x01	; 1
    16f2:	2c e2       	ldi	r18, 0x2C	; 44
    16f4:	31 e0       	ldi	r19, 0x01	; 1
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	6e e0       	ldi	r22, 0x0E	; 14
    16fa:	89 e0       	ldi	r24, 0x09	; 9
    16fc:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    1700:	02 e3       	ldi	r16, 0x32	; 50
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	22 e3       	ldi	r18, 0x32	; 50
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	43 e0       	ldi	r20, 0x03	; 3
    170a:	6e e0       	ldi	r22, 0x0E	; 14
    170c:	89 e0       	ldi	r24, 0x09	; 9
    170e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    1712:	0a e0       	ldi	r16, 0x0A	; 10
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	42 e0       	ldi	r20, 0x02	; 2
    171c:	6e e0       	ldi	r22, 0x0E	; 14
    171e:	89 e0       	ldi	r24, 0x09	; 9
    1720:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	44 e0       	ldi	r20, 0x04	; 4
    172a:	6e e0       	ldi	r22, 0x0E	; 14
    172c:	89 e0       	ldi	r24, 0x09	; 9
    172e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	46 e0       	ldi	r20, 0x06	; 6
    1738:	6e e0       	ldi	r22, 0x0E	; 14
    173a:	89 e0       	ldi	r24, 0x09	; 9
    173c:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_reverse);
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	47 e0       	ldi	r20, 0x07	; 7
    1746:	6e e0       	ldi	r22, 0x0E	; 14
    1748:	89 e0       	ldi	r24, 0x09	; 9
    174a:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	80 93 30 02 	sts	0x0230, r24
				
				break;
    1754:	b5 c0       	rjmp	.+362    	; 0x18c0 <main+0x2c8>
				case 1:
				//GIO TOA RA 2
				dmxctr_config_vector(A10,A15,gray,0,RESOLUS);
    1756:	02 e3       	ldi	r16, 0x32	; 50
    1758:	10 e0       	ldi	r17, 0x00	; 0
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	6e e0       	ldi	r22, 0x0E	; 14
    1762:	89 e0       	ldi	r24, 0x09	; 9
    1764:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    1768:	0c e2       	ldi	r16, 0x2C	; 44
    176a:	11 e0       	ldi	r17, 0x01	; 1
    176c:	2c e2       	ldi	r18, 0x2C	; 44
    176e:	31 e0       	ldi	r19, 0x01	; 1
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	6e e0       	ldi	r22, 0x0E	; 14
    1774:	89 e0       	ldi	r24, 0x09	; 9
    1776:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    177a:	02 e3       	ldi	r16, 0x32	; 50
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	22 e3       	ldi	r18, 0x32	; 50
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	43 e0       	ldi	r20, 0x03	; 3
    1784:	6e e0       	ldi	r22, 0x0E	; 14
    1786:	89 e0       	ldi	r24, 0x09	; 9
    1788:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    178c:	0a e0       	ldi	r16, 0x0A	; 10
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	42 e0       	ldi	r20, 0x02	; 2
    1796:	6e e0       	ldi	r22, 0x0E	; 14
    1798:	89 e0       	ldi	r24, 0x09	; 9
    179a:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    179e:	2a e0       	ldi	r18, 0x0A	; 10
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	44 e0       	ldi	r20, 0x04	; 4
    17a4:	6e e0       	ldi	r22, 0x0E	; 14
    17a6:	89 e0       	ldi	r24, 0x09	; 9
    17a8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	46 e0       	ldi	r20, 0x06	; 6
    17b2:	6e e0       	ldi	r22, 0x0E	; 14
    17b4:	89 e0       	ldi	r24, 0x09	; 9
    17b6:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_reverse);
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	47 e0       	ldi	r20, 0x07	; 7
    17c0:	6e e0       	ldi	r22, 0x0E	; 14
    17c2:	89 e0       	ldi	r24, 0x09	; 9
    17c4:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode =2;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	80 93 30 02 	sts	0x0230, r24
				break;
    17ce:	78 c0       	rjmp	.+240    	; 0x18c0 <main+0x2c8>
				case 2:
				//GIO THU VAO 1
				
				dmxctr_config_vector(A10,A15,gray,0,RESOLUS);
    17d0:	02 e3       	ldi	r16, 0x32	; 50
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	6e e0       	ldi	r22, 0x0E	; 14
    17dc:	89 e0       	ldi	r24, 0x09	; 9
    17de:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    17e2:	0c e2       	ldi	r16, 0x2C	; 44
    17e4:	11 e0       	ldi	r17, 0x01	; 1
    17e6:	2c e2       	ldi	r18, 0x2C	; 44
    17e8:	31 e0       	ldi	r19, 0x01	; 1
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	6e e0       	ldi	r22, 0x0E	; 14
    17ee:	89 e0       	ldi	r24, 0x09	; 9
    17f0:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    17f4:	02 e3       	ldi	r16, 0x32	; 50
    17f6:	10 e0       	ldi	r17, 0x00	; 0
    17f8:	22 e3       	ldi	r18, 0x32	; 50
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	43 e0       	ldi	r20, 0x03	; 3
    17fe:	6e e0       	ldi	r22, 0x0E	; 14
    1800:	89 e0       	ldi	r24, 0x09	; 9
    1802:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    1806:	0a e0       	ldi	r16, 0x0A	; 10
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	2a e0       	ldi	r18, 0x0A	; 10
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	42 e0       	ldi	r20, 0x02	; 2
    1810:	6e e0       	ldi	r22, 0x0E	; 14
    1812:	89 e0       	ldi	r24, 0x09	; 9
    1814:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    1818:	2a e0       	ldi	r18, 0x0A	; 10
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	44 e0       	ldi	r20, 0x04	; 4
    181e:	6e e0       	ldi	r22, 0x0E	; 14
    1820:	89 e0       	ldi	r24, 0x09	; 9
    1822:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	46 e0       	ldi	r20, 0x06	; 6
    182c:	6e e0       	ldi	r22, 0x0E	; 14
    182e:	89 e0       	ldi	r24, 0x09	; 9
    1830:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_normal);
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	47 e0       	ldi	r20, 0x07	; 7
    183a:	6e e0       	ldi	r22, 0x0E	; 14
    183c:	89 e0       	ldi	r24, 0x09	; 9
    183e:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				
				wind_mode = 3;
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	80 93 30 02 	sts	0x0230, r24
				break;
    1848:	3b c0       	rjmp	.+118    	; 0x18c0 <main+0x2c8>
				default:
				//GIO THU VAO 2
				dmxctr_config_vector(A10,A15,gray,RESOLUS,0);
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	22 e3       	ldi	r18, 0x32	; 50
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	41 e0       	ldi	r20, 0x01	; 1
    1854:	6e e0       	ldi	r22, 0x0E	; 14
    1856:	89 e0       	ldi	r24, 0x09	; 9
    1858:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    185c:	0c e2       	ldi	r16, 0x2C	; 44
    185e:	11 e0       	ldi	r17, 0x01	; 1
    1860:	2c e2       	ldi	r18, 0x2C	; 44
    1862:	31 e0       	ldi	r19, 0x01	; 1
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	6e e0       	ldi	r22, 0x0E	; 14
    1868:	89 e0       	ldi	r24, 0x09	; 9
    186a:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    186e:	02 e3       	ldi	r16, 0x32	; 50
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	22 e3       	ldi	r18, 0x32	; 50
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	43 e0       	ldi	r20, 0x03	; 3
    1878:	6e e0       	ldi	r22, 0x0E	; 14
    187a:	89 e0       	ldi	r24, 0x09	; 9
    187c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    1880:	0a e0       	ldi	r16, 0x0A	; 10
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	2a e0       	ldi	r18, 0x0A	; 10
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	42 e0       	ldi	r20, 0x02	; 2
    188a:	6e e0       	ldi	r22, 0x0E	; 14
    188c:	89 e0       	ldi	r24, 0x09	; 9
    188e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	44 e0       	ldi	r20, 0x04	; 4
    1898:	6e e0       	ldi	r22, 0x0E	; 14
    189a:	89 e0       	ldi	r24, 0x09	; 9
    189c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	46 e0       	ldi	r20, 0x06	; 6
    18a6:	6e e0       	ldi	r22, 0x0E	; 14
    18a8:	89 e0       	ldi	r24, 0x09	; 9
    18aa:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_normal);
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	47 e0       	ldi	r20, 0x07	; 7
    18b4:	6e e0       	ldi	r22, 0x0E	; 14
    18b6:	89 e0       	ldi	r24, 0x09	; 9
    18b8:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode = 0;
    18bc:	10 92 30 02 	sts	0x0230, r1
				break;
			}
			
			switch(star_mode)
    18c0:	80 91 31 02 	lds	r24, 0x0231
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <main+0x2d2>
    18c8:	45 c0       	rjmp	.+138    	; 0x1954 <main+0x35c>
    18ca:	38 f0       	brcs	.+14     	; 0x18da <main+0x2e2>
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <main+0x2da>
    18d0:	7c c0       	rjmp	.+248    	; 0x19ca <main+0x3d2>
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <main+0x2e0>
    18d6:	b4 c0       	rjmp	.+360    	; 0x1a40 <main+0x448>
    18d8:	f7 c0       	rjmp	.+494    	; 0x1ac8 <main+0x4d0>
			{
				
				case 0:
				//NGOI SAO LAP LANH
				
				dmxctr_config_vector(A1,A9,gray,0,0);
    18da:	00 e0       	ldi	r16, 0x00	; 0
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	68 e0       	ldi	r22, 0x08	; 8
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,200,50);
    18ec:	02 e3       	ldi	r16, 0x32	; 50
    18ee:	10 e0       	ldi	r17, 0x00	; 0
    18f0:	28 ec       	ldi	r18, 0xC8	; 200
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	68 e0       	ldi	r22, 0x08	; 8
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,50,100);
    18fe:	04 e6       	ldi	r16, 0x64	; 100
    1900:	10 e0       	ldi	r17, 0x00	; 0
    1902:	22 e3       	ldi	r18, 0x32	; 50
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	43 e0       	ldi	r20, 0x03	; 3
    1908:	68 e0       	ldi	r22, 0x08	; 8
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1910:	0a e0       	ldi	r16, 0x0A	; 10
    1912:	10 e0       	ldi	r17, 0x00	; 0
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	68 e0       	ldi	r22, 0x08	; 8
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	44 e0       	ldi	r20, 0x04	; 4
    1928:	68 e0       	ldi	r22, 0x08	; 8
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	46 e0       	ldi	r20, 0x06	; 6
    1936:	68 e0       	ldi	r22, 0x08	; 8
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_normal);
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	47 e0       	ldi	r20, 0x07	; 7
    1944:	68 e0       	ldi	r22, 0x08	; 8
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				
				star_mode = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 31 02 	sts	0x0231, r24
				break;
    1952:	fe c0       	rjmp	.+508    	; 0x1b50 <main+0x558>
				case 1:
				//NGOI SAO CHAY LEN 1
				dmxctr_config_vector(A1,A9,gray,0,RESOLUS);
    1954:	02 e3       	ldi	r16, 0x32	; 50
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	68 e0       	ldi	r22, 0x08	; 8
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1966:	22 e3       	ldi	r18, 0x32	; 50
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	68 e0       	ldi	r22, 0x08	; 8
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1974:	04 ef       	ldi	r16, 0xF4	; 244
    1976:	11 e0       	ldi	r17, 0x01	; 1
    1978:	24 ef       	ldi	r18, 0xF4	; 244
    197a:	31 e0       	ldi	r19, 0x01	; 1
    197c:	43 e0       	ldi	r20, 0x03	; 3
    197e:	68 e0       	ldi	r22, 0x08	; 8
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1986:	0a e0       	ldi	r16, 0x0A	; 10
    1988:	10 e0       	ldi	r17, 0x00	; 0
    198a:	2a e0       	ldi	r18, 0x0A	; 10
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	42 e0       	ldi	r20, 0x02	; 2
    1990:	68 e0       	ldi	r22, 0x08	; 8
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1998:	2a e0       	ldi	r18, 0x0A	; 10
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	44 e0       	ldi	r20, 0x04	; 4
    199e:	68 e0       	ldi	r22, 0x08	; 8
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	46 e0       	ldi	r20, 0x06	; 6
    19ac:	68 e0       	ldi	r22, 0x08	; 8
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_normal);
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	47 e0       	ldi	r20, 0x07	; 7
    19ba:	68 e0       	ldi	r22, 0x08	; 8
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				
				star_mode = 2;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	80 93 31 02 	sts	0x0231, r24
				break;
    19c8:	c3 c0       	rjmp	.+390    	; 0x1b50 <main+0x558>
				case 2:
				
				//NGOI SAO CHAY LEN 2
				
				dmxctr_config_vector(A1,A9,gray,0,RESOLUS);
    19ca:	02 e3       	ldi	r16, 0x32	; 50
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	68 e0       	ldi	r22, 0x08	; 8
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    19dc:	22 e3       	ldi	r18, 0x32	; 50
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	68 e0       	ldi	r22, 0x08	; 8
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    19ea:	04 ef       	ldi	r16, 0xF4	; 244
    19ec:	11 e0       	ldi	r17, 0x01	; 1
    19ee:	24 ef       	ldi	r18, 0xF4	; 244
    19f0:	31 e0       	ldi	r19, 0x01	; 1
    19f2:	43 e0       	ldi	r20, 0x03	; 3
    19f4:	68 e0       	ldi	r22, 0x08	; 8
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    19fc:	0a e0       	ldi	r16, 0x0A	; 10
    19fe:	10 e0       	ldi	r17, 0x00	; 0
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	42 e0       	ldi	r20, 0x02	; 2
    1a06:	68 e0       	ldi	r22, 0x08	; 8
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	44 e0       	ldi	r20, 0x04	; 4
    1a14:	68 e0       	ldi	r22, 0x08	; 8
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	46 e0       	ldi	r20, 0x06	; 6
    1a22:	68 e0       	ldi	r22, 0x08	; 8
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	47 e0       	ldi	r20, 0x07	; 7
    1a30:	68 e0       	ldi	r22, 0x08	; 8
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 3;
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	80 93 31 02 	sts	0x0231, r24
				break;
    1a3e:	88 c0       	rjmp	.+272    	; 0x1b50 <main+0x558>
				case 3:
				//NGOI SAO TOA RA
				dmxctr_config_vector(A1,A4,gray,RESOLUS,0);
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	22 e3       	ldi	r18, 0x32	; 50
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	63 e0       	ldi	r22, 0x03	; 3
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A5,A9,gray,0,RESOLUS);
    1a52:	02 e3       	ldi	r16, 0x32	; 50
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	68 e0       	ldi	r22, 0x08	; 8
    1a5e:	84 e0       	ldi	r24, 0x04	; 4
    1a60:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1a64:	22 e3       	ldi	r18, 0x32	; 50
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	68 e0       	ldi	r22, 0x08	; 8
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1a72:	04 ef       	ldi	r16, 0xF4	; 244
    1a74:	11 e0       	ldi	r17, 0x01	; 1
    1a76:	24 ef       	ldi	r18, 0xF4	; 244
    1a78:	31 e0       	ldi	r19, 0x01	; 1
    1a7a:	43 e0       	ldi	r20, 0x03	; 3
    1a7c:	68 e0       	ldi	r22, 0x08	; 8
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1a84:	0a e0       	ldi	r16, 0x0A	; 10
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	2a e0       	ldi	r18, 0x0A	; 10
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	42 e0       	ldi	r20, 0x02	; 2
    1a8e:	68 e0       	ldi	r22, 0x08	; 8
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1a96:	2a e0       	ldi	r18, 0x0A	; 10
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	44 e0       	ldi	r20, 0x04	; 4
    1a9c:	68 e0       	ldi	r22, 0x08	; 8
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	46 e0       	ldi	r20, 0x06	; 6
    1aaa:	68 e0       	ldi	r22, 0x08	; 8
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	47 e0       	ldi	r20, 0x07	; 7
    1ab8:	68 e0       	ldi	r22, 0x08	; 8
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 4;
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	80 93 31 02 	sts	0x0231, r24
				break;
    1ac6:	44 c0       	rjmp	.+136    	; 0x1b50 <main+0x558>
				
				default:
				dmxctr_config_vector(A1,A4,gray,0,RESOLUS);
    1ac8:	02 e3       	ldi	r16, 0x32	; 50
    1aca:	10 e0       	ldi	r17, 0x00	; 0
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	63 e0       	ldi	r22, 0x03	; 3
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A5,A9,gray,RESOLUS,0);
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	22 e3       	ldi	r18, 0x32	; 50
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	68 e0       	ldi	r22, 0x08	; 8
    1ae6:	84 e0       	ldi	r24, 0x04	; 4
    1ae8:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1aec:	02 e3       	ldi	r16, 0x32	; 50
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	22 e3       	ldi	r18, 0x32	; 50
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	68 e0       	ldi	r22, 0x08	; 8
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1afe:	04 ef       	ldi	r16, 0xF4	; 244
    1b00:	11 e0       	ldi	r17, 0x01	; 1
    1b02:	24 ef       	ldi	r18, 0xF4	; 244
    1b04:	31 e0       	ldi	r19, 0x01	; 1
    1b06:	43 e0       	ldi	r20, 0x03	; 3
    1b08:	68 e0       	ldi	r22, 0x08	; 8
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1b10:	0a e0       	ldi	r16, 0x0A	; 10
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	42 e0       	ldi	r20, 0x02	; 2
    1b1a:	68 e0       	ldi	r22, 0x08	; 8
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1b22:	2a e0       	ldi	r18, 0x0A	; 10
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	44 e0       	ldi	r20, 0x04	; 4
    1b28:	68 e0       	ldi	r22, 0x08	; 8
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	46 e0       	ldi	r20, 0x06	; 6
    1b36:	68 e0       	ldi	r22, 0x08	; 8
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1b3e:	21 e0       	ldi	r18, 0x01	; 1
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	47 e0       	ldi	r20, 0x07	; 7
    1b44:	68 e0       	ldi	r22, 0x08	; 8
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	0e 94 03 05 	call	0xa06	; 0xa06 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 0;
    1b4c:	10 92 31 02 	sts	0x0231, r1
				break;
			}
			dmxctr_open();
    1b50:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_Z11dmxctr_openv>
			delay_ms(60000);
    1b54:	60 e6       	ldi	r22, 0x60	; 96
    1b56:	7a ee       	ldi	r23, 0xEA	; 234
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z8delay_msm>


uint8_t star_mode;
uint8_t wind_mode;

int main(void)
    1b60:	9e cd       	rjmp	.-1220   	; 0x169e <main+0xa6>

00001b62 <_Z14output_off_allv>:
volatile bool data_enable;

void output_off_all()
{
	
	PORTB &= C_MASK_PB; //pinB 0,1,2,3,4,5
    1b62:	85 b1       	in	r24, 0x05	; 5
    1b64:	80 7c       	andi	r24, 0xC0	; 192
    1b66:	85 b9       	out	0x05, r24	; 5
	PORTC &= C_MASK_PC; //pinC 0,1,2,3,4,5
    1b68:	88 b1       	in	r24, 0x08	; 8
    1b6a:	80 7c       	andi	r24, 0xC0	; 192
    1b6c:	88 b9       	out	0x08, r24	; 8
	PORTD &= C_MASK_PD;//pinD 4,5,6,7
    1b6e:	8b b1       	in	r24, 0x0b	; 11
    1b70:	8f 70       	andi	r24, 0x0F	; 15
    1b72:	8b b9       	out	0x0b, r24	; 11
    1b74:	08 95       	ret

00001b76 <_Z11dimmer_initv>:
}

void dimmer_init(void)
{
	TIMSK2 |= (1 << OCIE0A);                    // set output compare interrupt enable
    1b76:	e0 e7       	ldi	r30, 0x70	; 112
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);
    1b80:	e0 eb       	ldi	r30, 0xB0	; 176
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	80 83       	st	Z, r24
	TCCR2B |= TIMER2_PRESCALER;					// set CTC mode
    1b8a:	e1 eb       	ldi	r30, 0xB1	; 177
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	83 60       	ori	r24, 0x03	; 3
    1b92:	80 83       	st	Z, r24
	OCR2A   = TIMER2_COMPARE_VALUE;            // set compare value for interrupt
    1b94:	83 e6       	ldi	r24, 0x63	; 99
    1b96:	80 93 b3 00 	sts	0x00B3, r24
	
	DDRD &= ~(1<<PIND2);
    1b9a:	52 98       	cbi	0x0a, 2	; 10
	PORTD &= ~(1<<PIND2);
    1b9c:	5a 98       	cbi	0x0b, 2	; 11
	EICRA |= 1<<ISC01;		// fall edge
    1b9e:	e9 e6       	ldi	r30, 0x69	; 105
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	80 83       	st	Z, r24
	EIMSK |= 1<<INT0;
    1ba8:	e8 9a       	sbi	0x1d, 0	; 29
	
	DDRD |= 1<<PIND1;		//led 
    1baa:	51 9a       	sbi	0x0a, 1	; 10
	
	DDRB |= S_MASK_PB;//pinB 0,1,2,3,4,5
    1bac:	84 b1       	in	r24, 0x04	; 4
    1bae:	8f 63       	ori	r24, 0x3F	; 63
    1bb0:	84 b9       	out	0x04, r24	; 4
	DDRC |= S_MASK_PC;//pinC 0,1,2,3,4,5
    1bb2:	87 b1       	in	r24, 0x07	; 7
    1bb4:	8f 63       	ori	r24, 0x3F	; 63
    1bb6:	87 b9       	out	0x07, r24	; 7
	DDRD |= S_MASK_PD;//pinD 4,5,6,7
    1bb8:	8a b1       	in	r24, 0x0a	; 10
    1bba:	80 6f       	ori	r24, 0xF0	; 240
    1bbc:	8a b9       	out	0x0a, r24	; 10
	sei();
    1bbe:	78 94       	sei
    1bc0:	08 95       	ret

00001bc2 <_Z13dimmer_updataPKh>:
}

void dimmer_updata(const uint8_t *data)
{
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0;i<DATA_LEN;i++)
	{
		if (data[i]>100) data_buff[i]=100;
    1bc8:	84 e6       	ldi	r24, 0x64	; 100
    1bca:	91 91       	ld	r25, Z+
    1bcc:	95 36       	cpi	r25, 0x65	; 101
    1bce:	28 f0       	brcs	.+10     	; 0x1bda <_Z13dimmer_updataPKh+0x18>
    1bd0:	d9 01       	movw	r26, r18
    1bd2:	a9 5c       	subi	r26, 0xC9	; 201
    1bd4:	bd 4f       	sbci	r27, 0xFD	; 253
    1bd6:	8c 93       	st	X, r24
    1bd8:	04 c0       	rjmp	.+8      	; 0x1be2 <_Z13dimmer_updataPKh+0x20>
		else data_buff[i]=data[i];
    1bda:	d9 01       	movw	r26, r18
    1bdc:	a9 5c       	subi	r26, 0xC9	; 201
    1bde:	bd 4f       	sbci	r27, 0xFD	; 253
    1be0:	9c 93       	st	X, r25
    1be2:	2f 5f       	subi	r18, 0xFF	; 255
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
	sei();
}

void dimmer_updata(const uint8_t *data)
{
	for (uint8_t i = 0;i<DATA_LEN;i++)
    1be6:	20 31       	cpi	r18, 0x10	; 16
    1be8:	31 05       	cpc	r19, r1
    1bea:	79 f7       	brne	.-34     	; 0x1bca <_Z13dimmer_updataPKh+0x8>
	{
		if (data[i]>100) data_buff[i]=100;
		else data_buff[i]=data[i];
	}
	data_enable = true;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 32 02 	sts	0x0232, r24
    1bf2:	08 95       	ret

00001bf4 <__vector_1>:
		_counter--;
	}
}

ISR(INT0_vect)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	2f 93       	push	r18
    1c00:	3f 93       	push	r19
    1c02:	4f 93       	push	r20
    1c04:	5f 93       	push	r21
    1c06:	6f 93       	push	r22
    1c08:	7f 93       	push	r23
    1c0a:	8f 93       	push	r24
    1c0c:	9f 93       	push	r25
    1c0e:	af 93       	push	r26
    1c10:	bf 93       	push	r27
    1c12:	ef 93       	push	r30
    1c14:	ff 93       	push	r31
	wdt_reset();
    1c16:	a8 95       	wdr
	uint8_t debounce = debo;
	
	if (!(PIND &(S_PD2)))
    1c18:	4a 99       	sbic	0x09, 2	; 9
    1c1a:	2b c0       	rjmp	.+86     	; 0x1c72 <__vector_1+0x7e>
	{
		while (debounce!=0)
		{
			if (PIND &(S_PD2)) return;
    1c1c:	4a 9b       	sbis	0x09, 2	; 9
    1c1e:	30 c0       	rjmp	.+96     	; 0x1c80 <__vector_1+0x8c>
    1c20:	35 c0       	rjmp	.+106    	; 0x1c8c <__vector_1+0x98>
    1c22:	4a 99       	sbic	0x09, 2	; 9
    1c24:	33 c0       	rjmp	.+102    	; 0x1c8c <__vector_1+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c26:	95 e0       	ldi	r25, 0x05	; 5
    1c28:	9a 95       	dec	r25
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <__vector_1+0x34>
    1c2c:	00 00       	nop
    1c2e:	81 50       	subi	r24, 0x01	; 1
	wdt_reset();
	uint8_t debounce = debo;
	
	if (!(PIND &(S_PD2)))
	{
		while (debounce!=0)
    1c30:	c1 f7       	brne	.-16     	; 0x1c22 <__vector_1+0x2e>
    1c32:	1f c0       	rjmp	.+62     	; 0x1c72 <__vector_1+0x7e>
			_delay_us(1);
			debounce--;
		}
	}
	output_off_all();
	if (data_enable==true)
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
	{
		for (uint8_t i = 0;i<DATA_LEN;i++) data_driver[i]=data_buff[i];
    1c38:	fc 01       	movw	r30, r24
    1c3a:	e9 5c       	subi	r30, 0xC9	; 201
    1c3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3e:	20 81       	ld	r18, Z
    1c40:	fc 01       	movw	r30, r24
    1c42:	e9 5b       	subi	r30, 0xB9	; 185
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	20 83       	st	Z, r18
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	80 31       	cpi	r24, 0x10	; 16
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	a1 f7       	brne	.-24     	; 0x1c38 <__vector_1+0x44>
		data_enable = false;
    1c50:	10 92 32 02 	sts	0x0232, r1
	}
	_counter = RESOLUTION;
    1c54:	82 e3       	ldi	r24, 0x32	; 50
    1c56:	80 93 34 02 	sts	0x0234, r24
	enable = true;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 33 02 	sts	0x0233, r24
	PORTD ^=1<<PIND1;
    1c60:	9b b1       	in	r25, 0x0b	; 11
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	89 27       	eor	r24, r25
    1c66:	8b b9       	out	0x0b, r24	; 11
	_counter_syn = 0;
    1c68:	10 92 36 02 	sts	0x0236, r1
    1c6c:	10 92 35 02 	sts	0x0235, r1
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <__vector_1+0x98>
			if (PIND &(S_PD2)) return;
			_delay_us(1);
			debounce--;
		}
	}
	output_off_all();
    1c72:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_Z14output_off_allv>
	if (data_enable==true)
    1c76:	80 91 32 02 	lds	r24, 0x0232
    1c7a:	81 11       	cpse	r24, r1
    1c7c:	db cf       	rjmp	.-74     	; 0x1c34 <__vector_1+0x40>
    1c7e:	ea cf       	rjmp	.-44     	; 0x1c54 <__vector_1+0x60>
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	8a 95       	dec	r24
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <__vector_1+0x8e>
    1c86:	00 00       	nop
    1c88:	84 e0       	ldi	r24, 0x04	; 4
    1c8a:	cb cf       	rjmp	.-106    	; 0x1c22 <__vector_1+0x2e>
	}
	_counter = RESOLUTION;
	enable = true;
	PORTD ^=1<<PIND1;
	_counter_syn = 0;
}
    1c8c:	ff 91       	pop	r31
    1c8e:	ef 91       	pop	r30
    1c90:	bf 91       	pop	r27
    1c92:	af 91       	pop	r26
    1c94:	9f 91       	pop	r25
    1c96:	8f 91       	pop	r24
    1c98:	7f 91       	pop	r23
    1c9a:	6f 91       	pop	r22
    1c9c:	5f 91       	pop	r21
    1c9e:	4f 91       	pop	r20
    1ca0:	3f 91       	pop	r19
    1ca2:	2f 91       	pop	r18
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <_Z9pin_tableh>:

void pin_table(uint8_t pins)
{
	switch (pins)
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	8f 30       	cpi	r24, 0x0F	; 15
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	18 f5       	brcc	.+70     	; 0x1cfc <_Z9pin_tableh+0x4e>
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	e3 5c       	subi	r30, 0xC3	; 195
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__tablejump2__>
	{
		case 0:
			PORTC |=S_MASK_5;
    1cc0:	45 9a       	sbi	0x08, 5	; 8
		return;
    1cc2:	08 95       	ret
		case 1:
			PORTC |=S_MASK_4;
    1cc4:	44 9a       	sbi	0x08, 4	; 8
		return;
    1cc6:	08 95       	ret
		case 2:
			PORTC |=S_MASK_3;
    1cc8:	43 9a       	sbi	0x08, 3	; 8
		return;
    1cca:	08 95       	ret
		case 3:
			PORTC |=S_MASK_2;
    1ccc:	42 9a       	sbi	0x08, 2	; 8
		return;
    1cce:	08 95       	ret
		case 4:
			PORTC |=S_MASK_1;
    1cd0:	41 9a       	sbi	0x08, 1	; 8
		return;
    1cd2:	08 95       	ret
		case 5:
			PORTC |=S_MASK_0;
    1cd4:	40 9a       	sbi	0x08, 0	; 8
		return;
    1cd6:	08 95       	ret
		case 6:
			PORTB |=S_MASK_5;
    1cd8:	2d 9a       	sbi	0x05, 5	; 5
		return;
    1cda:	08 95       	ret
		case 7:
			PORTB |=S_MASK_4;
    1cdc:	2c 9a       	sbi	0x05, 4	; 5
		return;
    1cde:	08 95       	ret
		case 8:
			PORTB |=S_MASK_3;
    1ce0:	2b 9a       	sbi	0x05, 3	; 5
		return;
    1ce2:	08 95       	ret
		case 9:
			PORTB |=S_MASK_2;
    1ce4:	2a 9a       	sbi	0x05, 2	; 5
		return;
    1ce6:	08 95       	ret
		case 10:
			PORTB |=S_MASK_1;
    1ce8:	29 9a       	sbi	0x05, 1	; 5
		return;
    1cea:	08 95       	ret
		case 11:
			PORTB |=S_MASK_0;
    1cec:	28 9a       	sbi	0x05, 0	; 5
		return;
    1cee:	08 95       	ret
		case 12:
			PORTD |=S_MASK_7;
    1cf0:	5f 9a       	sbi	0x0b, 7	; 11
		return;
    1cf2:	08 95       	ret
		case 13:
			PORTD |= S_MASK_6;
    1cf4:	5e 9a       	sbi	0x0b, 6	; 11
		return;
    1cf6:	08 95       	ret
		case 14:
			PORTD |=S_MASK_5;
    1cf8:	5d 9a       	sbi	0x0b, 5	; 11
		return;
    1cfa:	08 95       	ret
		default:
			PORTD |=S_MASK_4;
    1cfc:	5c 9a       	sbi	0x0b, 4	; 11
    1cfe:	08 95       	ret

00001d00 <__vector_7>:
	}
	data_enable = true;
}

ISR(TIMER2_COMPA_vect)
{
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	ef 93       	push	r30
    1d24:	ff 93       	push	r31
	uint8_t _pointer = 0;
	if (_counter_syn>=2000) PORTD &=~(1<<PIND1);
    1d26:	80 91 35 02 	lds	r24, 0x0235
    1d2a:	90 91 36 02 	lds	r25, 0x0236
    1d2e:	80 3d       	cpi	r24, 0xD0	; 208
    1d30:	97 40       	sbci	r25, 0x07	; 7
    1d32:	10 f0       	brcs	.+4      	; 0x1d38 <__vector_7+0x38>
    1d34:	59 98       	cbi	0x0b, 1	; 11
    1d36:	29 c0       	rjmp	.+82     	; 0x1d8a <__vector_7+0x8a>
	else _counter_syn++;
    1d38:	80 91 35 02 	lds	r24, 0x0235
    1d3c:	90 91 36 02 	lds	r25, 0x0236
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	90 93 36 02 	sts	0x0236, r25
    1d46:	80 93 35 02 	sts	0x0235, r24
    1d4a:	1f c0       	rjmp	.+62     	; 0x1d8a <__vector_7+0x8a>
	
	if (enable)
    1d4c:	c0 e0       	ldi	r28, 0x00	; 0
    1d4e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		while (_pointer<DATA_LEN)
		{
			if ( _counter<data_driver[_pointer]) pin_table(_pointer);
    1d50:	fe 01       	movw	r30, r28
    1d52:	e9 5b       	subi	r30, 0xB9	; 185
    1d54:	fd 4f       	sbci	r31, 0xFD	; 253
    1d56:	90 81       	ld	r25, Z
    1d58:	80 91 34 02 	lds	r24, 0x0234
    1d5c:	89 17       	cp	r24, r25
    1d5e:	18 f4       	brcc	.+6      	; 0x1d66 <__vector_7+0x66>
    1d60:	8c 2f       	mov	r24, r28
    1d62:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_Z9pin_tableh>
    1d66:	21 96       	adiw	r28, 0x01	; 1
	if (_counter_syn>=2000) PORTD &=~(1<<PIND1);
	else _counter_syn++;
	
	if (enable)
	{
		while (_pointer<DATA_LEN)
    1d68:	c0 31       	cpi	r28, 0x10	; 16
    1d6a:	d1 05       	cpc	r29, r1
    1d6c:	89 f7       	brne	.-30     	; 0x1d50 <__vector_7+0x50>
		{
			if ( _counter<data_driver[_pointer]) pin_table(_pointer);
			_pointer++;
		}
		if (_counter<=trimming)
    1d6e:	80 91 34 02 	lds	r24, 0x0234
    1d72:	83 30       	cpi	r24, 0x03	; 3
    1d74:	20 f4       	brcc	.+8      	; 0x1d7e <__vector_7+0x7e>
		{
			 output_off_all();
    1d76:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_Z14output_off_allv>
			 enable = false;
    1d7a:	10 92 33 02 	sts	0x0233, r1
		}
		_counter--;
    1d7e:	80 91 34 02 	lds	r24, 0x0234
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	80 93 34 02 	sts	0x0234, r24
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <__vector_7+0x92>
{
	uint8_t _pointer = 0;
	if (_counter_syn>=2000) PORTD &=~(1<<PIND1);
	else _counter_syn++;
	
	if (enable)
    1d8a:	80 91 33 02 	lds	r24, 0x0233
    1d8e:	81 11       	cpse	r24, r1
    1d90:	dd cf       	rjmp	.-70     	; 0x1d4c <__vector_7+0x4c>
			 output_off_all();
			 enable = false;
		}
		_counter--;
	}
}
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	bf 91       	pop	r27
    1d9c:	af 91       	pop	r26
    1d9e:	9f 91       	pop	r25
    1da0:	8f 91       	pop	r24
    1da2:	7f 91       	pop	r23
    1da4:	6f 91       	pop	r22
    1da6:	5f 91       	pop	r21
    1da8:	4f 91       	pop	r20
    1daa:	3f 91       	pop	r19
    1dac:	2f 91       	pop	r18
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <__subsf3>:
    1db8:	50 58       	subi	r21, 0x80	; 128

00001dba <__addsf3>:
    1dba:	bb 27       	eor	r27, r27
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__addsf3x>
    1dc2:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    1dc6:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    1dca:	38 f0       	brcs	.+14     	; 0x1dda <__addsf3+0x20>
    1dcc:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <__addsf3+0x20>
    1dd2:	39 f4       	brne	.+14     	; 0x1de2 <__addsf3+0x28>
    1dd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <__addsf3+0x24>
    1dd8:	26 f4       	brtc	.+8      	; 0x1de2 <__addsf3+0x28>
    1dda:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>
    1dde:	0e f4       	brtc	.+2      	; 0x1de2 <__addsf3+0x28>
    1de0:	e0 95       	com	r30
    1de2:	e7 fb       	bst	r30, 7
    1de4:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>

00001de8 <__addsf3x>:
    1de8:	e9 2f       	mov	r30, r25
    1dea:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    1dee:	58 f3       	brcs	.-42     	; 0x1dc6 <__addsf3+0xc>
    1df0:	ba 17       	cp	r27, r26
    1df2:	62 07       	cpc	r22, r18
    1df4:	73 07       	cpc	r23, r19
    1df6:	84 07       	cpc	r24, r20
    1df8:	95 07       	cpc	r25, r21
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <__addsf3x+0x1c>
    1dfc:	79 f4       	brne	.+30     	; 0x1e1c <__addsf3x+0x34>
    1dfe:	a6 f5       	brtc	.+104    	; 0x1e68 <__addsf3x+0x80>
    1e00:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_zero>
    1e04:	0e f4       	brtc	.+2      	; 0x1e08 <__addsf3x+0x20>
    1e06:	e0 95       	com	r30
    1e08:	0b 2e       	mov	r0, r27
    1e0a:	ba 2f       	mov	r27, r26
    1e0c:	a0 2d       	mov	r26, r0
    1e0e:	0b 01       	movw	r0, r22
    1e10:	b9 01       	movw	r22, r18
    1e12:	90 01       	movw	r18, r0
    1e14:	0c 01       	movw	r0, r24
    1e16:	ca 01       	movw	r24, r20
    1e18:	a0 01       	movw	r20, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	ff 27       	eor	r31, r31
    1e1e:	59 1b       	sub	r21, r25
    1e20:	99 f0       	breq	.+38     	; 0x1e48 <__addsf3x+0x60>
    1e22:	59 3f       	cpi	r21, 0xF9	; 249
    1e24:	50 f4       	brcc	.+20     	; 0x1e3a <__addsf3x+0x52>
    1e26:	50 3e       	cpi	r21, 0xE0	; 224
    1e28:	68 f1       	brcs	.+90     	; 0x1e84 <__addsf3x+0x9c>
    1e2a:	1a 16       	cp	r1, r26
    1e2c:	f0 40       	sbci	r31, 0x00	; 0
    1e2e:	a2 2f       	mov	r26, r18
    1e30:	23 2f       	mov	r18, r19
    1e32:	34 2f       	mov	r19, r20
    1e34:	44 27       	eor	r20, r20
    1e36:	58 5f       	subi	r21, 0xF8	; 248
    1e38:	f3 cf       	rjmp	.-26     	; 0x1e20 <__addsf3x+0x38>
    1e3a:	46 95       	lsr	r20
    1e3c:	37 95       	ror	r19
    1e3e:	27 95       	ror	r18
    1e40:	a7 95       	ror	r26
    1e42:	f0 40       	sbci	r31, 0x00	; 0
    1e44:	53 95       	inc	r21
    1e46:	c9 f7       	brne	.-14     	; 0x1e3a <__addsf3x+0x52>
    1e48:	7e f4       	brtc	.+30     	; 0x1e68 <__addsf3x+0x80>
    1e4a:	1f 16       	cp	r1, r31
    1e4c:	ba 0b       	sbc	r27, r26
    1e4e:	62 0b       	sbc	r22, r18
    1e50:	73 0b       	sbc	r23, r19
    1e52:	84 0b       	sbc	r24, r20
    1e54:	ba f0       	brmi	.+46     	; 0x1e84 <__addsf3x+0x9c>
    1e56:	91 50       	subi	r25, 0x01	; 1
    1e58:	a1 f0       	breq	.+40     	; 0x1e82 <__addsf3x+0x9a>
    1e5a:	ff 0f       	add	r31, r31
    1e5c:	bb 1f       	adc	r27, r27
    1e5e:	66 1f       	adc	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	c2 f7       	brpl	.-16     	; 0x1e56 <__addsf3x+0x6e>
    1e66:	0e c0       	rjmp	.+28     	; 0x1e84 <__addsf3x+0x9c>
    1e68:	ba 0f       	add	r27, r26
    1e6a:	62 1f       	adc	r22, r18
    1e6c:	73 1f       	adc	r23, r19
    1e6e:	84 1f       	adc	r24, r20
    1e70:	48 f4       	brcc	.+18     	; 0x1e84 <__addsf3x+0x9c>
    1e72:	87 95       	ror	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b7 95       	ror	r27
    1e7a:	f7 95       	ror	r31
    1e7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <__addsf3x+0x9a>
    1e80:	b0 cf       	rjmp	.-160    	; 0x1de2 <__addsf3+0x28>
    1e82:	93 95       	inc	r25
    1e84:	88 0f       	add	r24, r24
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <__addsf3x+0xa2>
    1e88:	99 27       	eor	r25, r25
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	97 95       	ror	r25
    1e8e:	87 95       	ror	r24
    1e90:	08 95       	ret

00001e92 <__divsf3>:
    1e92:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divsf3x>
    1e96:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    1e9a:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    1e9e:	58 f0       	brcs	.+22     	; 0x1eb6 <__divsf3+0x24>
    1ea0:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    1ea4:	40 f0       	brcs	.+16     	; 0x1eb6 <__divsf3+0x24>
    1ea6:	29 f4       	brne	.+10     	; 0x1eb2 <__divsf3+0x20>
    1ea8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eaa:	29 f0       	breq	.+10     	; 0x1eb6 <__divsf3+0x24>
    1eac:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    1eb0:	51 11       	cpse	r21, r1
    1eb2:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    1eb6:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>

00001eba <__divsf3x>:
    1eba:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    1ebe:	68 f3       	brcs	.-38     	; 0x1e9a <__divsf3+0x8>

00001ec0 <__divsf3_pse>:
    1ec0:	99 23       	and	r25, r25
    1ec2:	b1 f3       	breq	.-20     	; 0x1eb0 <__divsf3+0x1e>
    1ec4:	55 23       	and	r21, r21
    1ec6:	91 f3       	breq	.-28     	; 0x1eac <__divsf3+0x1a>
    1ec8:	95 1b       	sub	r25, r21
    1eca:	55 0b       	sbc	r21, r21
    1ecc:	bb 27       	eor	r27, r27
    1ece:	aa 27       	eor	r26, r26
    1ed0:	62 17       	cp	r22, r18
    1ed2:	73 07       	cpc	r23, r19
    1ed4:	84 07       	cpc	r24, r20
    1ed6:	38 f0       	brcs	.+14     	; 0x1ee6 <__divsf3_pse+0x26>
    1ed8:	9f 5f       	subi	r25, 0xFF	; 255
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	22 0f       	add	r18, r18
    1ede:	33 1f       	adc	r19, r19
    1ee0:	44 1f       	adc	r20, r20
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	a9 f3       	breq	.-22     	; 0x1ed0 <__divsf3_pse+0x10>
    1ee6:	35 d0       	rcall	.+106    	; 0x1f52 <__divsf3_pse+0x92>
    1ee8:	0e 2e       	mov	r0, r30
    1eea:	3a f0       	brmi	.+14     	; 0x1efa <__divsf3_pse+0x3a>
    1eec:	e0 e8       	ldi	r30, 0x80	; 128
    1eee:	32 d0       	rcall	.+100    	; 0x1f54 <__divsf3_pse+0x94>
    1ef0:	91 50       	subi	r25, 0x01	; 1
    1ef2:	50 40       	sbci	r21, 0x00	; 0
    1ef4:	e6 95       	lsr	r30
    1ef6:	00 1c       	adc	r0, r0
    1ef8:	ca f7       	brpl	.-14     	; 0x1eec <__divsf3_pse+0x2c>
    1efa:	2b d0       	rcall	.+86     	; 0x1f52 <__divsf3_pse+0x92>
    1efc:	fe 2f       	mov	r31, r30
    1efe:	29 d0       	rcall	.+82     	; 0x1f52 <__divsf3_pse+0x92>
    1f00:	66 0f       	add	r22, r22
    1f02:	77 1f       	adc	r23, r23
    1f04:	88 1f       	adc	r24, r24
    1f06:	bb 1f       	adc	r27, r27
    1f08:	26 17       	cp	r18, r22
    1f0a:	37 07       	cpc	r19, r23
    1f0c:	48 07       	cpc	r20, r24
    1f0e:	ab 07       	cpc	r26, r27
    1f10:	b0 e8       	ldi	r27, 0x80	; 128
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <__divsf3_pse+0x56>
    1f14:	bb 0b       	sbc	r27, r27
    1f16:	80 2d       	mov	r24, r0
    1f18:	bf 01       	movw	r22, r30
    1f1a:	ff 27       	eor	r31, r31
    1f1c:	93 58       	subi	r25, 0x83	; 131
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f20:	3a f0       	brmi	.+14     	; 0x1f30 <__divsf3_pse+0x70>
    1f22:	9e 3f       	cpi	r25, 0xFE	; 254
    1f24:	51 05       	cpc	r21, r1
    1f26:	78 f0       	brcs	.+30     	; 0x1f46 <__divsf3_pse+0x86>
    1f28:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    1f2c:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    1f30:	5f 3f       	cpi	r21, 0xFF	; 255
    1f32:	e4 f3       	brlt	.-8      	; 0x1f2c <__divsf3_pse+0x6c>
    1f34:	98 3e       	cpi	r25, 0xE8	; 232
    1f36:	d4 f3       	brlt	.-12     	; 0x1f2c <__divsf3_pse+0x6c>
    1f38:	86 95       	lsr	r24
    1f3a:	77 95       	ror	r23
    1f3c:	67 95       	ror	r22
    1f3e:	b7 95       	ror	r27
    1f40:	f7 95       	ror	r31
    1f42:	9f 5f       	subi	r25, 0xFF	; 255
    1f44:	c9 f7       	brne	.-14     	; 0x1f38 <__divsf3_pse+0x78>
    1f46:	88 0f       	add	r24, r24
    1f48:	91 1d       	adc	r25, r1
    1f4a:	96 95       	lsr	r25
    1f4c:	87 95       	ror	r24
    1f4e:	97 f9       	bld	r25, 7
    1f50:	08 95       	ret
    1f52:	e1 e0       	ldi	r30, 0x01	; 1
    1f54:	66 0f       	add	r22, r22
    1f56:	77 1f       	adc	r23, r23
    1f58:	88 1f       	adc	r24, r24
    1f5a:	bb 1f       	adc	r27, r27
    1f5c:	62 17       	cp	r22, r18
    1f5e:	73 07       	cpc	r23, r19
    1f60:	84 07       	cpc	r24, r20
    1f62:	ba 07       	cpc	r27, r26
    1f64:	20 f0       	brcs	.+8      	; 0x1f6e <__divsf3_pse+0xae>
    1f66:	62 1b       	sub	r22, r18
    1f68:	73 0b       	sbc	r23, r19
    1f6a:	84 0b       	sbc	r24, r20
    1f6c:	ba 0b       	sbc	r27, r26
    1f6e:	ee 1f       	adc	r30, r30
    1f70:	88 f7       	brcc	.-30     	; 0x1f54 <__divsf3_pse+0x94>
    1f72:	e0 95       	com	r30
    1f74:	08 95       	ret

00001f76 <__fixunssfsi>:
    1f76:	0e 94 57 10 	call	0x20ae	; 0x20ae <__fp_splitA>
    1f7a:	88 f0       	brcs	.+34     	; 0x1f9e <__fixunssfsi+0x28>
    1f7c:	9f 57       	subi	r25, 0x7F	; 127
    1f7e:	98 f0       	brcs	.+38     	; 0x1fa6 <__fixunssfsi+0x30>
    1f80:	b9 2f       	mov	r27, r25
    1f82:	99 27       	eor	r25, r25
    1f84:	b7 51       	subi	r27, 0x17	; 23
    1f86:	b0 f0       	brcs	.+44     	; 0x1fb4 <__fixunssfsi+0x3e>
    1f88:	e1 f0       	breq	.+56     	; 0x1fc2 <__fixunssfsi+0x4c>
    1f8a:	66 0f       	add	r22, r22
    1f8c:	77 1f       	adc	r23, r23
    1f8e:	88 1f       	adc	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	1a f0       	brmi	.+6      	; 0x1f9a <__fixunssfsi+0x24>
    1f94:	ba 95       	dec	r27
    1f96:	c9 f7       	brne	.-14     	; 0x1f8a <__fixunssfsi+0x14>
    1f98:	14 c0       	rjmp	.+40     	; 0x1fc2 <__fixunssfsi+0x4c>
    1f9a:	b1 30       	cpi	r27, 0x01	; 1
    1f9c:	91 f0       	breq	.+36     	; 0x1fc2 <__fixunssfsi+0x4c>
    1f9e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_zero>
    1fa2:	b1 e0       	ldi	r27, 0x01	; 1
    1fa4:	08 95       	ret
    1fa6:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_zero>
    1faa:	67 2f       	mov	r22, r23
    1fac:	78 2f       	mov	r23, r24
    1fae:	88 27       	eor	r24, r24
    1fb0:	b8 5f       	subi	r27, 0xF8	; 248
    1fb2:	39 f0       	breq	.+14     	; 0x1fc2 <__fixunssfsi+0x4c>
    1fb4:	b9 3f       	cpi	r27, 0xF9	; 249
    1fb6:	cc f3       	brlt	.-14     	; 0x1faa <__fixunssfsi+0x34>
    1fb8:	86 95       	lsr	r24
    1fba:	77 95       	ror	r23
    1fbc:	67 95       	ror	r22
    1fbe:	b3 95       	inc	r27
    1fc0:	d9 f7       	brne	.-10     	; 0x1fb8 <__fixunssfsi+0x42>
    1fc2:	3e f4       	brtc	.+14     	; 0x1fd2 <__fixunssfsi+0x5c>
    1fc4:	90 95       	com	r25
    1fc6:	80 95       	com	r24
    1fc8:	70 95       	com	r23
    1fca:	61 95       	neg	r22
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	08 95       	ret

00001fd4 <__floatunsisf>:
    1fd4:	e8 94       	clt
    1fd6:	09 c0       	rjmp	.+18     	; 0x1fea <__floatsisf+0x12>

00001fd8 <__floatsisf>:
    1fd8:	97 fb       	bst	r25, 7
    1fda:	3e f4       	brtc	.+14     	; 0x1fea <__floatsisf+0x12>
    1fdc:	90 95       	com	r25
    1fde:	80 95       	com	r24
    1fe0:	70 95       	com	r23
    1fe2:	61 95       	neg	r22
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	99 23       	and	r25, r25
    1fec:	a9 f0       	breq	.+42     	; 0x2018 <__floatsisf+0x40>
    1fee:	f9 2f       	mov	r31, r25
    1ff0:	96 e9       	ldi	r25, 0x96	; 150
    1ff2:	bb 27       	eor	r27, r27
    1ff4:	93 95       	inc	r25
    1ff6:	f6 95       	lsr	r31
    1ff8:	87 95       	ror	r24
    1ffa:	77 95       	ror	r23
    1ffc:	67 95       	ror	r22
    1ffe:	b7 95       	ror	r27
    2000:	f1 11       	cpse	r31, r1
    2002:	f8 cf       	rjmp	.-16     	; 0x1ff4 <__floatsisf+0x1c>
    2004:	fa f4       	brpl	.+62     	; 0x2044 <__floatsisf+0x6c>
    2006:	bb 0f       	add	r27, r27
    2008:	11 f4       	brne	.+4      	; 0x200e <__floatsisf+0x36>
    200a:	60 ff       	sbrs	r22, 0
    200c:	1b c0       	rjmp	.+54     	; 0x2044 <__floatsisf+0x6c>
    200e:	6f 5f       	subi	r22, 0xFF	; 255
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	8f 4f       	sbci	r24, 0xFF	; 255
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	16 c0       	rjmp	.+44     	; 0x2044 <__floatsisf+0x6c>
    2018:	88 23       	and	r24, r24
    201a:	11 f0       	breq	.+4      	; 0x2020 <__floatsisf+0x48>
    201c:	96 e9       	ldi	r25, 0x96	; 150
    201e:	11 c0       	rjmp	.+34     	; 0x2042 <__floatsisf+0x6a>
    2020:	77 23       	and	r23, r23
    2022:	21 f0       	breq	.+8      	; 0x202c <__floatsisf+0x54>
    2024:	9e e8       	ldi	r25, 0x8E	; 142
    2026:	87 2f       	mov	r24, r23
    2028:	76 2f       	mov	r23, r22
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <__floatsisf+0x5e>
    202c:	66 23       	and	r22, r22
    202e:	71 f0       	breq	.+28     	; 0x204c <__floatsisf+0x74>
    2030:	96 e8       	ldi	r25, 0x86	; 134
    2032:	86 2f       	mov	r24, r22
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	2a f0       	brmi	.+10     	; 0x2044 <__floatsisf+0x6c>
    203a:	9a 95       	dec	r25
    203c:	66 0f       	add	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	88 1f       	adc	r24, r24
    2042:	da f7       	brpl	.-10     	; 0x203a <__floatsisf+0x62>
    2044:	88 0f       	add	r24, r24
    2046:	96 95       	lsr	r25
    2048:	87 95       	ror	r24
    204a:	97 f9       	bld	r25, 7
    204c:	08 95       	ret

0000204e <__fp_inf>:
    204e:	97 f9       	bld	r25, 7
    2050:	9f 67       	ori	r25, 0x7F	; 127
    2052:	80 e8       	ldi	r24, 0x80	; 128
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	08 95       	ret

0000205a <__fp_nan>:
    205a:	9f ef       	ldi	r25, 0xFF	; 255
    205c:	80 ec       	ldi	r24, 0xC0	; 192
    205e:	08 95       	ret

00002060 <__fp_pscA>:
    2060:	00 24       	eor	r0, r0
    2062:	0a 94       	dec	r0
    2064:	16 16       	cp	r1, r22
    2066:	17 06       	cpc	r1, r23
    2068:	18 06       	cpc	r1, r24
    206a:	09 06       	cpc	r0, r25
    206c:	08 95       	ret

0000206e <__fp_pscB>:
    206e:	00 24       	eor	r0, r0
    2070:	0a 94       	dec	r0
    2072:	12 16       	cp	r1, r18
    2074:	13 06       	cpc	r1, r19
    2076:	14 06       	cpc	r1, r20
    2078:	05 06       	cpc	r0, r21
    207a:	08 95       	ret

0000207c <__fp_round>:
    207c:	09 2e       	mov	r0, r25
    207e:	03 94       	inc	r0
    2080:	00 0c       	add	r0, r0
    2082:	11 f4       	brne	.+4      	; 0x2088 <__fp_round+0xc>
    2084:	88 23       	and	r24, r24
    2086:	52 f0       	brmi	.+20     	; 0x209c <__fp_round+0x20>
    2088:	bb 0f       	add	r27, r27
    208a:	40 f4       	brcc	.+16     	; 0x209c <__fp_round+0x20>
    208c:	bf 2b       	or	r27, r31
    208e:	11 f4       	brne	.+4      	; 0x2094 <__fp_round+0x18>
    2090:	60 ff       	sbrs	r22, 0
    2092:	04 c0       	rjmp	.+8      	; 0x209c <__fp_round+0x20>
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	8f 4f       	sbci	r24, 0xFF	; 255
    209a:	9f 4f       	sbci	r25, 0xFF	; 255
    209c:	08 95       	ret

0000209e <__fp_split3>:
    209e:	57 fd       	sbrc	r21, 7
    20a0:	90 58       	subi	r25, 0x80	; 128
    20a2:	44 0f       	add	r20, r20
    20a4:	55 1f       	adc	r21, r21
    20a6:	59 f0       	breq	.+22     	; 0x20be <__fp_splitA+0x10>
    20a8:	5f 3f       	cpi	r21, 0xFF	; 255
    20aa:	71 f0       	breq	.+28     	; 0x20c8 <__fp_splitA+0x1a>
    20ac:	47 95       	ror	r20

000020ae <__fp_splitA>:
    20ae:	88 0f       	add	r24, r24
    20b0:	97 fb       	bst	r25, 7
    20b2:	99 1f       	adc	r25, r25
    20b4:	61 f0       	breq	.+24     	; 0x20ce <__fp_splitA+0x20>
    20b6:	9f 3f       	cpi	r25, 0xFF	; 255
    20b8:	79 f0       	breq	.+30     	; 0x20d8 <__fp_splitA+0x2a>
    20ba:	87 95       	ror	r24
    20bc:	08 95       	ret
    20be:	12 16       	cp	r1, r18
    20c0:	13 06       	cpc	r1, r19
    20c2:	14 06       	cpc	r1, r20
    20c4:	55 1f       	adc	r21, r21
    20c6:	f2 cf       	rjmp	.-28     	; 0x20ac <__fp_split3+0xe>
    20c8:	46 95       	lsr	r20
    20ca:	f1 df       	rcall	.-30     	; 0x20ae <__fp_splitA>
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <__fp_splitA+0x30>
    20ce:	16 16       	cp	r1, r22
    20d0:	17 06       	cpc	r1, r23
    20d2:	18 06       	cpc	r1, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	f1 cf       	rjmp	.-30     	; 0x20ba <__fp_splitA+0xc>
    20d8:	86 95       	lsr	r24
    20da:	71 05       	cpc	r23, r1
    20dc:	61 05       	cpc	r22, r1
    20de:	08 94       	sec
    20e0:	08 95       	ret

000020e2 <__fp_zero>:
    20e2:	e8 94       	clt

000020e4 <__fp_szero>:
    20e4:	bb 27       	eor	r27, r27
    20e6:	66 27       	eor	r22, r22
    20e8:	77 27       	eor	r23, r23
    20ea:	cb 01       	movw	r24, r22
    20ec:	97 f9       	bld	r25, 7
    20ee:	08 95       	ret

000020f0 <__mulsf3>:
    20f0:	0e 94 8b 10 	call	0x2116	; 0x2116 <__mulsf3x>
    20f4:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_round>
    20f8:	0e 94 30 10 	call	0x2060	; 0x2060 <__fp_pscA>
    20fc:	38 f0       	brcs	.+14     	; 0x210c <__mulsf3+0x1c>
    20fe:	0e 94 37 10 	call	0x206e	; 0x206e <__fp_pscB>
    2102:	20 f0       	brcs	.+8      	; 0x210c <__mulsf3+0x1c>
    2104:	95 23       	and	r25, r21
    2106:	11 f0       	breq	.+4      	; 0x210c <__mulsf3+0x1c>
    2108:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    210c:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__fp_nan>
    2110:	11 24       	eor	r1, r1
    2112:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>

00002116 <__mulsf3x>:
    2116:	0e 94 4f 10 	call	0x209e	; 0x209e <__fp_split3>
    211a:	70 f3       	brcs	.-36     	; 0x20f8 <__mulsf3+0x8>

0000211c <__mulsf3_pse>:
    211c:	95 9f       	mul	r25, r21
    211e:	c1 f3       	breq	.-16     	; 0x2110 <__mulsf3+0x20>
    2120:	95 0f       	add	r25, r21
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	55 1f       	adc	r21, r21
    2126:	62 9f       	mul	r22, r18
    2128:	f0 01       	movw	r30, r0
    212a:	72 9f       	mul	r23, r18
    212c:	bb 27       	eor	r27, r27
    212e:	f0 0d       	add	r31, r0
    2130:	b1 1d       	adc	r27, r1
    2132:	63 9f       	mul	r22, r19
    2134:	aa 27       	eor	r26, r26
    2136:	f0 0d       	add	r31, r0
    2138:	b1 1d       	adc	r27, r1
    213a:	aa 1f       	adc	r26, r26
    213c:	64 9f       	mul	r22, r20
    213e:	66 27       	eor	r22, r22
    2140:	b0 0d       	add	r27, r0
    2142:	a1 1d       	adc	r26, r1
    2144:	66 1f       	adc	r22, r22
    2146:	82 9f       	mul	r24, r18
    2148:	22 27       	eor	r18, r18
    214a:	b0 0d       	add	r27, r0
    214c:	a1 1d       	adc	r26, r1
    214e:	62 1f       	adc	r22, r18
    2150:	73 9f       	mul	r23, r19
    2152:	b0 0d       	add	r27, r0
    2154:	a1 1d       	adc	r26, r1
    2156:	62 1f       	adc	r22, r18
    2158:	83 9f       	mul	r24, r19
    215a:	a0 0d       	add	r26, r0
    215c:	61 1d       	adc	r22, r1
    215e:	22 1f       	adc	r18, r18
    2160:	74 9f       	mul	r23, r20
    2162:	33 27       	eor	r19, r19
    2164:	a0 0d       	add	r26, r0
    2166:	61 1d       	adc	r22, r1
    2168:	23 1f       	adc	r18, r19
    216a:	84 9f       	mul	r24, r20
    216c:	60 0d       	add	r22, r0
    216e:	21 1d       	adc	r18, r1
    2170:	82 2f       	mov	r24, r18
    2172:	76 2f       	mov	r23, r22
    2174:	6a 2f       	mov	r22, r26
    2176:	11 24       	eor	r1, r1
    2178:	9f 57       	subi	r25, 0x7F	; 127
    217a:	50 40       	sbci	r21, 0x00	; 0
    217c:	9a f0       	brmi	.+38     	; 0x21a4 <__mulsf3_pse+0x88>
    217e:	f1 f0       	breq	.+60     	; 0x21bc <__mulsf3_pse+0xa0>
    2180:	88 23       	and	r24, r24
    2182:	4a f0       	brmi	.+18     	; 0x2196 <__mulsf3_pse+0x7a>
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	bb 1f       	adc	r27, r27
    218a:	66 1f       	adc	r22, r22
    218c:	77 1f       	adc	r23, r23
    218e:	88 1f       	adc	r24, r24
    2190:	91 50       	subi	r25, 0x01	; 1
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	a9 f7       	brne	.-22     	; 0x2180 <__mulsf3_pse+0x64>
    2196:	9e 3f       	cpi	r25, 0xFE	; 254
    2198:	51 05       	cpc	r21, r1
    219a:	80 f0       	brcs	.+32     	; 0x21bc <__mulsf3_pse+0xa0>
    219c:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_inf>
    21a0:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_szero>
    21a4:	5f 3f       	cpi	r21, 0xFF	; 255
    21a6:	e4 f3       	brlt	.-8      	; 0x21a0 <__mulsf3_pse+0x84>
    21a8:	98 3e       	cpi	r25, 0xE8	; 232
    21aa:	d4 f3       	brlt	.-12     	; 0x21a0 <__mulsf3_pse+0x84>
    21ac:	86 95       	lsr	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b7 95       	ror	r27
    21b4:	f7 95       	ror	r31
    21b6:	e7 95       	ror	r30
    21b8:	9f 5f       	subi	r25, 0xFF	; 255
    21ba:	c1 f7       	brne	.-16     	; 0x21ac <__mulsf3_pse+0x90>
    21bc:	fe 2b       	or	r31, r30
    21be:	88 0f       	add	r24, r24
    21c0:	91 1d       	adc	r25, r1
    21c2:	96 95       	lsr	r25
    21c4:	87 95       	ror	r24
    21c6:	97 f9       	bld	r25, 7
    21c8:	08 95       	ret

000021ca <__tablejump2__>:
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	05 90       	lpm	r0, Z+
    21d0:	f4 91       	lpm	r31, Z
    21d2:	e0 2d       	mov	r30, r0
    21d4:	09 94       	ijmp

000021d6 <do_random>:
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	ec 01       	movw	r28, r24
    21ec:	68 81       	ld	r22, Y
    21ee:	79 81       	ldd	r23, Y+1	; 0x01
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	61 15       	cp	r22, r1
    21f6:	71 05       	cpc	r23, r1
    21f8:	81 05       	cpc	r24, r1
    21fa:	91 05       	cpc	r25, r1
    21fc:	21 f4       	brne	.+8      	; 0x2206 <do_random+0x30>
    21fe:	64 e2       	ldi	r22, 0x24	; 36
    2200:	79 ed       	ldi	r23, 0xD9	; 217
    2202:	8b e5       	ldi	r24, 0x5B	; 91
    2204:	97 e0       	ldi	r25, 0x07	; 7
    2206:	2d e1       	ldi	r18, 0x1D	; 29
    2208:	33 ef       	ldi	r19, 0xF3	; 243
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	0e 94 47 11 	call	0x228e	; 0x228e <__divmodsi4>
    2212:	49 01       	movw	r8, r18
    2214:	5a 01       	movw	r10, r20
    2216:	9b 01       	movw	r18, r22
    2218:	ac 01       	movw	r20, r24
    221a:	a7 ea       	ldi	r26, 0xA7	; 167
    221c:	b1 e4       	ldi	r27, 0x41	; 65
    221e:	0e 94 66 11 	call	0x22cc	; 0x22cc <__muluhisi3>
    2222:	6b 01       	movw	r12, r22
    2224:	7c 01       	movw	r14, r24
    2226:	ac ee       	ldi	r26, 0xEC	; 236
    2228:	b4 ef       	ldi	r27, 0xF4	; 244
    222a:	a5 01       	movw	r20, r10
    222c:	94 01       	movw	r18, r8
    222e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <__mulohisi3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8c 0d       	add	r24, r12
    2238:	9d 1d       	adc	r25, r13
    223a:	ae 1d       	adc	r26, r14
    223c:	bf 1d       	adc	r27, r15
    223e:	b7 ff       	sbrs	r27, 7
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <do_random+0x72>
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	a1 09       	sbc	r26, r1
    2246:	b0 48       	sbci	r27, 0x80	; 128
    2248:	88 83       	st	Y, r24
    224a:	99 83       	std	Y+1, r25	; 0x01
    224c:	aa 83       	std	Y+2, r26	; 0x02
    224e:	bb 83       	std	Y+3, r27	; 0x03
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	9f 77       	andi	r25, 0x7F	; 127
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	ff 90       	pop	r15
    225c:	ef 90       	pop	r14
    225e:	df 90       	pop	r13
    2260:	cf 90       	pop	r12
    2262:	bf 90       	pop	r11
    2264:	af 90       	pop	r10
    2266:	9f 90       	pop	r9
    2268:	8f 90       	pop	r8
    226a:	08 95       	ret

0000226c <random_r>:
    226c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <do_random>
    2270:	08 95       	ret

00002272 <random>:
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <do_random>
    227a:	08 95       	ret

0000227c <srandom>:
    227c:	60 93 00 01 	sts	0x0100, r22
    2280:	70 93 01 01 	sts	0x0101, r23
    2284:	80 93 02 01 	sts	0x0102, r24
    2288:	90 93 03 01 	sts	0x0103, r25
    228c:	08 95       	ret

0000228e <__divmodsi4>:
    228e:	05 2e       	mov	r0, r21
    2290:	97 fb       	bst	r25, 7
    2292:	1e f4       	brtc	.+6      	; 0x229a <__divmodsi4+0xc>
    2294:	00 94       	com	r0
    2296:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__negsi2>
    229a:	57 fd       	sbrc	r21, 7
    229c:	07 d0       	rcall	.+14     	; 0x22ac <__divmodsi4_neg2>
    229e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <__udivmodsi4>
    22a2:	07 fc       	sbrc	r0, 7
    22a4:	03 d0       	rcall	.+6      	; 0x22ac <__divmodsi4_neg2>
    22a6:	4e f4       	brtc	.+18     	; 0x22ba <__divmodsi4_exit>
    22a8:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <__negsi2>

000022ac <__divmodsi4_neg2>:
    22ac:	50 95       	com	r21
    22ae:	40 95       	com	r20
    22b0:	30 95       	com	r19
    22b2:	21 95       	neg	r18
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	4f 4f       	sbci	r20, 0xFF	; 255
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255

000022ba <__divmodsi4_exit>:
    22ba:	08 95       	ret

000022bc <__negsi2>:
    22bc:	90 95       	com	r25
    22be:	80 95       	com	r24
    22c0:	70 95       	com	r23
    22c2:	61 95       	neg	r22
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	8f 4f       	sbci	r24, 0xFF	; 255
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	08 95       	ret

000022cc <__muluhisi3>:
    22cc:	0e 94 9b 11 	call	0x2336	; 0x2336 <__umulhisi3>
    22d0:	a5 9f       	mul	r26, r21
    22d2:	90 0d       	add	r25, r0
    22d4:	b4 9f       	mul	r27, r20
    22d6:	90 0d       	add	r25, r0
    22d8:	a4 9f       	mul	r26, r20
    22da:	80 0d       	add	r24, r0
    22dc:	91 1d       	adc	r25, r1
    22de:	11 24       	eor	r1, r1
    22e0:	08 95       	ret

000022e2 <__mulshisi3>:
    22e2:	b7 ff       	sbrs	r27, 7
    22e4:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__muluhisi3>

000022e8 <__mulohisi3>:
    22e8:	0e 94 66 11 	call	0x22cc	; 0x22cc <__muluhisi3>
    22ec:	82 1b       	sub	r24, r18
    22ee:	93 0b       	sbc	r25, r19
    22f0:	08 95       	ret

000022f2 <__udivmodsi4>:
    22f2:	a1 e2       	ldi	r26, 0x21	; 33
    22f4:	1a 2e       	mov	r1, r26
    22f6:	aa 1b       	sub	r26, r26
    22f8:	bb 1b       	sub	r27, r27
    22fa:	fd 01       	movw	r30, r26
    22fc:	0d c0       	rjmp	.+26     	; 0x2318 <__udivmodsi4_ep>

000022fe <__udivmodsi4_loop>:
    22fe:	aa 1f       	adc	r26, r26
    2300:	bb 1f       	adc	r27, r27
    2302:	ee 1f       	adc	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	a2 17       	cp	r26, r18
    2308:	b3 07       	cpc	r27, r19
    230a:	e4 07       	cpc	r30, r20
    230c:	f5 07       	cpc	r31, r21
    230e:	20 f0       	brcs	.+8      	; 0x2318 <__udivmodsi4_ep>
    2310:	a2 1b       	sub	r26, r18
    2312:	b3 0b       	sbc	r27, r19
    2314:	e4 0b       	sbc	r30, r20
    2316:	f5 0b       	sbc	r31, r21

00002318 <__udivmodsi4_ep>:
    2318:	66 1f       	adc	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	88 1f       	adc	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	1a 94       	dec	r1
    2322:	69 f7       	brne	.-38     	; 0x22fe <__udivmodsi4_loop>
    2324:	60 95       	com	r22
    2326:	70 95       	com	r23
    2328:	80 95       	com	r24
    232a:	90 95       	com	r25
    232c:	9b 01       	movw	r18, r22
    232e:	ac 01       	movw	r20, r24
    2330:	bd 01       	movw	r22, r26
    2332:	cf 01       	movw	r24, r30
    2334:	08 95       	ret

00002336 <__umulhisi3>:
    2336:	a2 9f       	mul	r26, r18
    2338:	b0 01       	movw	r22, r0
    233a:	b3 9f       	mul	r27, r19
    233c:	c0 01       	movw	r24, r0
    233e:	a3 9f       	mul	r26, r19
    2340:	70 0d       	add	r23, r0
    2342:	81 1d       	adc	r24, r1
    2344:	11 24       	eor	r1, r1
    2346:	91 1d       	adc	r25, r1
    2348:	b2 9f       	mul	r27, r18
    234a:	70 0d       	add	r23, r0
    234c:	81 1d       	adc	r24, r1
    234e:	11 24       	eor	r1, r1
    2350:	91 1d       	adc	r25, r1
    2352:	08 95       	ret

00002354 <_exit>:
    2354:	f8 94       	cli

00002356 <__stop_program>:
    2356:	ff cf       	rjmp	.-2      	; 0x2356 <__stop_program>
