
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000650  00800100  00800100  00000dd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d6d  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00003e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e10  00000000  00000000  00004566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000097c  00000000  00000000  00005378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000eb1  00000000  00000000  00005cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000430f  00000000  00000000  00006ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000670  00000000  00000000  0000aeb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	27 e0       	ldi	r18, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 35       	cpi	r26, 0x50	; 80
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ee e5       	ldi	r30, 0x5E	; 94
  8c:	fd e0       	ldi	r31, 0x0D	; 13
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 4b 06 	call	0xc96	; 0xc96 <main>
  9e:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z18dmxcontrol_defaultv>:
	uint8_t n_point = top-bot+1;
	uint16_t n_val = abs(from_val-to_val);
	float ratio =(float)n_val/(n_point-1);
	if (from_val>to_val)
	{
		switch (selection)
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	af e2       	ldi	r26, 0x2F	; 47
  ac:	b1 e0       	ldi	r27, 0x01	; 1
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=ratio*i+to_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=ratio*i+to_val;
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	4f ec       	ldi	r20, 0xCF	; 207
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=ratio*i+to_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=ratio*i+to_val;
  b4:	56 e0       	ldi	r21, 0x06	; 6
  b6:	63 e3       	ldi	r22, 0x33	; 51
  b8:	24 e6       	ldi	r18, 0x64	; 100
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=ratio*i+to_val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=ratio*i+to_val;
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	9f ef       	ldi	r25, 0xFF	; 255
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=ratio*i+to_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=ratio*i+to_val;
  c0:	ed 01       	movw	r28, r26
  c2:	21 97       	sbiw	r28, 0x01	; 1
  c4:	68 83       	st	Y, r22
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=ratio*i+to_val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=ratio*i+to_val;
  c6:	1c 92       	st	X, r1
  c8:	12 96       	adiw	r26, 0x02	; 2
  ca:	1c 92       	st	X, r1
	if (from_val>to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=ratio*i+to_val;
  cc:	1e 92       	st	-X, r1
  ce:	11 97       	sbiw	r26, 0x01	; 1
  d0:	14 96       	adiw	r26, 0x04	; 4
  d2:	3c 93       	st	X, r19
  d4:	2e 93       	st	-X, r18
  d6:	13 97       	sbiw	r26, 0x03	; 3
  d8:	ef 01       	movw	r28, r30
  da:	27 97       	sbiw	r28, 0x07	; 7
  dc:	88 83       	st	Y, r24
  de:	17 96       	adiw	r26, 0x07	; 7
  e0:	3c 93       	st	X, r19
  e2:	2e 93       	st	-X, r18
  e4:	16 97       	sbiw	r26, 0x06	; 6
  e6:	23 96       	adiw	r28, 0x03	; 3
  e8:	88 83       	st	Y, r24
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	98 83       	st	Y, r25
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	18 82       	st	Y, r1
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	18 82       	st	Y, r1
  f6:	10 82       	st	Z, r1
  f8:	1f 96       	adiw	r26, 0x0f	; 15
  fa:	3f 96       	adiw	r30, 0x0f	; 15
  fc:	a4 17       	cp	r26, r20
  fe:	b5 07       	cpc	r27, r21
 100:	f9 f6       	brne	.-66     	; 0xc0 <_Z18dmxcontrol_defaultv+0x1a>
 102:	10 92 0e 01 	sts	0x010E, r1
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <_Z11dmxctr_openv>:
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 0e 01 	sts	0x010E, r24
 112:	08 95       	ret

00000114 <_Z12dmxctr_closev>:
 114:	10 92 0e 01 	sts	0x010E, r1
 118:	08 95       	ret

0000011a <_Z12dmxctr_usingjj>:
 11a:	90 93 0c 01 	sts	0x010C, r25
 11e:	80 93 0b 01 	sts	0x010B, r24
 122:	70 93 0a 01 	sts	0x010A, r23
 126:	60 93 09 01 	sts	0x0109, r22
 12a:	08 95       	ret

0000012c <_Z8gray_adjhh>:
 12c:	cf 92       	push	r12
 12e:	df 92       	push	r13
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	60 36       	cpi	r22, 0x60	; 96
 13c:	08 f0       	brcs	.+2      	; 0x140 <_Z8gray_adjhh+0x14>
 13e:	d7 c0       	rjmp	.+430    	; 0x2ee <_Z8gray_adjhh+0x1c2>
 140:	a8 2f       	mov	r26, r24
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	6a 1b       	sub	r22, r26
 148:	7b 0b       	sbc	r23, r27
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	16 16       	cp	r1, r22
 150:	17 06       	cpc	r1, r23
 152:	0c f0       	brlt	.+2      	; 0x156 <_Z8gray_adjhh+0x2a>
 154:	c5 c0       	rjmp	.+394    	; 0x2e0 <_Z8gray_adjhh+0x1b4>
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	08 e1       	ldi	r16, 0x18	; 24
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	0f 2e       	mov	r0, r31
 164:	f2 e3       	ldi	r31, 0x32	; 50
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=ratio*i+to_val;
 166:	cf 2e       	mov	r12, r31
 168:	d1 2c       	mov	r13, r1
 16a:	f0 2d       	mov	r31, r0
 16c:	0f 2e       	mov	r0, r31
 16e:	f3 e3       	ldi	r31, 0x33	; 51
 170:	ff 2e       	mov	r15, r31
 172:	f0 2d       	mov	r31, r0
 174:	84 9f       	mul	r24, r20
 176:	f0 01       	movw	r30, r0
 178:	85 9f       	mul	r24, r21
 17a:	f0 0d       	add	r31, r0
 17c:	11 24       	eor	r1, r1
 17e:	e3 5d       	subi	r30, 0xD3	; 211
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	26 85       	ldd	r18, Z+14	; 0x0e
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	35 95       	asr	r19
 18c:	27 95       	ror	r18
 18e:	35 95       	asr	r19
 190:	27 95       	ror	r18
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	22 30       	cpi	r18, 0x02	; 2
 198:	31 05       	cpc	r19, r1
 19a:	09 f4       	brne	.+2      	; 0x19e <_Z8gray_adjhh+0x72>
 19c:	5c c0       	rjmp	.+184    	; 0x256 <_Z8gray_adjhh+0x12a>
 19e:	3c f4       	brge	.+14     	; 0x1ae <_Z8gray_adjhh+0x82>
 1a0:	21 15       	cp	r18, r1
 1a2:	31 05       	cpc	r19, r1
 1a4:	61 f0       	breq	.+24     	; 0x1be <_Z8gray_adjhh+0x92>
 1a6:	21 30       	cpi	r18, 0x01	; 1
 1a8:	31 05       	cpc	r19, r1
 1aa:	c9 f0       	breq	.+50     	; 0x1de <_Z8gray_adjhh+0xb2>
 1ac:	92 c0       	rjmp	.+292    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 1ae:	23 30       	cpi	r18, 0x03	; 3
 1b0:	31 05       	cpc	r19, r1
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <_Z8gray_adjhh+0x8a>
 1b4:	70 c0       	rjmp	.+224    	; 0x296 <_Z8gray_adjhh+0x16a>
 1b6:	24 30       	cpi	r18, 0x04	; 4
 1b8:	31 05       	cpc	r19, r1
 1ba:	19 f1       	breq	.+70     	; 0x202 <_Z8gray_adjhh+0xd6>
 1bc:	8a c0       	rjmp	.+276    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 1be:	fd 01       	movw	r30, r26
 1c0:	e4 0f       	add	r30, r20
 1c2:	f5 1f       	adc	r31, r21
 1c4:	84 9f       	mul	r24, r20
 1c6:	90 01       	movw	r18, r0
 1c8:	85 9f       	mul	r24, r21
 1ca:	30 0d       	add	r19, r0
 1cc:	11 24       	eor	r1, r1
 1ce:	23 5d       	subi	r18, 0xD3	; 211
 1d0:	3e 4f       	sbci	r19, 0xFE	; 254
 1d2:	e9 01       	movw	r28, r18
 1d4:	28 81       	ld	r18, Y
 1d6:	e0 51       	subi	r30, 0x10	; 16
 1d8:	f9 4f       	sbci	r31, 0xF9	; 249
 1da:	20 83       	st	Z, r18
 1dc:	7a c0       	rjmp	.+244    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=ratio*i+to_val;
 1de:	fd 01       	movw	r30, r26
 1e0:	e4 0f       	add	r30, r20
 1e2:	f5 1f       	adc	r31, r21
 1e4:	84 9f       	mul	r24, r20
 1e6:	90 01       	movw	r18, r0
 1e8:	85 9f       	mul	r24, r21
 1ea:	30 0d       	add	r19, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	23 5d       	subi	r18, 0xD3	; 211
 1f0:	3e 4f       	sbci	r19, 0xFE	; 254
 1f2:	e9 01       	movw	r28, r18
 1f4:	28 81       	ld	r18, Y
 1f6:	df 2d       	mov	r29, r15
 1f8:	d2 1b       	sub	r29, r18
 1fa:	e0 51       	subi	r30, 0x10	; 16
 1fc:	f9 4f       	sbci	r31, 0xF9	; 249
 1fe:	d0 83       	st	Z, r29
 200:	68 c0       	rjmp	.+208    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 202:	84 9f       	mul	r24, r20
 204:	f0 01       	movw	r30, r0
 206:	85 9f       	mul	r24, r21
 208:	f0 0d       	add	r31, r0
 20a:	11 24       	eor	r1, r1
 20c:	e3 5d       	subi	r30, 0xD3	; 211
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	20 81       	ld	r18, Z
 212:	29 31       	cpi	r18, 0x19	; 25
 214:	80 f0       	brcs	.+32     	; 0x236 <_Z8gray_adjhh+0x10a>
 216:	fd 01       	movw	r30, r26
 218:	e4 0f       	add	r30, r20
 21a:	f5 1f       	adc	r31, r21
 21c:	84 9f       	mul	r24, r20
 21e:	90 01       	movw	r18, r0
 220:	85 9f       	mul	r24, r21
 222:	30 0d       	add	r19, r0
 224:	11 24       	eor	r1, r1
 226:	23 5d       	subi	r18, 0xD3	; 211
 228:	3e 4f       	sbci	r19, 0xFE	; 254
 22a:	e9 01       	movw	r28, r18
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	e0 51       	subi	r30, 0x10	; 16
 230:	f9 4f       	sbci	r31, 0xF9	; 249
 232:	20 83       	st	Z, r18
 234:	4e c0       	rjmp	.+156    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 236:	fd 01       	movw	r30, r26
 238:	e4 0f       	add	r30, r20
 23a:	f5 1f       	adc	r31, r21
 23c:	84 9f       	mul	r24, r20
 23e:	90 01       	movw	r18, r0
 240:	85 9f       	mul	r24, r21
 242:	30 0d       	add	r19, r0
 244:	11 24       	eor	r1, r1
 246:	23 5d       	subi	r18, 0xD3	; 211
 248:	3e 4f       	sbci	r19, 0xFE	; 254
 24a:	e9 01       	movw	r28, r18
 24c:	2a 81       	ldd	r18, Y+2	; 0x02
 24e:	e0 51       	subi	r30, 0x10	; 16
 250:	f9 4f       	sbci	r31, 0xF9	; 249
 252:	20 83       	st	Z, r18
 254:	3e c0       	rjmp	.+124    	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 256:	84 9f       	mul	r24, r20
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=ratio*i+to_val;
 258:	f0 01       	movw	r30, r0
 25a:	85 9f       	mul	r24, r21
 25c:	f0 0d       	add	r31, r0
 25e:	11 24       	eor	r1, r1
 260:	e3 5d       	subi	r30, 0xD3	; 211
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	20 81       	ld	r18, Z
 266:	29 31       	cpi	r18, 0x19	; 25
 268:	68 f4       	brcc	.+26     	; 0x284 <_Z8gray_adjhh+0x158>
 26a:	4a 0f       	add	r20, r26
 26c:	5b 1f       	adc	r21, r27
 26e:	f8 01       	movw	r30, r16
 270:	e2 1b       	sub	r30, r18
 272:	f1 09       	sbc	r31, r1
 274:	9f 01       	movw	r18, r30
 276:	22 0f       	add	r18, r18
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	fa 01       	movw	r30, r20
 27c:	e0 51       	subi	r30, 0x10	; 16
 27e:	f9 4f       	sbci	r31, 0xF9	; 249
 280:	20 83       	st	Z, r18
 282:	27 c0       	rjmp	.+78     	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 284:	4a 0f       	add	r20, r26
 286:	5b 1f       	adc	r21, r27
 288:	22 0f       	add	r18, r18
 28a:	21 53       	subi	r18, 0x31	; 49
 28c:	fa 01       	movw	r30, r20
 28e:	e0 51       	subi	r30, 0x10	; 16
 290:	f9 4f       	sbci	r31, 0xF9	; 249
 292:	20 83       	st	Z, r18
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 296:	84 9f       	mul	r24, r20
 298:	f0 01       	movw	r30, r0
 29a:	85 9f       	mul	r24, r21
 29c:	f0 0d       	add	r31, r0
 29e:	11 24       	eor	r1, r1
 2a0:	e3 5d       	subi	r30, 0xD3	; 211
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	20 81       	ld	r18, Z
 2a6:	29 31       	cpi	r18, 0x19	; 25
 2a8:	48 f4       	brcc	.+18     	; 0x2bc <_Z8gray_adjhh+0x190>
 2aa:	4a 0f       	add	r20, r26
 2ac:	5b 1f       	adc	r21, r27
 2ae:	22 0f       	add	r18, r18
 2b0:	2e 5f       	subi	r18, 0xFE	; 254
 2b2:	fa 01       	movw	r30, r20
 2b4:	e0 51       	subi	r30, 0x10	; 16
 2b6:	f9 4f       	sbci	r31, 0xF9	; 249
 2b8:	20 83       	st	Z, r18
 2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <_Z8gray_adjhh+0x1a6>
 2bc:	4a 0f       	add	r20, r26
 2be:	5b 1f       	adc	r21, r27
 2c0:	e6 01       	movw	r28, r12
 2c2:	c2 1b       	sub	r28, r18
 2c4:	d1 09       	sbc	r29, r1
 2c6:	9e 01       	movw	r18, r28
 2c8:	22 0f       	add	r18, r18
 2ca:	fa 01       	movw	r30, r20
 2cc:	e0 51       	subi	r30, 0x10	; 16
 2ce:	f9 4f       	sbci	r31, 0xF9	; 249
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=ratio*i+to_val;
 2d0:	20 83       	st	Z, r18
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	49 2f       	mov	r20, r25
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	46 17       	cp	r20, r22
 2da:	57 07       	cpc	r21, r23
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <_Z8gray_adjhh+0x1b4>
 2de:	4a cf       	rjmp	.-364    	; 0x174 <_Z8gray_adjhh+0x48>
 2e0:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z12DMX_Is_Readyv>
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <_Z8gray_adjhh+0x1c2>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z18DMX_start_transmith>
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <_Z8delay_msm>:
 2fe:	60 93 05 01 	sts	0x0105, r22
 302:	70 93 06 01 	sts	0x0106, r23
 306:	80 93 07 01 	sts	0x0107, r24
 30a:	90 93 08 01 	sts	0x0108, r25
 30e:	80 91 05 01 	lds	r24, 0x0105
 312:	90 91 06 01 	lds	r25, 0x0106
 316:	a0 91 07 01 	lds	r26, 0x0107
 31a:	b0 91 08 01 	lds	r27, 0x0108
 31e:	89 2b       	or	r24, r25
 320:	8a 2b       	or	r24, r26
 322:	8b 2b       	or	r24, r27
 324:	a1 f7       	brne	.-24     	; 0x30e <_Z8delay_msm+0x10>
 326:	08 95       	ret

00000328 <_Z11timer0_initv>:
 328:	85 b5       	in	r24, 0x25	; 37
 32a:	85 60       	ori	r24, 0x05	; 5
 32c:	85 bd       	out	0x25, r24	; 37
 32e:	ee e6       	ldi	r30, 0x6E	; 110
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 83       	st	Z, r24
 338:	a8 98       	cbi	0x15, 0	; 21
 33a:	16 bc       	out	0x26, r1	; 38
 33c:	08 95       	ret

0000033e <_Z9rota_inithjj>:
 33e:	85 30       	cpi	r24, 0x05	; 5
 340:	e8 f5       	brcc	.+122    	; 0x3bc <_Z9rota_inithjj+0x7e>
 342:	46 17       	cp	r20, r22
 344:	57 07       	cpc	r21, r23
 346:	18 f0       	brcs	.+6      	; 0x34e <_Z9rota_inithjj+0x10>
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=ratio*i+to_val;
 348:	40 36       	cpi	r20, 0x60	; 96
 34a:	51 05       	cpc	r21, r1
 34c:	48 f0       	brcs	.+18     	; 0x360 <_Z9rota_inithjj+0x22>
 34e:	10 92 04 01 	sts	0x0104, r1
 352:	10 92 03 01 	sts	0x0103, r1
 356:	10 92 02 01 	sts	0x0102, r1
 35a:	10 92 01 01 	sts	0x0101, r1
 35e:	08 c0       	rjmp	.+16     	; 0x370 <_Z9rota_inithjj+0x32>
 360:	70 93 04 01 	sts	0x0104, r23
 364:	60 93 03 01 	sts	0x0103, r22
 368:	50 93 02 01 	sts	0x0102, r21
 36c:	40 93 01 01 	sts	0x0101, r20
 370:	80 93 00 01 	sts	0x0100, r24
 374:	20 91 01 01 	lds	r18, 0x0101
 378:	30 91 02 01 	lds	r19, 0x0102
 37c:	40 91 03 01 	lds	r20, 0x0103
 380:	50 91 04 01 	lds	r21, 0x0104
 384:	80 91 00 01 	lds	r24, 0x0100
 388:	20 32       	cpi	r18, 0x20	; 32
 38a:	c0 f4       	brcc	.+48     	; 0x3bc <_Z9rota_inithjj+0x7e>
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	df 01       	movw	r26, r30
 396:	a8 0f       	add	r26, r24
 398:	b9 1f       	adc	r27, r25
 39a:	aa 0f       	add	r26, r26
 39c:	bb 1f       	adc	r27, r27
 39e:	a1 5f       	subi	r26, 0xF1	; 241
 3a0:	be 4f       	sbci	r27, 0xFE	; 254
 3a2:	14 96       	adiw	r26, 0x04	; 4
 3a4:	4c 93       	st	X, r20
			default:
			break;
		}
	}

	else if (from_val<to_val)
 3a6:	14 97       	sbiw	r26, 0x04	; 4
 3a8:	15 96       	adiw	r26, 0x05	; 5
 3aa:	2c 93       	st	X, r18
 3ac:	15 97       	sbiw	r26, 0x05	; 5
	{
		switch (selection)
 3ae:	11 96       	adiw	r26, 0x01	; 1
 3b0:	1c 92       	st	X, r1
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	1c 92       	st	X, r1
 3b6:	fd 01       	movw	r30, r26
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	82 83       	std	Z+2, r24	; 0x02
 3bc:	08 95       	ret

000003be <_Z8rota_runh4NAVI>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	40 91 01 01 	lds	r20, 0x0101
 3c6:	50 91 02 01 	lds	r21, 0x0102
 3ca:	c0 91 03 01 	lds	r28, 0x0103
 3ce:	d0 91 04 01 	lds	r29, 0x0104
 3d2:	20 91 00 01 	lds	r18, 0x0100
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=ratio*i+from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=ratio*i+from_val;
 3d6:	40 32       	cpi	r20, 0x20	; 32
 3d8:	c0 f4       	brcc	.+48     	; 0x40a <_Z8rota_runh4NAVI+0x4c>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=ratio*i+from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=ratio*i+from_val;
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	ee 0f       	add	r30, r30
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=ratio*i+from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=ratio*i+from_val;
 3e0:	ff 1f       	adc	r31, r31
 3e2:	df 01       	movw	r26, r30
 3e4:	a2 0f       	add	r26, r18
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=ratio*i+from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=ratio*i+from_val;
 3e6:	b3 1f       	adc	r27, r19
 3e8:	aa 0f       	add	r26, r26
 3ea:	bb 1f       	adc	r27, r27
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=ratio*i+from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=ratio*i+from_val;
 3ec:	a1 5f       	subi	r26, 0xF1	; 241
 3ee:	be 4f       	sbci	r27, 0xFE	; 254
 3f0:	14 96       	adiw	r26, 0x04	; 4
	else if (from_val<to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=ratio*i+from_val;
 3f2:	cc 93       	st	X, r28
 3f4:	14 97       	sbiw	r26, 0x04	; 4
 3f6:	15 96       	adiw	r26, 0x05	; 5
 3f8:	4c 93       	st	X, r20
 3fa:	15 97       	sbiw	r26, 0x05	; 5
 3fc:	11 96       	adiw	r26, 0x01	; 1
 3fe:	6c 93       	st	X, r22
 400:	11 97       	sbiw	r26, 0x01	; 1
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	9c 93       	st	X, r25
 406:	fd 01       	movw	r30, r26
 408:	82 83       	std	Z+2, r24	; 0x02
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <_Z11rota_enablev>:
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 0d 01 	sts	0x010D, r24
 416:	08 95       	ret

00000418 <_Z12rota_disablev>:
 418:	10 92 0d 01 	sts	0x010D, r1
 41c:	08 95       	ret

0000041e <_Z18rota_group_defaultv>:
 41e:	10 92 0d 01 	sts	0x010D, r1
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	c9 01       	movw	r24, r18
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	fc 01       	movw	r30, r24
 42e:	e2 0f       	add	r30, r18
 430:	f3 1f       	adc	r31, r19
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	e1 5f       	subi	r30, 0xF1	; 241
 438:	fe 4f       	sbci	r31, 0xFE	; 254
 43a:	14 82       	std	Z+4, r1	; 0x04
 43c:	15 82       	std	Z+5, r1	; 0x05
 43e:	11 82       	std	Z+1, r1	; 0x01
 440:	10 82       	st	Z, r1
 442:	fc 01       	movw	r30, r24
 444:	e2 0f       	add	r30, r18
 446:	f3 1f       	adc	r31, r19
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	e1 5f       	subi	r30, 0xF1	; 241
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	12 82       	std	Z+2, r1	; 0x02
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	25 30       	cpi	r18, 0x05	; 5
 458:	31 05       	cpc	r19, r1
 45a:	29 f7       	brne	.-54     	; 0x426 <_Z18rota_group_defaultv+0x8>
 45c:	08 95       	ret

0000045e <_Z12pattern_fillhhPhhh>:
 45e:	6f 92       	push	r6
 460:	7f 92       	push	r7
 462:	8f 92       	push	r8
 464:	9f 92       	push	r9
 466:	af 92       	push	r10
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	60 32       	cpi	r22, 0x20	; 32
 47c:	08 f0       	brcs	.+2      	; 0x480 <_Z12pattern_fillhhPhhh+0x22>
 47e:	45 c0       	rjmp	.+138    	; 0x50a <_Z12pattern_fillhhPhhh+0xac>
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	e2 2e       	mov	r14, r18
 486:	f1 2c       	mov	r15, r1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	c8 2e       	mov	r12, r24
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=ratio*i+from_val;
 48c:	d1 2c       	mov	r13, r1
 48e:	cb 01       	movw	r24, r22
 490:	8c 19       	sub	r24, r12
 492:	9d 09       	sbc	r25, r13
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	84 2e       	mov	r8, r20
 498:	95 2e       	mov	r9, r21
 49a:	57 01       	movw	r10, r14
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	a2 1a       	sub	r10, r18
 4a0:	b1 08       	sbc	r11, r1
 4a2:	a4 0e       	add	r10, r20
 4a4:	b5 1e       	adc	r11, r21
 4a6:	e1 14       	cp	r14, r1
 4a8:	f1 04       	cpc	r15, r1
 4aa:	61 f1       	breq	.+88     	; 0x504 <_Z12pattern_fillhhPhhh+0xa6>
 4ac:	e8 17       	cp	r30, r24
 4ae:	f9 07       	cpc	r31, r25
 4b0:	60 f5       	brcc	.+88     	; 0x50a <_Z12pattern_fillhhPhhh+0xac>
 4b2:	68 2c       	mov	r6, r8
 4b4:	79 2c       	mov	r7, r9
 4b6:	df 01       	movw	r26, r30
 4b8:	ac 0d       	add	r26, r12
 4ba:	bd 1d       	adc	r27, r13
 4bc:	b5 01       	movw	r22, r10
 4be:	9f 01       	movw	r18, r30
 4c0:	2e 0d       	add	r18, r14
 4c2:	3f 1d       	adc	r19, r15
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <_Z12pattern_fillhhPhhh+0x7a>
 4c6:	4f ef       	ldi	r20, 0xFF	; 255
 4c8:	64 1a       	sub	r6, r20
 4ca:	74 0a       	sbc	r7, r20
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	61 50       	subi	r22, 0x01	; 1
 4d0:	71 09       	sbc	r23, r1
 4d2:	e8 17       	cp	r30, r24
 4d4:	f9 07       	cpc	r31, r25
 4d6:	c8 f4       	brcc	.+50     	; 0x50a <_Z12pattern_fillhhPhhh+0xac>
 4d8:	00 23       	and	r16, r16
 4da:	41 f0       	breq	.+16     	; 0x4ec <_Z12pattern_fillhhPhhh+0x8e>
 4dc:	e3 01       	movw	r28, r6
 4de:	18 81       	ld	r17, Y
 4e0:	ad 01       	movw	r20, r26
 4e2:	43 53       	subi	r20, 0x33	; 51
 4e4:	59 4f       	sbci	r21, 0xF9	; 249
 4e6:	ea 01       	movw	r28, r20
 4e8:	18 83       	st	Y, r17
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <_Z12pattern_fillhhPhhh+0x9c>
 4ec:	eb 01       	movw	r28, r22
 4ee:	18 81       	ld	r17, Y
 4f0:	ad 01       	movw	r20, r26
 4f2:	43 53       	subi	r20, 0x33	; 51
 4f4:	59 4f       	sbci	r21, 0xF9	; 249
 4f6:	ea 01       	movw	r28, r20
 4f8:	18 83       	st	Y, r17
 4fa:	31 96       	adiw	r30, 0x01	; 1
 4fc:	e2 17       	cp	r30, r18
 4fe:	f3 07       	cpc	r31, r19
 500:	11 f7       	brne	.-60     	; 0x4c6 <_Z12pattern_fillhhPhhh+0x68>
 502:	01 c0       	rjmp	.+2      	; 0x506 <_Z12pattern_fillhhPhhh+0xa8>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=ratio*i+from_val;
 504:	9f 01       	movw	r18, r30
 506:	f9 01       	movw	r30, r18
 508:	ce cf       	rjmp	.-100    	; 0x4a6 <_Z12pattern_fillhhPhhh+0x48>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	df 90       	pop	r13
 518:	cf 90       	pop	r12
 51a:	bf 90       	pop	r11
 51c:	af 90       	pop	r10
 51e:	9f 90       	pop	r9
 520:	8f 90       	pop	r8
 522:	7f 90       	pop	r7
 524:	6f 90       	pop	r6
 526:	08 95       	ret

00000528 <_Z17rota_pattern_fillh4NAVIhhhhhhh>:
 528:	8f 92       	push	r8
 52a:	af 92       	push	r10
 52c:	cf 92       	push	r12
 52e:	ef 92       	push	r14
 530:	0f 93       	push	r16
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	27 97       	sbiw	r28, 0x07	; 7
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
 546:	49 83       	std	Y+1, r20	; 0x01
 548:	2a 83       	std	Y+2, r18	; 0x02
 54a:	0b 83       	std	Y+3, r16	; 0x03
 54c:	ec 82       	std	Y+4, r14	; 0x04
 54e:	cd 82       	std	Y+5, r12	; 0x05
 550:	ae 82       	std	Y+6, r10	; 0x06
 552:	8f 82       	std	Y+7, r8	; 0x07
 554:	a0 91 01 01 	lds	r26, 0x0101
 558:	b0 91 02 01 	lds	r27, 0x0102
 55c:	e0 91 03 01 	lds	r30, 0x0103
 560:	f0 91 04 01 	lds	r31, 0x0104
 564:	06 2f       	mov	r16, r22
 566:	28 2f       	mov	r18, r24
 568:	ae 01       	movw	r20, r28
 56a:	4f 5f       	subi	r20, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	6a 2f       	mov	r22, r26
 570:	8e 2f       	mov	r24, r30
 572:	0e 94 2f 02 	call	0x45e	; 0x45e <_Z12pattern_fillhhPhhh>
 576:	27 96       	adiw	r28, 0x07	; 7
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=ratio*i+from_val;
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	0f 91       	pop	r16
 588:	ef 90       	pop	r14
 58a:	cf 90       	pop	r12
 58c:	af 90       	pop	r10
 58e:	8f 90       	pop	r8
 590:	08 95       	ret

00000592 <_Z4rotajjh>:
 592:	44 23       	and	r20, r20
 594:	e1 f0       	breq	.+56     	; 0x5ce <_Z4rotajjh+0x3c>
 596:	fc 01       	movw	r30, r24
 598:	e3 53       	subi	r30, 0x33	; 51
 59a:	f9 4f       	sbci	r31, 0xF9	; 249
 59c:	30 81       	ld	r19, Z
 59e:	ab 01       	movw	r20, r22
 5a0:	48 1b       	sub	r20, r24
 5a2:	59 0b       	sbc	r21, r25
 5a4:	79 f0       	breq	.+30     	; 0x5c4 <_Z4rotajjh+0x32>
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	48 0f       	add	r20, r24
 5aa:	59 1f       	adc	r21, r25
 5ac:	fc 01       	movw	r30, r24
 5ae:	e3 53       	subi	r30, 0x33	; 51
 5b0:	f9 4f       	sbci	r31, 0xF9	; 249
 5b2:	20 81       	ld	r18, Z
 5b4:	fc 01       	movw	r30, r24
 5b6:	e4 53       	subi	r30, 0x34	; 52
 5b8:	f9 4f       	sbci	r31, 0xF9	; 249
 5ba:	20 83       	st	Z, r18
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	84 17       	cp	r24, r20
 5c0:	95 07       	cpc	r25, r21
 5c2:	a1 f7       	brne	.-24     	; 0x5ac <_Z4rotajjh+0x1a>
 5c4:	fb 01       	movw	r30, r22
 5c6:	e3 53       	subi	r30, 0x33	; 51
 5c8:	f9 4f       	sbci	r31, 0xF9	; 249
 5ca:	30 83       	st	Z, r19
 5cc:	08 95       	ret
 5ce:	fb 01       	movw	r30, r22
 5d0:	e3 53       	subi	r30, 0x33	; 51
 5d2:	f9 4f       	sbci	r31, 0xF9	; 249
 5d4:	a0 81       	ld	r26, Z
 5d6:	9b 01       	movw	r18, r22
 5d8:	28 1b       	sub	r18, r24
 5da:	39 0b       	sbc	r19, r25
 5dc:	91 f0       	breq	.+36     	; 0x602 <_Z4rotajjh+0x70>
 5de:	61 50       	subi	r22, 0x01	; 1
 5e0:	71 09       	sbc	r23, r1
 5e2:	ab 01       	movw	r20, r22
 5e4:	42 1b       	sub	r20, r18
 5e6:	53 0b       	sbc	r21, r19
 5e8:	fb 01       	movw	r30, r22
 5ea:	e3 53       	subi	r30, 0x33	; 51
 5ec:	f9 4f       	sbci	r31, 0xF9	; 249
 5ee:	20 81       	ld	r18, Z
 5f0:	fb 01       	movw	r30, r22
 5f2:	e2 53       	subi	r30, 0x32	; 50
 5f4:	f9 4f       	sbci	r31, 0xF9	; 249
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=ratio*i+from_val;
 5f6:	20 83       	st	Z, r18
 5f8:	61 50       	subi	r22, 0x01	; 1
 5fa:	71 09       	sbc	r23, r1
 5fc:	64 17       	cp	r22, r20
 5fe:	75 07       	cpc	r23, r21
 600:	99 f7       	brne	.-26     	; 0x5e8 <_Z4rotajjh+0x56>
 602:	fc 01       	movw	r30, r24
 604:	e3 53       	subi	r30, 0x33	; 51
 606:	f9 4f       	sbci	r31, 0xF9	; 249
 608:	a0 83       	st	Z, r26
 60a:	08 95       	ret

0000060c <_Z12rota_managerv>:
 60c:	af 92       	push	r10
 60e:	bf 92       	push	r11
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ff 92       	push	r15
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	c0 e0       	ldi	r28, 0x00	; 0
 620:	d0 e0       	ldi	r29, 0x00	; 0
 622:	f1 2c       	mov	r15, r1
 624:	00 e0       	ldi	r16, 0x00	; 0
 626:	10 e0       	ldi	r17, 0x00	; 0
 628:	6e 01       	movw	r12, r28
 62a:	fe 01       	movw	r30, r28
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	ec 0f       	add	r30, r28
 632:	fd 1f       	adc	r31, r29
 634:	ee 0f       	add	r30, r30
 636:	ff 1f       	adc	r31, r31
 638:	e1 5f       	subi	r30, 0xF1	; 241
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	80 81       	ld	r24, Z
 63e:	88 23       	and	r24, r24
 640:	09 f4       	brne	.+2      	; 0x644 <_Z12rota_managerv+0x38>
 642:	6e c0       	rjmp	.+220    	; 0x720 <_Z12rota_managerv+0x114>
 644:	fe 01       	movw	r30, r28
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	ec 0f       	add	r30, r28
 64c:	fd 1f       	adc	r31, r29
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	e1 5f       	subi	r30, 0xF1	; 241
 654:	fe 4f       	sbci	r31, 0xFE	; 254
 656:	83 81       	ldd	r24, Z+3	; 0x03
 658:	88 23       	and	r24, r24
 65a:	69 f0       	breq	.+26     	; 0x676 <_Z12rota_managerv+0x6a>
 65c:	fe 01       	movw	r30, r28
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	ec 0f       	add	r30, r28
 664:	fd 1f       	adc	r31, r29
 666:	ee 0f       	add	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	e1 5f       	subi	r30, 0xF1	; 241
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=ratio*i+from_val;
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	81 50       	subi	r24, 0x01	; 1
 672:	83 83       	std	Z+3, r24	; 0x03
 674:	1c c0       	rjmp	.+56     	; 0x6ae <_Z12rota_managerv+0xa2>
 676:	5e 01       	movw	r10, r28
 678:	aa 0c       	add	r10, r10
 67a:	bb 1c       	adc	r11, r11
 67c:	ac 0e       	add	r10, r28
 67e:	bd 1e       	adc	r11, r29
 680:	c5 01       	movw	r24, r10
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	9c 01       	movw	r18, r24
 688:	21 5f       	subi	r18, 0xF1	; 241
 68a:	3e 4f       	sbci	r19, 0xFE	; 254
 68c:	59 01       	movw	r10, r18
 68e:	d9 01       	movw	r26, r18
 690:	11 96       	adiw	r26, 0x01	; 1
 692:	4c 91       	ld	r20, X
 694:	11 97       	sbiw	r26, 0x01	; 1
 696:	15 96       	adiw	r26, 0x05	; 5
 698:	6c 91       	ld	r22, X
 69a:	15 97       	sbiw	r26, 0x05	; 5
 69c:	14 96       	adiw	r26, 0x04	; 4
 69e:	8c 91       	ld	r24, X
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 c9 02 	call	0x592	; 0x592 <_Z4rotajjh>
 6a8:	f5 01       	movw	r30, r10
 6aa:	82 81       	ldd	r24, Z+2	; 0x02
 6ac:	83 83       	std	Z+3, r24	; 0x03
 6ae:	f6 01       	movw	r30, r12
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	ec 0d       	add	r30, r12
 6b6:	fd 1d       	adc	r31, r13
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	e1 5f       	subi	r30, 0xF1	; 241
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	85 81       	ldd	r24, Z+5	; 0x05
 6c2:	24 81       	ldd	r18, Z+4	; 0x04
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	82 1b       	sub	r24, r18
 6c8:	91 09       	sbc	r25, r1
 6ca:	01 96       	adiw	r24, 0x01	; 1
			
		}
	}
	else
	{
		switch (selection)
 6cc:	18 16       	cp	r1, r24
 6ce:	19 06       	cpc	r1, r25
 6d0:	3c f5       	brge	.+78     	; 0x720 <_Z12rota_managerv+0x114>
 6d2:	8f 2d       	mov	r24, r15
 6d4:	90 2f       	mov	r25, r16
 6d6:	41 2f       	mov	r20, r17
 6d8:	df 01       	movw	r26, r30
 6da:	34 96       	adiw	r30, 0x04	; 4
 6dc:	6d 01       	movw	r12, r26
 6de:	25 e0       	ldi	r18, 0x05	; 5
 6e0:	c2 0e       	add	r12, r18
 6e2:	d1 1c       	adc	r13, r1
 6e4:	20 81       	ld	r18, Z
 6e6:	bc 01       	movw	r22, r24
 6e8:	62 0f       	add	r22, r18
 6ea:	71 1d       	adc	r23, r1
 6ec:	50 81       	ld	r21, Z
 6ee:	85 0f       	add	r24, r21
 6f0:	91 1d       	adc	r25, r1
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
 6f2:	83 53       	subi	r24, 0x33	; 51
 6f4:	99 4f       	sbci	r25, 0xF9	; 249
 6f6:	dc 01       	movw	r26, r24
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
 6f8:	5c 91       	ld	r21, X
 6fa:	cb 01       	movw	r24, r22
 6fc:	80 51       	subi	r24, 0x10	; 16
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
 6fe:	99 4f       	sbci	r25, 0xF9	; 249
 700:	dc 01       	movw	r26, r24
 702:	5c 93       	st	X, r21
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
 704:	4f 5f       	subi	r20, 0xFF	; 255
 706:	84 2f       	mov	r24, r20
 708:	90 e0       	ldi	r25, 0x00	; 0
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
 70a:	d6 01       	movw	r26, r12
 70c:	2c 91       	ld	r18, X
 70e:	50 81       	ld	r21, Z
	else
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	25 1b       	sub	r18, r21
 714:	31 09       	sbc	r19, r1
 716:	2f 5f       	subi	r18, 0xFF	; 255
 718:	3f 4f       	sbci	r19, 0xFF	; 255
 71a:	82 17       	cp	r24, r18
 71c:	93 07       	cpc	r25, r19
 71e:	14 f3       	brlt	.-60     	; 0x6e4 <_Z12rota_managerv+0xd8>
 720:	21 96       	adiw	r28, 0x01	; 1
 722:	c5 30       	cpi	r28, 0x05	; 5
 724:	d1 05       	cpc	r29, r1
 726:	09 f0       	breq	.+2      	; 0x72a <_Z12rota_managerv+0x11e>
 728:	7f cf       	rjmp	.-258    	; 0x628 <_Z12rota_managerv+0x1c>
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	df 90       	pop	r13
 736:	cf 90       	pop	r12
 738:	bf 90       	pop	r11
 73a:	af 90       	pop	r10
 73c:	08 95       	ret

0000073e <__vector_16>:
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	2f 93       	push	r18
 74e:	3f 93       	push	r19
 750:	4f 93       	push	r20
 752:	5f 93       	push	r21
 754:	6f 93       	push	r22
 756:	7f 93       	push	r23
 758:	8f 93       	push	r24
 75a:	9f 93       	push	r25
 75c:	af 93       	push	r26
 75e:	bf 93       	push	r27
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	ef 93       	push	r30
 766:	ff 93       	push	r31
 768:	a8 95       	wdr
 76a:	80 ef       	ldi	r24, 0xF0	; 240
 76c:	86 bd       	out	0x26, r24	; 38
 76e:	80 91 05 01 	lds	r24, 0x0105
 772:	90 91 06 01 	lds	r25, 0x0106
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
 776:	a0 91 07 01 	lds	r26, 0x0107
 77a:	b0 91 08 01 	lds	r27, 0x0108
 77e:	89 2b       	or	r24, r25
 780:	8a 2b       	or	r24, r26
 782:	8b 2b       	or	r24, r27
 784:	99 f0       	breq	.+38     	; 0x7ac <__vector_16+0x6e>
 786:	80 91 05 01 	lds	r24, 0x0105
 78a:	90 91 06 01 	lds	r25, 0x0106
 78e:	a0 91 07 01 	lds	r26, 0x0107
 792:	b0 91 08 01 	lds	r27, 0x0108
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	a1 09       	sbc	r26, r1
 79a:	b1 09       	sbc	r27, r1
 79c:	80 93 05 01 	sts	0x0105, r24
 7a0:	90 93 06 01 	sts	0x0106, r25
 7a4:	a0 93 07 01 	sts	0x0107, r26
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
 7a8:	b0 93 08 01 	sts	0x0108, r27
 7ac:	80 91 0e 01 	lds	r24, 0x010E
 7b0:	88 23       	and	r24, r24
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <__vector_16+0x78>
 7b4:	ed c1       	rjmp	.+986    	; 0xb90 <__stack+0x291>
 7b6:	80 91 09 01 	lds	r24, 0x0109
 7ba:	90 91 0a 01 	lds	r25, 0x010A
 7be:	20 91 0b 01 	lds	r18, 0x010B
 7c2:	30 91 0c 01 	lds	r19, 0x010C
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	82 17       	cp	r24, r18
 7ca:	93 07       	cpc	r25, r19
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <__vector_16+0x92>
 7ce:	d6 c1       	rjmp	.+940    	; 0xb7c <__stack+0x27d>
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	3f e0       	ldi	r19, 0x0F	; 15
 7d4:	03 e0       	ldi	r16, 0x03	; 3
 7d6:	d5 e0       	ldi	r29, 0x05	; 5
 7d8:	c4 e0       	ldi	r28, 0x04	; 4
 7da:	1f ef       	ldi	r17, 0xFF	; 255
 7dc:	a1 e0       	ldi	r26, 0x01	; 1
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
 7de:	b2 e0       	ldi	r27, 0x02	; 2
 7e0:	42 2f       	mov	r20, r18
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	34 9f       	mul	r19, r20
 7e6:	f0 01       	movw	r30, r0
 7e8:	35 9f       	mul	r19, r21
 7ea:	f0 0d       	add	r31, r0
 7ec:	11 24       	eor	r1, r1
 7ee:	e3 5d       	subi	r30, 0xD3	; 211
 7f0:	fe 4f       	sbci	r31, 0xFE	; 254
 7f2:	83 85       	ldd	r24, Z+11	; 0x0b
 7f4:	82 30       	cpi	r24, 0x02	; 2
 7f6:	09 f4       	brne	.+2      	; 0x7fa <__vector_16+0xbc>
 7f8:	3f c0       	rjmp	.+126    	; 0x878 <__vector_16+0x13a>
 7fa:	28 f4       	brcc	.+10     	; 0x806 <__vector_16+0xc8>
 7fc:	88 23       	and	r24, r24
 7fe:	61 f0       	breq	.+24     	; 0x818 <__vector_16+0xda>
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	b9 f0       	breq	.+46     	; 0x832 <__vector_16+0xf4>
 804:	a9 c1       	rjmp	.+850    	; 0xb58 <__stack+0x259>
 806:	84 30       	cpi	r24, 0x04	; 4
 808:	09 f4       	brne	.+2      	; 0x80c <__vector_16+0xce>
 80a:	95 c0       	rjmp	.+298    	; 0x936 <__stack+0x37>
 80c:	08 f4       	brcc	.+2      	; 0x810 <__vector_16+0xd2>
 80e:	70 c0       	rjmp	.+224    	; 0x8f0 <__vector_16+0x1b2>
 810:	85 30       	cpi	r24, 0x05	; 5
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
 812:	09 f4       	brne	.+2      	; 0x816 <__vector_16+0xd8>
 814:	cf c0       	rjmp	.+414    	; 0x9b4 <__stack+0xb5>
 816:	a0 c1       	rjmp	.+832    	; 0xb58 <__stack+0x259>
 818:	34 9f       	mul	r19, r20
 81a:	f0 01       	movw	r30, r0
 81c:	35 9f       	mul	r19, r21
 81e:	f0 0d       	add	r31, r0
 820:	11 24       	eor	r1, r1
 822:	e3 5d       	subi	r30, 0xD3	; 211
 824:	fe 4f       	sbci	r31, 0xFE	; 254
 826:	85 81       	ldd	r24, Z+5	; 0x05
 828:	96 81       	ldd	r25, Z+6	; 0x06
 82a:	94 83       	std	Z+4, r25	; 0x04
 82c:	83 83       	std	Z+3, r24	; 0x03
 82e:	a3 87       	std	Z+11, r26	; 0x0b
 830:	93 c1       	rjmp	.+806    	; 0xb58 <__stack+0x259>
 832:	34 9f       	mul	r19, r20
 834:	f0 01       	movw	r30, r0
 836:	35 9f       	mul	r19, r21
 838:	f0 0d       	add	r31, r0
 83a:	11 24       	eor	r1, r1
 83c:	e3 5d       	subi	r30, 0xD3	; 211
 83e:	fe 4f       	sbci	r31, 0xFE	; 254
 840:	83 81       	ldd	r24, Z+3	; 0x03
 842:	94 81       	ldd	r25, Z+4	; 0x04
 844:	00 97       	sbiw	r24, 0x00	; 0
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
 846:	69 f4       	brne	.+26     	; 0x862 <__vector_16+0x124>
 848:	34 9f       	mul	r19, r20
 84a:	f0 01       	movw	r30, r0
 84c:	35 9f       	mul	r19, r21
 84e:	f0 0d       	add	r31, r0
			default:
			break;
		}
	}
	
}
 850:	11 24       	eor	r1, r1
 852:	e3 5d       	subi	r30, 0xD3	; 211
 854:	fe 4f       	sbci	r31, 0xFE	; 254
 856:	87 81       	ldd	r24, Z+7	; 0x07
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	94 83       	std	Z+4, r25	; 0x04
 85c:	83 83       	std	Z+3, r24	; 0x03
 85e:	b3 87       	std	Z+11, r27	; 0x0b
 860:	7b c1       	rjmp	.+758    	; 0xb58 <__stack+0x259>
 862:	34 9f       	mul	r19, r20
 864:	f0 01       	movw	r30, r0
 866:	35 9f       	mul	r19, r21
 868:	f0 0d       	add	r31, r0
 86a:	11 24       	eor	r1, r1
 86c:	e3 5d       	subi	r30, 0xD3	; 211
 86e:	fe 4f       	sbci	r31, 0xFE	; 254
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	94 83       	std	Z+4, r25	; 0x04
 874:	83 83       	std	Z+3, r24	; 0x03
 876:	70 c1       	rjmp	.+736    	; 0xb58 <__stack+0x259>
 878:	34 9f       	mul	r19, r20
 87a:	f0 01       	movw	r30, r0
 87c:	35 9f       	mul	r19, r21
				}
				else dmxcontrol[i].counter--;
				break;
				case 2:
				
				if (dmxcontrol[i].counter==0)
 87e:	f0 0d       	add	r31, r0
 880:	11 24       	eor	r1, r1
 882:	e3 5d       	subi	r30, 0xD3	; 211
 884:	fe 4f       	sbci	r31, 0xFE	; 254
 886:	83 81       	ldd	r24, Z+3	; 0x03
 888:	94 81       	ldd	r25, Z+4	; 0x04
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	31 f5       	brne	.+76     	; 0x8da <__vector_16+0x19c>
				{
					if (dmxcontrol[i].gray >=dmxcontrol[i].top_gray)
 88e:	34 9f       	mul	r19, r20
 890:	f0 01       	movw	r30, r0
 892:	35 9f       	mul	r19, r21
 894:	f0 0d       	add	r31, r0
 896:	11 24       	eor	r1, r1
 898:	e3 5d       	subi	r30, 0xD3	; 211
 89a:	fe 4f       	sbci	r31, 0xFE	; 254
 89c:	80 81       	ld	r24, Z
 89e:	91 81       	ldd	r25, Z+1	; 0x01
 8a0:	89 17       	cp	r24, r25
 8a2:	68 f0       	brcs	.+26     	; 0x8be <__vector_16+0x180>
					{
						dmxcontrol[i].counter = dmxcontrol[i].hold;
 8a4:	34 9f       	mul	r19, r20
 8a6:	f0 01       	movw	r30, r0
 8a8:	35 9f       	mul	r19, r21
 8aa:	f0 0d       	add	r31, r0
 8ac:	11 24       	eor	r1, r1
 8ae:	e3 5d       	subi	r30, 0xD3	; 211
 8b0:	fe 4f       	sbci	r31, 0xFE	; 254
 8b2:	80 85       	ldd	r24, Z+8	; 0x08
 8b4:	91 85       	ldd	r25, Z+9	; 0x09
 8b6:	94 83       	std	Z+4, r25	; 0x04
 8b8:	83 83       	std	Z+3, r24	; 0x03
						dmxcontrol[i].stage = 3;
 8ba:	03 87       	std	Z+11, r16	; 0x0b
						break;
 8bc:	4d c1       	rjmp	.+666    	; 0xb58 <__stack+0x259>
					}
					else dmxcontrol[i].gray++;
 8be:	34 9f       	mul	r19, r20
 8c0:	f0 01       	movw	r30, r0
 8c2:	35 9f       	mul	r19, r21
 8c4:	f0 0d       	add	r31, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	e3 5d       	subi	r30, 0xD3	; 211
 8ca:	fe 4f       	sbci	r31, 0xFE	; 254
 8cc:	8f 5f       	subi	r24, 0xFF	; 255
 8ce:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
 8d0:	87 81       	ldd	r24, Z+7	; 0x07
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	94 83       	std	Z+4, r25	; 0x04
 8d6:	83 83       	std	Z+3, r24	; 0x03
 8d8:	3f c1       	rjmp	.+638    	; 0xb58 <__stack+0x259>
				}
				
				else dmxcontrol[i].counter--;
 8da:	34 9f       	mul	r19, r20
 8dc:	f0 01       	movw	r30, r0
 8de:	35 9f       	mul	r19, r21
 8e0:	f0 0d       	add	r31, r0
 8e2:	11 24       	eor	r1, r1
 8e4:	e3 5d       	subi	r30, 0xD3	; 211
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	01 97       	sbiw	r24, 0x01	; 1
 8ea:	94 83       	std	Z+4, r25	; 0x04
 8ec:	83 83       	std	Z+3, r24	; 0x03
 8ee:	34 c1       	rjmp	.+616    	; 0xb58 <__stack+0x259>
				break;
				case 3:
				if (dmxcontrol[i].counter==0)
 8f0:	34 9f       	mul	r19, r20
 8f2:	f0 01       	movw	r30, r0
 8f4:	35 9f       	mul	r19, r21
 8f6:	f0 0d       	add	r31, r0
 8f8:	11 24       	eor	r1, r1
 8fa:	e3 5d       	subi	r30, 0xD3	; 211
 8fc:	fe 4f       	sbci	r31, 0xFE	; 254
 8fe:	83 81       	ldd	r24, Z+3	; 0x03
 900:	94 81       	ldd	r25, Z+4	; 0x04
 902:	00 97       	sbiw	r24, 0x00	; 0
 904:	69 f4       	brne	.+26     	; 0x920 <__stack+0x21>
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
 906:	34 9f       	mul	r19, r20
 908:	f0 01       	movw	r30, r0
 90a:	35 9f       	mul	r19, r21
 90c:	f0 0d       	add	r31, r0
 90e:	11 24       	eor	r1, r1
 910:	e3 5d       	subi	r30, 0xD3	; 211
 912:	fe 4f       	sbci	r31, 0xFE	; 254
 914:	82 85       	ldd	r24, Z+10	; 0x0a
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	94 83       	std	Z+4, r25	; 0x04
 91a:	83 83       	std	Z+3, r24	; 0x03
					dmxcontrol[i].stage = 4;
 91c:	c3 87       	std	Z+11, r28	; 0x0b
 91e:	1c c1       	rjmp	.+568    	; 0xb58 <__stack+0x259>
				}
				else dmxcontrol[i].counter--;
 920:	34 9f       	mul	r19, r20
 922:	f0 01       	movw	r30, r0
 924:	35 9f       	mul	r19, r21
 926:	f0 0d       	add	r31, r0
 928:	11 24       	eor	r1, r1
 92a:	e3 5d       	subi	r30, 0xD3	; 211
 92c:	fe 4f       	sbci	r31, 0xFE	; 254
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	94 83       	std	Z+4, r25	; 0x04
 932:	83 83       	std	Z+3, r24	; 0x03
 934:	11 c1       	rjmp	.+546    	; 0xb58 <__stack+0x259>
				break;
				case 4:
				if (dmxcontrol[i].counter==0)
 936:	34 9f       	mul	r19, r20
 938:	f0 01       	movw	r30, r0
 93a:	35 9f       	mul	r19, r21
 93c:	f0 0d       	add	r31, r0
 93e:	11 24       	eor	r1, r1
 940:	e3 5d       	subi	r30, 0xD3	; 211
 942:	fe 4f       	sbci	r31, 0xFE	; 254
 944:	83 81       	ldd	r24, Z+3	; 0x03
 946:	94 81       	ldd	r25, Z+4	; 0x04
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	49 f5       	brne	.+82     	; 0x99e <__stack+0x9f>
				{
					if (dmxcontrol[i].gray <=dmxcontrol[i].bot_gray) dmxcontrol[i].stage = 5;
 94c:	34 9f       	mul	r19, r20
 94e:	f0 01       	movw	r30, r0
 950:	35 9f       	mul	r19, r21
 952:	f0 0d       	add	r31, r0
 954:	11 24       	eor	r1, r1
 956:	e3 5d       	subi	r30, 0xD3	; 211
 958:	fe 4f       	sbci	r31, 0xFE	; 254
 95a:	80 81       	ld	r24, Z
 95c:	92 81       	ldd	r25, Z+2	; 0x02
 95e:	98 17       	cp	r25, r24
 960:	48 f0       	brcs	.+18     	; 0x974 <__stack+0x75>
 962:	34 9f       	mul	r19, r20
 964:	f0 01       	movw	r30, r0
 966:	35 9f       	mul	r19, r21
 968:	f0 0d       	add	r31, r0
 96a:	11 24       	eor	r1, r1
 96c:	e3 5d       	subi	r30, 0xD3	; 211
 96e:	fe 4f       	sbci	r31, 0xFE	; 254
 970:	d3 87       	std	Z+11, r29	; 0x0b
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
					else dmxcontrol[i].gray--;
 974:	34 9f       	mul	r19, r20
 976:	f0 01       	movw	r30, r0
 978:	35 9f       	mul	r19, r21
 97a:	f0 0d       	add	r31, r0
 97c:	11 24       	eor	r1, r1
 97e:	e3 5d       	subi	r30, 0xD3	; 211
 980:	fe 4f       	sbci	r31, 0xFE	; 254
 982:	81 50       	subi	r24, 0x01	; 1
 984:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
 986:	34 9f       	mul	r19, r20
 988:	f0 01       	movw	r30, r0
 98a:	35 9f       	mul	r19, r21
 98c:	f0 0d       	add	r31, r0
 98e:	11 24       	eor	r1, r1
 990:	e3 5d       	subi	r30, 0xD3	; 211
 992:	fe 4f       	sbci	r31, 0xFE	; 254
 994:	82 85       	ldd	r24, Z+10	; 0x0a
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	94 83       	std	Z+4, r25	; 0x04
 99a:	83 83       	std	Z+3, r24	; 0x03
 99c:	dd c0       	rjmp	.+442    	; 0xb58 <__stack+0x259>
				}
				else dmxcontrol[i].counter--;
 99e:	34 9f       	mul	r19, r20
 9a0:	f0 01       	movw	r30, r0
 9a2:	35 9f       	mul	r19, r21
 9a4:	f0 0d       	add	r31, r0
 9a6:	11 24       	eor	r1, r1
 9a8:	e3 5d       	subi	r30, 0xD3	; 211
 9aa:	fe 4f       	sbci	r31, 0xFE	; 254
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	94 83       	std	Z+4, r25	; 0x04
 9b0:	83 83       	std	Z+3, r24	; 0x03
 9b2:	d2 c0       	rjmp	.+420    	; 0xb58 <__stack+0x259>
				break;
				case 5:
				switch (dmxcontrol[i].mode&0x0f)
 9b4:	34 9f       	mul	r19, r20
 9b6:	f0 01       	movw	r30, r0
 9b8:	35 9f       	mul	r19, r21
 9ba:	f0 0d       	add	r31, r0
 9bc:	11 24       	eor	r1, r1
 9be:	e3 5d       	subi	r30, 0xD3	; 211
 9c0:	fe 4f       	sbci	r31, 0xFE	; 254
 9c2:	86 85       	ldd	r24, Z+14	; 0x0e
 9c4:	8f 70       	andi	r24, 0x0F	; 15
 9c6:	81 30       	cpi	r24, 0x01	; 1
 9c8:	71 f0       	breq	.+28     	; 0x9e6 <__stack+0xe7>
 9ca:	20 f0       	brcs	.+8      	; 0x9d4 <__stack+0xd5>
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <__stack+0xd3>
 9d0:	62 c0       	rjmp	.+196    	; 0xa96 <__stack+0x197>
 9d2:	b9 c0       	rjmp	.+370    	; 0xb46 <__stack+0x247>
				{
					case 0: //repeat to minus
					dmxcontrol[i].stage = 0;
 9d4:	34 9f       	mul	r19, r20
 9d6:	f0 01       	movw	r30, r0
 9d8:	35 9f       	mul	r19, r21
 9da:	f0 0d       	add	r31, r0
 9dc:	11 24       	eor	r1, r1
 9de:	e3 5d       	subi	r30, 0xD3	; 211
 9e0:	fe 4f       	sbci	r31, 0xFE	; 254
 9e2:	13 86       	std	Z+11, r1	; 0x0b
					break;
 9e4:	b9 c0       	rjmp	.+370    	; 0xb58 <__stack+0x259>
					
					case 1: //repeat n time and off
					
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
 9e6:	34 9f       	mul	r19, r20
 9e8:	f0 01       	movw	r30, r0
 9ea:	35 9f       	mul	r19, r21
 9ec:	f0 0d       	add	r31, r0
 9ee:	11 24       	eor	r1, r1
 9f0:	e3 5d       	subi	r30, 0xD3	; 211
 9f2:	fe 4f       	sbci	r31, 0xFE	; 254
 9f4:	85 85       	ldd	r24, Z+13	; 0x0d
 9f6:	94 85       	ldd	r25, Z+12	; 0x0c
 9f8:	89 17       	cp	r24, r25
 9fa:	08 f4       	brcc	.+2      	; 0x9fe <__stack+0xff>
 9fc:	41 c0       	rjmp	.+130    	; 0xa80 <__stack+0x181>
					{
						if (dmxcontrol[i].counter==0)
 9fe:	34 9f       	mul	r19, r20
 a00:	f0 01       	movw	r30, r0
 a02:	35 9f       	mul	r19, r21
 a04:	f0 0d       	add	r31, r0
 a06:	11 24       	eor	r1, r1
 a08:	e3 5d       	subi	r30, 0xD3	; 211
 a0a:	fe 4f       	sbci	r31, 0xFE	; 254
 a0c:	83 81       	ldd	r24, Z+3	; 0x03
 a0e:	94 81       	ldd	r25, Z+4	; 0x04
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	59 f5       	brne	.+86     	; 0xa6a <__stack+0x16b>
						{
							dmxcontrol[i].stage = 5;
 a14:	34 9f       	mul	r19, r20
 a16:	f0 01       	movw	r30, r0
 a18:	35 9f       	mul	r19, r21
 a1a:	f0 0d       	add	r31, r0
 a1c:	11 24       	eor	r1, r1
 a1e:	e3 5d       	subi	r30, 0xD3	; 211
 a20:	fe 4f       	sbci	r31, 0xFE	; 254
 a22:	d3 87       	std	Z+11, r29	; 0x0b
							if (dmxcontrol[i].gray>dmxcontrol[i].bot_gray) dmxcontrol[i].gray--;
 a24:	80 81       	ld	r24, Z
 a26:	92 81       	ldd	r25, Z+2	; 0x02
 a28:	98 17       	cp	r25, r24
 a2a:	50 f4       	brcc	.+20     	; 0xa40 <__stack+0x141>
 a2c:	34 9f       	mul	r19, r20
 a2e:	f0 01       	movw	r30, r0
 a30:	35 9f       	mul	r19, r21
 a32:	f0 0d       	add	r31, r0
 a34:	11 24       	eor	r1, r1
 a36:	e3 5d       	subi	r30, 0xD3	; 211
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	81 50       	subi	r24, 0x01	; 1
 a3c:	80 83       	st	Z, r24
 a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__stack+0x153>
							else
							{
								dmxcontrol[i].stage = 255;
 a40:	34 9f       	mul	r19, r20
 a42:	f0 01       	movw	r30, r0
 a44:	35 9f       	mul	r19, r21
 a46:	f0 0d       	add	r31, r0
 a48:	11 24       	eor	r1, r1
 a4a:	e3 5d       	subi	r30, 0xD3	; 211
 a4c:	fe 4f       	sbci	r31, 0xFE	; 254
 a4e:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
 a50:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
 a52:	34 9f       	mul	r19, r20
 a54:	f0 01       	movw	r30, r0
 a56:	35 9f       	mul	r19, r21
 a58:	f0 0d       	add	r31, r0
 a5a:	11 24       	eor	r1, r1
 a5c:	e3 5d       	subi	r30, 0xD3	; 211
 a5e:	fe 4f       	sbci	r31, 0xFE	; 254
 a60:	82 85       	ldd	r24, Z+10	; 0x0a
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	94 83       	std	Z+4, r25	; 0x04
 a66:	83 83       	std	Z+3, r24	; 0x03
 a68:	77 c0       	rjmp	.+238    	; 0xb58 <__stack+0x259>
						}
						else dmxcontrol[i].counter--;
 a6a:	34 9f       	mul	r19, r20
 a6c:	f0 01       	movw	r30, r0
 a6e:	35 9f       	mul	r19, r21
 a70:	f0 0d       	add	r31, r0
 a72:	11 24       	eor	r1, r1
 a74:	e3 5d       	subi	r30, 0xD3	; 211
 a76:	fe 4f       	sbci	r31, 0xFE	; 254
 a78:	01 97       	sbiw	r24, 0x01	; 1
 a7a:	94 83       	std	Z+4, r25	; 0x04
 a7c:	83 83       	std	Z+3, r24	; 0x03
 a7e:	6c c0       	rjmp	.+216    	; 0xb58 <__stack+0x259>
					}
					else
					{
						dmxcontrol[i].stage =0;
 a80:	34 9f       	mul	r19, r20
 a82:	f0 01       	movw	r30, r0
 a84:	35 9f       	mul	r19, r21
 a86:	f0 0d       	add	r31, r0
 a88:	11 24       	eor	r1, r1
 a8a:	e3 5d       	subi	r30, 0xD3	; 211
 a8c:	fe 4f       	sbci	r31, 0xFE	; 254
 a8e:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
 a90:	8f 5f       	subi	r24, 0xFF	; 255
 a92:	85 87       	std	Z+13, r24	; 0x0d
 a94:	61 c0       	rjmp	.+194    	; 0xb58 <__stack+0x259>
					}
					
					break;
					case 2://repeat n time and on
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
 a96:	34 9f       	mul	r19, r20
 a98:	f0 01       	movw	r30, r0
 a9a:	35 9f       	mul	r19, r21
 a9c:	f0 0d       	add	r31, r0
 a9e:	11 24       	eor	r1, r1
 aa0:	e3 5d       	subi	r30, 0xD3	; 211
 aa2:	fe 4f       	sbci	r31, 0xFE	; 254
 aa4:	85 85       	ldd	r24, Z+13	; 0x0d
 aa6:	94 85       	ldd	r25, Z+12	; 0x0c
 aa8:	89 17       	cp	r24, r25
 aaa:	08 f4       	brcc	.+2      	; 0xaae <__stack+0x1af>
 aac:	41 c0       	rjmp	.+130    	; 0xb30 <__stack+0x231>
					{
						dmxcontrol[i].stage = 5;
 aae:	34 9f       	mul	r19, r20
 ab0:	f0 01       	movw	r30, r0
 ab2:	35 9f       	mul	r19, r21
 ab4:	f0 0d       	add	r31, r0
 ab6:	11 24       	eor	r1, r1
 ab8:	e3 5d       	subi	r30, 0xD3	; 211
 aba:	fe 4f       	sbci	r31, 0xFE	; 254
 abc:	d3 87       	std	Z+11, r29	; 0x0b
						
						if (dmxcontrol[i].counter==0)
 abe:	83 81       	ldd	r24, Z+3	; 0x03
 ac0:	94 81       	ldd	r25, Z+4	; 0x04
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	51 f5       	brne	.+84     	; 0xb1a <__stack+0x21b>
						{
							if (dmxcontrol[i].gray<dmxcontrol[i].top_gray) dmxcontrol[i].gray++;
 ac6:	34 9f       	mul	r19, r20
 ac8:	f0 01       	movw	r30, r0
 aca:	35 9f       	mul	r19, r21
 acc:	f0 0d       	add	r31, r0
 ace:	11 24       	eor	r1, r1
 ad0:	e3 5d       	subi	r30, 0xD3	; 211
 ad2:	fe 4f       	sbci	r31, 0xFE	; 254
 ad4:	80 81       	ld	r24, Z
 ad6:	91 81       	ldd	r25, Z+1	; 0x01
 ad8:	89 17       	cp	r24, r25
 ada:	50 f4       	brcc	.+20     	; 0xaf0 <__stack+0x1f1>
 adc:	34 9f       	mul	r19, r20
 ade:	f0 01       	movw	r30, r0
 ae0:	35 9f       	mul	r19, r21
 ae2:	f0 0d       	add	r31, r0
 ae4:	11 24       	eor	r1, r1
 ae6:	e3 5d       	subi	r30, 0xD3	; 211
 ae8:	fe 4f       	sbci	r31, 0xFE	; 254
 aea:	8f 5f       	subi	r24, 0xFF	; 255
 aec:	80 83       	st	Z, r24
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x203>
							else
							{
								dmxcontrol[i].stage = 255;
 af0:	34 9f       	mul	r19, r20
 af2:	f0 01       	movw	r30, r0
 af4:	35 9f       	mul	r19, r21
 af6:	f0 0d       	add	r31, r0
 af8:	11 24       	eor	r1, r1
 afa:	e3 5d       	subi	r30, 0xD3	; 211
 afc:	fe 4f       	sbci	r31, 0xFE	; 254
 afe:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
 b00:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
 b02:	34 9f       	mul	r19, r20
 b04:	f0 01       	movw	r30, r0
 b06:	35 9f       	mul	r19, r21
 b08:	f0 0d       	add	r31, r0
 b0a:	11 24       	eor	r1, r1
 b0c:	e3 5d       	subi	r30, 0xD3	; 211
 b0e:	fe 4f       	sbci	r31, 0xFE	; 254
 b10:	82 85       	ldd	r24, Z+10	; 0x0a
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	94 83       	std	Z+4, r25	; 0x04
 b16:	83 83       	std	Z+3, r24	; 0x03
 b18:	1f c0       	rjmp	.+62     	; 0xb58 <__stack+0x259>
						}
						else dmxcontrol[i].counter--;
 b1a:	34 9f       	mul	r19, r20
 b1c:	f0 01       	movw	r30, r0
 b1e:	35 9f       	mul	r19, r21
 b20:	f0 0d       	add	r31, r0
 b22:	11 24       	eor	r1, r1
 b24:	e3 5d       	subi	r30, 0xD3	; 211
 b26:	fe 4f       	sbci	r31, 0xFE	; 254
 b28:	01 97       	sbiw	r24, 0x01	; 1
 b2a:	94 83       	std	Z+4, r25	; 0x04
 b2c:	83 83       	std	Z+3, r24	; 0x03
 b2e:	14 c0       	rjmp	.+40     	; 0xb58 <__stack+0x259>
					}
					else
					{
						dmxcontrol[i].stage = 0;
 b30:	34 9f       	mul	r19, r20
 b32:	f0 01       	movw	r30, r0
 b34:	35 9f       	mul	r19, r21
 b36:	f0 0d       	add	r31, r0
 b38:	11 24       	eor	r1, r1
 b3a:	e3 5d       	subi	r30, 0xD3	; 211
 b3c:	fe 4f       	sbci	r31, 0xFE	; 254
 b3e:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
 b40:	8f 5f       	subi	r24, 0xFF	; 255
 b42:	85 87       	std	Z+13, r24	; 0x0d
 b44:	09 c0       	rjmp	.+18     	; 0xb58 <__stack+0x259>
					}
					break;
					default:// one circle
					dmxcontrol[i].stage = 255;
 b46:	34 9f       	mul	r19, r20
 b48:	f0 01       	movw	r30, r0
 b4a:	35 9f       	mul	r19, r21
 b4c:	f0 0d       	add	r31, r0
 b4e:	11 24       	eor	r1, r1
 b50:	e3 5d       	subi	r30, 0xD3	; 211
 b52:	fe 4f       	sbci	r31, 0xFE	; 254
 b54:	13 87       	std	Z+11, r17	; 0x0b
					dmxcontrol[i].count_repeat = 0;
 b56:	15 86       	std	Z+13, r1	; 0x0d
	wdt_reset();
	TCNT0 = 240;
	if(ms_counter!=0) ms_counter--;
	if (en)
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
 b58:	2f 5f       	subi	r18, 0xFF	; 255
 b5a:	80 91 09 01 	lds	r24, 0x0109
 b5e:	90 91 0a 01 	lds	r25, 0x010A
 b62:	60 91 0b 01 	lds	r22, 0x010B
 b66:	70 91 0c 01 	lds	r23, 0x010C
 b6a:	42 2f       	mov	r20, r18
 b6c:	50 e0       	ldi	r21, 0x00	; 0
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	86 1b       	sub	r24, r22
 b72:	97 0b       	sbc	r25, r23
 b74:	48 17       	cp	r20, r24
 b76:	59 07       	cpc	r21, r25
 b78:	08 f4       	brcc	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	32 ce       	rjmp	.-924    	; 0x7e0 <__vector_16+0xa2>
				break;
				default:
				break;
			}
		}
		 gray_adj(bot_channel,top_channel);
 b7c:	60 91 09 01 	lds	r22, 0x0109
 b80:	70 91 0a 01 	lds	r23, 0x010A
 b84:	80 91 0b 01 	lds	r24, 0x010B
 b88:	90 91 0c 01 	lds	r25, 0x010C
 b8c:	0e 94 96 00 	call	0x12c	; 0x12c <_Z8gray_adjhh>
	}
	 if (rota_en) rota_manager();
 b90:	80 91 0d 01 	lds	r24, 0x010D
 b94:	81 11       	cpse	r24, r1
 b96:	0e 94 06 03 	call	0x60c	; 0x60c <_Z12rota_managerv>
}
 b9a:	ff 91       	pop	r31
 b9c:	ef 91       	pop	r30
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	bf 91       	pop	r27
 ba4:	af 91       	pop	r26
 ba6:	9f 91       	pop	r25
 ba8:	8f 91       	pop	r24
 baa:	7f 91       	pop	r23
 bac:	6f 91       	pop	r22
 bae:	5f 91       	pop	r21
 bb0:	4f 91       	pop	r20
 bb2:	3f 91       	pop	r19
 bb4:	2f 91       	pop	r18
 bb6:	1f 91       	pop	r17
 bb8:	0f 91       	pop	r16
 bba:	0f 90       	pop	r0
 bbc:	0f be       	out	0x3f, r0	; 63
 bbe:	0f 90       	pop	r0
 bc0:	1f 90       	pop	r1
 bc2:	18 95       	reti

00000bc4 <_Z8DMX_Initj>:
volatile bool _complete;

void DMX_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 bc4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 bc8:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable transmitter */
	UCSR0B = (1<<TXEN0)|(1<<UDRIE0);
 bcc:	88 e2       	ldi	r24, 0x28	; 40
 bce:	80 93 c1 00 	sts	0x00C1, r24
	//UCSRA = (1<<U2X);
	/* Set frame format: 8data, 2stop bit */
	UCSR0C =(1<<USBS0)|(3<<UCSZ00);
 bd2:	8e e0       	ldi	r24, 0x0E	; 14
 bd4:	80 93 c2 00 	sts	0x00C2, r24
 bd8:	08 95       	ret

00000bda <_Z12DMX_Is_Readyv>:
	}
}



bool DMX_Is_Ready(void){return _complete;}
 bda:	80 91 ed 06 	lds	r24, 0x06ED
 bde:	08 95       	ret

00000be0 <_Z22DMX_BREAK_MAB_Transmitv>:
	
void DMX_BREAK_MAB_Transmit(void)
{
	//while ( !( UCSR0A & (1<<UDRE0)) );//* Wait for empty transmit buffer */
	UCSR0B &=~(1<<TXEN0);	// TXEN disable
 be0:	e1 ec       	ldi	r30, 0xC1	; 193
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	87 7f       	andi	r24, 0xF7	; 247
 be8:	80 83       	st	Z, r24
	TXD_DDR |=1<<TXD_PIN; // TXD config output port
 bea:	51 9a       	sbi	0x0a, 1	; 10
	TXD_PORT &=~(1<<TXD_PIN);	// TXD pin pull low
 bec:	59 98       	cbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bee:	8f ed       	ldi	r24, 0xDF	; 223
 bf0:	91 e0       	ldi	r25, 0x01	; 1
 bf2:	01 97       	sbiw	r24, 0x01	; 1
 bf4:	f1 f7       	brne	.-4      	; 0xbf2 <_Z22DMX_BREAK_MAB_Transmitv+0x12>
 bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <_Z22DMX_BREAK_MAB_Transmitv+0x18>
 bf8:	00 00       	nop
	_delay_us(120);				//170us
	TXD_PORT |=(1<<TXD_PIN);	//TXD pin pull high
 bfa:	59 9a       	sbi	0x0b, 1	; 11
 bfc:	90 e4       	ldi	r25, 0x40	; 64
 bfe:	9a 95       	dec	r25
 c00:	f1 f7       	brne	.-4      	; 0xbfe <_Z22DMX_BREAK_MAB_Transmitv+0x1e>
	_delay_us(12);				// 8us
	UCSR0B |=(1<<TXEN0);	//TXEN enable
 c02:	80 81       	ld	r24, Z
 c04:	88 60       	ori	r24, 0x08	; 8
 c06:	80 83       	st	Z, r24
 c08:	08 95       	ret

00000c0a <_Z18DMX_start_transmith>:
	/* Set frame format: 8data, 2stop bit */
	UCSR0C =(1<<USBS0)|(3<<UCSZ00);
	
}
void DMX_start_transmit(uint8_t _MODE)
{
 c0a:	cf 93       	push	r28
 c0c:	c8 2f       	mov	r28, r24
	
	_complete = false;
 c0e:	10 92 ed 06 	sts	0x06ED, r1
	DMX_BREAK_MAB_Transmit();
 c12:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <_Z22DMX_BREAK_MAB_Transmitv>
	UCSR0B |=(1<<UDRIE0);
 c16:	e1 ec       	ldi	r30, 0xC1	; 193
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	90 81       	ld	r25, Z
 c1c:	90 62       	ori	r25, 0x20	; 32
 c1e:	90 83       	st	Z, r25
	_pointer=0;
 c20:	10 92 ef 06 	sts	0x06EF, r1
 c24:	10 92 ee 06 	sts	0x06EE, r1
	UDR0 = _MODE;
 c28:	c0 93 c6 00 	sts	0x00C6, r28
}
 c2c:	cf 91       	pop	r28
 c2e:	08 95       	ret

00000c30 <__vector_19>:
	_delay_us(12);				// 8us
	UCSR0B |=(1<<TXEN0);	//TXEN enable
}

ISR(USART_UDRE_vect)
{
 c30:	1f 92       	push	r1
 c32:	0f 92       	push	r0
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	0f 92       	push	r0
 c38:	11 24       	eor	r1, r1
 c3a:	8f 93       	push	r24
 c3c:	9f 93       	push	r25
 c3e:	ef 93       	push	r30
 c40:	ff 93       	push	r31
	if (_pointer>=MAX_DMX_CHANNEL) _complete = true;
 c42:	80 91 ee 06 	lds	r24, 0x06EE
 c46:	90 91 ef 06 	lds	r25, 0x06EF
 c4a:	80 36       	cpi	r24, 0x60	; 96
 c4c:	91 05       	cpc	r25, r1
 c4e:	20 f0       	brcs	.+8      	; 0xc58 <__vector_19+0x28>
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	80 93 ed 06 	sts	0x06ED, r24
 c56:	16 c0       	rjmp	.+44     	; 0xc84 <__vector_19+0x54>
	else
	{
		UDR0 = channel_buff[_pointer]*ZOOM_IN;
 c58:	e0 91 ee 06 	lds	r30, 0x06EE
 c5c:	f0 91 ef 06 	lds	r31, 0x06EF
 c60:	e0 51       	subi	r30, 0x10	; 16
 c62:	f9 4f       	sbci	r31, 0xF9	; 249
 c64:	80 81       	ld	r24, Z
 c66:	98 2f       	mov	r25, r24
 c68:	99 0f       	add	r25, r25
 c6a:	99 0f       	add	r25, r25
 c6c:	89 0f       	add	r24, r25
 c6e:	80 93 c6 00 	sts	0x00C6, r24
		_pointer++;
 c72:	80 91 ee 06 	lds	r24, 0x06EE
 c76:	90 91 ef 06 	lds	r25, 0x06EF
 c7a:	01 96       	adiw	r24, 0x01	; 1
 c7c:	90 93 ef 06 	sts	0x06EF, r25
 c80:	80 93 ee 06 	sts	0x06EE, r24
		
	}
}
 c84:	ff 91       	pop	r31
 c86:	ef 91       	pop	r30
 c88:	9f 91       	pop	r25
 c8a:	8f 91       	pop	r24
 c8c:	0f 90       	pop	r0
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	0f 90       	pop	r0
 c92:	1f 90       	pop	r1
 c94:	18 95       	reti

00000c96 <main>:
 volatile uint8_t channel_buff[MAX_DMX_CHANNEL];


int main(void)
{
	wdt_reset();
 c96:	a8 95       	wdr
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
 c98:	98 e2       	ldi	r25, 0x28	; 40
 c9a:	88 e1       	ldi	r24, 0x18	; 24
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	a8 95       	wdr
 ca2:	80 93 60 00 	sts	0x0060, r24
 ca6:	0f be       	out	0x3f, r0	; 63
 ca8:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_4S);
	DMX_Init(MYUBRR);
 cac:	83 e0       	ldi	r24, 0x03	; 3
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z8DMX_Initj>
	timer0_init();
 cb4:	0e 94 94 01 	call	0x328	; 0x328 <_Z11timer0_initv>
	dmxcontrol_default();
 cb8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z18dmxcontrol_defaultv>
	rota_group_default();
 cbc:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z18rota_group_defaultv>
	dmxctr_using(A1,B16);
 cc0:	6f e1       	ldi	r22, 0x1F	; 31
 cc2:	70 e0       	ldi	r23, 0x00	; 0
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z12dmxctr_usingjj>
	dmxctr_close();
 ccc:	0e 94 8a 00 	call	0x114	; 0x114 <_Z12dmxctr_closev>
	rota_disable();
 cd0:	0e 94 0c 02 	call	0x418	; 0x418 <_Z12rota_disablev>
	DMX_start_transmit(0);
 cd4:	80 e0       	ldi	r24, 0x00	; 0
 cd6:	0e 94 05 06 	call	0xc0a	; 0xc0a <_Z18DMX_start_transmith>
	sei();
 cda:	78 94       	sei
    while (1) 
    {
		
		
		
		dmxctr_open();
 cdc:	0e 94 86 00 	call	0x10c	; 0x10c <_Z11dmxctr_openv>
		//Block_loop(1,1,mode_one	);
		//Block_output(output_normal);
		//Block_Run();
		//Block_wait();
// QUA CAU
			rota_enable();
 ce0:	0e 94 08 02 	call	0x410	; 0x410 <_Z11rota_enablev>
			rota_init(0,A1,A16);
 ce4:	4f e0       	ldi	r20, 0x0F	; 15
 ce6:	50 e0       	ldi	r21, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z9rota_inithjj>
			rota_pattern_fill(4,left,255,5,5,5,0,0,0);
 cf2:	81 2c       	mov	r8, r1
 cf4:	a1 2c       	mov	r10, r1
 cf6:	c1 2c       	mov	r12, r1
 cf8:	0f 2e       	mov	r0, r31
 cfa:	f5 e0       	ldi	r31, 0x05	; 5
 cfc:	ef 2e       	mov	r14, r31
 cfe:	f0 2d       	mov	r31, r0
 d00:	05 e0       	ldi	r16, 0x05	; 5
 d02:	25 e0       	ldi	r18, 0x05	; 5
 d04:	4f ef       	ldi	r20, 0xFF	; 255
 d06:	60 e0       	ldi	r22, 0x00	; 0
 d08:	84 e0       	ldi	r24, 0x04	; 4
 d0a:	0e 94 94 02 	call	0x528	; 0x528 <_Z17rota_pattern_fillh4NAVIhhhhhhh>
			rota_run(200,left);
 d0e:	60 e0       	ldi	r22, 0x00	; 0
 d10:	88 ec       	ldi	r24, 0xC8	; 200
 d12:	0e 94 df 01 	call	0x3be	; 0x3be <_Z8rota_runh4NAVI>
			delay_ms(15000);
 d16:	68 e9       	ldi	r22, 0x98	; 152
 d18:	7a e3       	ldi	r23, 0x3A	; 58
 d1a:	80 e0       	ldi	r24, 0x00	; 0
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8delay_msm>
			
			rota_enable();
 d22:	0e 94 08 02 	call	0x410	; 0x410 <_Z11rota_enablev>
			rota_init(0,A1,A16);
 d26:	4f e0       	ldi	r20, 0x0F	; 15
 d28:	50 e0       	ldi	r21, 0x00	; 0
 d2a:	60 e0       	ldi	r22, 0x00	; 0
 d2c:	70 e0       	ldi	r23, 0x00	; 0
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z9rota_inithjj>
			rota_pattern_fill(4,left,255,0,255,0,0,0,0);
 d34:	e1 2c       	mov	r14, r1
 d36:	0f ef       	ldi	r16, 0xFF	; 255
 d38:	20 e0       	ldi	r18, 0x00	; 0
 d3a:	4f ef       	ldi	r20, 0xFF	; 255
 d3c:	60 e0       	ldi	r22, 0x00	; 0
 d3e:	84 e0       	ldi	r24, 0x04	; 4
 d40:	0e 94 94 02 	call	0x528	; 0x528 <_Z17rota_pattern_fillh4NAVIhhhhhhh>
			rota_run(200,left);
 d44:	60 e0       	ldi	r22, 0x00	; 0
 d46:	88 ec       	ldi	r24, 0xC8	; 200
 d48:	0e 94 df 01 	call	0x3be	; 0x3be <_Z8rota_runh4NAVI>
			delay_ms(15000);
 d4c:	68 e9       	ldi	r22, 0x98	; 152
 d4e:	7a e3       	ldi	r23, 0x3A	; 58
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z8delay_msm>
#include "DMX_pro.h"
#include "effect_classic.h"
 volatile uint8_t channel_buff[MAX_DMX_CHANNEL];


int main(void)
 d58:	c1 cf       	rjmp	.-126    	; 0xcdc <main+0x46>

00000d5a <_exit>:
 d5a:	f8 94       	cli

00000d5c <__stop_program>:
 d5c:	ff cf       	rjmp	.-2      	; 0xd5c <__stop_program>
