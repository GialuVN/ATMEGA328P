
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000526  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  0000059a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005e2  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000031b  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ae  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_4>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_7>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_21>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	ab 00       	.word	0x00ab	; ????
  6a:	b0 00       	.word	0x00b0	; ????
  6c:	b5 00       	.word	0x00b5	; ????
  6e:	ba 00       	.word	0x00ba	; ????
  70:	bf 00       	.word	0x00bf	; ????
  72:	c4 00       	.word	0x00c4	; ????
  74:	c9 00       	.word	0x00c9	; ????
  76:	ce 00       	.word	0x00ce	; ????
  78:	f3 00       	.word	0x00f3	; ????
  7a:	04 01       	movw	r0, r8
  7c:	15 01       	movw	r2, r10
  7e:	26 01       	movw	r4, r12
  80:	37 01       	movw	r6, r14
  82:	48 01       	movw	r8, r16
  84:	59 01       	movw	r10, r18
  86:	6a 01       	movw	r12, r20

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a1 32       	cpi	r26, 0x21	; 33
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  a8:	0c 94 91 02 	jmp	0x522	; 0x522 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <_Z11ADC_initialhhh>:
volatile ADC_DATA adc_data;
volatile ADC_CTR adc_ctr;

void ADC_initial(unsigned char mask,unsigned char div,unsigned char ref)
{
	if (mask==0) return;
  b0:	88 23       	and	r24, r24
  b2:	49 f0       	breq	.+18     	; 0xc6 <_Z11ADC_initialhhh+0x16>
		adc_ctr.adc_sequence = 0;
  b4:	e0 e0       	ldi	r30, 0x00	; 0
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	12 82       	std	Z+2, r1	; 0x02
		adc_ctr.adc_ref = ref;
  ba:	40 83       	st	Z, r20
		adc_ctr.adc_mask = mask; //save mask
  bc:	83 83       	std	Z+3, r24	; 0x03
		DIDR0 = mask;			 //digital disable
  be:	80 93 7e 00 	sts	0x007E, r24
		ADCSRA = div;			// division factor
  c2:	60 93 7a 00 	sts	0x007A, r22
  c6:	08 95       	ret

000000c8 <_Z9ADC_startv>:
}

void ADC_start(void)
{
	if (adc_ctr.adc_mask==0) return;
  c8:	80 91 03 01 	lds	r24, 0x0103
  cc:	88 23       	and	r24, r24
  ce:	c9 f1       	breq	.+114    	; 0x142 <_Z9ADC_startv+0x7a>
	while(adc_ctr.adc_sequence<8)
  d0:	80 91 02 01 	lds	r24, 0x0102
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	88 f5       	brcc	.+98     	; 0x13a <_Z9ADC_startv+0x72>
	{
		if (adc_ctr.adc_mask&(1<<adc_ctr.adc_sequence))
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	83 81       	ldd	r24, Z+3	; 0x03
  de:	22 81       	ldd	r18, Z+2	; 0x02
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <_Z9ADC_startv+0x20>
  e4:	95 95       	asr	r25
  e6:	87 95       	ror	r24
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <_Z9ADC_startv+0x1c>
  ec:	80 fd       	sbrc	r24, 0
  ee:	0b c0       	rjmp	.+22     	; 0x106 <_Z9ADC_startv+0x3e>
  f0:	1e c0       	rjmp	.+60     	; 0x12e <_Z9ADC_startv+0x66>
  f2:	83 81       	ldd	r24, Z+3	; 0x03
  f4:	22 81       	ldd	r18, Z+2	; 0x02
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <_Z9ADC_startv+0x36>
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	2a 95       	dec	r18
 100:	e2 f7       	brpl	.-8      	; 0xfa <_Z9ADC_startv+0x32>
 102:	80 ff       	sbrs	r24, 0
 104:	14 c0       	rjmp	.+40     	; 0x12e <_Z9ADC_startv+0x66>
		{
			ADMUX =(adc_ctr.adc_ref<<REFS0)|(adc_ctr.adc_sequence);		//ref config and MUX sequence
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	90 81       	ld	r25, Z
 10c:	22 81       	ldd	r18, Z+2	; 0x02
 10e:	30 e4       	ldi	r19, 0x40	; 64
 110:	93 9f       	mul	r25, r19
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	82 2b       	or	r24, r18
 118:	80 93 7c 00 	sts	0x007C, r24
			ADCSRA |= (1<<ADIE)|(1<<ADIF)|(1<<ADEN)|(1<<ADSC);	//adc interrupt enable and adc enable and start						
 11c:	aa e7       	ldi	r26, 0x7A	; 122
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	8c 91       	ld	r24, X
 122:	88 6d       	ori	r24, 0xD8	; 216
 124:	8c 93       	st	X, r24
			adc_ctr.adc_sequence++;
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	82 83       	std	Z+2, r24	; 0x02
			return;
 12c:	08 95       	ret
		}
		adc_ctr.adc_sequence++;
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	82 83       	std	Z+2, r24	; 0x02
}

void ADC_start(void)
{
	if (adc_ctr.adc_mask==0) return;
	while(adc_ctr.adc_sequence<8)
 134:	82 81       	ldd	r24, Z+2	; 0x02
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	e0 f2       	brcs	.-72     	; 0xf2 <_Z9ADC_startv+0x2a>
			adc_ctr.adc_sequence++;
			return;
		}
		adc_ctr.adc_sequence++;
	}
	adc_ctr.adc_sequence=0;
 13a:	10 92 02 01 	sts	0x0102, r1
	ADC_start();
 13e:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
 142:	08 95       	ret

00000144 <_Z8ADC_readh>:
	ADCSRA &= ~((1<<ADEN)|(1<<ADSC))|(1<<ADIE);//adc disable and stop and adc interrupt disable
}

unsigned int ADC_read(unsigned char mux)
{
	switch (mux)
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	91 05       	cpc	r25, r1
 14a:	68 f5       	brcc	.+90     	; 0x1a6 <_Z8ADC_readh+0x62>
 14c:	fc 01       	movw	r30, r24
 14e:	ec 5c       	subi	r30, 0xCC	; 204
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	0c 94 8b 02 	jmp	0x516	; 0x516 <__tablejump2__>
	{
		case 0:
		return adc_data.adc0_val;
 156:	80 91 04 01 	lds	r24, 0x0104
 15a:	90 91 05 01 	lds	r25, 0x0105
 15e:	08 95       	ret
		case 1:
		return adc_data.adc1_val;
 160:	80 91 06 01 	lds	r24, 0x0106
 164:	90 91 07 01 	lds	r25, 0x0107
 168:	08 95       	ret
		case 2:
		return adc_data.adc2_val;
 16a:	80 91 08 01 	lds	r24, 0x0108
 16e:	90 91 09 01 	lds	r25, 0x0109
 172:	08 95       	ret
		case 3:
		return adc_data.adc3_val;
 174:	80 91 0a 01 	lds	r24, 0x010A
 178:	90 91 0b 01 	lds	r25, 0x010B
 17c:	08 95       	ret
		case 4:
		return adc_data.adc4_val;
 17e:	80 91 0c 01 	lds	r24, 0x010C
 182:	90 91 0d 01 	lds	r25, 0x010D
 186:	08 95       	ret
		case 5:
		return adc_data.adc5_val;
 188:	80 91 0e 01 	lds	r24, 0x010E
 18c:	90 91 0f 01 	lds	r25, 0x010F
 190:	08 95       	ret
		case 6:
		return adc_data.adc6_val;
 192:	80 91 10 01 	lds	r24, 0x0110
 196:	90 91 11 01 	lds	r25, 0x0111
 19a:	08 95       	ret
		case 7:
		return adc_data.adc7_val;
 19c:	80 91 12 01 	lds	r24, 0x0112
 1a0:	90 91 13 01 	lds	r25, 0x0113
 1a4:	08 95       	ret
		default:
		return 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
 1aa:	08 95       	ret

000001ac <__vector_21>:

ISR(ADC_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	switch (adc_ctr.adc_sequence-1)
 1ce:	e0 91 02 01 	lds	r30, 0x0102
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	e8 30       	cpi	r30, 0x08	; 8
 1d8:	f1 05       	cpc	r31, r1
 1da:	08 f0       	brcs	.+2      	; 0x1de <__vector_21+0x32>
 1dc:	8b c0       	rjmp	.+278    	; 0x2f4 <__vector_21+0x148>
 1de:	e4 5c       	subi	r30, 0xC4	; 196
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	0c 94 8b 02 	jmp	0x516	; 0x516 <__tablejump2__>
	{
		case 0:
		adc_data.adc0_val = ADCL;
 1e6:	80 91 78 00 	lds	r24, 0x0078
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	e4 e0       	ldi	r30, 0x04	; 4
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	80 83       	st	Z, r24
		adc_data.adc0_val|=(unsigned int)(ADCH<<8);
 1f4:	20 91 79 00 	lds	r18, 0x0079
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	92 2b       	or	r25, r18
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
		ADC_start();
 202:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 206:	76 c0       	rjmp	.+236    	; 0x2f4 <__vector_21+0x148>
		
		case 1:
		adc_data.adc1_val = ADCL;
 208:	80 91 78 00 	lds	r24, 0x0078
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	e4 e0       	ldi	r30, 0x04	; 4
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	93 83       	std	Z+3, r25	; 0x03
 214:	82 83       	std	Z+2, r24	; 0x02
		adc_data.adc1_val|=(unsigned int)(ADCH<<8);
 216:	20 91 79 00 	lds	r18, 0x0079
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	93 81       	ldd	r25, Z+3	; 0x03
 21e:	92 2b       	or	r25, r18
 220:	93 83       	std	Z+3, r25	; 0x03
 222:	82 83       	std	Z+2, r24	; 0x02
		ADC_start();
 224:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 228:	65 c0       	rjmp	.+202    	; 0x2f4 <__vector_21+0x148>
		case 2:
		adc_data.adc2_val = ADCL;
 22a:	80 91 78 00 	lds	r24, 0x0078
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	e4 e0       	ldi	r30, 0x04	; 4
 232:	f1 e0       	ldi	r31, 0x01	; 1
 234:	95 83       	std	Z+5, r25	; 0x05
 236:	84 83       	std	Z+4, r24	; 0x04
		adc_data.adc2_val|=(unsigned int)(ADCH<<8);
 238:	20 91 79 00 	lds	r18, 0x0079
 23c:	84 81       	ldd	r24, Z+4	; 0x04
 23e:	95 81       	ldd	r25, Z+5	; 0x05
 240:	92 2b       	or	r25, r18
 242:	95 83       	std	Z+5, r25	; 0x05
 244:	84 83       	std	Z+4, r24	; 0x04
		ADC_start();
 246:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 24a:	54 c0       	rjmp	.+168    	; 0x2f4 <__vector_21+0x148>
		case 3:
		adc_data.adc3_val = ADCL;
 24c:	80 91 78 00 	lds	r24, 0x0078
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	e4 e0       	ldi	r30, 0x04	; 4
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	97 83       	std	Z+7, r25	; 0x07
 258:	86 83       	std	Z+6, r24	; 0x06
		adc_data.adc3_val|=(unsigned int)(ADCH<<8);
 25a:	20 91 79 00 	lds	r18, 0x0079
 25e:	86 81       	ldd	r24, Z+6	; 0x06
 260:	97 81       	ldd	r25, Z+7	; 0x07
 262:	92 2b       	or	r25, r18
 264:	97 83       	std	Z+7, r25	; 0x07
 266:	86 83       	std	Z+6, r24	; 0x06
		ADC_start();
 268:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 26c:	43 c0       	rjmp	.+134    	; 0x2f4 <__vector_21+0x148>
		case 4:
		adc_data.adc4_val = ADCL;
 26e:	80 91 78 00 	lds	r24, 0x0078
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	e4 e0       	ldi	r30, 0x04	; 4
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	91 87       	std	Z+9, r25	; 0x09
 27a:	80 87       	std	Z+8, r24	; 0x08
		adc_data.adc4_val|=(unsigned int)(ADCH<<8);
 27c:	20 91 79 00 	lds	r18, 0x0079
 280:	80 85       	ldd	r24, Z+8	; 0x08
 282:	91 85       	ldd	r25, Z+9	; 0x09
 284:	92 2b       	or	r25, r18
 286:	91 87       	std	Z+9, r25	; 0x09
 288:	80 87       	std	Z+8, r24	; 0x08
		ADC_start();
 28a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 28e:	32 c0       	rjmp	.+100    	; 0x2f4 <__vector_21+0x148>
		case 5:
		adc_data.adc5_val = ADCL;
 290:	80 91 78 00 	lds	r24, 0x0078
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	e4 e0       	ldi	r30, 0x04	; 4
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	93 87       	std	Z+11, r25	; 0x0b
 29c:	82 87       	std	Z+10, r24	; 0x0a
		adc_data.adc5_val|=(unsigned int)(ADCH<<8);
 29e:	20 91 79 00 	lds	r18, 0x0079
 2a2:	82 85       	ldd	r24, Z+10	; 0x0a
 2a4:	93 85       	ldd	r25, Z+11	; 0x0b
 2a6:	92 2b       	or	r25, r18
 2a8:	93 87       	std	Z+11, r25	; 0x0b
 2aa:	82 87       	std	Z+10, r24	; 0x0a
		ADC_start();
 2ac:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 2b0:	21 c0       	rjmp	.+66     	; 0x2f4 <__vector_21+0x148>
		case 6:
		adc_data.adc6_val = ADCL;
 2b2:	80 91 78 00 	lds	r24, 0x0078
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	e4 e0       	ldi	r30, 0x04	; 4
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	95 87       	std	Z+13, r25	; 0x0d
 2be:	84 87       	std	Z+12, r24	; 0x0c
		adc_data.adc6_val|=(unsigned int)(ADCH<<8);
 2c0:	20 91 79 00 	lds	r18, 0x0079
 2c4:	84 85       	ldd	r24, Z+12	; 0x0c
 2c6:	95 85       	ldd	r25, Z+13	; 0x0d
 2c8:	92 2b       	or	r25, r18
 2ca:	95 87       	std	Z+13, r25	; 0x0d
 2cc:	84 87       	std	Z+12, r24	; 0x0c
		ADC_start();
 2ce:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
 2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <__vector_21+0x148>
		case 7:
		adc_data.adc7_val = ADCL;
 2d4:	80 91 78 00 	lds	r24, 0x0078
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	e4 e0       	ldi	r30, 0x04	; 4
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	97 87       	std	Z+15, r25	; 0x0f
 2e0:	86 87       	std	Z+14, r24	; 0x0e
		adc_data.adc7_val|=(unsigned int)(ADCH<<8);
 2e2:	20 91 79 00 	lds	r18, 0x0079
 2e6:	86 85       	ldd	r24, Z+14	; 0x0e
 2e8:	97 85       	ldd	r25, Z+15	; 0x0f
 2ea:	92 2b       	or	r25, r18
 2ec:	97 87       	std	Z+15, r25	; 0x0f
 2ee:	86 87       	std	Z+14, r24	; 0x0e
		ADC_start();
 2f0:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
		break;
		default:
		break;
	}
	
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <_Z14burshless_initv>:



void burshless_init()
{
	TIMSK2 |= (1 << OCIE0A);					 // set output compare interrupt enable
 316:	e0 e7       	ldi	r30, 0x70	; 112
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);						// set CTC mode
 320:	e0 eb       	ldi	r30, 0xB0	; 176
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	82 60       	ori	r24, 0x02	; 2
 328:	80 83       	st	Z, r24
	TCCR2B |= TIMER2_PRESCALER;					//CLK/32
 32a:	e1 eb       	ldi	r30, 0xB1	; 177
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	83 60       	ori	r24, 0x03	; 3
 332:	80 83       	st	Z, r24
	OCR2A   = TIMER2_COMPARE_VALUE;				// set compare value for interrupt
 334:	88 e1       	ldi	r24, 0x18	; 24
 336:	80 93 b3 00 	sts	0x00B3, r24
	//interrupt initial
	DDR_S &= ~(1<<PINx_S);
 33a:	3a 98       	cbi	0x07, 2	; 7
	PORT_S |=1<<PINx_S;
 33c:	42 9a       	sbi	0x08, 2	; 8
	PCICR = 1<<PCIE1;	// PCINT10 select
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 = 1<<PCINT10;
 344:	84 e0       	ldi	r24, 0x04	; 4
 346:	80 93 6c 00 	sts	0x006C, r24
	//motor initial
	DDR_M |= 1<<PINx_M;
 34a:	3b 9a       	sbi	0x07, 3	; 7
	PORT_M &=~(1<<PINx_M);
 34c:	43 98       	cbi	0x08, 3	; 8
	sei();
 34e:	78 94       	sei
 350:	08 95       	ret

00000352 <_Z12speed_updatei>:
}

void speed_update(int speed)
{
	
	motor.input_speed = speed;
 352:	90 93 1d 01 	sts	0x011D, r25
 356:	80 93 1c 01 	sts	0x011C, r24
 35a:	08 95       	ret

0000035c <__vector_4>:
	
}


ISR(PCINT1_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	if (motor.signal_en==true)
 36e:	80 91 17 01 	lds	r24, 0x0117
 372:	88 23       	and	r24, r24
 374:	61 f0       	breq	.+24     	; 0x38e <__vector_4+0x32>
	{
		if (!(PIN_S&(1<<PINx_S)))
 376:	32 99       	sbic	0x06, 2	; 6
 378:	0a c0       	rjmp	.+20     	; 0x38e <__vector_4+0x32>
		{
			motor.counter_en = false;
 37a:	e4 e1       	ldi	r30, 0x14	; 20
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	12 82       	std	Z+2, r1	; 0x02
			motor.curent_speed = motor.counter;
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	93 87       	std	Z+11, r25	; 0x0b
 386:	82 87       	std	Z+10, r24	; 0x0a
			motor.counter = 0;
 388:	11 82       	std	Z+1, r1	; 0x01
 38a:	10 82       	st	Z, r1
			motor.stage = 0;
 38c:	14 86       	std	Z+12, r1	; 0x0c
		}
	}
	
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_7>:
ISR(TIMER2_COMPA_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	8f 93       	push	r24
 3b4:	9f 93       	push	r25
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	if (motor.counter_en == true) if (motor.counter<=65000) motor.counter++;
 3ba:	80 91 16 01 	lds	r24, 0x0116
 3be:	88 23       	and	r24, r24
 3c0:	69 f0       	breq	.+26     	; 0x3dc <__vector_7+0x3c>
 3c2:	80 91 14 01 	lds	r24, 0x0114
 3c6:	90 91 15 01 	lds	r25, 0x0115
 3ca:	89 3e       	cpi	r24, 0xE9	; 233
 3cc:	2d ef       	ldi	r18, 0xFD	; 253
 3ce:	92 07       	cpc	r25, r18
 3d0:	28 f4       	brcc	.+10     	; 0x3dc <__vector_7+0x3c>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 15 01 	sts	0x0115, r25
 3d8:	80 93 14 01 	sts	0x0114, r24
	
	if (motor.curent_speed>motor.input_speed)
 3dc:	e4 e1       	ldi	r30, 0x14	; 20
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	82 85       	ldd	r24, Z+10	; 0x0a
 3e2:	93 85       	ldd	r25, Z+11	; 0x0b
 3e4:	20 85       	ldd	r18, Z+8	; 0x08
 3e6:	31 85       	ldd	r19, Z+9	; 0x09
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__vector_7+0x50>
 3ee:	43 c0       	rjmp	.+134    	; 0x476 <__vector_7+0xd6>
	{
		switch (motor.stage)
 3f0:	20 91 20 01 	lds	r18, 0x0120
 3f4:	21 30       	cpi	r18, 0x01	; 1
 3f6:	d1 f0       	breq	.+52     	; 0x42c <__vector_7+0x8c>
 3f8:	18 f0       	brcs	.+6      	; 0x400 <__vector_7+0x60>
 3fa:	22 30       	cpi	r18, 0x02	; 2
 3fc:	41 f1       	breq	.+80     	; 0x44e <__vector_7+0xae>
 3fe:	5f c0       	rjmp	.+190    	; 0x4be <__vector_7+0x11e>
		{
			case 0:
				motor.signal_en = false;
 400:	e4 e1       	ldi	r30, 0x14	; 20
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	13 82       	std	Z+3, r1	; 0x03
				motor.counter_en = true;
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	22 83       	std	Z+2, r18	; 0x02
				motor.counter_delay = motor.curent_speed/4;
 40a:	ac 01       	movw	r20, r24
 40c:	56 95       	lsr	r21
 40e:	47 95       	ror	r20
 410:	56 95       	lsr	r21
 412:	47 95       	ror	r20
 414:	57 83       	std	Z+7, r21	; 0x07
 416:	46 83       	std	Z+6, r20	; 0x06
				motor.counter_power = motor.curent_speed/8;
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	95 83       	std	Z+5, r25	; 0x05
 426:	84 83       	std	Z+4, r24	; 0x04
				motor.stage = 1;
 428:	24 87       	std	Z+12, r18	; 0x0c
			break;
 42a:	49 c0       	rjmp	.+146    	; 0x4be <__vector_7+0x11e>
			case 1:
			if (motor.counter_delay!=0) motor.counter_delay--;
 42c:	80 91 1a 01 	lds	r24, 0x011A
 430:	90 91 1b 01 	lds	r25, 0x011B
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	31 f0       	breq	.+12     	; 0x444 <__vector_7+0xa4>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	90 93 1b 01 	sts	0x011B, r25
 43e:	80 93 1a 01 	sts	0x011A, r24
 442:	3d c0       	rjmp	.+122    	; 0x4be <__vector_7+0x11e>
			else
			{
				PORT_M |=(1<<PINx_M);	//motor on
 444:	43 9a       	sbi	0x08, 3	; 8
				 motor.stage = 2;
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	80 93 20 01 	sts	0x0120, r24
 44c:	38 c0       	rjmp	.+112    	; 0x4be <__vector_7+0x11e>
			}
			break;
			
			case 2:
			if (motor.counter_power!=0) motor.counter_power--;
 44e:	80 91 18 01 	lds	r24, 0x0118
 452:	90 91 19 01 	lds	r25, 0x0119
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	31 f0       	breq	.+12     	; 0x466 <__vector_7+0xc6>
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	90 93 19 01 	sts	0x0119, r25
 460:	80 93 18 01 	sts	0x0118, r24
 464:	2c c0       	rjmp	.+88     	; 0x4be <__vector_7+0x11e>
			else
			{
				PORT_M &=~(1<<PINx_M);	//motor off
 466:	43 98       	cbi	0x08, 3	; 8
				motor.signal_en = true;
 468:	e4 e1       	ldi	r30, 0x14	; 20
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	83 83       	std	Z+3, r24	; 0x03
				motor.stage = 3;
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	84 87       	std	Z+12, r24	; 0x0c
 474:	24 c0       	rjmp	.+72     	; 0x4be <__vector_7+0x11e>
			break;
		}
	}
	else
	{
		switch (motor.stage)
 476:	20 91 20 01 	lds	r18, 0x0120
 47a:	22 23       	and	r18, r18
 47c:	19 f0       	breq	.+6      	; 0x484 <__vector_7+0xe4>
 47e:	21 30       	cpi	r18, 0x01	; 1
 480:	61 f0       	breq	.+24     	; 0x49a <__vector_7+0xfa>
 482:	1d c0       	rjmp	.+58     	; 0x4be <__vector_7+0x11e>
		{
			case 0:
			motor.signal_en = false;
 484:	e4 e1       	ldi	r30, 0x14	; 20
 486:	f1 e0       	ldi	r31, 0x01	; 1
 488:	13 82       	std	Z+3, r1	; 0x03
			motor.counter_en = true;
 48a:	21 e0       	ldi	r18, 0x01	; 1
 48c:	22 83       	std	Z+2, r18	; 0x02
			motor.counter_delay = motor.curent_speed/2;
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	97 83       	std	Z+7, r25	; 0x07
 494:	86 83       	std	Z+6, r24	; 0x06
			motor.stage = 1;
 496:	24 87       	std	Z+12, r18	; 0x0c
			break;
 498:	12 c0       	rjmp	.+36     	; 0x4be <__vector_7+0x11e>
			case 1:
			if (motor.counter_delay!=0) motor.counter_delay--;
 49a:	80 91 1a 01 	lds	r24, 0x011A
 49e:	90 91 1b 01 	lds	r25, 0x011B
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	31 f0       	breq	.+12     	; 0x4b2 <__vector_7+0x112>
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	90 93 1b 01 	sts	0x011B, r25
 4ac:	80 93 1a 01 	sts	0x011A, r24
 4b0:	06 c0       	rjmp	.+12     	; 0x4be <__vector_7+0x11e>
			else
			{
				motor.signal_en = true;
 4b2:	e4 e1       	ldi	r30, 0x14	; 20
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	83 83       	std	Z+3, r24	; 0x03
				 motor.stage = 3;
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	84 87       	std	Z+12, r24	; 0x0c
			break;
		}
		
	}
	
}
 4be:	ff 91       	pop	r31
 4c0:	ef 91       	pop	r30
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <main>:
#include <avr/io.h>
#include "brushless.h"
#include "adc_megax8.h"
int main(void)
{
	burshless_init();
 4d8:	0e 94 8b 01 	call	0x316	; 0x316 <_Z14burshless_initv>
	ADC_initial(0b00000010,ADC_div128,ADC_REF_VCC);
 4dc:	41 e0       	ldi	r20, 0x01	; 1
 4de:	67 e0       	ldi	r22, 0x07	; 7
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z11ADC_initialhhh>
	ADC_start();
 4e6:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z9ADC_startv>
	
	while(1)
	{
		speed_update(ADC_read(1)*5);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	0e 94 a2 00 	call	0x144	; 0x144 <_Z8ADC_readh>
 4f0:	9c 01       	movw	r18, r24
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	82 0f       	add	r24, r18
 4fc:	93 1f       	adc	r25, r19
 4fe:	0e 94 a9 01 	call	0x352	; 0x352 <_Z12speed_updatei>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 502:	2f ef       	ldi	r18, 0xFF	; 255
 504:	83 ed       	ldi	r24, 0xD3	; 211
 506:	90 e3       	ldi	r25, 0x30	; 48
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <main+0x30>
 510:	00 c0       	rjmp	.+0      	; 0x512 <main+0x3a>
 512:	00 00       	nop
 514:	ea cf       	rjmp	.-44     	; 0x4ea <main+0x12>

00000516 <__tablejump2__>:
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	05 90       	lpm	r0, Z+
 51c:	f4 91       	lpm	r31, Z
 51e:	e0 2d       	mov	r30, r0
 520:	09 94       	ijmp

00000522 <_exit>:
 522:	f8 94       	cli

00000524 <__stop_program>:
 524:	ff cf       	rjmp	.-2      	; 0x524 <__stop_program>
