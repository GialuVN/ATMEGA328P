
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000151  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ce  00000000  00000000  00000365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011a  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016d  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_7>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <burshless_init>:
 */ 

#include "brushless.h"
void burshless_init()
{
	TIMSK2 |= (1 << OCIE0A);					 // set output compare interrupt enable
  80:	e0 e7       	ldi	r30, 0x70	; 112
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);						// set CTC mode
  8a:	e0 eb       	ldi	r30, 0xB0	; 176
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	82 60       	ori	r24, 0x02	; 2
  92:	80 83       	st	Z, r24
	TCCR2B |= TIMER2_PRESCALER;					//CLK/32
  94:	e1 eb       	ldi	r30, 0xB1	; 177
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	80 83       	st	Z, r24
	OCR2A   = TIMER2_COMPARE_VALUE;				// set compare value for interrupt
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 b3 00 	sts	0x00B3, r24
	//interrupt initial
	DDR_S &= ~(1<<PINx_S);
  a4:	3a 98       	cbi	0x07, 2	; 7
	PORT_S |=1<<PINx_S;
  a6:	42 9a       	sbi	0x08, 2	; 8
	PCICR = 1<<PCIE1;	// PCINT10 select
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	80 93 68 00 	sts	0x0068, r24
	PCMSK1 = 1<<PCINT10;
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	80 93 6c 00 	sts	0x006C, r24
	//motor initial
	DDR_M |= 1<<PINx_M;
  b4:	3b 9a       	sbi	0x07, 3	; 7
	PORT_M |= 1<<PINx_M;
  b6:	43 9a       	sbi	0x08, 3	; 8
	sei();
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <__vector_4>:
}


ISR(PCINT1_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
		//PORT_M &=~( 1<<PINx_M);
	//}
	//
	

}
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_7>:



ISR(TIMER2_COMPA_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
	
	PORT_M ^=1<<PINx_M;
  de:	98 b1       	in	r25, 0x08	; 8
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	89 27       	eor	r24, r25
  e4:	88 b9       	out	0x08, r24	; 8
	
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <main>:
#include <avr/io.h>
#include "brushless.h"

int main(void)
{
	burshless_init();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <burshless_init>
	
    while(1)
    {
		
	}
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x4>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
