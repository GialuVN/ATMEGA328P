
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000238c  00002420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000238c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000133  00800104  00800104  00002424  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038f4  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de5  00000000  00000000  000066aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000098c  00000000  00000000  00007490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef0  00000000  00000000  00007e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042c0  00000000  00000000  00008d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  0000cfcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
       4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
       c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      1c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__vector_7>
      20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      40:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_16>
      44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
      68:	37 05       	cpc	r19, r7
      6a:	34 05       	cpc	r19, r4
      6c:	31 05       	cpc	r19, r1
      6e:	2e 05       	cpc	r18, r14
      70:	2b 05       	cpc	r18, r11
      72:	28 05       	cpc	r18, r8
      74:	25 05       	cpc	r18, r5
      76:	ef 05       	cpc	r30, r15
      78:	96 06       	cpc	r9, r22
      7a:	fc 0d       	add	r31, r12
      7c:	fe 0d       	add	r31, r14
      7e:	00 0e       	add	r0, r16
      80:	02 0e       	add	r0, r18
      82:	04 0e       	add	r0, r20
      84:	06 0e       	add	r0, r22
      86:	08 0e       	add	r0, r24
      88:	0a 0e       	add	r0, r26
      8a:	0c 0e       	add	r0, r28
      8c:	0e 0e       	add	r0, r30
      8e:	10 0e       	add	r1, r16
      90:	12 0e       	add	r1, r18
      92:	14 0e       	add	r1, r20
      94:	16 0e       	add	r1, r22
      96:	18 0e       	add	r1, r24
      98:	73 0e       	add	r7, r19
      9a:	79 0e       	add	r7, r25
      9c:	7f 0e       	add	r7, r31
      9e:	85 0e       	add	r8, r21
      a0:	8b 0e       	add	r8, r27
      a2:	91 0e       	add	r9, r17
      a4:	97 0e       	add	r9, r23
      a6:	9d 0e       	add	r9, r29
      a8:	a3 0e       	add	r10, r19
      aa:	a9 0e       	add	r10, r25
      ac:	af 0e       	add	r10, r31
      ae:	b5 0e       	add	r11, r21
      b0:	bb 0e       	add	r11, r27
      b2:	c1 0e       	add	r12, r17
      b4:	c7 0e       	add	r12, r23

000000b6 <__ctors_end>:
      b6:	11 24       	eor	r1, r1
      b8:	1f be       	out	0x3f, r1	; 63
      ba:	cf ef       	ldi	r28, 0xFF	; 255
      bc:	d8 e0       	ldi	r29, 0x08	; 8
      be:	de bf       	out	0x3e, r29	; 62
      c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_clear_bss>:
      c2:	22 e0       	ldi	r18, 0x02	; 2
      c4:	a4 e0       	ldi	r26, 0x04	; 4
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a7 33       	cpi	r26, 0x37	; 55
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ec e8       	ldi	r30, 0x8C	; 140
      da:	f3 e2       	ldi	r31, 0x23	; 35
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a4 30       	cpi	r26, 0x04	; 4
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>
      e8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <main>
      ec:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <_exit>

000000f0 <__bad_interrupt>:
      f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <_Z18dmxcontrol_defaultv>:
	if (from_val>to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].on_delay=Random_range(from_val,to_val);
      f4:	cf 93       	push	r28
      f6:	df 93       	push	r29
      f8:	a2 e2       	ldi	r26, 0x22	; 34
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee e2       	ldi	r30, 0x2E	; 46
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	42 e1       	ldi	r20, 0x12	; 18
     102:	52 e0       	ldi	r21, 0x02	; 2
     104:	62 e3       	ldi	r22, 0x32	; 50
     106:	24 e6       	ldi	r18, 0x64	; 100
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].fade_in=Random_range(from_val,to_val);
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	8a e0       	ldi	r24, 0x0A	; 10
     10c:	9f ef       	ldi	r25, 0xFF	; 255
     10e:	ed 01       	movw	r28, r26
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	68 83       	st	Y, r22
     114:	1c 92       	st	X, r1
     116:	12 96       	adiw	r26, 0x02	; 2
     118:	1c 92       	st	X, r1
     11a:	1e 92       	st	-X, r1
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	14 96       	adiw	r26, 0x04	; 4
     120:	3c 93       	st	X, r19
     122:	2e 93       	st	-X, r18
     124:	13 97       	sbiw	r26, 0x03	; 3
     126:	ef 01       	movw	r28, r30
     128:	27 97       	sbiw	r28, 0x07	; 7
     12a:	88 83       	st	Y, r24
     12c:	17 96       	adiw	r26, 0x07	; 7
     12e:	3c 93       	st	X, r19
     130:	2e 93       	st	-X, r18
     132:	16 97       	sbiw	r26, 0x06	; 6
     134:	23 96       	adiw	r28, 0x03	; 3
     136:	88 83       	st	Y, r24
     138:	21 96       	adiw	r28, 0x01	; 1
     13a:	98 83       	st	Y, r25
     13c:	21 96       	adiw	r28, 0x01	; 1
     13e:	18 82       	st	Y, r1
     140:	21 96       	adiw	r28, 0x01	; 1
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].hold=Random_range(from_val,to_val);
     142:	18 82       	st	Y, r1
     144:	10 82       	st	Z, r1
     146:	1f 96       	adiw	r26, 0x0f	; 15
     148:	3f 96       	adiw	r30, 0x0f	; 15
     14a:	a4 17       	cp	r26, r20
     14c:	b5 07       	cpc	r27, r21
     14e:	f9 f6       	brne	.-66     	; 0x10e <_Z18dmxcontrol_defaultv+0x1a>
     150:	10 92 0d 01 	sts	0x010D, r1
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <_Z20dmxctr_config_vectorhh6selectjj>:
     15a:	2f 92       	push	r2
     15c:	3f 92       	push	r3
     15e:	4f 92       	push	r4
     160:	5f 92       	push	r5
     162:	6f 92       	push	r6
     164:	7f 92       	push	r7
     166:	8f 92       	push	r8
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].fade_out=Random_range(from_val,to_val);
     17e:	00 d0       	rcall	.+0      	; 0x180 <_Z20dmxctr_config_vectorhh6selectjj+0x26>
     180:	00 d0       	rcall	.+0      	; 0x182 <_Z20dmxctr_config_vectorhh6selectjj+0x28>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	68 2e       	mov	r6, r24
     188:	d6 2e       	mov	r13, r22
     18a:	54 2e       	mov	r5, r20
     18c:	79 01       	movw	r14, r18
     18e:	c6 2e       	mov	r12, r22
     190:	c8 1a       	sub	r12, r24
     192:	77 24       	eor	r7, r7
     194:	73 94       	inc	r7
     196:	7c 0c       	add	r7, r12
     198:	c9 01       	movw	r24, r18
     19a:	80 1b       	sub	r24, r16
     19c:	91 0b       	sbc	r25, r17
     19e:	bc 01       	movw	r22, r24
     1a0:	22 f4       	brpl	.+8      	; 0x1aa <_Z20dmxctr_config_vectorhh6selectjj+0x50>
     1a2:	66 27       	eor	r22, r22
     1a4:	77 27       	eor	r23, r23
     1a6:	68 1b       	sub	r22, r24
     1a8:	79 0b       	sbc	r23, r25
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     1b2:	4b 01       	movw	r8, r22
     1b4:	5c 01       	movw	r10, r24
     1b6:	67 2d       	mov	r22, r7
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].repeat=Random_range(from_val,to_val);
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	61 50       	subi	r22, 0x01	; 1
     1bc:	71 09       	sbc	r23, r1
     1be:	07 2e       	mov	r0, r23
     1c0:	00 0c       	add	r0, r0
     1c2:	88 0b       	sbc	r24, r24
     1c4:	99 0b       	sbc	r25, r25
     1c6:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     1ca:	9b 01       	movw	r18, r22
     1cc:	ac 01       	movw	r20, r24
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__divsf3>
     1d6:	4b 01       	movw	r8, r22
     1d8:	5c 01       	movw	r10, r24
     1da:	0e 15       	cp	r16, r14
     1dc:	1f 05       	cpc	r17, r15
     1de:	08 f0       	brcs	.+2      	; 0x1e2 <_Z20dmxctr_config_vectorhh6selectjj+0x88>
     1e0:	90 c1       	rjmp	.+800    	; 0x502 <_Z20dmxctr_config_vectorhh6selectjj+0x3a8>
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	58 16       	cp	r5, r24
     1e6:	c9 f0       	breq	.+50     	; 0x21a <_Z20dmxctr_config_vectorhh6selectjj+0xc0>
     1e8:	85 15       	cp	r24, r5
     1ea:	30 f0       	brcs	.+12     	; 0x1f8 <_Z20dmxctr_config_vectorhh6selectjj+0x9e>
     1ec:	55 20       	and	r5, r5
     1ee:	d9 f0       	breq	.+54     	; 0x226 <_Z20dmxctr_config_vectorhh6selectjj+0xcc>
     1f0:	91 e0       	ldi	r25, 0x01	; 1
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[i+bot].gray=Random_range(from_val,to_val);
     1f2:	59 16       	cp	r5, r25
     1f4:	a9 f0       	breq	.+42     	; 0x220 <_Z20dmxctr_config_vectorhh6selectjj+0xc6>
     1f6:	d4 c3       	rjmp	.+1960   	; 0x9a0 <__stack+0xa1>
     1f8:	a4 e0       	ldi	r26, 0x04	; 4
     1fa:	5a 16       	cp	r5, r26
     1fc:	41 f0       	breq	.+16     	; 0x20e <_Z20dmxctr_config_vectorhh6selectjj+0xb4>
     1fe:	5a 16       	cp	r5, r26
     200:	48 f0       	brcs	.+18     	; 0x214 <_Z20dmxctr_config_vectorhh6selectjj+0xba>
     202:	b5 e0       	ldi	r27, 0x05	; 5
     204:	5b 12       	cpse	r5, r27
     206:	cc c3       	rjmp	.+1944   	; 0x9a0 <__stack+0xa1>
     208:	71 10       	cpse	r7, r1
     20a:	03 c1       	rjmp	.+518    	; 0x412 <_Z20dmxctr_config_vectorhh6selectjj+0x2b8>
     20c:	c9 c3       	rjmp	.+1938   	; 0x9a0 <__stack+0xa1>
     20e:	71 10       	cpse	r7, r1
     210:	c4 c0       	rjmp	.+392    	; 0x39a <_Z20dmxctr_config_vectorhh6selectjj+0x240>
     212:	c6 c3       	rjmp	.+1932   	; 0x9a0 <__stack+0xa1>
     214:	71 10       	cpse	r7, r1
     216:	84 c0       	rjmp	.+264    	; 0x320 <_Z20dmxctr_config_vectorhh6selectjj+0x1c6>
     218:	c3 c3       	rjmp	.+1926   	; 0x9a0 <__stack+0xa1>
     21a:	71 10       	cpse	r7, r1
     21c:	45 c0       	rjmp	.+138    	; 0x2a8 <_Z20dmxctr_config_vectorhh6selectjj+0x14e>
     21e:	c0 c3       	rjmp	.+1920   	; 0x9a0 <__stack+0xa1>
     220:	71 10       	cpse	r7, r1
     222:	33 c1       	rjmp	.+614    	; 0x48a <_Z20dmxctr_config_vectorhh6selectjj+0x330>
     224:	bd c3       	rjmp	.+1914   	; 0x9a0 <__stack+0xa1>
     226:	77 20       	and	r7, r7
     228:	09 f4       	brne	.+2      	; 0x22c <_Z20dmxctr_config_vectorhh6selectjj+0xd2>
     22a:	ba c3       	rjmp	.+1908   	; 0x9a0 <__stack+0xa1>
			default:
			break;
		}
	}

	else if (from_val<to_val)
     22c:	ef e0       	ldi	r30, 0x0F	; 15
     22e:	6e 9e       	mul	r6, r30
     230:	90 01       	movw	r18, r0
     232:	11 24       	eor	r1, r1
	{
		switch (selection)
     234:	c9 01       	movw	r24, r18
     236:	8b 5d       	subi	r24, 0xDB	; 219
     238:	9e 4f       	sbci	r25, 0xFE	; 254
     23a:	1c 01       	movw	r2, r24
     23c:	ec 2c       	mov	r14, r12
     23e:	f1 2c       	mov	r15, r1
     240:	9f ef       	ldi	r25, 0xFF	; 255
     242:	e9 1a       	sub	r14, r25
     244:	f9 0a       	sbc	r15, r25
     246:	c1 2c       	mov	r12, r1
     248:	d1 2c       	mov	r13, r1
     24a:	c8 01       	movw	r24, r16
     24c:	a0 e0       	ldi	r26, 0x00	; 0
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	89 83       	std	Y+1, r24	; 0x01
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
     252:	9a 83       	std	Y+2, r25	; 0x02
     254:	ab 83       	std	Y+3, r26	; 0x03
     256:	bc 83       	std	Y+4, r27	; 0x04
     258:	b6 01       	movw	r22, r12
     25a:	0d 2c       	mov	r0, r13
     25c:	00 0c       	add	r0, r0
     25e:	88 0b       	sbc	r24, r24
     260:	99 0b       	sbc	r25, r25
     262:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     266:	a5 01       	movw	r20, r10
     268:	94 01       	movw	r18, r8
     26a:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
     26e:	2b 01       	movw	r4, r22
     270:	3c 01       	movw	r6, r24
     272:	69 81       	ldd	r22, Y+1	; 0x01
     274:	7a 81       	ldd	r23, Y+2	; 0x02
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	9c 81       	ldd	r25, Y+4	; 0x04
     27a:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     27e:	9b 01       	movw	r18, r22
     280:	ac 01       	movw	r20, r24
     282:	c3 01       	movw	r24, r6
     284:	b2 01       	movw	r22, r4
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
     286:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     28a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     28e:	d1 01       	movw	r26, r2
     290:	6d 93       	st	X+, r22
     292:	7c 93       	st	X, r23
     294:	bf ef       	ldi	r27, 0xFF	; 255
     296:	cb 1a       	sub	r12, r27
     298:	db 0a       	sbc	r13, r27
     29a:	ef e0       	ldi	r30, 0x0F	; 15
     29c:	2e 0e       	add	r2, r30
     29e:	31 1c       	adc	r3, r1
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=Random_range(from_val,to_val);
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
     2a0:	ce 14       	cp	r12, r14
     2a2:	df 04       	cpc	r13, r15
     2a4:	c9 f6       	brne	.-78     	; 0x258 <_Z20dmxctr_config_vectorhh6selectjj+0xfe>
     2a6:	7c c3       	rjmp	.+1784   	; 0x9a0 <__stack+0xa1>
     2a8:	ff e0       	ldi	r31, 0x0F	; 15
     2aa:	6f 9e       	mul	r6, r31
     2ac:	90 01       	movw	r18, r0
     2ae:	11 24       	eor	r1, r1
     2b0:	c9 01       	movw	r24, r18
     2b2:	89 5d       	subi	r24, 0xD9	; 217
     2b4:	9e 4f       	sbci	r25, 0xFE	; 254
     2b6:	1c 01       	movw	r2, r24
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=Random_range(from_val,to_val);
     2b8:	d1 2c       	mov	r13, r1
     2ba:	9f ef       	ldi	r25, 0xFF	; 255
     2bc:	c9 1a       	sub	r12, r25
     2be:	d9 0a       	sbc	r13, r25
     2c0:	e1 2c       	mov	r14, r1
     2c2:	f1 2c       	mov	r15, r1
     2c4:	c8 01       	movw	r24, r16
     2c6:	a0 e0       	ldi	r26, 0x00	; 0
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	9a 83       	std	Y+2, r25	; 0x02
     2ce:	ab 83       	std	Y+3, r26	; 0x03
     2d0:	bc 83       	std	Y+4, r27	; 0x04
	else if (from_val<to_val)
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=Random_range(from_val,to_val);
     2d2:	b7 01       	movw	r22, r14
     2d4:	0f 2c       	mov	r0, r15
     2d6:	00 0c       	add	r0, r0
     2d8:	88 0b       	sbc	r24, r24
     2da:	99 0b       	sbc	r25, r25
     2dc:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     2e0:	a5 01       	movw	r20, r10
     2e2:	94 01       	movw	r18, r8
     2e4:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     2e8:	2b 01       	movw	r4, r22
     2ea:	3c 01       	movw	r6, r24
     2ec:	69 81       	ldd	r22, Y+1	; 0x01
     2ee:	7a 81       	ldd	r23, Y+2	; 0x02
     2f0:	8b 81       	ldd	r24, Y+3	; 0x03
     2f2:	9c 81       	ldd	r25, Y+4	; 0x04
     2f4:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     2f8:	9b 01       	movw	r18, r22
     2fa:	ac 01       	movw	r20, r24
     2fc:	c3 01       	movw	r24, r6
     2fe:	b2 01       	movw	r22, r4
     300:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     304:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     308:	d1 01       	movw	r26, r2
     30a:	6c 93       	st	X, r22
     30c:	bf ef       	ldi	r27, 0xFF	; 255
     30e:	eb 1a       	sub	r14, r27
     310:	fb 0a       	sbc	r15, r27
     312:	ef e0       	ldi	r30, 0x0F	; 15
     314:	2e 0e       	add	r2, r30
     316:	31 1c       	adc	r3, r1
     318:	ec 14       	cp	r14, r12
     31a:	fd 04       	cpc	r15, r13
     31c:	d1 f6       	brne	.-76     	; 0x2d2 <_Z20dmxctr_config_vectorhh6selectjj+0x178>
     31e:	40 c3       	rjmp	.+1664   	; 0x9a0 <__stack+0xa1>
     320:	ff e0       	ldi	r31, 0x0F	; 15
     322:	6f 9e       	mul	r6, r31
     324:	90 01       	movw	r18, r0
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=Random_range(from_val,to_val);
     326:	11 24       	eor	r1, r1
     328:	c9 01       	movw	r24, r18
     32a:	88 5d       	subi	r24, 0xD8	; 216
     32c:	9e 4f       	sbci	r25, 0xFE	; 254
     32e:	1c 01       	movw	r2, r24
     330:	d1 2c       	mov	r13, r1
     332:	9f ef       	ldi	r25, 0xFF	; 255
     334:	c9 1a       	sub	r12, r25
     336:	d9 0a       	sbc	r13, r25
     338:	e1 2c       	mov	r14, r1
     33a:	f1 2c       	mov	r15, r1
     33c:	c8 01       	movw	r24, r16
     33e:	a0 e0       	ldi	r26, 0x00	; 0
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	9a 83       	std	Y+2, r25	; 0x02
     346:	ab 83       	std	Y+3, r26	; 0x03
     348:	bc 83       	std	Y+4, r27	; 0x04
     34a:	b7 01       	movw	r22, r14
     34c:	0f 2c       	mov	r0, r15
     34e:	00 0c       	add	r0, r0
     350:	88 0b       	sbc	r24, r24
     352:	99 0b       	sbc	r25, r25
     354:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     358:	a5 01       	movw	r20, r10
     35a:	94 01       	movw	r18, r8
     35c:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=Random_range(from_val,to_val);
     360:	2b 01       	movw	r4, r22
     362:	3c 01       	movw	r6, r24
     364:	69 81       	ldd	r22, Y+1	; 0x01
     366:	7a 81       	ldd	r23, Y+2	; 0x02
     368:	8b 81       	ldd	r24, Y+3	; 0x03
     36a:	9c 81       	ldd	r25, Y+4	; 0x04
     36c:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     370:	9b 01       	movw	r18, r22
     372:	ac 01       	movw	r20, r24
     374:	c3 01       	movw	r24, r6
     376:	b2 01       	movw	r22, r4
     378:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     37c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     380:	d1 01       	movw	r26, r2
     382:	6d 93       	st	X+, r22
     384:	7c 93       	st	X, r23
     386:	bf ef       	ldi	r27, 0xFF	; 255
     388:	eb 1a       	sub	r14, r27
     38a:	fb 0a       	sbc	r15, r27
     38c:	ef e0       	ldi	r30, 0x0F	; 15
     38e:	2e 0e       	add	r2, r30
     390:	31 1c       	adc	r3, r1
     392:	ec 14       	cp	r14, r12
     394:	fd 04       	cpc	r15, r13
     396:	c9 f6       	brne	.-78     	; 0x34a <_Z20dmxctr_config_vectorhh6selectjj+0x1f0>
     398:	03 c3       	rjmp	.+1542   	; 0x9a0 <__stack+0xa1>
     39a:	ff e0       	ldi	r31, 0x0F	; 15
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=Random_range(from_val,to_val);
     39c:	6f 9e       	mul	r6, r31
     39e:	90 01       	movw	r18, r0
     3a0:	11 24       	eor	r1, r1
     3a2:	c9 01       	movw	r24, r18
     3a4:	86 5d       	subi	r24, 0xD6	; 214
     3a6:	9e 4f       	sbci	r25, 0xFE	; 254
     3a8:	1c 01       	movw	r2, r24
     3aa:	d1 2c       	mov	r13, r1
     3ac:	9f ef       	ldi	r25, 0xFF	; 255
     3ae:	c9 1a       	sub	r12, r25
     3b0:	d9 0a       	sbc	r13, r25
     3b2:	e1 2c       	mov	r14, r1
     3b4:	f1 2c       	mov	r15, r1
     3b6:	c8 01       	movw	r24, r16
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	ab 83       	std	Y+3, r26	; 0x03
     3c2:	bc 83       	std	Y+4, r27	; 0x04
     3c4:	b7 01       	movw	r22, r14
     3c6:	0f 2c       	mov	r0, r15
     3c8:	00 0c       	add	r0, r0
     3ca:	88 0b       	sbc	r24, r24
     3cc:	99 0b       	sbc	r25, r25
     3ce:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     3d2:	a5 01       	movw	r20, r10
     3d4:	94 01       	movw	r18, r8
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=Random_range(from_val,to_val);
     3d6:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     3da:	2b 01       	movw	r4, r22
     3dc:	3c 01       	movw	r6, r24
     3de:	69 81       	ldd	r22, Y+1	; 0x01
     3e0:	7a 81       	ldd	r23, Y+2	; 0x02
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	9c 81       	ldd	r25, Y+4	; 0x04
     3e6:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     3ea:	9b 01       	movw	r18, r22
     3ec:	ac 01       	movw	r20, r24
     3ee:	c3 01       	movw	r24, r6
     3f0:	b2 01       	movw	r22, r4
     3f2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     3f6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     3fa:	d1 01       	movw	r26, r2
     3fc:	6c 93       	st	X, r22
     3fe:	bf ef       	ldi	r27, 0xFF	; 255
     400:	eb 1a       	sub	r14, r27
     402:	fb 0a       	sbc	r15, r27
     404:	ef e0       	ldi	r30, 0x0F	; 15
     406:	2e 0e       	add	r2, r30
     408:	31 1c       	adc	r3, r1
     40a:	ec 14       	cp	r14, r12
     40c:	fd 04       	cpc	r15, r13
     40e:	d1 f6       	brne	.-76     	; 0x3c4 <_Z20dmxctr_config_vectorhh6selectjj+0x26a>
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=Random_range(from_val,to_val);
     410:	c7 c2       	rjmp	.+1422   	; 0x9a0 <__stack+0xa1>
     412:	ff e0       	ldi	r31, 0x0F	; 15
     414:	6f 9e       	mul	r6, r31
     416:	90 01       	movw	r18, r0
     418:	11 24       	eor	r1, r1
     41a:	c9 01       	movw	r24, r18
     41c:	84 5d       	subi	r24, 0xD4	; 212
     41e:	9e 4f       	sbci	r25, 0xFE	; 254
     420:	1c 01       	movw	r2, r24
     422:	d1 2c       	mov	r13, r1
     424:	9f ef       	ldi	r25, 0xFF	; 255
     426:	c9 1a       	sub	r12, r25
     428:	d9 0a       	sbc	r13, r25
     42a:	e1 2c       	mov	r14, r1
     42c:	f1 2c       	mov	r15, r1
     42e:	c8 01       	movw	r24, r16
     430:	a0 e0       	ldi	r26, 0x00	; 0
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	9a 83       	std	Y+2, r25	; 0x02
     438:	ab 83       	std	Y+3, r26	; 0x03
     43a:	bc 83       	std	Y+4, r27	; 0x04
     43c:	b7 01       	movw	r22, r14
     43e:	0f 2c       	mov	r0, r15
     440:	00 0c       	add	r0, r0
     442:	88 0b       	sbc	r24, r24
     444:	99 0b       	sbc	r25, r25
     446:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
			
		}
	}
	else
	{
		switch (selection)
     44a:	a5 01       	movw	r20, r10
     44c:	94 01       	movw	r18, r8
     44e:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     452:	2b 01       	movw	r4, r22
     454:	3c 01       	movw	r6, r24
     456:	69 81       	ldd	r22, Y+1	; 0x01
     458:	7a 81       	ldd	r23, Y+2	; 0x02
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	c3 01       	movw	r24, r6
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
     468:	b2 01       	movw	r22, r4
     46a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     46e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     472:	d1 01       	movw	r26, r2
     474:	6c 93       	st	X, r22
     476:	bf ef       	ldi	r27, 0xFF	; 255
     478:	eb 1a       	sub	r14, r27
     47a:	fb 0a       	sbc	r15, r27
     47c:	ef e0       	ldi	r30, 0x0F	; 15
     47e:	2e 0e       	add	r2, r30
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
     480:	31 1c       	adc	r3, r1
     482:	ec 14       	cp	r14, r12
     484:	fd 04       	cpc	r15, r13
     486:	d1 f6       	brne	.-76     	; 0x43c <_Z20dmxctr_config_vectorhh6selectjj+0x2e2>
     488:	8b c2       	rjmp	.+1302   	; 0x9a0 <__stack+0xa1>
     48a:	ff e0       	ldi	r31, 0x0F	; 15
     48c:	6f 9e       	mul	r6, r31
     48e:	90 01       	movw	r18, r0
     490:	11 24       	eor	r1, r1
     492:	c9 01       	movw	r24, r18
     494:	80 5e       	subi	r24, 0xE0	; 224
     496:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
     498:	1c 01       	movw	r2, r24
     49a:	d1 2c       	mov	r13, r1
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	c9 1a       	sub	r12, r25
     4a0:	d9 0a       	sbc	r13, r25
     4a2:	e1 2c       	mov	r14, r1
     4a4:	f1 2c       	mov	r15, r1
     4a6:	c8 01       	movw	r24, r16
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	89 83       	std	Y+1, r24	; 0x01
     4ae:	9a 83       	std	Y+2, r25	; 0x02
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
     4b0:	ab 83       	std	Y+3, r26	; 0x03
     4b2:	bc 83       	std	Y+4, r27	; 0x04
     4b4:	b7 01       	movw	r22, r14
     4b6:	0f 2c       	mov	r0, r15
     4b8:	00 0c       	add	r0, r0
     4ba:	88 0b       	sbc	r24, r24
     4bc:	99 0b       	sbc	r25, r25
     4be:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     4c2:	a5 01       	movw	r20, r10
     4c4:	94 01       	movw	r18, r8
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=from_val;
     4c6:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     4ca:	2b 01       	movw	r4, r22
     4cc:	3c 01       	movw	r6, r24
     4ce:	69 81       	ldd	r22, Y+1	; 0x01
     4d0:	7a 81       	ldd	r23, Y+2	; 0x02
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	9c 81       	ldd	r25, Y+4	; 0x04
     4d6:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     4da:	9b 01       	movw	r18, r22
     4dc:	ac 01       	movw	r20, r24
	else
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].on_delay=from_val;
     4de:	c3 01       	movw	r24, r6
     4e0:	b2 01       	movw	r22, r4
     4e2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     4e6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     4ea:	d1 01       	movw	r26, r2
     4ec:	6c 93       	st	X, r22
     4ee:	bf ef       	ldi	r27, 0xFF	; 255
     4f0:	eb 1a       	sub	r14, r27
     4f2:	fb 0a       	sbc	r15, r27
     4f4:	ef e0       	ldi	r30, 0x0F	; 15
     4f6:	2e 0e       	add	r2, r30
     4f8:	31 1c       	adc	r3, r1
     4fa:	ec 14       	cp	r14, r12
     4fc:	fd 04       	cpc	r15, r13
     4fe:	d1 f6       	brne	.-76     	; 0x4b4 <_Z20dmxctr_config_vectorhh6selectjj+0x35a>
     500:	4f c2       	rjmp	.+1182   	; 0x9a0 <__stack+0xa1>
     502:	e0 16       	cp	r14, r16
     504:	f1 06       	cpc	r15, r17
     506:	08 f0       	brcs	.+2      	; 0x50a <_Z20dmxctr_config_vectorhh6selectjj+0x3b0>
     508:	89 c1       	rjmp	.+786    	; 0x81c <_Z20dmxctr_config_vectorhh6selectjj+0x6c2>
     50a:	f2 e0       	ldi	r31, 0x02	; 2
     50c:	5f 16       	cp	r5, r31
     50e:	c9 f0       	breq	.+50     	; 0x542 <_Z20dmxctr_config_vectorhh6selectjj+0x3e8>
     510:	f5 15       	cp	r31, r5
     512:	30 f0       	brcs	.+12     	; 0x520 <_Z20dmxctr_config_vectorhh6selectjj+0x3c6>
     514:	55 20       	and	r5, r5
     516:	d9 f0       	breq	.+54     	; 0x54e <_Z20dmxctr_config_vectorhh6selectjj+0x3f4>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	58 16       	cp	r5, r24
     51c:	a9 f0       	breq	.+42     	; 0x548 <_Z20dmxctr_config_vectorhh6selectjj+0x3ee>
     51e:	40 c2       	rjmp	.+1152   	; 0x9a0 <__stack+0xa1>
     520:	94 e0       	ldi	r25, 0x04	; 4
			break;
			case fadein:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_in=from_val;
     522:	59 16       	cp	r5, r25
     524:	41 f0       	breq	.+16     	; 0x536 <_Z20dmxctr_config_vectorhh6selectjj+0x3dc>
     526:	59 16       	cp	r5, r25
     528:	48 f0       	brcs	.+18     	; 0x53c <_Z20dmxctr_config_vectorhh6selectjj+0x3e2>
     52a:	a5 e0       	ldi	r26, 0x05	; 5
     52c:	5a 12       	cpse	r5, r26
     52e:	38 c2       	rjmp	.+1136   	; 0x9a0 <__stack+0xa1>
     530:	71 10       	cpse	r7, r1
     532:	fe c0       	rjmp	.+508    	; 0x730 <_Z20dmxctr_config_vectorhh6selectjj+0x5d6>
     534:	35 c2       	rjmp	.+1130   	; 0x9a0 <__stack+0xa1>
     536:	71 10       	cpse	r7, r1
     538:	c0 c0       	rjmp	.+384    	; 0x6ba <_Z20dmxctr_config_vectorhh6selectjj+0x560>
     53a:	32 c2       	rjmp	.+1124   	; 0x9a0 <__stack+0xa1>
     53c:	71 10       	cpse	r7, r1
     53e:	81 c0       	rjmp	.+258    	; 0x642 <_Z20dmxctr_config_vectorhh6selectjj+0x4e8>
     540:	2f c2       	rjmp	.+1118   	; 0x9a0 <__stack+0xa1>
     542:	71 10       	cpse	r7, r1
     544:	43 c0       	rjmp	.+134    	; 0x5cc <_Z20dmxctr_config_vectorhh6selectjj+0x472>
     546:	2c c2       	rjmp	.+1112   	; 0x9a0 <__stack+0xa1>
     548:	71 10       	cpse	r7, r1
     54a:	2d c1       	rjmp	.+602    	; 0x7a6 <_Z20dmxctr_config_vectorhh6selectjj+0x64c>
     54c:	29 c2       	rjmp	.+1106   	; 0x9a0 <__stack+0xa1>
			break;
			case hold:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].hold=from_val;
     54e:	77 20       	and	r7, r7
     550:	09 f4       	brne	.+2      	; 0x554 <_Z20dmxctr_config_vectorhh6selectjj+0x3fa>
     552:	26 c2       	rjmp	.+1100   	; 0x9a0 <__stack+0xa1>
     554:	bf e0       	ldi	r27, 0x0F	; 15
     556:	db 9e       	mul	r13, r27
     558:	90 01       	movw	r18, r0
     55a:	11 24       	eor	r1, r1
     55c:	f9 01       	movw	r30, r18
     55e:	eb 5d       	subi	r30, 0xDB	; 219
     560:	fe 4f       	sbci	r31, 0xFE	; 254
     562:	1f 01       	movw	r2, r30
     564:	d1 2c       	mov	r13, r1
     566:	ff ef       	ldi	r31, 0xFF	; 255
     568:	cf 1a       	sub	r12, r31
     56a:	df 0a       	sbc	r13, r31
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	c7 01       	movw	r24, r14
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b0 e0       	ldi	r27, 0x00	; 0
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	ab 83       	std	Y+3, r26	; 0x03
			break;
			case fadeout:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].fade_out=from_val;
     57c:	bc 83       	std	Y+4, r27	; 0x04
     57e:	b8 01       	movw	r22, r16
     580:	01 2e       	mov	r0, r17
     582:	00 0c       	add	r0, r0
     584:	88 0b       	sbc	r24, r24
     586:	99 0b       	sbc	r25, r25
     588:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     58c:	a5 01       	movw	r20, r10
     58e:	94 01       	movw	r18, r8
     590:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     594:	2b 01       	movw	r4, r22
     596:	3c 01       	movw	r6, r24
     598:	69 81       	ldd	r22, Y+1	; 0x01
     59a:	7a 81       	ldd	r23, Y+2	; 0x02
     59c:	8b 81       	ldd	r24, Y+3	; 0x03
     59e:	9c 81       	ldd	r25, Y+4	; 0x04
     5a0:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
			break;
			case repeat:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].repeat=from_val;
     5a8:	c3 01       	movw	r24, r6
     5aa:	b2 01       	movw	r22, r4
     5ac:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     5b0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     5b4:	d1 01       	movw	r26, r2
     5b6:	6d 93       	st	X+, r22
     5b8:	7c 93       	st	X, r23
     5ba:	0f 5f       	subi	r16, 0xFF	; 255
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
     5be:	bf e0       	ldi	r27, 0x0F	; 15
     5c0:	2b 1a       	sub	r2, r27
     5c2:	31 08       	sbc	r3, r1
     5c4:	0c 15       	cp	r16, r12
     5c6:	1d 05       	cpc	r17, r13
     5c8:	d1 f6       	brne	.-76     	; 0x57e <_Z20dmxctr_config_vectorhh6selectjj+0x424>
     5ca:	ea c1       	rjmp	.+980    	; 0x9a0 <__stack+0xa1>
     5cc:	ef e0       	ldi	r30, 0x0F	; 15
     5ce:	de 9e       	mul	r13, r30
     5d0:	90 01       	movw	r18, r0
     5d2:	11 24       	eor	r1, r1
			break;
			case gray:
			for (uint8_t i = 0; i <(top-bot+1); i++) dmxcontrol[top-i].gray=from_val;
     5d4:	c9 01       	movw	r24, r18
     5d6:	89 5d       	subi	r24, 0xD9	; 217
     5d8:	9e 4f       	sbci	r25, 0xFE	; 254
     5da:	1c 01       	movw	r2, r24
     5dc:	d1 2c       	mov	r13, r1
     5de:	9f ef       	ldi	r25, 0xFF	; 255
     5e0:	c9 1a       	sub	r12, r25
     5e2:	d9 0a       	sbc	r13, r25
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	c7 01       	movw	r24, r14
     5ea:	a0 e0       	ldi	r26, 0x00	; 0
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	89 83       	std	Y+1, r24	; 0x01
     5f0:	9a 83       	std	Y+2, r25	; 0x02
     5f2:	ab 83       	std	Y+3, r26	; 0x03
     5f4:	bc 83       	std	Y+4, r27	; 0x04
     5f6:	b8 01       	movw	r22, r16
     5f8:	01 2e       	mov	r0, r17
     5fa:	00 0c       	add	r0, r0
     5fc:	88 0b       	sbc	r24, r24
			default:
			break;
		}
	}
	
}
     5fe:	99 0b       	sbc	r25, r25
     600:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     604:	a5 01       	movw	r20, r10
     606:	94 01       	movw	r18, r8
     608:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     60c:	2b 01       	movw	r4, r22
     60e:	3c 01       	movw	r6, r24
     610:	69 81       	ldd	r22, Y+1	; 0x01
     612:	7a 81       	ldd	r23, Y+2	; 0x02
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=ratio*i+from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=ratio*i+from_val;
     618:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
     620:	c3 01       	movw	r24, r6
     622:	b2 01       	movw	r22, r4
     624:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     628:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     62c:	d1 01       	movw	r26, r2
     62e:	6c 93       	st	X, r22
     630:	0f 5f       	subi	r16, 0xFF	; 255
     632:	1f 4f       	sbci	r17, 0xFF	; 255
     634:	bf e0       	ldi	r27, 0x0F	; 15
     636:	2b 1a       	sub	r2, r27
     638:	31 08       	sbc	r3, r1
     63a:	0c 15       	cp	r16, r12
     63c:	1d 05       	cpc	r17, r13
     63e:	d9 f6       	brne	.-74     	; 0x5f6 <_Z20dmxctr_config_vectorhh6selectjj+0x49c>
     640:	af c1       	rjmp	.+862    	; 0x9a0 <__stack+0xa1>
     642:	ef e0       	ldi	r30, 0x0F	; 15
     644:	de 9e       	mul	r13, r30
     646:	90 01       	movw	r18, r0
     648:	11 24       	eor	r1, r1
     64a:	c9 01       	movw	r24, r18
     64c:	88 5d       	subi	r24, 0xD8	; 216
     64e:	9e 4f       	sbci	r25, 0xFE	; 254
     650:	1c 01       	movw	r2, r24
     652:	d1 2c       	mov	r13, r1
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	c9 1a       	sub	r12, r25
     658:	d9 0a       	sbc	r13, r25
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=ratio*i+from_val;
     65a:	00 e0       	ldi	r16, 0x00	; 0
     65c:	10 e0       	ldi	r17, 0x00	; 0
     65e:	c7 01       	movw	r24, r14
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	ab 83       	std	Y+3, r26	; 0x03
     66a:	bc 83       	std	Y+4, r27	; 0x04
     66c:	b8 01       	movw	r22, r16
     66e:	01 2e       	mov	r0, r17
     670:	00 0c       	add	r0, r0
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     67a:	a5 01       	movw	r20, r10
     67c:	94 01       	movw	r18, r8
     67e:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     682:	2b 01       	movw	r4, r22
     684:	3c 01       	movw	r6, r24
     686:	69 81       	ldd	r22, Y+1	; 0x01
     688:	7a 81       	ldd	r23, Y+2	; 0x02
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	9c 81       	ldd	r25, Y+4	; 0x04
     68e:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c3 01       	movw	r24, r6
     698:	b2 01       	movw	r22, r4
     69a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     69e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     6a2:	d1 01       	movw	r26, r2
     6a4:	6d 93       	st	X+, r22
     6a6:	7c 93       	st	X, r23
     6a8:	0f 5f       	subi	r16, 0xFF	; 255
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	bf e0       	ldi	r27, 0x0F	; 15
     6ae:	2b 1a       	sub	r2, r27
     6b0:	31 08       	sbc	r3, r1
     6b2:	0c 15       	cp	r16, r12
     6b4:	1d 05       	cpc	r17, r13
     6b6:	d1 f6       	brne	.-76     	; 0x66c <_Z20dmxctr_config_vectorhh6selectjj+0x512>
     6b8:	73 c1       	rjmp	.+742    	; 0x9a0 <__stack+0xa1>
     6ba:	ef e0       	ldi	r30, 0x0F	; 15
     6bc:	de 9e       	mul	r13, r30
     6be:	90 01       	movw	r18, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	c9 01       	movw	r24, r18
     6c4:	86 5d       	subi	r24, 0xD6	; 214
     6c6:	9e 4f       	sbci	r25, 0xFE	; 254
     6c8:	1c 01       	movw	r2, r24
     6ca:	d1 2c       	mov	r13, r1
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	c9 1a       	sub	r12, r25
     6d0:	d9 0a       	sbc	r13, r25
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=ratio*i+from_val;
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	c7 01       	movw	r24, r14
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	ab 83       	std	Y+3, r26	; 0x03
     6e2:	bc 83       	std	Y+4, r27	; 0x04
     6e4:	b8 01       	movw	r22, r16
     6e6:	01 2e       	mov	r0, r17
     6e8:	00 0c       	add	r0, r0
     6ea:	88 0b       	sbc	r24, r24
     6ec:	99 0b       	sbc	r25, r25
     6ee:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     6f2:	a5 01       	movw	r20, r10
     6f4:	94 01       	movw	r18, r8
     6f6:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     6fa:	2b 01       	movw	r4, r22
     6fc:	3c 01       	movw	r6, r24
     6fe:	69 81       	ldd	r22, Y+1	; 0x01
     700:	7a 81       	ldd	r23, Y+2	; 0x02
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	9c 81       	ldd	r25, Y+4	; 0x04
     706:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c3 01       	movw	r24, r6
     710:	b2 01       	movw	r22, r4
     712:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     716:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     71a:	d1 01       	movw	r26, r2
     71c:	6c 93       	st	X, r22
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	bf e0       	ldi	r27, 0x0F	; 15
     724:	2b 1a       	sub	r2, r27
     726:	31 08       	sbc	r3, r1
     728:	0c 15       	cp	r16, r12
     72a:	1d 05       	cpc	r17, r13
     72c:	d9 f6       	brne	.-74     	; 0x6e4 <_Z20dmxctr_config_vectorhh6selectjj+0x58a>
     72e:	38 c1       	rjmp	.+624    	; 0x9a0 <__stack+0xa1>
     730:	ef e0       	ldi	r30, 0x0F	; 15
     732:	de 9e       	mul	r13, r30
     734:	90 01       	movw	r18, r0
     736:	11 24       	eor	r1, r1
     738:	c9 01       	movw	r24, r18
     73a:	84 5d       	subi	r24, 0xD4	; 212
     73c:	9e 4f       	sbci	r25, 0xFE	; 254
     73e:	1c 01       	movw	r2, r24
     740:	d1 2c       	mov	r13, r1
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	c9 1a       	sub	r12, r25
     746:	d9 0a       	sbc	r13, r25
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=ratio*i+from_val;
     748:	00 e0       	ldi	r16, 0x00	; 0
     74a:	10 e0       	ldi	r17, 0x00	; 0
     74c:	c7 01       	movw	r24, r14
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	ab 83       	std	Y+3, r26	; 0x03
     758:	bc 83       	std	Y+4, r27	; 0x04
     75a:	b8 01       	movw	r22, r16
     75c:	01 2e       	mov	r0, r17
     75e:	00 0c       	add	r0, r0
     760:	88 0b       	sbc	r24, r24
     762:	99 0b       	sbc	r25, r25
     764:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     768:	a5 01       	movw	r20, r10
     76a:	94 01       	movw	r18, r8
     76c:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     770:	2b 01       	movw	r4, r22
     772:	3c 01       	movw	r6, r24
     774:	69 81       	ldd	r22, Y+1	; 0x01
     776:	7a 81       	ldd	r23, Y+2	; 0x02
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c3 01       	movw	r24, r6
     786:	b2 01       	movw	r22, r4
     788:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     78c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     790:	d1 01       	movw	r26, r2
     792:	6c 93       	st	X, r22
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	bf e0       	ldi	r27, 0x0F	; 15
     79a:	2b 1a       	sub	r2, r27
     79c:	31 08       	sbc	r3, r1
     79e:	0c 15       	cp	r16, r12
     7a0:	1d 05       	cpc	r17, r13
     7a2:	d9 f6       	brne	.-74     	; 0x75a <_Z20dmxctr_config_vectorhh6selectjj+0x600>
     7a4:	fd c0       	rjmp	.+506    	; 0x9a0 <__stack+0xa1>
     7a6:	ef e0       	ldi	r30, 0x0F	; 15
     7a8:	de 9e       	mul	r13, r30
     7aa:	90 01       	movw	r18, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	c9 01       	movw	r24, r18
     7b0:	80 5e       	subi	r24, 0xE0	; 224
     7b2:	9e 4f       	sbci	r25, 0xFE	; 254
     7b4:	1c 01       	movw	r2, r24
     7b6:	d1 2c       	mov	r13, r1
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	c9 1a       	sub	r12, r25
     7bc:	d9 0a       	sbc	r13, r25
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=ratio*i+from_val;
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	c7 01       	movw	r24, r14
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	89 83       	std	Y+1, r24	; 0x01
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	ab 83       	std	Y+3, r26	; 0x03
     7ce:	bc 83       	std	Y+4, r27	; 0x04
     7d0:	b8 01       	movw	r22, r16
     7d2:	01 2e       	mov	r0, r17
     7d4:	00 0c       	add	r0, r0
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	0e 94 06 10 	call	0x200c	; 0x200c <__floatsisf>
     7de:	a5 01       	movw	r20, r10
     7e0:	94 01       	movw	r18, r8
     7e2:	0e 94 92 10 	call	0x2124	; 0x2124 <__mulsf3>
     7e6:	2b 01       	movw	r4, r22
     7e8:	3c 01       	movw	r6, r24
     7ea:	69 81       	ldd	r22, Y+1	; 0x01
     7ec:	7a 81       	ldd	r23, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	0e 94 04 10 	call	0x2008	; 0x2008 <__floatunsisf>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	c3 01       	movw	r24, r6
     7fc:	b2 01       	movw	r22, r4
     7fe:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__addsf3>
     802:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__fixunssfsi>
     806:	d1 01       	movw	r26, r2
     808:	6c 93       	st	X, r22
     80a:	0f 5f       	subi	r16, 0xFF	; 255
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	bf e0       	ldi	r27, 0x0F	; 15
     810:	2b 1a       	sub	r2, r27
     812:	31 08       	sbc	r3, r1
     814:	0c 15       	cp	r16, r12
     816:	1d 05       	cpc	r17, r13
     818:	d9 f6       	brne	.-74     	; 0x7d0 <_Z20dmxctr_config_vectorhh6selectjj+0x676>
     81a:	c2 c0       	rjmp	.+388    	; 0x9a0 <__stack+0xa1>
			
		}
	}
	else
	{
		switch (selection)
     81c:	e2 e0       	ldi	r30, 0x02	; 2
     81e:	5e 16       	cp	r5, r30
     820:	c9 f0       	breq	.+50     	; 0x854 <_Z20dmxctr_config_vectorhh6selectjj+0x6fa>
     822:	e5 15       	cp	r30, r5
     824:	30 f0       	brcs	.+12     	; 0x832 <_Z20dmxctr_config_vectorhh6selectjj+0x6d8>
     826:	55 20       	and	r5, r5
     828:	d9 f0       	breq	.+54     	; 0x860 <_Z20dmxctr_config_vectorhh6selectjj+0x706>
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	5f 16       	cp	r5, r31
     82e:	a9 f0       	breq	.+42     	; 0x85a <_Z20dmxctr_config_vectorhh6selectjj+0x700>
     830:	b7 c0       	rjmp	.+366    	; 0x9a0 <__stack+0xa1>
     832:	84 e0       	ldi	r24, 0x04	; 4
     834:	58 16       	cp	r5, r24
     836:	41 f0       	breq	.+16     	; 0x848 <_Z20dmxctr_config_vectorhh6selectjj+0x6ee>
     838:	58 16       	cp	r5, r24
     83a:	48 f0       	brcs	.+18     	; 0x84e <_Z20dmxctr_config_vectorhh6selectjj+0x6f4>
     83c:	95 e0       	ldi	r25, 0x05	; 5
     83e:	59 12       	cpse	r5, r25
     840:	af c0       	rjmp	.+350    	; 0x9a0 <__stack+0xa1>
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
     842:	71 10       	cpse	r7, r1
     844:	7a c0       	rjmp	.+244    	; 0x93a <__stack+0x3b>
     846:	ac c0       	rjmp	.+344    	; 0x9a0 <__stack+0xa1>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
     848:	71 10       	cpse	r7, r1
     84a:	5d c0       	rjmp	.+186    	; 0x906 <__stack+0x7>
     84c:	a9 c0       	rjmp	.+338    	; 0x9a0 <__stack+0xa1>
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
     84e:	71 10       	cpse	r7, r1
     850:	3f c0       	rjmp	.+126    	; 0x8d0 <_Z20dmxctr_config_vectorhh6selectjj+0x776>
     852:	a6 c0       	rjmp	.+332    	; 0x9a0 <__stack+0xa1>
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
     854:	71 10       	cpse	r7, r1
     856:	22 c0       	rjmp	.+68     	; 0x89c <_Z20dmxctr_config_vectorhh6selectjj+0x742>
     858:	a3 c0       	rjmp	.+326    	; 0x9a0 <__stack+0xa1>
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
     85a:	71 10       	cpse	r7, r1
     85c:	88 c0       	rjmp	.+272    	; 0x96e <__stack+0x6f>
     85e:	a0 c0       	rjmp	.+320    	; 0x9a0 <__stack+0xa1>
	else
	{
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].on_delay=from_val;
     860:	77 20       	and	r7, r7
     862:	09 f4       	brne	.+2      	; 0x866 <_Z20dmxctr_config_vectorhh6selectjj+0x70c>
     864:	9d c0       	rjmp	.+314    	; 0x9a0 <__stack+0xa1>
     866:	8d 2d       	mov	r24, r13
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	2f e0       	ldi	r18, 0x0F	; 15
     86c:	28 9f       	mul	r18, r24
     86e:	f0 01       	movw	r30, r0
     870:	29 9f       	mul	r18, r25
     872:	f0 0d       	add	r31, r0
     874:	11 24       	eor	r1, r1
     876:	eb 5d       	subi	r30, 0xDB	; 219
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	ac 01       	movw	r20, r24
     87c:	4c 19       	sub	r20, r12
     87e:	51 09       	sbc	r21, r1
     880:	24 9f       	mul	r18, r20
     882:	c0 01       	movw	r24, r0
     884:	25 9f       	mul	r18, r21
     886:	90 0d       	add	r25, r0
     888:	11 24       	eor	r1, r1
     88a:	8a 5e       	subi	r24, 0xEA	; 234
     88c:	9e 4f       	sbci	r25, 0xFE	; 254
     88e:	f1 82       	std	Z+1, r15	; 0x01
     890:	e0 82       	st	Z, r14
     892:	3f 97       	sbiw	r30, 0x0f	; 15
     894:	e8 17       	cp	r30, r24
     896:	f9 07       	cpc	r31, r25
     898:	d1 f7       	brne	.-12     	; 0x88e <_Z20dmxctr_config_vectorhh6selectjj+0x734>
     89a:	82 c0       	rjmp	.+260    	; 0x9a0 <__stack+0xa1>
     89c:	8d 2d       	mov	r24, r13
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	2f e0       	ldi	r18, 0x0F	; 15
     8a2:	28 9f       	mul	r18, r24
     8a4:	f0 01       	movw	r30, r0
     8a6:	29 9f       	mul	r18, r25
     8a8:	f0 0d       	add	r31, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	e9 5d       	subi	r30, 0xD9	; 217
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	ac 01       	movw	r20, r24
     8b2:	4c 19       	sub	r20, r12
     8b4:	51 09       	sbc	r21, r1
     8b6:	24 9f       	mul	r18, r20
     8b8:	c0 01       	movw	r24, r0
     8ba:	25 9f       	mul	r18, r21
     8bc:	90 0d       	add	r25, r0
     8be:	11 24       	eor	r1, r1
     8c0:	88 5e       	subi	r24, 0xE8	; 232
     8c2:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_in=from_val;
     8c4:	e0 82       	st	Z, r14
     8c6:	3f 97       	sbiw	r30, 0x0f	; 15
     8c8:	e8 17       	cp	r30, r24
     8ca:	f9 07       	cpc	r31, r25
     8cc:	d9 f7       	brne	.-10     	; 0x8c4 <_Z20dmxctr_config_vectorhh6selectjj+0x76a>
     8ce:	68 c0       	rjmp	.+208    	; 0x9a0 <__stack+0xa1>
     8d0:	8d 2d       	mov	r24, r13
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2f e0       	ldi	r18, 0x0F	; 15
     8d6:	28 9f       	mul	r18, r24
     8d8:	f0 01       	movw	r30, r0
     8da:	29 9f       	mul	r18, r25
     8dc:	f0 0d       	add	r31, r0
     8de:	11 24       	eor	r1, r1
     8e0:	e8 5d       	subi	r30, 0xD8	; 216
     8e2:	fe 4f       	sbci	r31, 0xFE	; 254
     8e4:	ac 01       	movw	r20, r24
     8e6:	4c 19       	sub	r20, r12
     8e8:	51 09       	sbc	r21, r1
     8ea:	24 9f       	mul	r18, r20
     8ec:	c0 01       	movw	r24, r0
     8ee:	25 9f       	mul	r18, r21
     8f0:	90 0d       	add	r25, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	87 5e       	subi	r24, 0xE7	; 231
     8f6:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].hold=from_val;
     8f8:	f1 82       	std	Z+1, r15	; 0x01
     8fa:	e0 82       	st	Z, r14
     8fc:	3f 97       	sbiw	r30, 0x0f	; 15
     8fe:	e8 17       	cp	r30, r24
     900:	f9 07       	cpc	r31, r25
     902:	d1 f7       	brne	.-12     	; 0x8f8 <_Z20dmxctr_config_vectorhh6selectjj+0x79e>
     904:	4d c0       	rjmp	.+154    	; 0x9a0 <__stack+0xa1>
     906:	8d 2d       	mov	r24, r13
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	2f e0       	ldi	r18, 0x0F	; 15
     90c:	28 9f       	mul	r18, r24
     90e:	f0 01       	movw	r30, r0
     910:	29 9f       	mul	r18, r25
     912:	f0 0d       	add	r31, r0
     914:	11 24       	eor	r1, r1
     916:	e6 5d       	subi	r30, 0xD6	; 214
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	ac 01       	movw	r20, r24
     91c:	4c 19       	sub	r20, r12
     91e:	51 09       	sbc	r21, r1
     920:	24 9f       	mul	r18, r20
     922:	c0 01       	movw	r24, r0
     924:	25 9f       	mul	r18, r21
     926:	90 0d       	add	r25, r0
     928:	11 24       	eor	r1, r1
     92a:	85 5e       	subi	r24, 0xE5	; 229
     92c:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].fade_out=from_val;
     92e:	e0 82       	st	Z, r14
     930:	3f 97       	sbiw	r30, 0x0f	; 15
     932:	e8 17       	cp	r30, r24
     934:	f9 07       	cpc	r31, r25
     936:	d9 f7       	brne	.-10     	; 0x92e <__stack+0x2f>
     938:	33 c0       	rjmp	.+102    	; 0x9a0 <__stack+0xa1>
     93a:	8d 2d       	mov	r24, r13
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	2f e0       	ldi	r18, 0x0F	; 15
     940:	28 9f       	mul	r18, r24
     942:	f0 01       	movw	r30, r0
     944:	29 9f       	mul	r18, r25
     946:	f0 0d       	add	r31, r0
     948:	11 24       	eor	r1, r1
     94a:	e4 5d       	subi	r30, 0xD4	; 212
     94c:	fe 4f       	sbci	r31, 0xFE	; 254
     94e:	ac 01       	movw	r20, r24
     950:	4c 19       	sub	r20, r12
     952:	51 09       	sbc	r21, r1
     954:	24 9f       	mul	r18, r20
     956:	c0 01       	movw	r24, r0
     958:	25 9f       	mul	r18, r21
     95a:	90 0d       	add	r25, r0
     95c:	11 24       	eor	r1, r1
     95e:	83 5e       	subi	r24, 0xE3	; 227
     960:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].repeat=from_val;
     962:	e0 82       	st	Z, r14
     964:	3f 97       	sbiw	r30, 0x0f	; 15
     966:	e8 17       	cp	r30, r24
     968:	f9 07       	cpc	r31, r25
     96a:	d9 f7       	brne	.-10     	; 0x962 <__stack+0x63>
     96c:	19 c0       	rjmp	.+50     	; 0x9a0 <__stack+0xa1>
     96e:	8d 2d       	mov	r24, r13
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	2f e0       	ldi	r18, 0x0F	; 15
     974:	28 9f       	mul	r18, r24
     976:	f0 01       	movw	r30, r0
     978:	29 9f       	mul	r18, r25
     97a:	f0 0d       	add	r31, r0
     97c:	11 24       	eor	r1, r1
     97e:	e0 5e       	subi	r30, 0xE0	; 224
     980:	fe 4f       	sbci	r31, 0xFE	; 254
     982:	ac 01       	movw	r20, r24
     984:	4c 19       	sub	r20, r12
     986:	51 09       	sbc	r21, r1
     988:	24 9f       	mul	r18, r20
     98a:	c0 01       	movw	r24, r0
     98c:	25 9f       	mul	r18, r21
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	8f 5e       	subi	r24, 0xEF	; 239
     994:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[top-i].gray=from_val;
     996:	e0 82       	st	Z, r14
     998:	3f 97       	sbiw	r30, 0x0f	; 15
     99a:	e8 17       	cp	r30, r24
     99c:	f9 07       	cpc	r31, r25
     99e:	d9 f7       	brne	.-10     	; 0x996 <__stack+0x97>
			default:
			break;
		}
	}
	
}
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	df 90       	pop	r13
     9b6:	cf 90       	pop	r12
     9b8:	bf 90       	pop	r11
     9ba:	af 90       	pop	r10
     9bc:	9f 90       	pop	r9
     9be:	8f 90       	pop	r8
     9c0:	7f 90       	pop	r7
     9c2:	6f 90       	pop	r6
     9c4:	5f 90       	pop	r5
     9c6:	4f 90       	pop	r4
     9c8:	3f 90       	pop	r3
     9ca:	2f 90       	pop	r2
     9cc:	08 95       	ret

000009ce <_Z17dmxctr_config_refhhhh>:


void dmxctr_config_ref(uint8_t bot,uint8_t top,uint8_t max_gray,uint8_t min_gray)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
	uint8_t n_point = top-bot+1;
     9d2:	68 1b       	sub	r22, r24
	for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].top_gray=max_gray;
     9d4:	6f 3f       	cpi	r22, 0xFF	; 255
     9d6:	19 f1       	breq	.+70     	; 0xa1e <_Z17dmxctr_config_refhhhh+0x50>
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	3f e0       	ldi	r19, 0x0F	; 15
     9dc:	38 9f       	mul	r19, r24
     9de:	f0 01       	movw	r30, r0
     9e0:	39 9f       	mul	r19, r25
     9e2:	f0 0d       	add	r31, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	df 01       	movw	r26, r30
     9e8:	af 5d       	subi	r26, 0xDF	; 223
     9ea:	be 4f       	sbci	r27, 0xFE	; 254
     9ec:	ec 01       	movw	r28, r24
     9ee:	c6 0f       	add	r28, r22
     9f0:	d1 1d       	adc	r29, r1
     9f2:	3c 9f       	mul	r19, r28
     9f4:	c0 01       	movw	r24, r0
     9f6:	3d 9f       	mul	r19, r29
     9f8:	90 0d       	add	r25, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	bc 01       	movw	r22, r24
     9fe:	60 5d       	subi	r22, 0xD0	; 208
     a00:	7e 4f       	sbci	r23, 0xFE	; 254
     a02:	4c 93       	st	X, r20
     a04:	1f 96       	adiw	r26, 0x0f	; 15
     a06:	a6 17       	cp	r26, r22
     a08:	b7 07       	cpc	r27, r23
     a0a:	d9 f7       	brne	.-10     	; 0xa02 <_Z17dmxctr_config_refhhhh+0x34>
     a0c:	ee 5d       	subi	r30, 0xDE	; 222
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	8f 5c       	subi	r24, 0xCF	; 207
     a12:	9e 4f       	sbci	r25, 0xFE	; 254
	for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].bot_gray=min_gray;
     a14:	20 83       	st	Z, r18
     a16:	3f 96       	adiw	r30, 0x0f	; 15
     a18:	e8 17       	cp	r30, r24
     a1a:	f9 07       	cpc	r31, r25
     a1c:	d9 f7       	brne	.-10     	; 0xa14 <_Z17dmxctr_config_refhhhh+0x46>
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <_Z19dmxctr_config_valuehh6selectj>:


//update : 18/1/2015
void dmxctr_config_value(uint8_t bot,uint8_t top,SELECT selection,uint16_t val)
{
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
	uint8_t n_point = top-bot+1;
     a2c:	68 1b       	sub	r22, r24
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	96 0f       	add	r25, r22
		switch (selection)
     a32:	c4 2e       	mov	r12, r20
     a34:	d1 2c       	mov	r13, r1
     a36:	49 e0       	ldi	r20, 0x09	; 9
     a38:	c4 16       	cp	r12, r20
     a3a:	d1 04       	cpc	r13, r1
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <_Z19dmxctr_config_valuehh6selectj+0x1c>
     a3e:	98 c1       	rjmp	.+816    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     a40:	f6 01       	movw	r30, r12
     a42:	ec 5c       	subi	r30, 0xCC	; 204
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
			break;
			case mode:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0xf0)|((uint8_t)val & 0x0f);
     a4a:	91 11       	cpse	r25, r1
     a4c:	ac c0       	rjmp	.+344    	; 0xba6 <_Z19dmxctr_config_valuehh6selectj+0x182>
     a4e:	90 c1       	rjmp	.+800    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
     a50:	91 11       	cpse	r25, r1
     a52:	76 c0       	rjmp	.+236    	; 0xb40 <_Z19dmxctr_config_valuehh6selectj+0x11c>
     a54:	8d c1       	rjmp	.+794    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
     a56:	91 11       	cpse	r25, r1
     a58:	5a c0       	rjmp	.+180    	; 0xb0e <_Z19dmxctr_config_valuehh6selectj+0xea>
     a5a:	8a c1       	rjmp	.+788    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
     a5c:	91 11       	cpse	r25, r1
     a5e:	3d c0       	rjmp	.+122    	; 0xada <_Z19dmxctr_config_valuehh6selectj+0xb6>
     a60:	87 c1       	rjmp	.+782    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=val;
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
     a62:	91 11       	cpse	r25, r1
     a64:	21 c0       	rjmp	.+66     	; 0xaa8 <_Z19dmxctr_config_valuehh6selectj+0x84>
     a66:	84 c1       	rjmp	.+776    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
     a68:	91 11       	cpse	r25, r1
     a6a:	83 c0       	rjmp	.+262    	; 0xb72 <_Z19dmxctr_config_valuehh6selectj+0x14e>
     a6c:	81 c1       	rjmp	.+770    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
{
	uint8_t n_point = top-bot+1;
		switch (selection)
		{
			case ondelay:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].on_delay=val;
     a6e:	99 23       	and	r25, r25
     a70:	09 f4       	brne	.+2      	; 0xa74 <_Z19dmxctr_config_valuehh6selectj+0x50>
     a72:	7e c1       	rjmp	.+764    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	7f e0       	ldi	r23, 0x0F	; 15
     a78:	78 9f       	mul	r23, r24
     a7a:	f0 01       	movw	r30, r0
     a7c:	79 9f       	mul	r23, r25
     a7e:	f0 0d       	add	r31, r0
     a80:	11 24       	eor	r1, r1
     a82:	eb 5d       	subi	r30, 0xDB	; 219
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	86 0f       	add	r24, r22
     a88:	91 1d       	adc	r25, r1
     a8a:	78 9f       	mul	r23, r24
     a8c:	a0 01       	movw	r20, r0
     a8e:	79 9f       	mul	r23, r25
     a90:	50 0d       	add	r21, r0
     a92:	11 24       	eor	r1, r1
     a94:	ca 01       	movw	r24, r20
     a96:	8c 5c       	subi	r24, 0xCC	; 204
     a98:	9e 4f       	sbci	r25, 0xFE	; 254
     a9a:	31 83       	std	Z+1, r19	; 0x01
     a9c:	20 83       	st	Z, r18
     a9e:	3f 96       	adiw	r30, 0x0f	; 15
     aa0:	e8 17       	cp	r30, r24
     aa2:	f9 07       	cpc	r31, r25
     aa4:	d1 f7       	brne	.-12     	; 0xa9a <_Z19dmxctr_config_valuehh6selectj+0x76>
     aa6:	64 c1       	rjmp	.+712    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	7f e0       	ldi	r23, 0x0F	; 15
     aac:	78 9f       	mul	r23, r24
     aae:	f0 01       	movw	r30, r0
     ab0:	79 9f       	mul	r23, r25
     ab2:	f0 0d       	add	r31, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	e9 5d       	subi	r30, 0xD9	; 217
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	86 0f       	add	r24, r22
     abc:	91 1d       	adc	r25, r1
     abe:	78 9f       	mul	r23, r24
     ac0:	a0 01       	movw	r20, r0
     ac2:	79 9f       	mul	r23, r25
     ac4:	50 0d       	add	r21, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	ca 01       	movw	r24, r20
     aca:	8a 5c       	subi	r24, 0xCA	; 202
     acc:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadein:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_in=val;
     ace:	20 83       	st	Z, r18
     ad0:	3f 96       	adiw	r30, 0x0f	; 15
     ad2:	e8 17       	cp	r30, r24
     ad4:	f9 07       	cpc	r31, r25
     ad6:	d9 f7       	brne	.-10     	; 0xace <_Z19dmxctr_config_valuehh6selectj+0xaa>
     ad8:	4b c1       	rjmp	.+662    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	7f e0       	ldi	r23, 0x0F	; 15
     ade:	78 9f       	mul	r23, r24
     ae0:	f0 01       	movw	r30, r0
     ae2:	79 9f       	mul	r23, r25
     ae4:	f0 0d       	add	r31, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	e8 5d       	subi	r30, 0xD8	; 216
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	86 0f       	add	r24, r22
     aee:	91 1d       	adc	r25, r1
     af0:	78 9f       	mul	r23, r24
     af2:	a0 01       	movw	r20, r0
     af4:	79 9f       	mul	r23, r25
     af6:	50 0d       	add	r21, r0
     af8:	11 24       	eor	r1, r1
     afa:	ca 01       	movw	r24, r20
     afc:	89 5c       	subi	r24, 0xC9	; 201
     afe:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case hold:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].hold=val;
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
     b04:	3f 96       	adiw	r30, 0x0f	; 15
     b06:	e8 17       	cp	r30, r24
     b08:	f9 07       	cpc	r31, r25
     b0a:	d1 f7       	brne	.-12     	; 0xb00 <_Z19dmxctr_config_valuehh6selectj+0xdc>
     b0c:	31 c1       	rjmp	.+610    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	7f e0       	ldi	r23, 0x0F	; 15
     b12:	78 9f       	mul	r23, r24
     b14:	f0 01       	movw	r30, r0
     b16:	79 9f       	mul	r23, r25
     b18:	f0 0d       	add	r31, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	e6 5d       	subi	r30, 0xD6	; 214
     b1e:	fe 4f       	sbci	r31, 0xFE	; 254
     b20:	86 0f       	add	r24, r22
     b22:	91 1d       	adc	r25, r1
     b24:	78 9f       	mul	r23, r24
     b26:	a0 01       	movw	r20, r0
     b28:	79 9f       	mul	r23, r25
     b2a:	50 0d       	add	r21, r0
     b2c:	11 24       	eor	r1, r1
     b2e:	ca 01       	movw	r24, r20
     b30:	87 5c       	subi	r24, 0xC7	; 199
     b32:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case fadeout:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].fade_out=val;
     b34:	20 83       	st	Z, r18
     b36:	3f 96       	adiw	r30, 0x0f	; 15
     b38:	e8 17       	cp	r30, r24
     b3a:	f9 07       	cpc	r31, r25
     b3c:	d9 f7       	brne	.-10     	; 0xb34 <_Z19dmxctr_config_valuehh6selectj+0x110>
     b3e:	18 c1       	rjmp	.+560    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	7f e0       	ldi	r23, 0x0F	; 15
     b44:	78 9f       	mul	r23, r24
     b46:	f0 01       	movw	r30, r0
     b48:	79 9f       	mul	r23, r25
     b4a:	f0 0d       	add	r31, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	e4 5d       	subi	r30, 0xD4	; 212
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	86 0f       	add	r24, r22
     b54:	91 1d       	adc	r25, r1
     b56:	78 9f       	mul	r23, r24
     b58:	a0 01       	movw	r20, r0
     b5a:	79 9f       	mul	r23, r25
     b5c:	50 0d       	add	r21, r0
     b5e:	11 24       	eor	r1, r1
     b60:	ca 01       	movw	r24, r20
     b62:	85 5c       	subi	r24, 0xC5	; 197
     b64:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case repeat:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].repeat=val;
     b66:	20 83       	st	Z, r18
     b68:	3f 96       	adiw	r30, 0x0f	; 15
     b6a:	e8 17       	cp	r30, r24
     b6c:	f9 07       	cpc	r31, r25
     b6e:	d9 f7       	brne	.-10     	; 0xb66 <_Z19dmxctr_config_valuehh6selectj+0x142>
     b70:	ff c0       	rjmp	.+510    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	7f e0       	ldi	r23, 0x0F	; 15
     b76:	78 9f       	mul	r23, r24
     b78:	f0 01       	movw	r30, r0
     b7a:	79 9f       	mul	r23, r25
     b7c:	f0 0d       	add	r31, r0
     b7e:	11 24       	eor	r1, r1
     b80:	e0 5e       	subi	r30, 0xE0	; 224
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	86 0f       	add	r24, r22
     b88:	91 1d       	adc	r25, r1
     b8a:	78 9f       	mul	r23, r24
     b8c:	a0 01       	movw	r20, r0
     b8e:	79 9f       	mul	r23, r25
     b90:	50 0d       	add	r21, r0
     b92:	11 24       	eor	r1, r1
     b94:	ca 01       	movw	r24, r20
     b96:	80 5e       	subi	r24, 0xE0	; 224
     b98:	9e 4f       	sbci	r25, 0xFE	; 254
			break;
			case gray:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].gray=val;
     b9a:	20 83       	st	Z, r18
     b9c:	3f 96       	adiw	r30, 0x0f	; 15
     b9e:	e8 17       	cp	r30, r24
     ba0:	f9 07       	cpc	r31, r25
     ba2:	d9 f7       	brne	.-10     	; 0xb9a <_Z19dmxctr_config_valuehh6selectj+0x176>
     ba4:	e5 c0       	rjmp	.+458    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	3f e0       	ldi	r19, 0x0F	; 15
     baa:	38 9f       	mul	r19, r24
     bac:	f0 01       	movw	r30, r0
     bae:	39 9f       	mul	r19, r25
     bb0:	f0 0d       	add	r31, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	e2 5d       	subi	r30, 0xD2	; 210
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	86 0f       	add	r24, r22
     bba:	91 1d       	adc	r25, r1
     bbc:	38 9f       	mul	r19, r24
     bbe:	a0 01       	movw	r20, r0
     bc0:	39 9f       	mul	r19, r25
     bc2:	50 0d       	add	r21, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	43 5c       	subi	r20, 0xC3	; 195
     bc8:	5e 4f       	sbci	r21, 0xFE	; 254
			break;
			case mode:
			for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0xf0)|((uint8_t)val & 0x0f);
     bca:	2f 70       	andi	r18, 0x0F	; 15
     bcc:	80 81       	ld	r24, Z
     bce:	80 7f       	andi	r24, 0xF0	; 240
     bd0:	82 2b       	or	r24, r18
     bd2:	80 83       	st	Z, r24
     bd4:	3f 96       	adiw	r30, 0x0f	; 15
     bd6:	e4 17       	cp	r30, r20
     bd8:	f5 07       	cpc	r31, r21
     bda:	c1 f7       	brne	.-16     	; 0xbcc <_Z19dmxctr_config_valuehh6selectj+0x1a8>
     bdc:	c9 c0       	rjmp	.+402    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case output:
			switch (val)
     bde:	22 30       	cpi	r18, 0x02	; 2
     be0:	31 05       	cpc	r19, r1
     be2:	a9 f0       	breq	.+42     	; 0xc0e <_Z19dmxctr_config_valuehh6selectj+0x1ea>
     be4:	38 f4       	brcc	.+14     	; 0xbf4 <_Z19dmxctr_config_valuehh6selectj+0x1d0>
     be6:	21 15       	cp	r18, r1
     be8:	31 05       	cpc	r19, r1
     bea:	b9 f0       	breq	.+46     	; 0xc1a <_Z19dmxctr_config_valuehh6selectj+0x1f6>
     bec:	21 30       	cpi	r18, 0x01	; 1
     bee:	31 05       	cpc	r19, r1
     bf0:	89 f0       	breq	.+34     	; 0xc14 <_Z19dmxctr_config_valuehh6selectj+0x1f0>
     bf2:	be c0       	rjmp	.+380    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     bf4:	23 30       	cpi	r18, 0x03	; 3
     bf6:	31 05       	cpc	r19, r1
     bf8:	39 f0       	breq	.+14     	; 0xc08 <_Z19dmxctr_config_valuehh6selectj+0x1e4>
     bfa:	24 30       	cpi	r18, 0x04	; 4
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <_Z19dmxctr_config_valuehh6selectj+0x1de>
     c00:	b7 c0       	rjmp	.+366    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
     c02:	91 11       	cpse	r25, r1
     c04:	42 c0       	rjmp	.+132    	; 0xc8a <_Z19dmxctr_config_valuehh6selectj+0x266>
     c06:	b4 c0       	rjmp	.+360    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
				break;
				case output_haft_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft_reverse<<4;
     c08:	91 11       	cpse	r25, r1
     c0a:	75 c0       	rjmp	.+234    	; 0xcf6 <_Z19dmxctr_config_valuehh6selectj+0x2d2>
     c0c:	b1 c0       	rjmp	.+354    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
     c0e:	91 11       	cpse	r25, r1
     c10:	57 c0       	rjmp	.+174    	; 0xcc0 <_Z19dmxctr_config_valuehh6selectj+0x29c>
     c12:	ae c0       	rjmp	.+348    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				case output_normal:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_normal<<4;
				break;
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
     c14:	91 11       	cpse	r25, r1
     c16:	1e c0       	rjmp	.+60     	; 0xc54 <_Z19dmxctr_config_valuehh6selectj+0x230>
     c18:	ab c0       	rjmp	.+342    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
			break;
			case output:
			switch (val)
			{
				case output_normal:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_normal<<4;
     c1a:	99 23       	and	r25, r25
     c1c:	09 f4       	brne	.+2      	; 0xc20 <_Z19dmxctr_config_valuehh6selectj+0x1fc>
     c1e:	a8 c0       	rjmp	.+336    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	4f e0       	ldi	r20, 0x0F	; 15
     c24:	48 9f       	mul	r20, r24
     c26:	f0 01       	movw	r30, r0
     c28:	49 9f       	mul	r20, r25
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	e2 5d       	subi	r30, 0xD2	; 210
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	86 0f       	add	r24, r22
     c34:	91 1d       	adc	r25, r1
     c36:	48 9f       	mul	r20, r24
     c38:	90 01       	movw	r18, r0
     c3a:	49 9f       	mul	r20, r25
     c3c:	30 0d       	add	r19, r0
     c3e:	11 24       	eor	r1, r1
     c40:	23 5c       	subi	r18, 0xC3	; 195
     c42:	3e 4f       	sbci	r19, 0xFE	; 254
     c44:	80 81       	ld	r24, Z
     c46:	8f 70       	andi	r24, 0x0F	; 15
     c48:	80 83       	st	Z, r24
     c4a:	3f 96       	adiw	r30, 0x0f	; 15
     c4c:	e2 17       	cp	r30, r18
     c4e:	f3 07       	cpc	r31, r19
     c50:	c9 f7       	brne	.-14     	; 0xc44 <_Z19dmxctr_config_valuehh6selectj+0x220>
     c52:	8e c0       	rjmp	.+284    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	4f e0       	ldi	r20, 0x0F	; 15
     c58:	48 9f       	mul	r20, r24
     c5a:	f0 01       	movw	r30, r0
     c5c:	49 9f       	mul	r20, r25
     c5e:	f0 0d       	add	r31, r0
     c60:	11 24       	eor	r1, r1
     c62:	e2 5d       	subi	r30, 0xD2	; 210
     c64:	fe 4f       	sbci	r31, 0xFE	; 254
     c66:	86 0f       	add	r24, r22
     c68:	91 1d       	adc	r25, r1
     c6a:	48 9f       	mul	r20, r24
     c6c:	90 01       	movw	r18, r0
     c6e:	49 9f       	mul	r20, r25
     c70:	30 0d       	add	r19, r0
     c72:	11 24       	eor	r1, r1
     c74:	23 5c       	subi	r18, 0xC3	; 195
     c76:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				
				case output_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_reverse<<4;
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	80 61       	ori	r24, 0x10	; 16
     c7e:	80 83       	st	Z, r24
     c80:	3f 96       	adiw	r30, 0x0f	; 15
     c82:	e2 17       	cp	r30, r18
     c84:	f3 07       	cpc	r31, r19
     c86:	c1 f7       	brne	.-16     	; 0xc78 <_Z19dmxctr_config_valuehh6selectj+0x254>
     c88:	73 c0       	rjmp	.+230    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	4f e0       	ldi	r20, 0x0F	; 15
     c8e:	48 9f       	mul	r20, r24
     c90:	f0 01       	movw	r30, r0
     c92:	49 9f       	mul	r20, r25
     c94:	f0 0d       	add	r31, r0
     c96:	11 24       	eor	r1, r1
     c98:	e2 5d       	subi	r30, 0xD2	; 210
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	86 0f       	add	r24, r22
     c9e:	91 1d       	adc	r25, r1
     ca0:	48 9f       	mul	r20, r24
     ca2:	90 01       	movw	r18, r0
     ca4:	49 9f       	mul	r20, r25
     ca6:	30 0d       	add	r19, r0
     ca8:	11 24       	eor	r1, r1
     caa:	23 5c       	subi	r18, 0xC3	; 195
     cac:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_logic:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_logic<<4;
     cae:	80 81       	ld	r24, Z
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	80 83       	st	Z, r24
     cb6:	3f 96       	adiw	r30, 0x0f	; 15
     cb8:	e2 17       	cp	r30, r18
     cba:	f3 07       	cpc	r31, r19
     cbc:	c1 f7       	brne	.-16     	; 0xcae <_Z19dmxctr_config_valuehh6selectj+0x28a>
     cbe:	58 c0       	rjmp	.+176    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	4f e0       	ldi	r20, 0x0F	; 15
     cc4:	48 9f       	mul	r20, r24
     cc6:	f0 01       	movw	r30, r0
     cc8:	49 9f       	mul	r20, r25
     cca:	f0 0d       	add	r31, r0
     ccc:	11 24       	eor	r1, r1
     cce:	e2 5d       	subi	r30, 0xD2	; 210
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	86 0f       	add	r24, r22
     cd4:	91 1d       	adc	r25, r1
     cd6:	48 9f       	mul	r20, r24
     cd8:	90 01       	movw	r18, r0
     cda:	49 9f       	mul	r20, r25
     cdc:	30 0d       	add	r19, r0
     cde:	11 24       	eor	r1, r1
     ce0:	23 5c       	subi	r18, 0xC3	; 195
     ce2:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_haft:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft<<4;
     ce4:	80 81       	ld	r24, Z
     ce6:	8f 70       	andi	r24, 0x0F	; 15
     ce8:	80 62       	ori	r24, 0x20	; 32
     cea:	80 83       	st	Z, r24
     cec:	3f 96       	adiw	r30, 0x0f	; 15
     cee:	e2 17       	cp	r30, r18
     cf0:	f3 07       	cpc	r31, r19
     cf2:	c1 f7       	brne	.-16     	; 0xce4 <_Z19dmxctr_config_valuehh6selectj+0x2c0>
     cf4:	3d c0       	rjmp	.+122    	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	4f e0       	ldi	r20, 0x0F	; 15
     cfa:	48 9f       	mul	r20, r24
     cfc:	f0 01       	movw	r30, r0
     cfe:	49 9f       	mul	r20, r25
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	e2 5d       	subi	r30, 0xD2	; 210
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	86 0f       	add	r24, r22
     d0a:	91 1d       	adc	r25, r1
     d0c:	48 9f       	mul	r20, r24
     d0e:	90 01       	movw	r18, r0
     d10:	49 9f       	mul	r20, r25
     d12:	30 0d       	add	r19, r0
     d14:	11 24       	eor	r1, r1
     d16:	23 5c       	subi	r18, 0xC3	; 195
     d18:	3e 4f       	sbci	r19, 0xFE	; 254
				break;
				case output_haft_reverse:
				for (uint8_t i = 0; i <n_point; i++) dmxcontrol[i+bot].mode =(dmxcontrol[i+bot].mode &0x0f)|output_haft_reverse<<4;
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 70       	andi	r24, 0x0F	; 15
     d1e:	80 63       	ori	r24, 0x30	; 48
     d20:	80 83       	st	Z, r24
     d22:	3f 96       	adiw	r30, 0x0f	; 15
     d24:	e2 17       	cp	r30, r18
     d26:	f3 07       	cpc	r31, r19
     d28:	c1 f7       	brne	.-16     	; 0xd1a <_Z19dmxctr_config_valuehh6selectj+0x2f6>
     d2a:	22 c0       	rjmp	.+68     	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
				default:
				break;
			}
			break;
			case enable:
			if (val!=0) val = 0;
     d2c:	23 2b       	or	r18, r19
     d2e:	11 f4       	brne	.+4      	; 0xd34 <_Z19dmxctr_config_valuehh6selectj+0x310>
			else val = 255;
     d30:	4f ef       	ldi	r20, 0xFF	; 255
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <_Z19dmxctr_config_valuehh6selectj+0x312>
				default:
				break;
			}
			break;
			case enable:
			if (val!=0) val = 0;
     d34:	40 e0       	ldi	r20, 0x00	; 0
			else val = 255;
			
			for (uint8_t i = 0; i <n_point; i++)
     d36:	99 23       	and	r25, r25
     d38:	d9 f0       	breq	.+54     	; 0xd70 <_Z19dmxctr_config_valuehh6selectj+0x34c>
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	5f e0       	ldi	r21, 0x0F	; 15
     d3e:	58 9f       	mul	r21, r24
     d40:	f0 01       	movw	r30, r0
     d42:	59 9f       	mul	r21, r25
     d44:	f0 0d       	add	r31, r0
     d46:	11 24       	eor	r1, r1
     d48:	e3 5d       	subi	r30, 0xD3	; 211
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	86 0f       	add	r24, r22
     d4e:	91 1d       	adc	r25, r1
     d50:	58 9f       	mul	r21, r24
     d52:	90 01       	movw	r18, r0
     d54:	59 9f       	mul	r21, r25
     d56:	30 0d       	add	r19, r0
     d58:	11 24       	eor	r1, r1
     d5a:	c9 01       	movw	r24, r18
     d5c:	84 5c       	subi	r24, 0xC4	; 196
     d5e:	9e 4f       	sbci	r25, 0xFE	; 254
			{
				dmxcontrol[i+bot].count_repeat = 0;
     d60:	10 82       	st	Z, r1
     d62:	df 01       	movw	r26, r30
     d64:	12 97       	sbiw	r26, 0x02	; 2
				 dmxcontrol[i+bot].stage=val;
     d66:	4c 93       	st	X, r20
     d68:	3f 96       	adiw	r30, 0x0f	; 15
			break;
			case enable:
			if (val!=0) val = 0;
			else val = 255;
			
			for (uint8_t i = 0; i <n_point; i++)
     d6a:	e8 17       	cp	r30, r24
     d6c:	f9 07       	cpc	r31, r25
     d6e:	c1 f7       	brne	.-16     	; 0xd60 <_Z19dmxctr_config_valuehh6selectj+0x33c>
			}
			break;
			default:
			break;
		}
}
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	cf 90       	pop	r12
     d78:	08 95       	ret

00000d7a <_Z11dmxctr_openv>:


void dmxctr_open(void) {en = 1;}
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	80 93 0d 01 	sts	0x010D, r24
     d80:	08 95       	ret

00000d82 <_Z12dmxctr_closev>:
void dmxctr_close(void) {en = 0;}
     d82:	10 92 0d 01 	sts	0x010D, r1
     d86:	08 95       	ret

00000d88 <_Z12dmxctr_usingjj>:
	return 1;
}

void dmxctr_using(uint16_t bot,uint16_t top)
{
	bot_channel = bot;
     d88:	90 93 0b 01 	sts	0x010B, r25
     d8c:	80 93 0a 01 	sts	0x010A, r24
	top_channel = top;
     d90:	70 93 09 01 	sts	0x0109, r23
     d94:	60 93 08 01 	sts	0x0108, r22
     d98:	08 95       	ret

00000d9a <_Z8gray_adjhh>:
/*                                                                      */
/************************************************************************/
//update : 18/1/2015

 void gray_adj(uint8_t bot,uint8_t top)
{
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
     da8:	60 31       	cpi	r22, 0x10	; 16
     daa:	08 f0       	brcs	.+2      	; 0xdae <_Z8gray_adjhh+0x14>
     dac:	d5 c0       	rjmp	.+426    	; 0xf58 <_Z8gray_adjhh+0x1be>
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
     dae:	a8 2f       	mov	r26, r24
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	6a 1b       	sub	r22, r26
     db6:	7b 0b       	sbc	r23, r27
     db8:	6f 5f       	subi	r22, 0xFF	; 255
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	16 16       	cp	r1, r22
     dbe:	17 06       	cpc	r1, r23
     dc0:	0c f0       	brlt	.+2      	; 0xdc4 <_Z8gray_adjhh+0x2a>
     dc2:	c6 c0       	rjmp	.+396    	; 0xf50 <_Z8gray_adjhh+0x1b6>
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
	{
		switch (dmxcontrol[i].mode>>4)
     dca:	8f e0       	ldi	r24, 0x0F	; 15
			if (dmxcontrol[i].gray>=(RESOLUS/2)) channel_buff[bot+i]=dmxcontrol[i].top_gray;
			else channel_buff[bot+i]=dmxcontrol[i].bot_gray;
			break;
			case output_haft:
			_temp = dmxcontrol[i].gray;
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=(((RESOLUS/2)-1)-_temp)*2+1;
     dcc:	08 e1       	ldi	r16, 0x18	; 24
     dce:	10 e0       	ldi	r17, 0x00	; 0
			else channel_buff[bot+i]=(_temp-(RESOLUS/2))*2+1;
			break;
			case output_haft_reverse:
			_temp =dmxcontrol[i].gray;
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=RESOLUS-(((RESOLUS/2)-1-_temp)*2+1);
			else channel_buff[bot+i]=RESOLUS-((_temp-(RESOLUS/2))*2+1);
     dd0:	0f 2e       	mov	r0, r31
     dd2:	f9 e1       	ldi	r31, 0x19	; 25
     dd4:	cf 2e       	mov	r12, r31
     dd6:	d1 2c       	mov	r13, r1
     dd8:	f0 2d       	mov	r31, r0
		{
			case output_normal:
			channel_buff[bot+i]=dmxcontrol[i].gray;
			break;
			case output_reverse:
			channel_buff[bot+i]=RESOLUS-dmxcontrol[i].gray;
     dda:	0f 2e       	mov	r0, r31
     ddc:	f2 e3       	ldi	r31, 0x32	; 50
     dde:	ff 2e       	mov	r15, r31
     de0:	f0 2d       	mov	r31, r0
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
	{
		switch (dmxcontrol[i].mode>>4)
     de2:	84 9f       	mul	r24, r20
     de4:	f0 01       	movw	r30, r0
     de6:	85 9f       	mul	r24, r21
     de8:	f0 0d       	add	r31, r0
     dea:	11 24       	eor	r1, r1
     dec:	e0 5e       	subi	r30, 0xE0	; 224
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	26 85       	ldd	r18, Z+14	; 0x0e
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	35 95       	asr	r19
     df6:	27 95       	ror	r18
     df8:	35 95       	asr	r19
     dfa:	27 95       	ror	r18
     dfc:	35 95       	asr	r19
     dfe:	27 95       	ror	r18
     e00:	35 95       	asr	r19
     e02:	27 95       	ror	r18
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <_Z8gray_adjhh+0x72>
     e0a:	5c c0       	rjmp	.+184    	; 0xec4 <_Z8gray_adjhh+0x12a>
     e0c:	3c f4       	brge	.+14     	; 0xe1c <_Z8gray_adjhh+0x82>
     e0e:	21 15       	cp	r18, r1
     e10:	31 05       	cpc	r19, r1
     e12:	61 f0       	breq	.+24     	; 0xe2c <_Z8gray_adjhh+0x92>
     e14:	21 30       	cpi	r18, 0x01	; 1
     e16:	31 05       	cpc	r19, r1
     e18:	c9 f0       	breq	.+50     	; 0xe4c <_Z8gray_adjhh+0xb2>
     e1a:	93 c0       	rjmp	.+294    	; 0xf42 <_Z8gray_adjhh+0x1a8>
     e1c:	23 30       	cpi	r18, 0x03	; 3
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <_Z8gray_adjhh+0x8a>
     e22:	70 c0       	rjmp	.+224    	; 0xf04 <_Z8gray_adjhh+0x16a>
     e24:	24 30       	cpi	r18, 0x04	; 4
     e26:	31 05       	cpc	r19, r1
     e28:	19 f1       	breq	.+70     	; 0xe70 <_Z8gray_adjhh+0xd6>
     e2a:	8b c0       	rjmp	.+278    	; 0xf42 <_Z8gray_adjhh+0x1a8>
		{
			case output_normal:
			channel_buff[bot+i]=dmxcontrol[i].gray;
     e2c:	fa 01       	movw	r30, r20
     e2e:	e9 5d       	subi	r30, 0xD9	; 217
     e30:	fd 4f       	sbci	r31, 0xFD	; 253
     e32:	ea 0f       	add	r30, r26
     e34:	fb 1f       	adc	r31, r27
     e36:	84 9f       	mul	r24, r20
     e38:	90 01       	movw	r18, r0
     e3a:	85 9f       	mul	r24, r21
     e3c:	30 0d       	add	r19, r0
     e3e:	11 24       	eor	r1, r1
     e40:	20 5e       	subi	r18, 0xE0	; 224
     e42:	3e 4f       	sbci	r19, 0xFE	; 254
     e44:	e9 01       	movw	r28, r18
     e46:	28 81       	ld	r18, Y
     e48:	20 83       	st	Z, r18
			break;
     e4a:	7b c0       	rjmp	.+246    	; 0xf42 <_Z8gray_adjhh+0x1a8>
			case output_reverse:
			channel_buff[bot+i]=RESOLUS-dmxcontrol[i].gray;
     e4c:	fa 01       	movw	r30, r20
     e4e:	e9 5d       	subi	r30, 0xD9	; 217
     e50:	fd 4f       	sbci	r31, 0xFD	; 253
     e52:	ea 0f       	add	r30, r26
     e54:	fb 1f       	adc	r31, r27
     e56:	84 9f       	mul	r24, r20
     e58:	90 01       	movw	r18, r0
     e5a:	85 9f       	mul	r24, r21
     e5c:	30 0d       	add	r19, r0
     e5e:	11 24       	eor	r1, r1
     e60:	20 5e       	subi	r18, 0xE0	; 224
     e62:	3e 4f       	sbci	r19, 0xFE	; 254
     e64:	e9 01       	movw	r28, r18
     e66:	28 81       	ld	r18, Y
     e68:	df 2d       	mov	r29, r15
     e6a:	d2 1b       	sub	r29, r18
     e6c:	d0 83       	st	Z, r29
			break;
     e6e:	69 c0       	rjmp	.+210    	; 0xf42 <_Z8gray_adjhh+0x1a8>
			case output_logic:
			if (dmxcontrol[i].gray>=(RESOLUS/2)) channel_buff[bot+i]=dmxcontrol[i].top_gray;
     e70:	84 9f       	mul	r24, r20
     e72:	f0 01       	movw	r30, r0
     e74:	85 9f       	mul	r24, r21
     e76:	f0 0d       	add	r31, r0
     e78:	11 24       	eor	r1, r1
     e7a:	e0 5e       	subi	r30, 0xE0	; 224
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	20 81       	ld	r18, Z
     e80:	29 31       	cpi	r18, 0x19	; 25
     e82:	80 f0       	brcs	.+32     	; 0xea4 <_Z8gray_adjhh+0x10a>
     e84:	fa 01       	movw	r30, r20
     e86:	e9 5d       	subi	r30, 0xD9	; 217
     e88:	fd 4f       	sbci	r31, 0xFD	; 253
     e8a:	ea 0f       	add	r30, r26
     e8c:	fb 1f       	adc	r31, r27
     e8e:	84 9f       	mul	r24, r20
     e90:	90 01       	movw	r18, r0
     e92:	85 9f       	mul	r24, r21
     e94:	30 0d       	add	r19, r0
     e96:	11 24       	eor	r1, r1
     e98:	20 5e       	subi	r18, 0xE0	; 224
     e9a:	3e 4f       	sbci	r19, 0xFE	; 254
     e9c:	e9 01       	movw	r28, r18
     e9e:	29 81       	ldd	r18, Y+1	; 0x01
     ea0:	20 83       	st	Z, r18
     ea2:	4f c0       	rjmp	.+158    	; 0xf42 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=dmxcontrol[i].bot_gray;
     ea4:	fa 01       	movw	r30, r20
     ea6:	e9 5d       	subi	r30, 0xD9	; 217
     ea8:	fd 4f       	sbci	r31, 0xFD	; 253
     eaa:	ea 0f       	add	r30, r26
     eac:	fb 1f       	adc	r31, r27
     eae:	84 9f       	mul	r24, r20
     eb0:	90 01       	movw	r18, r0
     eb2:	85 9f       	mul	r24, r21
     eb4:	30 0d       	add	r19, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	20 5e       	subi	r18, 0xE0	; 224
     eba:	3e 4f       	sbci	r19, 0xFE	; 254
     ebc:	e9 01       	movw	r28, r18
     ebe:	2a 81       	ldd	r18, Y+2	; 0x02
     ec0:	20 83       	st	Z, r18
     ec2:	3f c0       	rjmp	.+126    	; 0xf42 <_Z8gray_adjhh+0x1a8>
			break;
			case output_haft:
			_temp = dmxcontrol[i].gray;
     ec4:	84 9f       	mul	r24, r20
     ec6:	f0 01       	movw	r30, r0
     ec8:	85 9f       	mul	r24, r21
     eca:	f0 0d       	add	r31, r0
     ecc:	11 24       	eor	r1, r1
     ece:	e0 5e       	subi	r30, 0xE0	; 224
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	20 81       	ld	r18, Z
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=(((RESOLUS/2)-1)-_temp)*2+1;
     ed4:	29 31       	cpi	r18, 0x19	; 25
     ed6:	68 f4       	brcc	.+26     	; 0xef2 <_Z8gray_adjhh+0x158>
     ed8:	49 5d       	subi	r20, 0xD9	; 217
     eda:	5d 4f       	sbci	r21, 0xFD	; 253
     edc:	fa 01       	movw	r30, r20
     ede:	ea 0f       	add	r30, r26
     ee0:	fb 1f       	adc	r31, r27
     ee2:	a8 01       	movw	r20, r16
     ee4:	42 1b       	sub	r20, r18
     ee6:	51 09       	sbc	r21, r1
     ee8:	9a 01       	movw	r18, r20
     eea:	22 0f       	add	r18, r18
     eec:	2f 5f       	subi	r18, 0xFF	; 255
     eee:	20 83       	st	Z, r18
     ef0:	28 c0       	rjmp	.+80     	; 0xf42 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=(_temp-(RESOLUS/2))*2+1;
     ef2:	49 5d       	subi	r20, 0xD9	; 217
     ef4:	5d 4f       	sbci	r21, 0xFD	; 253
     ef6:	fa 01       	movw	r30, r20
     ef8:	ea 0f       	add	r30, r26
     efa:	fb 1f       	adc	r31, r27
     efc:	22 0f       	add	r18, r18
     efe:	21 53       	subi	r18, 0x31	; 49
     f00:	20 83       	st	Z, r18
     f02:	1f c0       	rjmp	.+62     	; 0xf42 <_Z8gray_adjhh+0x1a8>
			break;
			case output_haft_reverse:
			_temp =dmxcontrol[i].gray;
     f04:	84 9f       	mul	r24, r20
     f06:	f0 01       	movw	r30, r0
     f08:	85 9f       	mul	r24, r21
     f0a:	f0 0d       	add	r31, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	e0 5e       	subi	r30, 0xE0	; 224
     f10:	fe 4f       	sbci	r31, 0xFE	; 254
     f12:	20 81       	ld	r18, Z
			if (_temp<=(RESOLUS/2)-1)channel_buff[bot+i]=RESOLUS-(((RESOLUS/2)-1-_temp)*2+1);
     f14:	29 31       	cpi	r18, 0x19	; 25
     f16:	48 f4       	brcc	.+18     	; 0xf2a <_Z8gray_adjhh+0x190>
     f18:	49 5d       	subi	r20, 0xD9	; 217
     f1a:	5d 4f       	sbci	r21, 0xFD	; 253
     f1c:	fa 01       	movw	r30, r20
     f1e:	ea 0f       	add	r30, r26
     f20:	fb 1f       	adc	r31, r27
     f22:	22 0f       	add	r18, r18
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	20 83       	st	Z, r18
     f28:	0c c0       	rjmp	.+24     	; 0xf42 <_Z8gray_adjhh+0x1a8>
			else channel_buff[bot+i]=RESOLUS-((_temp-(RESOLUS/2))*2+1);
     f2a:	49 5d       	subi	r20, 0xD9	; 217
     f2c:	5d 4f       	sbci	r21, 0xFD	; 253
     f2e:	fa 01       	movw	r30, r20
     f30:	ea 0f       	add	r30, r26
     f32:	fb 1f       	adc	r31, r27
     f34:	e6 01       	movw	r28, r12
     f36:	c2 1b       	sub	r28, r18
     f38:	d1 09       	sbc	r29, r1
     f3a:	9e 01       	movw	r18, r28
     f3c:	22 0f       	add	r18, r18
     f3e:	2f 5c       	subi	r18, 0xCF	; 207
     f40:	20 83       	st	Z, r18
 void gray_adj(uint8_t bot,uint8_t top)
{
	uint8_t _temp;
	if (top>=MAX_AUTO_CHANNEL) return;
	
	for (uint8_t i = 0; i <(top-bot)+1; i++)
     f42:	9f 5f       	subi	r25, 0xFF	; 255
     f44:	49 2f       	mov	r20, r25
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	46 17       	cp	r20, r22
     f4a:	57 07       	cpc	r21, r23
     f4c:	0c f4       	brge	.+2      	; 0xf50 <_Z8gray_adjhh+0x1b6>
     f4e:	49 cf       	rjmp	.-366    	; 0xde2 <_Z8gray_adjhh+0x48>
			break;
			default:
			break;
		}
	}
	output_updata(channel_buff);
     f50:	87 e2       	ldi	r24, 0x27	; 39
     f52:	92 e0       	ldi	r25, 0x02	; 2
     f54:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <_Z13output_updataPh>
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	08 95       	ret

00000f68 <_Z8delay_msm>:


void delay_ms(uint32_t val)
{
	
	ms_counter = val;
     f68:	60 93 04 01 	sts	0x0104, r22
     f6c:	70 93 05 01 	sts	0x0105, r23
     f70:	80 93 06 01 	sts	0x0106, r24
     f74:	90 93 07 01 	sts	0x0107, r25
	while(ms_counter!=0){};
     f78:	80 91 04 01 	lds	r24, 0x0104
     f7c:	90 91 05 01 	lds	r25, 0x0105
     f80:	a0 91 06 01 	lds	r26, 0x0106
     f84:	b0 91 07 01 	lds	r27, 0x0107
     f88:	89 2b       	or	r24, r25
     f8a:	8a 2b       	or	r24, r26
     f8c:	8b 2b       	or	r24, r27
     f8e:	a1 f7       	brne	.-24     	; 0xf78 <_Z8delay_msm+0x10>
}
     f90:	08 95       	ret

00000f92 <_Z11timer0_initv>:
	return 1;
}

void timer0_init(void)
{
	TCCR0B |= (5 << CS00);
     f92:	85 b5       	in	r24, 0x25	; 37
     f94:	85 60       	ori	r24, 0x05	; 5
     f96:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
     f98:	ee e6       	ldi	r30, 0x6E	; 110
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	80 83       	st	Z, r24
	TIFR0 &=~(1<<TOV0);
     fa2:	a8 98       	cbi	0x15, 0	; 21
	TCNT0  = 0;
     fa4:	16 bc       	out	0x26, r1	; 38
     fa6:	08 95       	ret

00000fa8 <_Z12rota_disablev>:
			}
	}
}

void rota_enable(void){rota_en = 1;}
void rota_disable(void){rota_en = 0;}
     fa8:	10 92 0c 01 	sts	0x010C, r1
     fac:	08 95       	ret

00000fae <_Z18rota_group_defaultv>:
     fae:	10 92 0c 01 	sts	0x010C, r1
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
}

void rota_group_set(uint8_t group_number,uint8_t g_bot,uint8_t g_top,uint8_t speed,uint8_t dir,uint8_t _enable)
{
	if(g_top>=MAX_ROTA_CHANNEL) return;
	rota_ctr[group_number].G_bot = g_bot;
     fb6:	c9 01       	movw	r24, r18
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	fc 01       	movw	r30, r24
     fbe:	e2 0f       	add	r30, r18
     fc0:	f3 1f       	adc	r31, r19
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e2 5f       	subi	r30, 0xF2	; 242
     fc8:	fe 4f       	sbci	r31, 0xFE	; 254
     fca:	14 82       	std	Z+4, r1	; 0x04
	rota_ctr[group_number].G_top = g_top;
     fcc:	15 82       	std	Z+5, r1	; 0x05
	rota_ctr[group_number].G_dir = dir;
     fce:	11 82       	std	Z+1, r1	; 0x01
	rota_ctr[group_number].G_enable = _enable;
     fd0:	10 82       	st	Z, r1
	rota_ctr[group_number].G_speed = speed;
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	e2 5f       	subi	r30, 0xF2	; 242
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	12 82       	std	Z+2, r1	; 0x02
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
void rota_disable(void){rota_en = 0;}

void rota_group_default(void)
{
	rota_disable();
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++) rota_group_set(i,0,0,0,0,0);	
     fe6:	23 30       	cpi	r18, 0x03	; 3
     fe8:	31 05       	cpc	r19, r1
     fea:	29 f7       	brne	.-54     	; 0xfb6 <_Z18rota_group_defaultv+0x8>
}
     fec:	08 95       	ret

00000fee <_Z4rotajjh>:

void rota(uint16_t bot,uint16_t top,uint8_t dir)
{
	uint8_t _buff;
	
	if (dir)
     fee:	44 23       	and	r20, r20
     ff0:	d9 f0       	breq	.+54     	; 0x1028 <_Z4rotajjh+0x3a>
	{
		_buff=rota_buff[bot];
     ff2:	fc 01       	movw	r30, r24
     ff4:	e0 5f       	subi	r30, 0xF0	; 240
     ff6:	fd 4f       	sbci	r31, 0xFD	; 253
     ff8:	50 81       	ld	r21, Z
		for (uint16_t i = 0;i<(top-bot);i++)
     ffa:	68 17       	cp	r22, r24
     ffc:	79 07       	cpc	r23, r25
     ffe:	79 f0       	breq	.+30     	; 0x101e <_Z4rotajjh+0x30>
		{
			rota_buff[i+bot]=rota_buff[bot+i+1];
    1000:	9c 01       	movw	r18, r24
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	f9 01       	movw	r30, r18
    1008:	e0 5f       	subi	r30, 0xF0	; 240
    100a:	fd 4f       	sbci	r31, 0xFD	; 253
    100c:	40 81       	ld	r20, Z
    100e:	fc 01       	movw	r30, r24
    1010:	e0 5f       	subi	r30, 0xF0	; 240
    1012:	fd 4f       	sbci	r31, 0xFD	; 253
    1014:	40 83       	st	Z, r20
    1016:	c9 01       	movw	r24, r18
	uint8_t _buff;
	
	if (dir)
	{
		_buff=rota_buff[bot];
		for (uint16_t i = 0;i<(top-bot);i++)
    1018:	26 17       	cp	r18, r22
    101a:	37 07       	cpc	r19, r23
    101c:	89 f7       	brne	.-30     	; 0x1000 <_Z4rotajjh+0x12>
		{
			rota_buff[i+bot]=rota_buff[bot+i+1];
		}
		
		rota_buff[top] = _buff;
    101e:	fb 01       	movw	r30, r22
    1020:	e0 5f       	subi	r30, 0xF0	; 240
    1022:	fd 4f       	sbci	r31, 0xFD	; 253
    1024:	50 83       	st	Z, r21
    1026:	08 95       	ret
	}
	
	else
	{
		_buff=rota_buff[top];
    1028:	fb 01       	movw	r30, r22
    102a:	e0 5f       	subi	r30, 0xF0	; 240
    102c:	fd 4f       	sbci	r31, 0xFD	; 253
    102e:	50 81       	ld	r21, Z
		for (uint16_t i = 0;i<(top-bot);i++)
    1030:	68 17       	cp	r22, r24
    1032:	79 07       	cpc	r23, r25
    1034:	79 f0       	breq	.+30     	; 0x1054 <_Z4rotajjh+0x66>
		{
			rota_buff[top-i]=rota_buff[top-1-i];
    1036:	9b 01       	movw	r18, r22
    1038:	21 50       	subi	r18, 0x01	; 1
    103a:	31 09       	sbc	r19, r1
    103c:	f9 01       	movw	r30, r18
    103e:	e0 5f       	subi	r30, 0xF0	; 240
    1040:	fd 4f       	sbci	r31, 0xFD	; 253
    1042:	40 81       	ld	r20, Z
    1044:	fb 01       	movw	r30, r22
    1046:	e0 5f       	subi	r30, 0xF0	; 240
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
    104a:	40 83       	st	Z, r20
    104c:	b9 01       	movw	r22, r18
	}
	
	else
	{
		_buff=rota_buff[top];
		for (uint16_t i = 0;i<(top-bot);i++)
    104e:	28 17       	cp	r18, r24
    1050:	39 07       	cpc	r19, r25
    1052:	89 f7       	brne	.-30     	; 0x1036 <_Z4rotajjh+0x48>
		{
			rota_buff[top-i]=rota_buff[top-1-i];
		}
		rota_buff[bot] = _buff;
    1054:	fc 01       	movw	r30, r24
    1056:	e0 5f       	subi	r30, 0xF0	; 240
    1058:	fd 4f       	sbci	r31, 0xFD	; 253
    105a:	50 83       	st	Z, r21
    105c:	08 95       	ret

0000105e <_Z12rota_managerv>:
{
	rota_group_set(_slot,rota_ctr[_slot].G_bot,rota_ctr[_slot].G_top,1,left,_DISABLE);
}

void rota_manager(void)
{
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	c0 e0       	ldi	r28, 0x00	; 0
    1072:	d0 e0       	ldi	r29, 0x00	; 0
				else
				{
					rota(rota_ctr[i].G_bot,rota_ctr[i].G_top,rota_ctr[i].G_dir);
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
    1074:	f1 2c       	mov	r15, r1
    1076:	00 e0       	ldi	r16, 0x00	; 0
    1078:	10 e0       	ldi	r17, 0x00	; 0

void rota_manager(void)
{
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++)
	{
			if (rota_ctr[i].G_enable)
    107a:	6e 01       	movw	r12, r28
    107c:	fe 01       	movw	r30, r28
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ec 0f       	add	r30, r28
    1084:	fd 1f       	adc	r31, r29
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	e2 5f       	subi	r30, 0xF2	; 242
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	80 81       	ld	r24, Z
    1090:	88 23       	and	r24, r24
    1092:	09 f4       	brne	.+2      	; 0x1096 <_Z12rota_managerv+0x38>
    1094:	6e c0       	rjmp	.+220    	; 0x1172 <_Z12rota_managerv+0x114>
			{
				if (rota_ctr[i].G_counter!=0) rota_ctr[i].G_counter--;
    1096:	fe 01       	movw	r30, r28
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ec 0f       	add	r30, r28
    109e:	fd 1f       	adc	r31, r29
    10a0:	ee 0f       	add	r30, r30
    10a2:	ff 1f       	adc	r31, r31
    10a4:	e2 5f       	subi	r30, 0xF2	; 242
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	83 81       	ldd	r24, Z+3	; 0x03
    10aa:	88 23       	and	r24, r24
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <_Z12rota_managerv+0x6a>
    10ae:	fe 01       	movw	r30, r28
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ec 0f       	add	r30, r28
    10b6:	fd 1f       	adc	r31, r29
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e2 5f       	subi	r30, 0xF2	; 242
    10be:	fe 4f       	sbci	r31, 0xFE	; 254
    10c0:	83 81       	ldd	r24, Z+3	; 0x03
    10c2:	81 50       	subi	r24, 0x01	; 1
    10c4:	83 83       	std	Z+3, r24	; 0x03
    10c6:	1c c0       	rjmp	.+56     	; 0x1100 <_Z12rota_managerv+0xa2>
				else
				{
					rota(rota_ctr[i].G_bot,rota_ctr[i].G_top,rota_ctr[i].G_dir);
    10c8:	5e 01       	movw	r10, r28
    10ca:	aa 0c       	add	r10, r10
    10cc:	bb 1c       	adc	r11, r11
    10ce:	ac 0e       	add	r10, r28
    10d0:	bd 1e       	adc	r11, r29
    10d2:	c5 01       	movw	r24, r10
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	9c 01       	movw	r18, r24
    10da:	22 5f       	subi	r18, 0xF2	; 242
    10dc:	3e 4f       	sbci	r19, 0xFE	; 254
    10de:	59 01       	movw	r10, r18
    10e0:	d9 01       	movw	r26, r18
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	4c 91       	ld	r20, X
    10e6:	11 97       	sbiw	r26, 0x01	; 1
    10e8:	15 96       	adiw	r26, 0x05	; 5
    10ea:	6c 91       	ld	r22, X
    10ec:	15 97       	sbiw	r26, 0x05	; 5
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	8c 91       	ld	r24, X
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z4rotajjh>
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
    10fa:	f5 01       	movw	r30, r10
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	83 83       	std	Z+3, r24	; 0x03
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
    1100:	f6 01       	movw	r30, r12
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	ec 0d       	add	r30, r12
    1108:	fd 1d       	adc	r31, r13
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	e2 5f       	subi	r30, 0xF2	; 242
    1110:	fe 4f       	sbci	r31, 0xFE	; 254
    1112:	85 81       	ldd	r24, Z+5	; 0x05
    1114:	24 81       	ldd	r18, Z+4	; 0x04
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	82 1b       	sub	r24, r18
    111a:	91 09       	sbc	r25, r1
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	18 16       	cp	r1, r24
    1120:	19 06       	cpc	r1, r25
    1122:	3c f5       	brge	.+78     	; 0x1172 <_Z12rota_managerv+0x114>
    1124:	8f 2d       	mov	r24, r15
    1126:	90 2f       	mov	r25, r16
    1128:	41 2f       	mov	r20, r17
    112a:	df 01       	movw	r26, r30
    112c:	34 96       	adiw	r30, 0x04	; 4
    112e:	6d 01       	movw	r12, r26
    1130:	25 e0       	ldi	r18, 0x05	; 5
    1132:	c2 0e       	add	r12, r18
    1134:	d1 1c       	adc	r13, r1
    1136:	50 81       	ld	r21, Z
    1138:	20 81       	ld	r18, Z
    113a:	bc 01       	movw	r22, r24
    113c:	62 0f       	add	r22, r18
    113e:	71 1d       	adc	r23, r1
    1140:	9b 01       	movw	r18, r22
    1142:	20 5f       	subi	r18, 0xF0	; 240
    1144:	3d 4f       	sbci	r19, 0xFD	; 253
    1146:	d9 01       	movw	r26, r18
    1148:	2c 91       	ld	r18, X
    114a:	89 5d       	subi	r24, 0xD9	; 217
    114c:	9d 4f       	sbci	r25, 0xFD	; 253
    114e:	85 0f       	add	r24, r21
    1150:	91 1d       	adc	r25, r1
    1152:	dc 01       	movw	r26, r24
    1154:	2c 93       	st	X, r18
    1156:	4f 5f       	subi	r20, 0xFF	; 255
    1158:	84 2f       	mov	r24, r20
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	d6 01       	movw	r26, r12
    115e:	2c 91       	ld	r18, X
    1160:	50 81       	ld	r21, Z
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	25 1b       	sub	r18, r21
    1166:	31 09       	sbc	r19, r1
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	82 17       	cp	r24, r18
    116e:	93 07       	cpc	r25, r19
    1170:	14 f3       	brlt	.-60     	; 0x1136 <_Z12rota_managerv+0xd8>
    1172:	21 96       	adiw	r28, 0x01	; 1
	rota_group_set(_slot,rota_ctr[_slot].G_bot,rota_ctr[_slot].G_top,1,left,_DISABLE);
}

void rota_manager(void)
{
	for (uint8_t i = 0; i < MAX_ROTA_GROUP; i++)
    1174:	c3 30       	cpi	r28, 0x03	; 3
    1176:	d1 05       	cpc	r29, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <_Z12rota_managerv+0x11e>
    117a:	7f cf       	rjmp	.-258    	; 0x107a <_Z12rota_managerv+0x1c>
					rota_ctr[i].G_counter= rota_ctr[i].G_speed;
				}
			for (uint8_t j = 0;j<rota_ctr[i].G_top-rota_ctr[i].G_bot+1;j++) channel_buff[rota_ctr[i].G_bot+j]=rota_buff[rota_ctr[i].G_bot+j];
			}
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	ff 90       	pop	r15
    1186:	df 90       	pop	r13
    1188:	cf 90       	pop	r12
    118a:	bf 90       	pop	r11
    118c:	af 90       	pop	r10
    118e:	08 95       	ret

00001190 <__vector_16>:
}



ISR(TIMER0_OVF_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	ef 93       	push	r30
    11b8:	ff 93       	push	r31
	wdt_reset();
    11ba:	a8 95       	wdr
	TCNT0 = 240;
    11bc:	80 ef       	ldi	r24, 0xF0	; 240
    11be:	86 bd       	out	0x26, r24	; 38
	if(ms_counter!=0) ms_counter--;
    11c0:	80 91 04 01 	lds	r24, 0x0104
    11c4:	90 91 05 01 	lds	r25, 0x0105
    11c8:	a0 91 06 01 	lds	r26, 0x0106
    11cc:	b0 91 07 01 	lds	r27, 0x0107
    11d0:	89 2b       	or	r24, r25
    11d2:	8a 2b       	or	r24, r26
    11d4:	8b 2b       	or	r24, r27
    11d6:	99 f0       	breq	.+38     	; 0x11fe <__vector_16+0x6e>
    11d8:	80 91 04 01 	lds	r24, 0x0104
    11dc:	90 91 05 01 	lds	r25, 0x0105
    11e0:	a0 91 06 01 	lds	r26, 0x0106
    11e4:	b0 91 07 01 	lds	r27, 0x0107
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	a1 09       	sbc	r26, r1
    11ec:	b1 09       	sbc	r27, r1
    11ee:	80 93 04 01 	sts	0x0104, r24
    11f2:	90 93 05 01 	sts	0x0105, r25
    11f6:	a0 93 06 01 	sts	0x0106, r26
    11fa:	b0 93 07 01 	sts	0x0107, r27
	if (en)
    11fe:	80 91 0d 01 	lds	r24, 0x010D
    1202:	88 23       	and	r24, r24
    1204:	09 f4       	brne	.+2      	; 0x1208 <__vector_16+0x78>
    1206:	ed c1       	rjmp	.+986    	; 0x15e2 <__vector_16+0x452>
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
    1208:	80 91 08 01 	lds	r24, 0x0108
    120c:	90 91 09 01 	lds	r25, 0x0109
    1210:	20 91 0a 01 	lds	r18, 0x010A
    1214:	30 91 0b 01 	lds	r19, 0x010B
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	82 17       	cp	r24, r18
    121c:	93 07       	cpc	r25, r19
    121e:	09 f4       	brne	.+2      	; 0x1222 <__vector_16+0x92>
    1220:	d6 c1       	rjmp	.+940    	; 0x15ce <__vector_16+0x43e>
    1222:	20 e0       	ldi	r18, 0x00	; 0
		{
			switch(dmxcontrol[i].stage)
    1224:	3f e0       	ldi	r19, 0x0F	; 15
				if (dmxcontrol[i].counter==0)
				{
					if (dmxcontrol[i].gray >=dmxcontrol[i].top_gray)
					{
						dmxcontrol[i].counter = dmxcontrol[i].hold;
						dmxcontrol[i].stage = 3;
    1226:	03 e0       	ldi	r16, 0x03	; 3
				else dmxcontrol[i].counter--;
				break;
				case 4:
				if (dmxcontrol[i].counter==0)
				{
					if (dmxcontrol[i].gray <=dmxcontrol[i].bot_gray) dmxcontrol[i].stage = 5;
    1228:	d5 e0       	ldi	r29, 0x05	; 5
				break;
				case 3:
				if (dmxcontrol[i].counter==0)
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
					dmxcontrol[i].stage = 4;
    122a:	c4 e0       	ldi	r28, 0x04	; 4
						{
							dmxcontrol[i].stage = 5;
							if (dmxcontrol[i].gray>dmxcontrol[i].bot_gray) dmxcontrol[i].gray--;
							else
							{
								dmxcontrol[i].stage = 255;
    122c:	1f ef       	ldi	r17, 0xFF	; 255
		{
			switch(dmxcontrol[i].stage)
			{
				case 0:
				dmxcontrol[i].counter = dmxcontrol[i].on_delay;
				dmxcontrol[i].stage = 1;
    122e:	a1 e0       	ldi	r26, 0x01	; 1
				break;
				case 1:
				if (dmxcontrol[i].counter==0)
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
					dmxcontrol[i].stage = 2;
    1230:	b2 e0       	ldi	r27, 0x02	; 2
	if(ms_counter!=0) ms_counter--;
	if (en)
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
		{
			switch(dmxcontrol[i].stage)
    1232:	42 2f       	mov	r20, r18
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	34 9f       	mul	r19, r20
    1238:	f0 01       	movw	r30, r0
    123a:	35 9f       	mul	r19, r21
    123c:	f0 0d       	add	r31, r0
    123e:	11 24       	eor	r1, r1
    1240:	e0 5e       	subi	r30, 0xE0	; 224
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	83 85       	ldd	r24, Z+11	; 0x0b
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	09 f4       	brne	.+2      	; 0x124c <__vector_16+0xbc>
    124a:	3f c0       	rjmp	.+126    	; 0x12ca <__vector_16+0x13a>
    124c:	28 f4       	brcc	.+10     	; 0x1258 <__vector_16+0xc8>
    124e:	88 23       	and	r24, r24
    1250:	61 f0       	breq	.+24     	; 0x126a <__vector_16+0xda>
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	b9 f0       	breq	.+46     	; 0x1284 <__vector_16+0xf4>
    1256:	a9 c1       	rjmp	.+850    	; 0x15aa <__vector_16+0x41a>
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	09 f4       	brne	.+2      	; 0x125e <__vector_16+0xce>
    125c:	95 c0       	rjmp	.+298    	; 0x1388 <__vector_16+0x1f8>
    125e:	08 f4       	brcc	.+2      	; 0x1262 <__vector_16+0xd2>
    1260:	70 c0       	rjmp	.+224    	; 0x1342 <__vector_16+0x1b2>
    1262:	85 30       	cpi	r24, 0x05	; 5
    1264:	09 f4       	brne	.+2      	; 0x1268 <__vector_16+0xd8>
    1266:	cf c0       	rjmp	.+414    	; 0x1406 <__vector_16+0x276>
    1268:	a0 c1       	rjmp	.+832    	; 0x15aa <__vector_16+0x41a>
			{
				case 0:
				dmxcontrol[i].counter = dmxcontrol[i].on_delay;
    126a:	34 9f       	mul	r19, r20
    126c:	f0 01       	movw	r30, r0
    126e:	35 9f       	mul	r19, r21
    1270:	f0 0d       	add	r31, r0
    1272:	11 24       	eor	r1, r1
    1274:	e0 5e       	subi	r30, 0xE0	; 224
    1276:	fe 4f       	sbci	r31, 0xFE	; 254
    1278:	85 81       	ldd	r24, Z+5	; 0x05
    127a:	96 81       	ldd	r25, Z+6	; 0x06
    127c:	94 83       	std	Z+4, r25	; 0x04
    127e:	83 83       	std	Z+3, r24	; 0x03
				dmxcontrol[i].stage = 1;
    1280:	a3 87       	std	Z+11, r26	; 0x0b
				break;
    1282:	93 c1       	rjmp	.+806    	; 0x15aa <__vector_16+0x41a>
				case 1:
				if (dmxcontrol[i].counter==0)
    1284:	34 9f       	mul	r19, r20
    1286:	f0 01       	movw	r30, r0
    1288:	35 9f       	mul	r19, r21
    128a:	f0 0d       	add	r31, r0
    128c:	11 24       	eor	r1, r1
    128e:	e0 5e       	subi	r30, 0xE0	; 224
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	83 81       	ldd	r24, Z+3	; 0x03
    1294:	94 81       	ldd	r25, Z+4	; 0x04
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f4       	brne	.+26     	; 0x12b4 <__vector_16+0x124>
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
    129a:	34 9f       	mul	r19, r20
    129c:	f0 01       	movw	r30, r0
    129e:	35 9f       	mul	r19, r21
    12a0:	f0 0d       	add	r31, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	e0 5e       	subi	r30, 0xE0	; 224
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	87 81       	ldd	r24, Z+7	; 0x07
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	94 83       	std	Z+4, r25	; 0x04
    12ae:	83 83       	std	Z+3, r24	; 0x03
					dmxcontrol[i].stage = 2;
    12b0:	b3 87       	std	Z+11, r27	; 0x0b
    12b2:	7b c1       	rjmp	.+758    	; 0x15aa <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    12b4:	34 9f       	mul	r19, r20
    12b6:	f0 01       	movw	r30, r0
    12b8:	35 9f       	mul	r19, r21
    12ba:	f0 0d       	add	r31, r0
    12bc:	11 24       	eor	r1, r1
    12be:	e0 5e       	subi	r30, 0xE0	; 224
    12c0:	fe 4f       	sbci	r31, 0xFE	; 254
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	94 83       	std	Z+4, r25	; 0x04
    12c6:	83 83       	std	Z+3, r24	; 0x03
    12c8:	70 c1       	rjmp	.+736    	; 0x15aa <__vector_16+0x41a>
				break;
				case 2:
				
				if (dmxcontrol[i].counter==0)
    12ca:	34 9f       	mul	r19, r20
    12cc:	f0 01       	movw	r30, r0
    12ce:	35 9f       	mul	r19, r21
    12d0:	f0 0d       	add	r31, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	e0 5e       	subi	r30, 0xE0	; 224
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
    12da:	94 81       	ldd	r25, Z+4	; 0x04
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	31 f5       	brne	.+76     	; 0x132c <__vector_16+0x19c>
				{
					if (dmxcontrol[i].gray >=dmxcontrol[i].top_gray)
    12e0:	34 9f       	mul	r19, r20
    12e2:	f0 01       	movw	r30, r0
    12e4:	35 9f       	mul	r19, r21
    12e6:	f0 0d       	add	r31, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	e0 5e       	subi	r30, 0xE0	; 224
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	89 17       	cp	r24, r25
    12f4:	68 f0       	brcs	.+26     	; 0x1310 <__vector_16+0x180>
					{
						dmxcontrol[i].counter = dmxcontrol[i].hold;
    12f6:	34 9f       	mul	r19, r20
    12f8:	f0 01       	movw	r30, r0
    12fa:	35 9f       	mul	r19, r21
    12fc:	f0 0d       	add	r31, r0
    12fe:	11 24       	eor	r1, r1
    1300:	e0 5e       	subi	r30, 0xE0	; 224
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	80 85       	ldd	r24, Z+8	; 0x08
    1306:	91 85       	ldd	r25, Z+9	; 0x09
    1308:	94 83       	std	Z+4, r25	; 0x04
    130a:	83 83       	std	Z+3, r24	; 0x03
						dmxcontrol[i].stage = 3;
    130c:	03 87       	std	Z+11, r16	; 0x0b
						break;
    130e:	4d c1       	rjmp	.+666    	; 0x15aa <__vector_16+0x41a>
					}
					else dmxcontrol[i].gray++;
    1310:	34 9f       	mul	r19, r20
    1312:	f0 01       	movw	r30, r0
    1314:	35 9f       	mul	r19, r21
    1316:	f0 0d       	add	r31, r0
    1318:	11 24       	eor	r1, r1
    131a:	e0 5e       	subi	r30, 0xE0	; 224
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_in;
    1322:	87 81       	ldd	r24, Z+7	; 0x07
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	94 83       	std	Z+4, r25	; 0x04
    1328:	83 83       	std	Z+3, r24	; 0x03
    132a:	3f c1       	rjmp	.+638    	; 0x15aa <__vector_16+0x41a>
				}
				
				else dmxcontrol[i].counter--;
    132c:	34 9f       	mul	r19, r20
    132e:	f0 01       	movw	r30, r0
    1330:	35 9f       	mul	r19, r21
    1332:	f0 0d       	add	r31, r0
    1334:	11 24       	eor	r1, r1
    1336:	e0 5e       	subi	r30, 0xE0	; 224
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	94 83       	std	Z+4, r25	; 0x04
    133e:	83 83       	std	Z+3, r24	; 0x03
    1340:	34 c1       	rjmp	.+616    	; 0x15aa <__vector_16+0x41a>
				break;
				case 3:
				if (dmxcontrol[i].counter==0)
    1342:	34 9f       	mul	r19, r20
    1344:	f0 01       	movw	r30, r0
    1346:	35 9f       	mul	r19, r21
    1348:	f0 0d       	add	r31, r0
    134a:	11 24       	eor	r1, r1
    134c:	e0 5e       	subi	r30, 0xE0	; 224
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	83 81       	ldd	r24, Z+3	; 0x03
    1352:	94 81       	ldd	r25, Z+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f4       	brne	.+26     	; 0x1372 <__vector_16+0x1e2>
				{
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    1358:	34 9f       	mul	r19, r20
    135a:	f0 01       	movw	r30, r0
    135c:	35 9f       	mul	r19, r21
    135e:	f0 0d       	add	r31, r0
    1360:	11 24       	eor	r1, r1
    1362:	e0 5e       	subi	r30, 0xE0	; 224
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	82 85       	ldd	r24, Z+10	; 0x0a
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	94 83       	std	Z+4, r25	; 0x04
    136c:	83 83       	std	Z+3, r24	; 0x03
					dmxcontrol[i].stage = 4;
    136e:	c3 87       	std	Z+11, r28	; 0x0b
    1370:	1c c1       	rjmp	.+568    	; 0x15aa <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    1372:	34 9f       	mul	r19, r20
    1374:	f0 01       	movw	r30, r0
    1376:	35 9f       	mul	r19, r21
    1378:	f0 0d       	add	r31, r0
    137a:	11 24       	eor	r1, r1
    137c:	e0 5e       	subi	r30, 0xE0	; 224
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	94 83       	std	Z+4, r25	; 0x04
    1384:	83 83       	std	Z+3, r24	; 0x03
    1386:	11 c1       	rjmp	.+546    	; 0x15aa <__vector_16+0x41a>
				break;
				case 4:
				if (dmxcontrol[i].counter==0)
    1388:	34 9f       	mul	r19, r20
    138a:	f0 01       	movw	r30, r0
    138c:	35 9f       	mul	r19, r21
    138e:	f0 0d       	add	r31, r0
    1390:	11 24       	eor	r1, r1
    1392:	e0 5e       	subi	r30, 0xE0	; 224
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	83 81       	ldd	r24, Z+3	; 0x03
    1398:	94 81       	ldd	r25, Z+4	; 0x04
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	49 f5       	brne	.+82     	; 0x13f0 <__vector_16+0x260>
				{
					if (dmxcontrol[i].gray <=dmxcontrol[i].bot_gray) dmxcontrol[i].stage = 5;
    139e:	34 9f       	mul	r19, r20
    13a0:	f0 01       	movw	r30, r0
    13a2:	35 9f       	mul	r19, r21
    13a4:	f0 0d       	add	r31, r0
    13a6:	11 24       	eor	r1, r1
    13a8:	e0 5e       	subi	r30, 0xE0	; 224
    13aa:	fe 4f       	sbci	r31, 0xFE	; 254
    13ac:	80 81       	ld	r24, Z
    13ae:	92 81       	ldd	r25, Z+2	; 0x02
    13b0:	98 17       	cp	r25, r24
    13b2:	48 f0       	brcs	.+18     	; 0x13c6 <__vector_16+0x236>
    13b4:	34 9f       	mul	r19, r20
    13b6:	f0 01       	movw	r30, r0
    13b8:	35 9f       	mul	r19, r21
    13ba:	f0 0d       	add	r31, r0
    13bc:	11 24       	eor	r1, r1
    13be:	e0 5e       	subi	r30, 0xE0	; 224
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	d3 87       	std	Z+11, r29	; 0x0b
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <__vector_16+0x248>
					else dmxcontrol[i].gray--;
    13c6:	34 9f       	mul	r19, r20
    13c8:	f0 01       	movw	r30, r0
    13ca:	35 9f       	mul	r19, r21
    13cc:	f0 0d       	add	r31, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	e0 5e       	subi	r30, 0xE0	; 224
    13d2:	fe 4f       	sbci	r31, 0xFE	; 254
    13d4:	81 50       	subi	r24, 0x01	; 1
    13d6:	80 83       	st	Z, r24
					dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    13d8:	34 9f       	mul	r19, r20
    13da:	f0 01       	movw	r30, r0
    13dc:	35 9f       	mul	r19, r21
    13de:	f0 0d       	add	r31, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	e0 5e       	subi	r30, 0xE0	; 224
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	82 85       	ldd	r24, Z+10	; 0x0a
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	94 83       	std	Z+4, r25	; 0x04
    13ec:	83 83       	std	Z+3, r24	; 0x03
    13ee:	dd c0       	rjmp	.+442    	; 0x15aa <__vector_16+0x41a>
				}
				else dmxcontrol[i].counter--;
    13f0:	34 9f       	mul	r19, r20
    13f2:	f0 01       	movw	r30, r0
    13f4:	35 9f       	mul	r19, r21
    13f6:	f0 0d       	add	r31, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	e0 5e       	subi	r30, 0xE0	; 224
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	94 83       	std	Z+4, r25	; 0x04
    1402:	83 83       	std	Z+3, r24	; 0x03
    1404:	d2 c0       	rjmp	.+420    	; 0x15aa <__vector_16+0x41a>
				break;
				case 5:
				switch (dmxcontrol[i].mode&0x0f)
    1406:	34 9f       	mul	r19, r20
    1408:	f0 01       	movw	r30, r0
    140a:	35 9f       	mul	r19, r21
    140c:	f0 0d       	add	r31, r0
    140e:	11 24       	eor	r1, r1
    1410:	e0 5e       	subi	r30, 0xE0	; 224
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	86 85       	ldd	r24, Z+14	; 0x0e
    1416:	8f 70       	andi	r24, 0x0F	; 15
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	71 f0       	breq	.+28     	; 0x1438 <__vector_16+0x2a8>
    141c:	20 f0       	brcs	.+8      	; 0x1426 <__vector_16+0x296>
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	09 f4       	brne	.+2      	; 0x1424 <__vector_16+0x294>
    1422:	62 c0       	rjmp	.+196    	; 0x14e8 <__vector_16+0x358>
    1424:	b9 c0       	rjmp	.+370    	; 0x1598 <__vector_16+0x408>
				{
					case 0: //repeat to minus
					dmxcontrol[i].stage = 0;
    1426:	34 9f       	mul	r19, r20
    1428:	f0 01       	movw	r30, r0
    142a:	35 9f       	mul	r19, r21
    142c:	f0 0d       	add	r31, r0
    142e:	11 24       	eor	r1, r1
    1430:	e0 5e       	subi	r30, 0xE0	; 224
    1432:	fe 4f       	sbci	r31, 0xFE	; 254
    1434:	13 86       	std	Z+11, r1	; 0x0b
					break;
    1436:	b9 c0       	rjmp	.+370    	; 0x15aa <__vector_16+0x41a>
					
					case 1: //repeat n time and off
					
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
    1438:	34 9f       	mul	r19, r20
    143a:	f0 01       	movw	r30, r0
    143c:	35 9f       	mul	r19, r21
    143e:	f0 0d       	add	r31, r0
    1440:	11 24       	eor	r1, r1
    1442:	e0 5e       	subi	r30, 0xE0	; 224
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	85 85       	ldd	r24, Z+13	; 0x0d
    1448:	94 85       	ldd	r25, Z+12	; 0x0c
    144a:	89 17       	cp	r24, r25
    144c:	08 f4       	brcc	.+2      	; 0x1450 <__vector_16+0x2c0>
    144e:	41 c0       	rjmp	.+130    	; 0x14d2 <__vector_16+0x342>
					{
						if (dmxcontrol[i].counter==0)
    1450:	34 9f       	mul	r19, r20
    1452:	f0 01       	movw	r30, r0
    1454:	35 9f       	mul	r19, r21
    1456:	f0 0d       	add	r31, r0
    1458:	11 24       	eor	r1, r1
    145a:	e0 5e       	subi	r30, 0xE0	; 224
    145c:	fe 4f       	sbci	r31, 0xFE	; 254
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	94 81       	ldd	r25, Z+4	; 0x04
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	59 f5       	brne	.+86     	; 0x14bc <__vector_16+0x32c>
						{
							dmxcontrol[i].stage = 5;
    1466:	34 9f       	mul	r19, r20
    1468:	f0 01       	movw	r30, r0
    146a:	35 9f       	mul	r19, r21
    146c:	f0 0d       	add	r31, r0
    146e:	11 24       	eor	r1, r1
    1470:	e0 5e       	subi	r30, 0xE0	; 224
    1472:	fe 4f       	sbci	r31, 0xFE	; 254
    1474:	d3 87       	std	Z+11, r29	; 0x0b
							if (dmxcontrol[i].gray>dmxcontrol[i].bot_gray) dmxcontrol[i].gray--;
    1476:	80 81       	ld	r24, Z
    1478:	92 81       	ldd	r25, Z+2	; 0x02
    147a:	98 17       	cp	r25, r24
    147c:	50 f4       	brcc	.+20     	; 0x1492 <__vector_16+0x302>
    147e:	34 9f       	mul	r19, r20
    1480:	f0 01       	movw	r30, r0
    1482:	35 9f       	mul	r19, r21
    1484:	f0 0d       	add	r31, r0
    1486:	11 24       	eor	r1, r1
    1488:	e0 5e       	subi	r30, 0xE0	; 224
    148a:	fe 4f       	sbci	r31, 0xFE	; 254
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	80 83       	st	Z, r24
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <__vector_16+0x314>
							else
							{
								dmxcontrol[i].stage = 255;
    1492:	34 9f       	mul	r19, r20
    1494:	f0 01       	movw	r30, r0
    1496:	35 9f       	mul	r19, r21
    1498:	f0 0d       	add	r31, r0
    149a:	11 24       	eor	r1, r1
    149c:	e0 5e       	subi	r30, 0xE0	; 224
    149e:	fe 4f       	sbci	r31, 0xFE	; 254
    14a0:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
    14a2:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    14a4:	34 9f       	mul	r19, r20
    14a6:	f0 01       	movw	r30, r0
    14a8:	35 9f       	mul	r19, r21
    14aa:	f0 0d       	add	r31, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	e0 5e       	subi	r30, 0xE0	; 224
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	82 85       	ldd	r24, Z+10	; 0x0a
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	94 83       	std	Z+4, r25	; 0x04
    14b8:	83 83       	std	Z+3, r24	; 0x03
    14ba:	77 c0       	rjmp	.+238    	; 0x15aa <__vector_16+0x41a>
						}
						else dmxcontrol[i].counter--;
    14bc:	34 9f       	mul	r19, r20
    14be:	f0 01       	movw	r30, r0
    14c0:	35 9f       	mul	r19, r21
    14c2:	f0 0d       	add	r31, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	e0 5e       	subi	r30, 0xE0	; 224
    14c8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	94 83       	std	Z+4, r25	; 0x04
    14ce:	83 83       	std	Z+3, r24	; 0x03
    14d0:	6c c0       	rjmp	.+216    	; 0x15aa <__vector_16+0x41a>
					}
					else
					{
						dmxcontrol[i].stage =0;
    14d2:	34 9f       	mul	r19, r20
    14d4:	f0 01       	movw	r30, r0
    14d6:	35 9f       	mul	r19, r21
    14d8:	f0 0d       	add	r31, r0
    14da:	11 24       	eor	r1, r1
    14dc:	e0 5e       	subi	r30, 0xE0	; 224
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	85 87       	std	Z+13, r24	; 0x0d
    14e6:	61 c0       	rjmp	.+194    	; 0x15aa <__vector_16+0x41a>
					}
					
					break;
					case 2://repeat n time and on
					if (dmxcontrol[i].count_repeat>=dmxcontrol[i].repeat)
    14e8:	34 9f       	mul	r19, r20
    14ea:	f0 01       	movw	r30, r0
    14ec:	35 9f       	mul	r19, r21
    14ee:	f0 0d       	add	r31, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	e0 5e       	subi	r30, 0xE0	; 224
    14f4:	fe 4f       	sbci	r31, 0xFE	; 254
    14f6:	85 85       	ldd	r24, Z+13	; 0x0d
    14f8:	94 85       	ldd	r25, Z+12	; 0x0c
    14fa:	89 17       	cp	r24, r25
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <__vector_16+0x370>
    14fe:	41 c0       	rjmp	.+130    	; 0x1582 <__vector_16+0x3f2>
					{
						dmxcontrol[i].stage = 5;
    1500:	34 9f       	mul	r19, r20
    1502:	f0 01       	movw	r30, r0
    1504:	35 9f       	mul	r19, r21
    1506:	f0 0d       	add	r31, r0
    1508:	11 24       	eor	r1, r1
    150a:	e0 5e       	subi	r30, 0xE0	; 224
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	d3 87       	std	Z+11, r29	; 0x0b
						
						if (dmxcontrol[i].counter==0)
    1510:	83 81       	ldd	r24, Z+3	; 0x03
    1512:	94 81       	ldd	r25, Z+4	; 0x04
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	51 f5       	brne	.+84     	; 0x156c <__vector_16+0x3dc>
						{
							if (dmxcontrol[i].gray<dmxcontrol[i].top_gray) dmxcontrol[i].gray++;
    1518:	34 9f       	mul	r19, r20
    151a:	f0 01       	movw	r30, r0
    151c:	35 9f       	mul	r19, r21
    151e:	f0 0d       	add	r31, r0
    1520:	11 24       	eor	r1, r1
    1522:	e0 5e       	subi	r30, 0xE0	; 224
    1524:	fe 4f       	sbci	r31, 0xFE	; 254
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	89 17       	cp	r24, r25
    152c:	50 f4       	brcc	.+20     	; 0x1542 <__vector_16+0x3b2>
    152e:	34 9f       	mul	r19, r20
    1530:	f0 01       	movw	r30, r0
    1532:	35 9f       	mul	r19, r21
    1534:	f0 0d       	add	r31, r0
    1536:	11 24       	eor	r1, r1
    1538:	e0 5e       	subi	r30, 0xE0	; 224
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 83       	st	Z, r24
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <__vector_16+0x3c4>
							else
							{
								dmxcontrol[i].stage = 255;
    1542:	34 9f       	mul	r19, r20
    1544:	f0 01       	movw	r30, r0
    1546:	35 9f       	mul	r19, r21
    1548:	f0 0d       	add	r31, r0
    154a:	11 24       	eor	r1, r1
    154c:	e0 5e       	subi	r30, 0xE0	; 224
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	13 87       	std	Z+11, r17	; 0x0b
								dmxcontrol[i].count_repeat = 0;
    1552:	15 86       	std	Z+13, r1	; 0x0d
							}
							dmxcontrol[i].counter = dmxcontrol[i].fade_out;
    1554:	34 9f       	mul	r19, r20
    1556:	f0 01       	movw	r30, r0
    1558:	35 9f       	mul	r19, r21
    155a:	f0 0d       	add	r31, r0
    155c:	11 24       	eor	r1, r1
    155e:	e0 5e       	subi	r30, 0xE0	; 224
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	82 85       	ldd	r24, Z+10	; 0x0a
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	94 83       	std	Z+4, r25	; 0x04
    1568:	83 83       	std	Z+3, r24	; 0x03
    156a:	1f c0       	rjmp	.+62     	; 0x15aa <__vector_16+0x41a>
						}
						else dmxcontrol[i].counter--;
    156c:	34 9f       	mul	r19, r20
    156e:	f0 01       	movw	r30, r0
    1570:	35 9f       	mul	r19, r21
    1572:	f0 0d       	add	r31, r0
    1574:	11 24       	eor	r1, r1
    1576:	e0 5e       	subi	r30, 0xE0	; 224
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	94 83       	std	Z+4, r25	; 0x04
    157e:	83 83       	std	Z+3, r24	; 0x03
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <__vector_16+0x41a>
					}
					else
					{
						dmxcontrol[i].stage = 0;
    1582:	34 9f       	mul	r19, r20
    1584:	f0 01       	movw	r30, r0
    1586:	35 9f       	mul	r19, r21
    1588:	f0 0d       	add	r31, r0
    158a:	11 24       	eor	r1, r1
    158c:	e0 5e       	subi	r30, 0xE0	; 224
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	13 86       	std	Z+11, r1	; 0x0b
						dmxcontrol[i].count_repeat++;
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	85 87       	std	Z+13, r24	; 0x0d
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <__vector_16+0x41a>
					}
					break;
					default:// one circle
					dmxcontrol[i].stage = 255;
    1598:	34 9f       	mul	r19, r20
    159a:	f0 01       	movw	r30, r0
    159c:	35 9f       	mul	r19, r21
    159e:	f0 0d       	add	r31, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	e0 5e       	subi	r30, 0xE0	; 224
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	13 87       	std	Z+11, r17	; 0x0b
					dmxcontrol[i].count_repeat = 0;
    15a8:	15 86       	std	Z+13, r1	; 0x0d
	wdt_reset();
	TCNT0 = 240;
	if(ms_counter!=0) ms_counter--;
	if (en)
	{
		for (uint8_t i =0;i<top_channel-bot_channel+1;i++)
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	80 91 08 01 	lds	r24, 0x0108
    15b0:	90 91 09 01 	lds	r25, 0x0109
    15b4:	60 91 0a 01 	lds	r22, 0x010A
    15b8:	70 91 0b 01 	lds	r23, 0x010B
    15bc:	42 2f       	mov	r20, r18
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	86 1b       	sub	r24, r22
    15c4:	97 0b       	sbc	r25, r23
    15c6:	48 17       	cp	r20, r24
    15c8:	59 07       	cpc	r21, r25
    15ca:	08 f4       	brcc	.+2      	; 0x15ce <__vector_16+0x43e>
    15cc:	32 ce       	rjmp	.-924    	; 0x1232 <__vector_16+0xa2>
				break;
				default:
				break;
			}
		}
		 gray_adj(bot_channel,top_channel);
    15ce:	60 91 08 01 	lds	r22, 0x0108
    15d2:	70 91 09 01 	lds	r23, 0x0109
    15d6:	80 91 0a 01 	lds	r24, 0x010A
    15da:	90 91 0b 01 	lds	r25, 0x010B
    15de:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_Z8gray_adjhh>
	}
	 if (rota_en) rota_manager();
    15e2:	80 91 0c 01 	lds	r24, 0x010C
    15e6:	81 11       	cpse	r24, r1
    15e8:	0e 94 2f 08 	call	0x105e	; 0x105e <_Z12rota_managerv>
}
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <main>:
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    1616:	9c e0       	ldi	r25, 0x0C	; 12
    1618:	88 e1       	ldi	r24, 0x18	; 24
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	a8 95       	wdr
    1620:	80 93 60 00 	sts	0x0060, r24
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	90 93 60 00 	sts	0x0060, r25

int main(void)
{
	
	wdt_enable(WDTO_250MS);
	timer0_init();
    162a:	0e 94 c9 07 	call	0xf92	; 0xf92 <_Z11timer0_initv>
	timer2_CTC_init();
    162e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_Z15timer2_CTC_initv>
	output_init();
    1632:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_Z11output_initv>
	dmxcontrol_default();
    1636:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z18dmxcontrol_defaultv>
	rota_group_default();
    163a:	0e 94 d7 07 	call	0xfae	; 0xfae <_Z18rota_group_defaultv>
	dmxctr_using(A1,A16);
    163e:	6f e0       	ldi	r22, 0x0F	; 15
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z12dmxctr_usingjj>
	dmxctr_open();
    164a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z11dmxctr_openv>
	rota_disable();
    164e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z12rota_disablev>

	dmxcontrol_default();
    1652:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z18dmxcontrol_defaultv>
	rota_group_default();
    1656:	0e 94 d7 07 	call	0xfae	; 0xfae <_Z18rota_group_defaultv>
	dmxctr_config_value(0,MAX_AUTO_CHANNEL-1,enable,1);
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	48 e0       	ldi	r20, 0x08	; 8
    1660:	6f e0       	ldi	r22, 0x0F	; 15
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
	star_mode = random()%4;
    1668:	0e 94 53 11 	call	0x22a6	; 0x22a6 <random>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	83 70       	andi	r24, 0x03	; 3
    1672:	99 27       	eor	r25, r25
    1674:	aa 27       	eor	r26, r26
    1676:	b0 78       	andi	r27, 0x80	; 128
    1678:	bb 23       	and	r27, r27
    167a:	54 f4       	brge	.+20     	; 0x1690 <main+0x7a>
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	a1 09       	sbc	r26, r1
    1680:	b1 09       	sbc	r27, r1
    1682:	8c 6f       	ori	r24, 0xFC	; 252
    1684:	9f 6f       	ori	r25, 0xFF	; 255
    1686:	af 6f       	ori	r26, 0xFF	; 255
    1688:	bf 6f       	ori	r27, 0xFF	; 255
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	a1 1d       	adc	r26, r1
    168e:	b1 1d       	adc	r27, r1
    1690:	80 93 21 02 	sts	0x0221, r24
	wind_mode =  random()%4;
    1694:	0e 94 53 11 	call	0x22a6	; 0x22a6 <random>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	83 70       	andi	r24, 0x03	; 3
    169e:	99 27       	eor	r25, r25
    16a0:	aa 27       	eor	r26, r26
    16a2:	b0 78       	andi	r27, 0x80	; 128
    16a4:	bb 23       	and	r27, r27
    16a6:	54 f4       	brge	.+20     	; 0x16bc <main+0xa6>
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	a1 09       	sbc	r26, r1
    16ac:	b1 09       	sbc	r27, r1
    16ae:	8c 6f       	ori	r24, 0xFC	; 252
    16b0:	9f 6f       	ori	r25, 0xFF	; 255
    16b2:	af 6f       	ori	r26, 0xFF	; 255
    16b4:	bf 6f       	ori	r27, 0xFF	; 255
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	a1 1d       	adc	r26, r1
    16ba:	b1 1d       	adc	r27, r1
    16bc:	80 93 20 02 	sts	0x0220, r24
	//light_appear(0,15, gray_scale,2,10,1);
	
		
		while(1)
		{
			dmxctr_config_ref(0,MAX_AUTO_CHANNEL-1,RESOLUS,0);
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	42 e3       	ldi	r20, 0x32	; 50
    16c4:	6f e0       	ldi	r22, 0x0F	; 15
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z17dmxctr_config_refhhhh>
			dmxctr_config_value(0,15,enable,1);
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	48 e0       	ldi	r20, 0x08	; 8
    16d2:	6f e0       	ldi	r22, 0x0F	; 15
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
			dmxctr_using(0,15);
    16da:	6f e0       	ldi	r22, 0x0F	; 15
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z12dmxctr_usingjj>
			
			dmxctr_close();
    16e6:	0e 94 c1 06 	call	0xd82	; 0xd82 <_Z12dmxctr_closev>
			
			switch (wind_mode)
    16ea:	80 91 20 02 	lds	r24, 0x0220
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <main+0xde>
    16f2:	42 c0       	rjmp	.+132    	; 0x1778 <main+0x162>
    16f4:	20 f0       	brcs	.+8      	; 0x16fe <main+0xe8>
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	09 f4       	brne	.+2      	; 0x16fc <main+0xe6>
    16fa:	7b c0       	rjmp	.+246    	; 0x17f2 <main+0x1dc>
    16fc:	b7 c0       	rjmp	.+366    	; 0x186c <main+0x256>
			{
				case 0:
				//GIO THU VAO 2
				dmxctr_config_vector(A10,A15,gray,RESOLUS,0);
    16fe:	00 e0       	ldi	r16, 0x00	; 0
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	22 e3       	ldi	r18, 0x32	; 50
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	6e e0       	ldi	r22, 0x0E	; 14
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    1710:	0c e2       	ldi	r16, 0x2C	; 44
    1712:	11 e0       	ldi	r17, 0x01	; 1
    1714:	2c e2       	ldi	r18, 0x2C	; 44
    1716:	31 e0       	ldi	r19, 0x01	; 1
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	6e e0       	ldi	r22, 0x0E	; 14
    171c:	89 e0       	ldi	r24, 0x09	; 9
    171e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    1722:	02 e3       	ldi	r16, 0x32	; 50
    1724:	10 e0       	ldi	r17, 0x00	; 0
    1726:	22 e3       	ldi	r18, 0x32	; 50
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	43 e0       	ldi	r20, 0x03	; 3
    172c:	6e e0       	ldi	r22, 0x0E	; 14
    172e:	89 e0       	ldi	r24, 0x09	; 9
    1730:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    1734:	0a e0       	ldi	r16, 0x0A	; 10
    1736:	10 e0       	ldi	r17, 0x00	; 0
    1738:	2a e0       	ldi	r18, 0x0A	; 10
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	42 e0       	ldi	r20, 0x02	; 2
    173e:	6e e0       	ldi	r22, 0x0E	; 14
    1740:	89 e0       	ldi	r24, 0x09	; 9
    1742:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    1746:	2a e0       	ldi	r18, 0x0A	; 10
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	44 e0       	ldi	r20, 0x04	; 4
    174c:	6e e0       	ldi	r22, 0x0E	; 14
    174e:	89 e0       	ldi	r24, 0x09	; 9
    1750:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	46 e0       	ldi	r20, 0x06	; 6
    175a:	6e e0       	ldi	r22, 0x0E	; 14
    175c:	89 e0       	ldi	r24, 0x09	; 9
    175e:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_reverse);
    1762:	21 e0       	ldi	r18, 0x01	; 1
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	47 e0       	ldi	r20, 0x07	; 7
    1768:	6e e0       	ldi	r22, 0x0E	; 14
    176a:	89 e0       	ldi	r24, 0x09	; 9
    176c:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	80 93 20 02 	sts	0x0220, r24
				
				break;
    1776:	b5 c0       	rjmp	.+362    	; 0x18e2 <main+0x2cc>
				case 1:
				//GIO TOA RA 2
				dmxctr_config_vector(A10,A15,gray,0,RESOLUS);
    1778:	02 e3       	ldi	r16, 0x32	; 50
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	6e e0       	ldi	r22, 0x0E	; 14
    1784:	89 e0       	ldi	r24, 0x09	; 9
    1786:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    178a:	0c e2       	ldi	r16, 0x2C	; 44
    178c:	11 e0       	ldi	r17, 0x01	; 1
    178e:	2c e2       	ldi	r18, 0x2C	; 44
    1790:	31 e0       	ldi	r19, 0x01	; 1
    1792:	40 e0       	ldi	r20, 0x00	; 0
    1794:	6e e0       	ldi	r22, 0x0E	; 14
    1796:	89 e0       	ldi	r24, 0x09	; 9
    1798:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    179c:	02 e3       	ldi	r16, 0x32	; 50
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	22 e3       	ldi	r18, 0x32	; 50
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	43 e0       	ldi	r20, 0x03	; 3
    17a6:	6e e0       	ldi	r22, 0x0E	; 14
    17a8:	89 e0       	ldi	r24, 0x09	; 9
    17aa:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    17ae:	0a e0       	ldi	r16, 0x0A	; 10
    17b0:	10 e0       	ldi	r17, 0x00	; 0
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	42 e0       	ldi	r20, 0x02	; 2
    17b8:	6e e0       	ldi	r22, 0x0E	; 14
    17ba:	89 e0       	ldi	r24, 0x09	; 9
    17bc:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	44 e0       	ldi	r20, 0x04	; 4
    17c6:	6e e0       	ldi	r22, 0x0E	; 14
    17c8:	89 e0       	ldi	r24, 0x09	; 9
    17ca:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	46 e0       	ldi	r20, 0x06	; 6
    17d4:	6e e0       	ldi	r22, 0x0E	; 14
    17d6:	89 e0       	ldi	r24, 0x09	; 9
    17d8:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_reverse);
    17dc:	21 e0       	ldi	r18, 0x01	; 1
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	47 e0       	ldi	r20, 0x07	; 7
    17e2:	6e e0       	ldi	r22, 0x0E	; 14
    17e4:	89 e0       	ldi	r24, 0x09	; 9
    17e6:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode =2;
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	80 93 20 02 	sts	0x0220, r24
				break;
    17f0:	78 c0       	rjmp	.+240    	; 0x18e2 <main+0x2cc>
				case 2:
				//GIO THU VAO 1
				
				dmxctr_config_vector(A10,A15,gray,0,RESOLUS);
    17f2:	02 e3       	ldi	r16, 0x32	; 50
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	6e e0       	ldi	r22, 0x0E	; 14
    17fe:	89 e0       	ldi	r24, 0x09	; 9
    1800:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    1804:	0c e2       	ldi	r16, 0x2C	; 44
    1806:	11 e0       	ldi	r17, 0x01	; 1
    1808:	2c e2       	ldi	r18, 0x2C	; 44
    180a:	31 e0       	ldi	r19, 0x01	; 1
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	6e e0       	ldi	r22, 0x0E	; 14
    1810:	89 e0       	ldi	r24, 0x09	; 9
    1812:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    1816:	02 e3       	ldi	r16, 0x32	; 50
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	22 e3       	ldi	r18, 0x32	; 50
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	43 e0       	ldi	r20, 0x03	; 3
    1820:	6e e0       	ldi	r22, 0x0E	; 14
    1822:	89 e0       	ldi	r24, 0x09	; 9
    1824:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    1828:	0a e0       	ldi	r16, 0x0A	; 10
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	42 e0       	ldi	r20, 0x02	; 2
    1832:	6e e0       	ldi	r22, 0x0E	; 14
    1834:	89 e0       	ldi	r24, 0x09	; 9
    1836:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    183a:	2a e0       	ldi	r18, 0x0A	; 10
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	44 e0       	ldi	r20, 0x04	; 4
    1840:	6e e0       	ldi	r22, 0x0E	; 14
    1842:	89 e0       	ldi	r24, 0x09	; 9
    1844:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	46 e0       	ldi	r20, 0x06	; 6
    184e:	6e e0       	ldi	r22, 0x0E	; 14
    1850:	89 e0       	ldi	r24, 0x09	; 9
    1852:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_normal);
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	47 e0       	ldi	r20, 0x07	; 7
    185c:	6e e0       	ldi	r22, 0x0E	; 14
    185e:	89 e0       	ldi	r24, 0x09	; 9
    1860:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				
				wind_mode = 3;
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	80 93 20 02 	sts	0x0220, r24
				break;
    186a:	3b c0       	rjmp	.+118    	; 0x18e2 <main+0x2cc>
				default:
				//GIO THU VAO 2
				dmxctr_config_vector(A10,A15,gray,RESOLUS,0);
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	22 e3       	ldi	r18, 0x32	; 50
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	6e e0       	ldi	r22, 0x0E	; 14
    1878:	89 e0       	ldi	r24, 0x09	; 9
    187a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,ondelay,300,300);
    187e:	0c e2       	ldi	r16, 0x2C	; 44
    1880:	11 e0       	ldi	r17, 0x01	; 1
    1882:	2c e2       	ldi	r18, 0x2C	; 44
    1884:	31 e0       	ldi	r19, 0x01	; 1
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	6e e0       	ldi	r22, 0x0E	; 14
    188a:	89 e0       	ldi	r24, 0x09	; 9
    188c:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,hold,50,50);
    1890:	02 e3       	ldi	r16, 0x32	; 50
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	22 e3       	ldi	r18, 0x32	; 50
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	43 e0       	ldi	r20, 0x03	; 3
    189a:	6e e0       	ldi	r22, 0x0E	; 14
    189c:	89 e0       	ldi	r24, 0x09	; 9
    189e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadein,10,10);
    18a2:	0a e0       	ldi	r16, 0x0A	; 10
    18a4:	10 e0       	ldi	r17, 0x00	; 0
    18a6:	2a e0       	ldi	r18, 0x0A	; 10
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	42 e0       	ldi	r20, 0x02	; 2
    18ac:	6e e0       	ldi	r22, 0x0E	; 14
    18ae:	89 e0       	ldi	r24, 0x09	; 9
    18b0:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A10,A15,fadeout,10,10);
    18b4:	2a e0       	ldi	r18, 0x0A	; 10
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	44 e0       	ldi	r20, 0x04	; 4
    18ba:	6e e0       	ldi	r22, 0x0E	; 14
    18bc:	89 e0       	ldi	r24, 0x09	; 9
    18be:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A10,A15,mode,mode_minus);
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	46 e0       	ldi	r20, 0x06	; 6
    18c8:	6e e0       	ldi	r22, 0x0E	; 14
    18ca:	89 e0       	ldi	r24, 0x09	; 9
    18cc:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A10,A15,output,output_normal);
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	47 e0       	ldi	r20, 0x07	; 7
    18d6:	6e e0       	ldi	r22, 0x0E	; 14
    18d8:	89 e0       	ldi	r24, 0x09	; 9
    18da:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				wind_mode = 0;
    18de:	10 92 20 02 	sts	0x0220, r1
				break;
			}
			
			switch(star_mode)
    18e2:	80 91 21 02 	lds	r24, 0x0221
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <main+0x2d6>
    18ea:	45 c0       	rjmp	.+138    	; 0x1976 <main+0x360>
    18ec:	38 f0       	brcs	.+14     	; 0x18fc <main+0x2e6>
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <main+0x2de>
    18f2:	7c c0       	rjmp	.+248    	; 0x19ec <main+0x3d6>
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	09 f4       	brne	.+2      	; 0x18fa <main+0x2e4>
    18f8:	b4 c0       	rjmp	.+360    	; 0x1a62 <main+0x44c>
    18fa:	f7 c0       	rjmp	.+494    	; 0x1aea <main+0x4d4>
			{
				
				case 0:
				//NGOI SAO LAP LANH
				
				dmxctr_config_vector(A1,A9,gray,0,0);
    18fc:	00 e0       	ldi	r16, 0x00	; 0
    18fe:	10 e0       	ldi	r17, 0x00	; 0
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	68 e0       	ldi	r22, 0x08	; 8
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,200,50);
    190e:	02 e3       	ldi	r16, 0x32	; 50
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	28 ec       	ldi	r18, 0xC8	; 200
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	68 e0       	ldi	r22, 0x08	; 8
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,50,100);
    1920:	04 e6       	ldi	r16, 0x64	; 100
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	22 e3       	ldi	r18, 0x32	; 50
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	43 e0       	ldi	r20, 0x03	; 3
    192a:	68 e0       	ldi	r22, 0x08	; 8
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1932:	0a e0       	ldi	r16, 0x0A	; 10
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	2a e0       	ldi	r18, 0x0A	; 10
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	42 e0       	ldi	r20, 0x02	; 2
    193c:	68 e0       	ldi	r22, 0x08	; 8
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	44 e0       	ldi	r20, 0x04	; 4
    194a:	68 e0       	ldi	r22, 0x08	; 8
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	46 e0       	ldi	r20, 0x06	; 6
    1958:	68 e0       	ldi	r22, 0x08	; 8
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_normal);
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	47 e0       	ldi	r20, 0x07	; 7
    1966:	68 e0       	ldi	r22, 0x08	; 8
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				
				star_mode = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 21 02 	sts	0x0221, r24
				break;
    1974:	fe c0       	rjmp	.+508    	; 0x1b72 <main+0x55c>
				case 1:
				//NGOI SAO CHAY LEN 1
				dmxctr_config_vector(A1,A9,gray,0,RESOLUS);
    1976:	02 e3       	ldi	r16, 0x32	; 50
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	41 e0       	ldi	r20, 0x01	; 1
    1980:	68 e0       	ldi	r22, 0x08	; 8
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1988:	22 e3       	ldi	r18, 0x32	; 50
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	68 e0       	ldi	r22, 0x08	; 8
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1996:	04 ef       	ldi	r16, 0xF4	; 244
    1998:	11 e0       	ldi	r17, 0x01	; 1
    199a:	24 ef       	ldi	r18, 0xF4	; 244
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	43 e0       	ldi	r20, 0x03	; 3
    19a0:	68 e0       	ldi	r22, 0x08	; 8
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    19a8:	0a e0       	ldi	r16, 0x0A	; 10
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	2a e0       	ldi	r18, 0x0A	; 10
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	42 e0       	ldi	r20, 0x02	; 2
    19b2:	68 e0       	ldi	r22, 0x08	; 8
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    19ba:	2a e0       	ldi	r18, 0x0A	; 10
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	44 e0       	ldi	r20, 0x04	; 4
    19c0:	68 e0       	ldi	r22, 0x08	; 8
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	46 e0       	ldi	r20, 0x06	; 6
    19ce:	68 e0       	ldi	r22, 0x08	; 8
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_normal);
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	47 e0       	ldi	r20, 0x07	; 7
    19dc:	68 e0       	ldi	r22, 0x08	; 8
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				
				star_mode = 2;
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	80 93 21 02 	sts	0x0221, r24
				break;
    19ea:	c3 c0       	rjmp	.+390    	; 0x1b72 <main+0x55c>
				case 2:
				
				//NGOI SAO CHAY LEN 2
				
				dmxctr_config_vector(A1,A9,gray,0,RESOLUS);
    19ec:	02 e3       	ldi	r16, 0x32	; 50
    19ee:	10 e0       	ldi	r17, 0x00	; 0
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	41 e0       	ldi	r20, 0x01	; 1
    19f6:	68 e0       	ldi	r22, 0x08	; 8
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    19fe:	22 e3       	ldi	r18, 0x32	; 50
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	68 e0       	ldi	r22, 0x08	; 8
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1a0c:	04 ef       	ldi	r16, 0xF4	; 244
    1a0e:	11 e0       	ldi	r17, 0x01	; 1
    1a10:	24 ef       	ldi	r18, 0xF4	; 244
    1a12:	31 e0       	ldi	r19, 0x01	; 1
    1a14:	43 e0       	ldi	r20, 0x03	; 3
    1a16:	68 e0       	ldi	r22, 0x08	; 8
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1a1e:	0a e0       	ldi	r16, 0x0A	; 10
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	42 e0       	ldi	r20, 0x02	; 2
    1a28:	68 e0       	ldi	r22, 0x08	; 8
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1a30:	2a e0       	ldi	r18, 0x0A	; 10
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	44 e0       	ldi	r20, 0x04	; 4
    1a36:	68 e0       	ldi	r22, 0x08	; 8
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	46 e0       	ldi	r20, 0x06	; 6
    1a44:	68 e0       	ldi	r22, 0x08	; 8
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	47 e0       	ldi	r20, 0x07	; 7
    1a52:	68 e0       	ldi	r22, 0x08	; 8
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 3;
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	80 93 21 02 	sts	0x0221, r24
				break;
    1a60:	88 c0       	rjmp	.+272    	; 0x1b72 <main+0x55c>
				case 3:
				//NGOI SAO TOA RA
				dmxctr_config_vector(A1,A4,gray,RESOLUS,0);
    1a62:	00 e0       	ldi	r16, 0x00	; 0
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	22 e3       	ldi	r18, 0x32	; 50
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	63 e0       	ldi	r22, 0x03	; 3
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A5,A9,gray,0,RESOLUS);
    1a74:	02 e3       	ldi	r16, 0x32	; 50
    1a76:	10 e0       	ldi	r17, 0x00	; 0
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	68 e0       	ldi	r22, 0x08	; 8
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1a86:	22 e3       	ldi	r18, 0x32	; 50
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	68 e0       	ldi	r22, 0x08	; 8
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1a94:	04 ef       	ldi	r16, 0xF4	; 244
    1a96:	11 e0       	ldi	r17, 0x01	; 1
    1a98:	24 ef       	ldi	r18, 0xF4	; 244
    1a9a:	31 e0       	ldi	r19, 0x01	; 1
    1a9c:	43 e0       	ldi	r20, 0x03	; 3
    1a9e:	68 e0       	ldi	r22, 0x08	; 8
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1aa6:	0a e0       	ldi	r16, 0x0A	; 10
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	2a e0       	ldi	r18, 0x0A	; 10
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	42 e0       	ldi	r20, 0x02	; 2
    1ab0:	68 e0       	ldi	r22, 0x08	; 8
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1ab8:	2a e0       	ldi	r18, 0x0A	; 10
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	44 e0       	ldi	r20, 0x04	; 4
    1abe:	68 e0       	ldi	r22, 0x08	; 8
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	46 e0       	ldi	r20, 0x06	; 6
    1acc:	68 e0       	ldi	r22, 0x08	; 8
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	47 e0       	ldi	r20, 0x07	; 7
    1ada:	68 e0       	ldi	r22, 0x08	; 8
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 4;
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	80 93 21 02 	sts	0x0221, r24
				break;
    1ae8:	44 c0       	rjmp	.+136    	; 0x1b72 <main+0x55c>
				
				default:
				dmxctr_config_vector(A1,A4,gray,0,RESOLUS);
    1aea:	02 e3       	ldi	r16, 0x32	; 50
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	63 e0       	ldi	r22, 0x03	; 3
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A5,A9,gray,RESOLUS,0);
    1afc:	00 e0       	ldi	r16, 0x00	; 0
    1afe:	10 e0       	ldi	r17, 0x00	; 0
    1b00:	22 e3       	ldi	r18, 0x32	; 50
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	68 e0       	ldi	r22, 0x08	; 8
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,ondelay,50,50);
    1b0e:	02 e3       	ldi	r16, 0x32	; 50
    1b10:	10 e0       	ldi	r17, 0x00	; 0
    1b12:	22 e3       	ldi	r18, 0x32	; 50
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	68 e0       	ldi	r22, 0x08	; 8
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,hold,500,500);
    1b20:	04 ef       	ldi	r16, 0xF4	; 244
    1b22:	11 e0       	ldi	r17, 0x01	; 1
    1b24:	24 ef       	ldi	r18, 0xF4	; 244
    1b26:	31 e0       	ldi	r19, 0x01	; 1
    1b28:	43 e0       	ldi	r20, 0x03	; 3
    1b2a:	68 e0       	ldi	r22, 0x08	; 8
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadein,10,10);
    1b32:	0a e0       	ldi	r16, 0x0A	; 10
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	2a e0       	ldi	r18, 0x0A	; 10
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	42 e0       	ldi	r20, 0x02	; 2
    1b3c:	68 e0       	ldi	r22, 0x08	; 8
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_vector(A1,A9,fadeout,10,10);
    1b44:	2a e0       	ldi	r18, 0x0A	; 10
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	44 e0       	ldi	r20, 0x04	; 4
    1b4a:	68 e0       	ldi	r22, 0x08	; 8
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z20dmxctr_config_vectorhh6selectjj>
				dmxctr_config_value(A1,A9,mode,mode_minus);
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	46 e0       	ldi	r20, 0x06	; 6
    1b58:	68 e0       	ldi	r22, 0x08	; 8
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				dmxctr_config_value(A1,A9,output,output_reverse);
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	47 e0       	ldi	r20, 0x07	; 7
    1b66:	68 e0       	ldi	r22, 0x08	; 8
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 12 05 	call	0xa24	; 0xa24 <_Z19dmxctr_config_valuehh6selectj>
				star_mode = 0;
    1b6e:	10 92 21 02 	sts	0x0221, r1
				break;
			}
			dmxctr_open();
    1b72:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_Z11dmxctr_openv>
			delay_ms(60000);
    1b76:	60 e6       	ldi	r22, 0x60	; 96
    1b78:	7a ee       	ldi	r23, 0xEA	; 234
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 b4 07 	call	0xf68	; 0xf68 <_Z8delay_msm>


uint8_t star_mode;
uint8_t wind_mode;

int main(void)
    1b82:	9e cd       	rjmp	.-1220   	; 0x16c0 <main+0xaa>

00001b84 <_Z11output_initv>:
volatile uint8_t _mapD;


void output_init()
{
	DDRB |= S_MASK_PB;//pinB 0,1,2,3,4,5
    1b84:	84 b1       	in	r24, 0x04	; 4
    1b86:	8f 63       	ori	r24, 0x3F	; 63
    1b88:	84 b9       	out	0x04, r24	; 4
	DDRC |= S_MASK_PC;//pinC 0,1,2,3,4,5
    1b8a:	87 b1       	in	r24, 0x07	; 7
    1b8c:	8f 63       	ori	r24, 0x3F	; 63
    1b8e:	87 b9       	out	0x07, r24	; 7
	DDRD |= S_MASK_PD;//pinD 4,5,6,7
    1b90:	8a b1       	in	r24, 0x0a	; 10
    1b92:	80 6f       	ori	r24, 0xF0	; 240
    1b94:	8a b9       	out	0x0a, r24	; 10
    1b96:	08 95       	ret

00001b98 <_Z14output_off_allv>:

///updata 050815

void output_off_all()
{
	PORTB &= C_MASK_PB|_mapB; //pinB 0,1,2,3,4,5
    1b98:	80 91 24 02 	lds	r24, 0x0224
    1b9c:	95 b1       	in	r25, 0x05	; 5
    1b9e:	80 6c       	ori	r24, 0xC0	; 192
    1ba0:	89 23       	and	r24, r25
    1ba2:	85 b9       	out	0x05, r24	; 5
	PORTC &= C_MASK_PC|_mapC; //pinC 0,1,2,3,4,5
    1ba4:	80 91 23 02 	lds	r24, 0x0223
    1ba8:	98 b1       	in	r25, 0x08	; 8
    1baa:	80 6c       	ori	r24, 0xC0	; 192
    1bac:	89 23       	and	r24, r25
    1bae:	88 b9       	out	0x08, r24	; 8
	PORTD &= C_MASK_PD|_mapD;//pinD 4,5,6,7
    1bb0:	80 91 22 02 	lds	r24, 0x0222
    1bb4:	9b b1       	in	r25, 0x0b	; 11
    1bb6:	8f 60       	ori	r24, 0x0F	; 15
    1bb8:	89 23       	and	r24, r25
    1bba:	8b b9       	out	0x0b, r24	; 11
    1bbc:	08 95       	ret

00001bbe <_Z15timer2_CTC_initv>:
}

void timer2_CTC_init()
{
	TIMSK2 |= (1 << OCIE0A);                    // set output compare interrupt enable
    1bbe:	e0 e7       	ldi	r30, 0x70	; 112
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	82 60       	ori	r24, 0x02	; 2
    1bc6:	80 83       	st	Z, r24
	TCCR2A |= (1 << WGM21);
    1bc8:	e0 eb       	ldi	r30, 0xB0	; 176
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	82 60       	ori	r24, 0x02	; 2
    1bd0:	80 83       	st	Z, r24
	TCCR2B |= TIMER2_PRESCALER;				// set CTC mode
    1bd2:	e1 eb       	ldi	r30, 0xB1	; 177
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	83 60       	ori	r24, 0x03	; 3
    1bda:	80 83       	st	Z, r24
	OCR2A   = TIMER2_COMPARE_VALUE;            // set compare value for interrupt
    1bdc:	82 e3       	ldi	r24, 0x32	; 50
    1bde:	80 93 b3 00 	sts	0x00B3, r24
	sei();
    1be2:	78 94       	sei
    1be4:	08 95       	ret

00001be6 <_Z9pin_tableh>:
	 _counter--;
}

void pin_table(uint8_t pins)
{
	switch (pins)
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	8f 30       	cpi	r24, 0x0F	; 15
    1bea:	91 05       	cpc	r25, r1
    1bec:	18 f5       	brcc	.+70     	; 0x1c34 <_Z9pin_tableh+0x4e>
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e3 5c       	subi	r30, 0xC3	; 195
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
	{
		case 0:
		PORTC |=S_MASK_5;
    1bf8:	45 9a       	sbi	0x08, 5	; 8
		return;
    1bfa:	08 95       	ret
		case 1:
		PORTC |=S_MASK_4;
    1bfc:	44 9a       	sbi	0x08, 4	; 8
		return;
    1bfe:	08 95       	ret
		case 2:
		PORTC |=S_MASK_3;
    1c00:	43 9a       	sbi	0x08, 3	; 8
		return;
    1c02:	08 95       	ret
		case 3:
		PORTC |=S_MASK_2;
    1c04:	42 9a       	sbi	0x08, 2	; 8
		return;
    1c06:	08 95       	ret
		case 4:
		PORTC |=S_MASK_1;
    1c08:	41 9a       	sbi	0x08, 1	; 8
		return;
    1c0a:	08 95       	ret
		case 5:
		PORTC |=S_MASK_0;
    1c0c:	40 9a       	sbi	0x08, 0	; 8
		return;
    1c0e:	08 95       	ret
		case 6:
		PORTB |=S_MASK_5;
    1c10:	2d 9a       	sbi	0x05, 5	; 5
		return;
    1c12:	08 95       	ret
		case 7:
		PORTB |=S_MASK_4;
    1c14:	2c 9a       	sbi	0x05, 4	; 5
		return;
    1c16:	08 95       	ret
		case 8:
		PORTB |=S_MASK_3;
    1c18:	2b 9a       	sbi	0x05, 3	; 5
		return;
    1c1a:	08 95       	ret
		case 9:
		PORTB |=S_MASK_2;
    1c1c:	2a 9a       	sbi	0x05, 2	; 5
		return;
    1c1e:	08 95       	ret
		case 10:
		PORTB |=S_MASK_1;
    1c20:	29 9a       	sbi	0x05, 1	; 5
		return;
    1c22:	08 95       	ret
		case 11:
		PORTB |=S_MASK_0;
    1c24:	28 9a       	sbi	0x05, 0	; 5
		return;
    1c26:	08 95       	ret
		case 12:
		PORTD |=S_MASK_7;
    1c28:	5f 9a       	sbi	0x0b, 7	; 11
		return;
    1c2a:	08 95       	ret
		case 13:
		PORTD |= S_MASK_6;
    1c2c:	5e 9a       	sbi	0x0b, 6	; 11
		return;
    1c2e:	08 95       	ret
		case 14:
		PORTD |=S_MASK_5;
    1c30:	5d 9a       	sbi	0x0b, 5	; 11
		return;
    1c32:	08 95       	ret
		default:
		PORTD |=S_MASK_4;
    1c34:	5c 9a       	sbi	0x0b, 4	; 11
    1c36:	08 95       	ret

00001c38 <__vector_7>:
		if (channel_buff[i]>=MAX_COUNT) map_maker(i);
	}
}

ISR(TIMER2_COMPA_vect)
{
    1c38:	1f 92       	push	r1
    1c3a:	0f 92       	push	r0
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	0f 92       	push	r0
    1c40:	11 24       	eor	r1, r1
    1c42:	2f 93       	push	r18
    1c44:	3f 93       	push	r19
    1c46:	4f 93       	push	r20
    1c48:	5f 93       	push	r21
    1c4a:	6f 93       	push	r22
    1c4c:	7f 93       	push	r23
    1c4e:	8f 93       	push	r24
    1c50:	9f 93       	push	r25
    1c52:	af 93       	push	r26
    1c54:	bf 93       	push	r27
    1c56:	ef 93       	push	r30
    1c58:	ff 93       	push	r31
	 _pointer = 0;
    1c5a:	10 92 25 02 	sts	0x0225, r1
	 if (_counter==0)
    1c5e:	80 91 26 02 	lds	r24, 0x0226
    1c62:	81 11       	cpse	r24, r1
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <__vector_7+0x38>
	 {
		 output_off_all();
    1c66:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z14output_off_allv>
		 _counter=MAX_COUNT;
    1c6a:	82 e3       	ldi	r24, 0x32	; 50
    1c6c:	80 93 26 02 	sts	0x0226, r24
	 }
	 
	 while (_pointer<DATA_LEN)
    1c70:	80 91 25 02 	lds	r24, 0x0225
    1c74:	80 31       	cpi	r24, 0x10	; 16
    1c76:	b8 f4       	brcc	.+46     	; 0x1ca6 <__vector_7+0x6e>
	 {
		 if ( channel_buff[_pointer]>=_counter) pin_table(_pointer);
    1c78:	e0 91 25 02 	lds	r30, 0x0225
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	e9 5d       	subi	r30, 0xD9	; 217
    1c80:	fd 4f       	sbci	r31, 0xFD	; 253
    1c82:	90 81       	ld	r25, Z
    1c84:	80 91 26 02 	lds	r24, 0x0226
    1c88:	98 17       	cp	r25, r24
    1c8a:	20 f0       	brcs	.+8      	; 0x1c94 <__vector_7+0x5c>
    1c8c:	80 91 25 02 	lds	r24, 0x0225
    1c90:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_Z9pin_tableh>
		 _pointer++;
    1c94:	80 91 25 02 	lds	r24, 0x0225
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	80 93 25 02 	sts	0x0225, r24
	 {
		 output_off_all();
		 _counter=MAX_COUNT;
	 }
	 
	 while (_pointer<DATA_LEN)
    1c9e:	80 91 25 02 	lds	r24, 0x0225
    1ca2:	80 31       	cpi	r24, 0x10	; 16
    1ca4:	48 f3       	brcs	.-46     	; 0x1c78 <__vector_7+0x40>
	 {
		 if ( channel_buff[_pointer]>=_counter) pin_table(_pointer);
		 _pointer++;
	 }
	 _counter--;
    1ca6:	80 91 26 02 	lds	r24, 0x0226
    1caa:	81 50       	subi	r24, 0x01	; 1
    1cac:	80 93 26 02 	sts	0x0226, r24
}
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <_Z9map_makerh>:


///updata 050815
void map_maker(unsigned char _mux)
{
	switch (_mux)
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	8f 30       	cpi	r24, 0x0F	; 15
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <_Z9map_makerh+0xa>
    1cda:	5f c0       	rjmp	.+190    	; 0x1d9a <_Z9map_makerh+0xc8>
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e4 5b       	subi	r30, 0xB4	; 180
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__tablejump2__>
	{
		case 0:
		_mapC |=S_MASK_5;
    1ce6:	80 91 23 02 	lds	r24, 0x0223
    1cea:	80 62       	ori	r24, 0x20	; 32
    1cec:	80 93 23 02 	sts	0x0223, r24
		return;
    1cf0:	08 95       	ret
		case 1:
		_mapC |=S_MASK_4;
    1cf2:	80 91 23 02 	lds	r24, 0x0223
    1cf6:	80 61       	ori	r24, 0x10	; 16
    1cf8:	80 93 23 02 	sts	0x0223, r24
		return;
    1cfc:	08 95       	ret
		case 2:
		_mapC |=S_MASK_3;
    1cfe:	80 91 23 02 	lds	r24, 0x0223
    1d02:	88 60       	ori	r24, 0x08	; 8
    1d04:	80 93 23 02 	sts	0x0223, r24
		return;
    1d08:	08 95       	ret
		case 3:
		_mapC |=S_MASK_2;
    1d0a:	80 91 23 02 	lds	r24, 0x0223
    1d0e:	84 60       	ori	r24, 0x04	; 4
    1d10:	80 93 23 02 	sts	0x0223, r24
		return;
    1d14:	08 95       	ret
		case 4:
		_mapC |=S_MASK_1;
    1d16:	80 91 23 02 	lds	r24, 0x0223
    1d1a:	82 60       	ori	r24, 0x02	; 2
    1d1c:	80 93 23 02 	sts	0x0223, r24
		return;
    1d20:	08 95       	ret
		case 5:
		_mapC |=S_MASK_0;
    1d22:	80 91 23 02 	lds	r24, 0x0223
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	80 93 23 02 	sts	0x0223, r24
		return;
    1d2c:	08 95       	ret
		case 6:
		_mapB |=S_MASK_5;
    1d2e:	80 91 24 02 	lds	r24, 0x0224
    1d32:	80 62       	ori	r24, 0x20	; 32
    1d34:	80 93 24 02 	sts	0x0224, r24
		return;
    1d38:	08 95       	ret
		case 7:
		_mapB |=S_MASK_4;
    1d3a:	80 91 24 02 	lds	r24, 0x0224
    1d3e:	80 61       	ori	r24, 0x10	; 16
    1d40:	80 93 24 02 	sts	0x0224, r24
		return;
    1d44:	08 95       	ret
		case 8:
		_mapB |=S_MASK_3;
    1d46:	80 91 24 02 	lds	r24, 0x0224
    1d4a:	88 60       	ori	r24, 0x08	; 8
    1d4c:	80 93 24 02 	sts	0x0224, r24
		return;
    1d50:	08 95       	ret
		case 9:
		_mapB |=S_MASK_2;
    1d52:	80 91 24 02 	lds	r24, 0x0224
    1d56:	84 60       	ori	r24, 0x04	; 4
    1d58:	80 93 24 02 	sts	0x0224, r24
		return;
    1d5c:	08 95       	ret
		case 10:
		_mapB |=S_MASK_1;
    1d5e:	80 91 24 02 	lds	r24, 0x0224
    1d62:	82 60       	ori	r24, 0x02	; 2
    1d64:	80 93 24 02 	sts	0x0224, r24
		return;
    1d68:	08 95       	ret
		case 11:
		_mapB |=S_MASK_0;
    1d6a:	80 91 24 02 	lds	r24, 0x0224
    1d6e:	81 60       	ori	r24, 0x01	; 1
    1d70:	80 93 24 02 	sts	0x0224, r24
		return;
    1d74:	08 95       	ret
		case 12:
		_mapD |=S_MASK_7;
    1d76:	80 91 22 02 	lds	r24, 0x0222
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	80 93 22 02 	sts	0x0222, r24
		return;
    1d80:	08 95       	ret
		case 13:
		_mapD |=S_MASK_6;
    1d82:	80 91 22 02 	lds	r24, 0x0222
    1d86:	80 64       	ori	r24, 0x40	; 64
    1d88:	80 93 22 02 	sts	0x0222, r24
		return;
    1d8c:	08 95       	ret
		case 14:
		_mapD |=S_MASK_5;
    1d8e:	80 91 22 02 	lds	r24, 0x0222
    1d92:	80 62       	ori	r24, 0x20	; 32
    1d94:	80 93 22 02 	sts	0x0222, r24
		return;
    1d98:	08 95       	ret
		default:
		_mapD |=S_MASK_4;
    1d9a:	80 91 22 02 	lds	r24, 0x0222
    1d9e:	80 61       	ori	r24, 0x10	; 16
    1da0:	80 93 22 02 	sts	0x0222, r24
    1da4:	08 95       	ret

00001da6 <_Z13output_updataPh>:
}


///updata 050815
void output_updata(unsigned char *_data)
{
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
	_mapB=0;
    1dae:	10 92 24 02 	sts	0x0224, r1
	_mapC=0;
    1db2:	10 92 23 02 	sts	0x0223, r1
	_mapD=0;
    1db6:	10 92 22 02 	sts	0x0222, r1
    1dba:	8c 01       	movw	r16, r24
    1dbc:	c0 e0       	ldi	r28, 0x00	; 0
    1dbe:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char i= 0;i<DATA_LEN;i++)
	{
		channel_buff[i]= _data[i];
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	8f 01       	movw	r16, r30
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e9 5d       	subi	r30, 0xD9	; 217
    1dca:	fd 4f       	sbci	r31, 0xFD	; 253
    1dcc:	80 83       	st	Z, r24
		if (channel_buff[i]>=MAX_COUNT) map_maker(i);
    1dce:	80 81       	ld	r24, Z
    1dd0:	82 33       	cpi	r24, 0x32	; 50
    1dd2:	18 f0       	brcs	.+6      	; 0x1dda <_Z13output_updataPh+0x34>
    1dd4:	8c 2f       	mov	r24, r28
    1dd6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_Z9map_makerh>
    1dda:	21 96       	adiw	r28, 0x01	; 1
void output_updata(unsigned char *_data)
{
	_mapB=0;
	_mapC=0;
	_mapD=0;
	for (unsigned char i= 0;i<DATA_LEN;i++)
    1ddc:	c0 31       	cpi	r28, 0x10	; 16
    1dde:	d1 05       	cpc	r29, r1
    1de0:	79 f7       	brne	.-34     	; 0x1dc0 <_Z13output_updataPh+0x1a>
	{
		channel_buff[i]= _data[i];
		if (channel_buff[i]>=MAX_COUNT) map_maker(i);
	}
}
    1de2:	df 91       	pop	r29
    1de4:	cf 91       	pop	r28
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <__subsf3>:
    1dec:	50 58       	subi	r21, 0x80	; 128

00001dee <__addsf3>:
    1dee:	bb 27       	eor	r27, r27
    1df0:	aa 27       	eor	r26, r26
    1df2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__addsf3x>
    1df6:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_round>
    1dfa:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fp_pscA>
    1dfe:	38 f0       	brcs	.+14     	; 0x1e0e <__addsf3+0x20>
    1e00:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__fp_pscB>
    1e04:	20 f0       	brcs	.+8      	; 0x1e0e <__addsf3+0x20>
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <__addsf3+0x28>
    1e08:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0a:	19 f4       	brne	.+6      	; 0x1e12 <__addsf3+0x24>
    1e0c:	26 f4       	brtc	.+8      	; 0x1e16 <__addsf3+0x28>
    1e0e:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_nan>
    1e12:	0e f4       	brtc	.+2      	; 0x1e16 <__addsf3+0x28>
    1e14:	e0 95       	com	r30
    1e16:	e7 fb       	bst	r30, 7
    1e18:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>

00001e1c <__addsf3x>:
    1e1c:	e9 2f       	mov	r30, r25
    1e1e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_split3>
    1e22:	58 f3       	brcs	.-42     	; 0x1dfa <__addsf3+0xc>
    1e24:	ba 17       	cp	r27, r26
    1e26:	62 07       	cpc	r22, r18
    1e28:	73 07       	cpc	r23, r19
    1e2a:	84 07       	cpc	r24, r20
    1e2c:	95 07       	cpc	r25, r21
    1e2e:	20 f0       	brcs	.+8      	; 0x1e38 <__addsf3x+0x1c>
    1e30:	79 f4       	brne	.+30     	; 0x1e50 <__addsf3x+0x34>
    1e32:	a6 f5       	brtc	.+104    	; 0x1e9c <__addsf3x+0x80>
    1e34:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__fp_zero>
    1e38:	0e f4       	brtc	.+2      	; 0x1e3c <__addsf3x+0x20>
    1e3a:	e0 95       	com	r30
    1e3c:	0b 2e       	mov	r0, r27
    1e3e:	ba 2f       	mov	r27, r26
    1e40:	a0 2d       	mov	r26, r0
    1e42:	0b 01       	movw	r0, r22
    1e44:	b9 01       	movw	r22, r18
    1e46:	90 01       	movw	r18, r0
    1e48:	0c 01       	movw	r0, r24
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	a0 01       	movw	r20, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	ff 27       	eor	r31, r31
    1e52:	59 1b       	sub	r21, r25
    1e54:	99 f0       	breq	.+38     	; 0x1e7c <__addsf3x+0x60>
    1e56:	59 3f       	cpi	r21, 0xF9	; 249
    1e58:	50 f4       	brcc	.+20     	; 0x1e6e <__addsf3x+0x52>
    1e5a:	50 3e       	cpi	r21, 0xE0	; 224
    1e5c:	68 f1       	brcs	.+90     	; 0x1eb8 <__addsf3x+0x9c>
    1e5e:	1a 16       	cp	r1, r26
    1e60:	f0 40       	sbci	r31, 0x00	; 0
    1e62:	a2 2f       	mov	r26, r18
    1e64:	23 2f       	mov	r18, r19
    1e66:	34 2f       	mov	r19, r20
    1e68:	44 27       	eor	r20, r20
    1e6a:	58 5f       	subi	r21, 0xF8	; 248
    1e6c:	f3 cf       	rjmp	.-26     	; 0x1e54 <__addsf3x+0x38>
    1e6e:	46 95       	lsr	r20
    1e70:	37 95       	ror	r19
    1e72:	27 95       	ror	r18
    1e74:	a7 95       	ror	r26
    1e76:	f0 40       	sbci	r31, 0x00	; 0
    1e78:	53 95       	inc	r21
    1e7a:	c9 f7       	brne	.-14     	; 0x1e6e <__addsf3x+0x52>
    1e7c:	7e f4       	brtc	.+30     	; 0x1e9c <__addsf3x+0x80>
    1e7e:	1f 16       	cp	r1, r31
    1e80:	ba 0b       	sbc	r27, r26
    1e82:	62 0b       	sbc	r22, r18
    1e84:	73 0b       	sbc	r23, r19
    1e86:	84 0b       	sbc	r24, r20
    1e88:	ba f0       	brmi	.+46     	; 0x1eb8 <__addsf3x+0x9c>
    1e8a:	91 50       	subi	r25, 0x01	; 1
    1e8c:	a1 f0       	breq	.+40     	; 0x1eb6 <__addsf3x+0x9a>
    1e8e:	ff 0f       	add	r31, r31
    1e90:	bb 1f       	adc	r27, r27
    1e92:	66 1f       	adc	r22, r22
    1e94:	77 1f       	adc	r23, r23
    1e96:	88 1f       	adc	r24, r24
    1e98:	c2 f7       	brpl	.-16     	; 0x1e8a <__addsf3x+0x6e>
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <__addsf3x+0x9c>
    1e9c:	ba 0f       	add	r27, r26
    1e9e:	62 1f       	adc	r22, r18
    1ea0:	73 1f       	adc	r23, r19
    1ea2:	84 1f       	adc	r24, r20
    1ea4:	48 f4       	brcc	.+18     	; 0x1eb8 <__addsf3x+0x9c>
    1ea6:	87 95       	ror	r24
    1ea8:	77 95       	ror	r23
    1eaa:	67 95       	ror	r22
    1eac:	b7 95       	ror	r27
    1eae:	f7 95       	ror	r31
    1eb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <__addsf3x+0x9a>
    1eb4:	b0 cf       	rjmp	.-160    	; 0x1e16 <__addsf3+0x28>
    1eb6:	93 95       	inc	r25
    1eb8:	88 0f       	add	r24, r24
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <__addsf3x+0xa2>
    1ebc:	99 27       	eor	r25, r25
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	97 95       	ror	r25
    1ec2:	87 95       	ror	r24
    1ec4:	08 95       	ret

00001ec6 <__divsf3>:
    1ec6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__divsf3x>
    1eca:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_round>
    1ece:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__fp_pscB>
    1ed2:	58 f0       	brcs	.+22     	; 0x1eea <__divsf3+0x24>
    1ed4:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fp_pscA>
    1ed8:	40 f0       	brcs	.+16     	; 0x1eea <__divsf3+0x24>
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <__divsf3+0x20>
    1edc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ede:	29 f0       	breq	.+10     	; 0x1eea <__divsf3+0x24>
    1ee0:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    1ee4:	51 11       	cpse	r21, r1
    1ee6:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__fp_szero>
    1eea:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_nan>

00001eee <__divsf3x>:
    1eee:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_split3>
    1ef2:	68 f3       	brcs	.-38     	; 0x1ece <__divsf3+0x8>

00001ef4 <__divsf3_pse>:
    1ef4:	99 23       	and	r25, r25
    1ef6:	b1 f3       	breq	.-20     	; 0x1ee4 <__divsf3+0x1e>
    1ef8:	55 23       	and	r21, r21
    1efa:	91 f3       	breq	.-28     	; 0x1ee0 <__divsf3+0x1a>
    1efc:	95 1b       	sub	r25, r21
    1efe:	55 0b       	sbc	r21, r21
    1f00:	bb 27       	eor	r27, r27
    1f02:	aa 27       	eor	r26, r26
    1f04:	62 17       	cp	r22, r18
    1f06:	73 07       	cpc	r23, r19
    1f08:	84 07       	cpc	r24, r20
    1f0a:	38 f0       	brcs	.+14     	; 0x1f1a <__divsf3_pse+0x26>
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	44 1f       	adc	r20, r20
    1f16:	aa 1f       	adc	r26, r26
    1f18:	a9 f3       	breq	.-22     	; 0x1f04 <__divsf3_pse+0x10>
    1f1a:	35 d0       	rcall	.+106    	; 0x1f86 <__divsf3_pse+0x92>
    1f1c:	0e 2e       	mov	r0, r30
    1f1e:	3a f0       	brmi	.+14     	; 0x1f2e <__divsf3_pse+0x3a>
    1f20:	e0 e8       	ldi	r30, 0x80	; 128
    1f22:	32 d0       	rcall	.+100    	; 0x1f88 <__divsf3_pse+0x94>
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	50 40       	sbci	r21, 0x00	; 0
    1f28:	e6 95       	lsr	r30
    1f2a:	00 1c       	adc	r0, r0
    1f2c:	ca f7       	brpl	.-14     	; 0x1f20 <__divsf3_pse+0x2c>
    1f2e:	2b d0       	rcall	.+86     	; 0x1f86 <__divsf3_pse+0x92>
    1f30:	fe 2f       	mov	r31, r30
    1f32:	29 d0       	rcall	.+82     	; 0x1f86 <__divsf3_pse+0x92>
    1f34:	66 0f       	add	r22, r22
    1f36:	77 1f       	adc	r23, r23
    1f38:	88 1f       	adc	r24, r24
    1f3a:	bb 1f       	adc	r27, r27
    1f3c:	26 17       	cp	r18, r22
    1f3e:	37 07       	cpc	r19, r23
    1f40:	48 07       	cpc	r20, r24
    1f42:	ab 07       	cpc	r26, r27
    1f44:	b0 e8       	ldi	r27, 0x80	; 128
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <__divsf3_pse+0x56>
    1f48:	bb 0b       	sbc	r27, r27
    1f4a:	80 2d       	mov	r24, r0
    1f4c:	bf 01       	movw	r22, r30
    1f4e:	ff 27       	eor	r31, r31
    1f50:	93 58       	subi	r25, 0x83	; 131
    1f52:	5f 4f       	sbci	r21, 0xFF	; 255
    1f54:	3a f0       	brmi	.+14     	; 0x1f64 <__divsf3_pse+0x70>
    1f56:	9e 3f       	cpi	r25, 0xFE	; 254
    1f58:	51 05       	cpc	r21, r1
    1f5a:	78 f0       	brcs	.+30     	; 0x1f7a <__divsf3_pse+0x86>
    1f5c:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    1f60:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__fp_szero>
    1f64:	5f 3f       	cpi	r21, 0xFF	; 255
    1f66:	e4 f3       	brlt	.-8      	; 0x1f60 <__divsf3_pse+0x6c>
    1f68:	98 3e       	cpi	r25, 0xE8	; 232
    1f6a:	d4 f3       	brlt	.-12     	; 0x1f60 <__divsf3_pse+0x6c>
    1f6c:	86 95       	lsr	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	b7 95       	ror	r27
    1f74:	f7 95       	ror	r31
    1f76:	9f 5f       	subi	r25, 0xFF	; 255
    1f78:	c9 f7       	brne	.-14     	; 0x1f6c <__divsf3_pse+0x78>
    1f7a:	88 0f       	add	r24, r24
    1f7c:	91 1d       	adc	r25, r1
    1f7e:	96 95       	lsr	r25
    1f80:	87 95       	ror	r24
    1f82:	97 f9       	bld	r25, 7
    1f84:	08 95       	ret
    1f86:	e1 e0       	ldi	r30, 0x01	; 1
    1f88:	66 0f       	add	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	62 17       	cp	r22, r18
    1f92:	73 07       	cpc	r23, r19
    1f94:	84 07       	cpc	r24, r20
    1f96:	ba 07       	cpc	r27, r26
    1f98:	20 f0       	brcs	.+8      	; 0x1fa2 <__divsf3_pse+0xae>
    1f9a:	62 1b       	sub	r22, r18
    1f9c:	73 0b       	sbc	r23, r19
    1f9e:	84 0b       	sbc	r24, r20
    1fa0:	ba 0b       	sbc	r27, r26
    1fa2:	ee 1f       	adc	r30, r30
    1fa4:	88 f7       	brcc	.-30     	; 0x1f88 <__divsf3_pse+0x94>
    1fa6:	e0 95       	com	r30
    1fa8:	08 95       	ret

00001faa <__fixunssfsi>:
    1faa:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_splitA>
    1fae:	88 f0       	brcs	.+34     	; 0x1fd2 <__fixunssfsi+0x28>
    1fb0:	9f 57       	subi	r25, 0x7F	; 127
    1fb2:	98 f0       	brcs	.+38     	; 0x1fda <__fixunssfsi+0x30>
    1fb4:	b9 2f       	mov	r27, r25
    1fb6:	99 27       	eor	r25, r25
    1fb8:	b7 51       	subi	r27, 0x17	; 23
    1fba:	b0 f0       	brcs	.+44     	; 0x1fe8 <__fixunssfsi+0x3e>
    1fbc:	e1 f0       	breq	.+56     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fbe:	66 0f       	add	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	1a f0       	brmi	.+6      	; 0x1fce <__fixunssfsi+0x24>
    1fc8:	ba 95       	dec	r27
    1fca:	c9 f7       	brne	.-14     	; 0x1fbe <__fixunssfsi+0x14>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fce:	b1 30       	cpi	r27, 0x01	; 1
    1fd0:	91 f0       	breq	.+36     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fd2:	0e 94 8b 10 	call	0x2116	; 0x2116 <__fp_zero>
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	08 95       	ret
    1fda:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__fp_zero>
    1fde:	67 2f       	mov	r22, r23
    1fe0:	78 2f       	mov	r23, r24
    1fe2:	88 27       	eor	r24, r24
    1fe4:	b8 5f       	subi	r27, 0xF8	; 248
    1fe6:	39 f0       	breq	.+14     	; 0x1ff6 <__fixunssfsi+0x4c>
    1fe8:	b9 3f       	cpi	r27, 0xF9	; 249
    1fea:	cc f3       	brlt	.-14     	; 0x1fde <__fixunssfsi+0x34>
    1fec:	86 95       	lsr	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b3 95       	inc	r27
    1ff4:	d9 f7       	brne	.-10     	; 0x1fec <__fixunssfsi+0x42>
    1ff6:	3e f4       	brtc	.+14     	; 0x2006 <__fixunssfsi+0x5c>
    1ff8:	90 95       	com	r25
    1ffa:	80 95       	com	r24
    1ffc:	70 95       	com	r23
    1ffe:	61 95       	neg	r22
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	08 95       	ret

00002008 <__floatunsisf>:
    2008:	e8 94       	clt
    200a:	09 c0       	rjmp	.+18     	; 0x201e <__floatsisf+0x12>

0000200c <__floatsisf>:
    200c:	97 fb       	bst	r25, 7
    200e:	3e f4       	brtc	.+14     	; 0x201e <__floatsisf+0x12>
    2010:	90 95       	com	r25
    2012:	80 95       	com	r24
    2014:	70 95       	com	r23
    2016:	61 95       	neg	r22
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	99 23       	and	r25, r25
    2020:	a9 f0       	breq	.+42     	; 0x204c <__floatsisf+0x40>
    2022:	f9 2f       	mov	r31, r25
    2024:	96 e9       	ldi	r25, 0x96	; 150
    2026:	bb 27       	eor	r27, r27
    2028:	93 95       	inc	r25
    202a:	f6 95       	lsr	r31
    202c:	87 95       	ror	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b7 95       	ror	r27
    2034:	f1 11       	cpse	r31, r1
    2036:	f8 cf       	rjmp	.-16     	; 0x2028 <__floatsisf+0x1c>
    2038:	fa f4       	brpl	.+62     	; 0x2078 <__floatsisf+0x6c>
    203a:	bb 0f       	add	r27, r27
    203c:	11 f4       	brne	.+4      	; 0x2042 <__floatsisf+0x36>
    203e:	60 ff       	sbrs	r22, 0
    2040:	1b c0       	rjmp	.+54     	; 0x2078 <__floatsisf+0x6c>
    2042:	6f 5f       	subi	r22, 0xFF	; 255
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	16 c0       	rjmp	.+44     	; 0x2078 <__floatsisf+0x6c>
    204c:	88 23       	and	r24, r24
    204e:	11 f0       	breq	.+4      	; 0x2054 <__floatsisf+0x48>
    2050:	96 e9       	ldi	r25, 0x96	; 150
    2052:	11 c0       	rjmp	.+34     	; 0x2076 <__floatsisf+0x6a>
    2054:	77 23       	and	r23, r23
    2056:	21 f0       	breq	.+8      	; 0x2060 <__floatsisf+0x54>
    2058:	9e e8       	ldi	r25, 0x8E	; 142
    205a:	87 2f       	mov	r24, r23
    205c:	76 2f       	mov	r23, r22
    205e:	05 c0       	rjmp	.+10     	; 0x206a <__floatsisf+0x5e>
    2060:	66 23       	and	r22, r22
    2062:	71 f0       	breq	.+28     	; 0x2080 <__floatsisf+0x74>
    2064:	96 e8       	ldi	r25, 0x86	; 134
    2066:	86 2f       	mov	r24, r22
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	2a f0       	brmi	.+10     	; 0x2078 <__floatsisf+0x6c>
    206e:	9a 95       	dec	r25
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	88 1f       	adc	r24, r24
    2076:	da f7       	brpl	.-10     	; 0x206e <__floatsisf+0x62>
    2078:	88 0f       	add	r24, r24
    207a:	96 95       	lsr	r25
    207c:	87 95       	ror	r24
    207e:	97 f9       	bld	r25, 7
    2080:	08 95       	ret

00002082 <__fp_inf>:
    2082:	97 f9       	bld	r25, 7
    2084:	9f 67       	ori	r25, 0x7F	; 127
    2086:	80 e8       	ldi	r24, 0x80	; 128
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	08 95       	ret

0000208e <__fp_nan>:
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	80 ec       	ldi	r24, 0xC0	; 192
    2092:	08 95       	ret

00002094 <__fp_pscA>:
    2094:	00 24       	eor	r0, r0
    2096:	0a 94       	dec	r0
    2098:	16 16       	cp	r1, r22
    209a:	17 06       	cpc	r1, r23
    209c:	18 06       	cpc	r1, r24
    209e:	09 06       	cpc	r0, r25
    20a0:	08 95       	ret

000020a2 <__fp_pscB>:
    20a2:	00 24       	eor	r0, r0
    20a4:	0a 94       	dec	r0
    20a6:	12 16       	cp	r1, r18
    20a8:	13 06       	cpc	r1, r19
    20aa:	14 06       	cpc	r1, r20
    20ac:	05 06       	cpc	r0, r21
    20ae:	08 95       	ret

000020b0 <__fp_round>:
    20b0:	09 2e       	mov	r0, r25
    20b2:	03 94       	inc	r0
    20b4:	00 0c       	add	r0, r0
    20b6:	11 f4       	brne	.+4      	; 0x20bc <__fp_round+0xc>
    20b8:	88 23       	and	r24, r24
    20ba:	52 f0       	brmi	.+20     	; 0x20d0 <__fp_round+0x20>
    20bc:	bb 0f       	add	r27, r27
    20be:	40 f4       	brcc	.+16     	; 0x20d0 <__fp_round+0x20>
    20c0:	bf 2b       	or	r27, r31
    20c2:	11 f4       	brne	.+4      	; 0x20c8 <__fp_round+0x18>
    20c4:	60 ff       	sbrs	r22, 0
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <__fp_round+0x20>
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__fp_split3>:
    20d2:	57 fd       	sbrc	r21, 7
    20d4:	90 58       	subi	r25, 0x80	; 128
    20d6:	44 0f       	add	r20, r20
    20d8:	55 1f       	adc	r21, r21
    20da:	59 f0       	breq	.+22     	; 0x20f2 <__fp_splitA+0x10>
    20dc:	5f 3f       	cpi	r21, 0xFF	; 255
    20de:	71 f0       	breq	.+28     	; 0x20fc <__fp_splitA+0x1a>
    20e0:	47 95       	ror	r20

000020e2 <__fp_splitA>:
    20e2:	88 0f       	add	r24, r24
    20e4:	97 fb       	bst	r25, 7
    20e6:	99 1f       	adc	r25, r25
    20e8:	61 f0       	breq	.+24     	; 0x2102 <__fp_splitA+0x20>
    20ea:	9f 3f       	cpi	r25, 0xFF	; 255
    20ec:	79 f0       	breq	.+30     	; 0x210c <__fp_splitA+0x2a>
    20ee:	87 95       	ror	r24
    20f0:	08 95       	ret
    20f2:	12 16       	cp	r1, r18
    20f4:	13 06       	cpc	r1, r19
    20f6:	14 06       	cpc	r1, r20
    20f8:	55 1f       	adc	r21, r21
    20fa:	f2 cf       	rjmp	.-28     	; 0x20e0 <__fp_split3+0xe>
    20fc:	46 95       	lsr	r20
    20fe:	f1 df       	rcall	.-30     	; 0x20e2 <__fp_splitA>
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <__fp_splitA+0x30>
    2102:	16 16       	cp	r1, r22
    2104:	17 06       	cpc	r1, r23
    2106:	18 06       	cpc	r1, r24
    2108:	99 1f       	adc	r25, r25
    210a:	f1 cf       	rjmp	.-30     	; 0x20ee <__fp_splitA+0xc>
    210c:	86 95       	lsr	r24
    210e:	71 05       	cpc	r23, r1
    2110:	61 05       	cpc	r22, r1
    2112:	08 94       	sec
    2114:	08 95       	ret

00002116 <__fp_zero>:
    2116:	e8 94       	clt

00002118 <__fp_szero>:
    2118:	bb 27       	eor	r27, r27
    211a:	66 27       	eor	r22, r22
    211c:	77 27       	eor	r23, r23
    211e:	cb 01       	movw	r24, r22
    2120:	97 f9       	bld	r25, 7
    2122:	08 95       	ret

00002124 <__mulsf3>:
    2124:	0e 94 a5 10 	call	0x214a	; 0x214a <__mulsf3x>
    2128:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_round>
    212c:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fp_pscA>
    2130:	38 f0       	brcs	.+14     	; 0x2140 <__mulsf3+0x1c>
    2132:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__fp_pscB>
    2136:	20 f0       	brcs	.+8      	; 0x2140 <__mulsf3+0x1c>
    2138:	95 23       	and	r25, r21
    213a:	11 f0       	breq	.+4      	; 0x2140 <__mulsf3+0x1c>
    213c:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    2140:	0c 94 47 10 	jmp	0x208e	; 0x208e <__fp_nan>
    2144:	11 24       	eor	r1, r1
    2146:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__fp_szero>

0000214a <__mulsf3x>:
    214a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_split3>
    214e:	70 f3       	brcs	.-36     	; 0x212c <__mulsf3+0x8>

00002150 <__mulsf3_pse>:
    2150:	95 9f       	mul	r25, r21
    2152:	c1 f3       	breq	.-16     	; 0x2144 <__mulsf3+0x20>
    2154:	95 0f       	add	r25, r21
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	55 1f       	adc	r21, r21
    215a:	62 9f       	mul	r22, r18
    215c:	f0 01       	movw	r30, r0
    215e:	72 9f       	mul	r23, r18
    2160:	bb 27       	eor	r27, r27
    2162:	f0 0d       	add	r31, r0
    2164:	b1 1d       	adc	r27, r1
    2166:	63 9f       	mul	r22, r19
    2168:	aa 27       	eor	r26, r26
    216a:	f0 0d       	add	r31, r0
    216c:	b1 1d       	adc	r27, r1
    216e:	aa 1f       	adc	r26, r26
    2170:	64 9f       	mul	r22, r20
    2172:	66 27       	eor	r22, r22
    2174:	b0 0d       	add	r27, r0
    2176:	a1 1d       	adc	r26, r1
    2178:	66 1f       	adc	r22, r22
    217a:	82 9f       	mul	r24, r18
    217c:	22 27       	eor	r18, r18
    217e:	b0 0d       	add	r27, r0
    2180:	a1 1d       	adc	r26, r1
    2182:	62 1f       	adc	r22, r18
    2184:	73 9f       	mul	r23, r19
    2186:	b0 0d       	add	r27, r0
    2188:	a1 1d       	adc	r26, r1
    218a:	62 1f       	adc	r22, r18
    218c:	83 9f       	mul	r24, r19
    218e:	a0 0d       	add	r26, r0
    2190:	61 1d       	adc	r22, r1
    2192:	22 1f       	adc	r18, r18
    2194:	74 9f       	mul	r23, r20
    2196:	33 27       	eor	r19, r19
    2198:	a0 0d       	add	r26, r0
    219a:	61 1d       	adc	r22, r1
    219c:	23 1f       	adc	r18, r19
    219e:	84 9f       	mul	r24, r20
    21a0:	60 0d       	add	r22, r0
    21a2:	21 1d       	adc	r18, r1
    21a4:	82 2f       	mov	r24, r18
    21a6:	76 2f       	mov	r23, r22
    21a8:	6a 2f       	mov	r22, r26
    21aa:	11 24       	eor	r1, r1
    21ac:	9f 57       	subi	r25, 0x7F	; 127
    21ae:	50 40       	sbci	r21, 0x00	; 0
    21b0:	9a f0       	brmi	.+38     	; 0x21d8 <__mulsf3_pse+0x88>
    21b2:	f1 f0       	breq	.+60     	; 0x21f0 <__mulsf3_pse+0xa0>
    21b4:	88 23       	and	r24, r24
    21b6:	4a f0       	brmi	.+18     	; 0x21ca <__mulsf3_pse+0x7a>
    21b8:	ee 0f       	add	r30, r30
    21ba:	ff 1f       	adc	r31, r31
    21bc:	bb 1f       	adc	r27, r27
    21be:	66 1f       	adc	r22, r22
    21c0:	77 1f       	adc	r23, r23
    21c2:	88 1f       	adc	r24, r24
    21c4:	91 50       	subi	r25, 0x01	; 1
    21c6:	50 40       	sbci	r21, 0x00	; 0
    21c8:	a9 f7       	brne	.-22     	; 0x21b4 <__mulsf3_pse+0x64>
    21ca:	9e 3f       	cpi	r25, 0xFE	; 254
    21cc:	51 05       	cpc	r21, r1
    21ce:	80 f0       	brcs	.+32     	; 0x21f0 <__mulsf3_pse+0xa0>
    21d0:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__fp_inf>
    21d4:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__fp_szero>
    21d8:	5f 3f       	cpi	r21, 0xFF	; 255
    21da:	e4 f3       	brlt	.-8      	; 0x21d4 <__mulsf3_pse+0x84>
    21dc:	98 3e       	cpi	r25, 0xE8	; 232
    21de:	d4 f3       	brlt	.-12     	; 0x21d4 <__mulsf3_pse+0x84>
    21e0:	86 95       	lsr	r24
    21e2:	77 95       	ror	r23
    21e4:	67 95       	ror	r22
    21e6:	b7 95       	ror	r27
    21e8:	f7 95       	ror	r31
    21ea:	e7 95       	ror	r30
    21ec:	9f 5f       	subi	r25, 0xFF	; 255
    21ee:	c1 f7       	brne	.-16     	; 0x21e0 <__mulsf3_pse+0x90>
    21f0:	fe 2b       	or	r31, r30
    21f2:	88 0f       	add	r24, r24
    21f4:	91 1d       	adc	r25, r1
    21f6:	96 95       	lsr	r25
    21f8:	87 95       	ror	r24
    21fa:	97 f9       	bld	r25, 7
    21fc:	08 95       	ret

000021fe <__tablejump2__>:
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	05 90       	lpm	r0, Z+
    2204:	f4 91       	lpm	r31, Z
    2206:	e0 2d       	mov	r30, r0
    2208:	09 94       	ijmp

0000220a <do_random>:
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	ec 01       	movw	r28, r24
    2220:	68 81       	ld	r22, Y
    2222:	79 81       	ldd	r23, Y+1	; 0x01
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	9b 81       	ldd	r25, Y+3	; 0x03
    2228:	61 15       	cp	r22, r1
    222a:	71 05       	cpc	r23, r1
    222c:	81 05       	cpc	r24, r1
    222e:	91 05       	cpc	r25, r1
    2230:	21 f4       	brne	.+8      	; 0x223a <do_random+0x30>
    2232:	64 e2       	ldi	r22, 0x24	; 36
    2234:	79 ed       	ldi	r23, 0xD9	; 217
    2236:	8b e5       	ldi	r24, 0x5B	; 91
    2238:	97 e0       	ldi	r25, 0x07	; 7
    223a:	2d e1       	ldi	r18, 0x1D	; 29
    223c:	33 ef       	ldi	r19, 0xF3	; 243
    223e:	41 e0       	ldi	r20, 0x01	; 1
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divmodsi4>
    2246:	49 01       	movw	r8, r18
    2248:	5a 01       	movw	r10, r20
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	a7 ea       	ldi	r26, 0xA7	; 167
    2250:	b1 e4       	ldi	r27, 0x41	; 65
    2252:	0e 94 80 11 	call	0x2300	; 0x2300 <__muluhisi3>
    2256:	6b 01       	movw	r12, r22
    2258:	7c 01       	movw	r14, r24
    225a:	ac ee       	ldi	r26, 0xEC	; 236
    225c:	b4 ef       	ldi	r27, 0xF4	; 244
    225e:	a5 01       	movw	r20, r10
    2260:	94 01       	movw	r18, r8
    2262:	0e 94 8e 11 	call	0x231c	; 0x231c <__mulohisi3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8c 0d       	add	r24, r12
    226c:	9d 1d       	adc	r25, r13
    226e:	ae 1d       	adc	r26, r14
    2270:	bf 1d       	adc	r27, r15
    2272:	b7 ff       	sbrs	r27, 7
    2274:	03 c0       	rjmp	.+6      	; 0x227c <do_random+0x72>
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	a1 09       	sbc	r26, r1
    227a:	b0 48       	sbci	r27, 0x80	; 128
    227c:	88 83       	st	Y, r24
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	aa 83       	std	Y+2, r26	; 0x02
    2282:	bb 83       	std	Y+3, r27	; 0x03
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	9f 77       	andi	r25, 0x7F	; 127
    228a:	df 91       	pop	r29
    228c:	cf 91       	pop	r28
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	08 95       	ret

000022a0 <random_r>:
    22a0:	0e 94 05 11 	call	0x220a	; 0x220a <do_random>
    22a4:	08 95       	ret

000022a6 <random>:
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	0e 94 05 11 	call	0x220a	; 0x220a <do_random>
    22ae:	08 95       	ret

000022b0 <srandom>:
    22b0:	60 93 00 01 	sts	0x0100, r22
    22b4:	70 93 01 01 	sts	0x0101, r23
    22b8:	80 93 02 01 	sts	0x0102, r24
    22bc:	90 93 03 01 	sts	0x0103, r25
    22c0:	08 95       	ret

000022c2 <__divmodsi4>:
    22c2:	05 2e       	mov	r0, r21
    22c4:	97 fb       	bst	r25, 7
    22c6:	1e f4       	brtc	.+6      	; 0x22ce <__divmodsi4+0xc>
    22c8:	00 94       	com	r0
    22ca:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__negsi2>
    22ce:	57 fd       	sbrc	r21, 7
    22d0:	07 d0       	rcall	.+14     	; 0x22e0 <__divmodsi4_neg2>
    22d2:	0e 94 93 11 	call	0x2326	; 0x2326 <__udivmodsi4>
    22d6:	07 fc       	sbrc	r0, 7
    22d8:	03 d0       	rcall	.+6      	; 0x22e0 <__divmodsi4_neg2>
    22da:	4e f4       	brtc	.+18     	; 0x22ee <__divmodsi4_exit>
    22dc:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__negsi2>

000022e0 <__divmodsi4_neg2>:
    22e0:	50 95       	com	r21
    22e2:	40 95       	com	r20
    22e4:	30 95       	com	r19
    22e6:	21 95       	neg	r18
    22e8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ea:	4f 4f       	sbci	r20, 0xFF	; 255
    22ec:	5f 4f       	sbci	r21, 0xFF	; 255

000022ee <__divmodsi4_exit>:
    22ee:	08 95       	ret

000022f0 <__negsi2>:
    22f0:	90 95       	com	r25
    22f2:	80 95       	com	r24
    22f4:	70 95       	com	r23
    22f6:	61 95       	neg	r22
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	8f 4f       	sbci	r24, 0xFF	; 255
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	08 95       	ret

00002300 <__muluhisi3>:
    2300:	0e 94 b5 11 	call	0x236a	; 0x236a <__umulhisi3>
    2304:	a5 9f       	mul	r26, r21
    2306:	90 0d       	add	r25, r0
    2308:	b4 9f       	mul	r27, r20
    230a:	90 0d       	add	r25, r0
    230c:	a4 9f       	mul	r26, r20
    230e:	80 0d       	add	r24, r0
    2310:	91 1d       	adc	r25, r1
    2312:	11 24       	eor	r1, r1
    2314:	08 95       	ret

00002316 <__mulshisi3>:
    2316:	b7 ff       	sbrs	r27, 7
    2318:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__muluhisi3>

0000231c <__mulohisi3>:
    231c:	0e 94 80 11 	call	0x2300	; 0x2300 <__muluhisi3>
    2320:	82 1b       	sub	r24, r18
    2322:	93 0b       	sbc	r25, r19
    2324:	08 95       	ret

00002326 <__udivmodsi4>:
    2326:	a1 e2       	ldi	r26, 0x21	; 33
    2328:	1a 2e       	mov	r1, r26
    232a:	aa 1b       	sub	r26, r26
    232c:	bb 1b       	sub	r27, r27
    232e:	fd 01       	movw	r30, r26
    2330:	0d c0       	rjmp	.+26     	; 0x234c <__udivmodsi4_ep>

00002332 <__udivmodsi4_loop>:
    2332:	aa 1f       	adc	r26, r26
    2334:	bb 1f       	adc	r27, r27
    2336:	ee 1f       	adc	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	a2 17       	cp	r26, r18
    233c:	b3 07       	cpc	r27, r19
    233e:	e4 07       	cpc	r30, r20
    2340:	f5 07       	cpc	r31, r21
    2342:	20 f0       	brcs	.+8      	; 0x234c <__udivmodsi4_ep>
    2344:	a2 1b       	sub	r26, r18
    2346:	b3 0b       	sbc	r27, r19
    2348:	e4 0b       	sbc	r30, r20
    234a:	f5 0b       	sbc	r31, r21

0000234c <__udivmodsi4_ep>:
    234c:	66 1f       	adc	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	1a 94       	dec	r1
    2356:	69 f7       	brne	.-38     	; 0x2332 <__udivmodsi4_loop>
    2358:	60 95       	com	r22
    235a:	70 95       	com	r23
    235c:	80 95       	com	r24
    235e:	90 95       	com	r25
    2360:	9b 01       	movw	r18, r22
    2362:	ac 01       	movw	r20, r24
    2364:	bd 01       	movw	r22, r26
    2366:	cf 01       	movw	r24, r30
    2368:	08 95       	ret

0000236a <__umulhisi3>:
    236a:	a2 9f       	mul	r26, r18
    236c:	b0 01       	movw	r22, r0
    236e:	b3 9f       	mul	r27, r19
    2370:	c0 01       	movw	r24, r0
    2372:	a3 9f       	mul	r26, r19
    2374:	70 0d       	add	r23, r0
    2376:	81 1d       	adc	r24, r1
    2378:	11 24       	eor	r1, r1
    237a:	91 1d       	adc	r25, r1
    237c:	b2 9f       	mul	r27, r18
    237e:	70 0d       	add	r23, r0
    2380:	81 1d       	adc	r24, r1
    2382:	11 24       	eor	r1, r1
    2384:	91 1d       	adc	r25, r1
    2386:	08 95       	ret

00002388 <_exit>:
    2388:	f8 94       	cli

0000238a <__stop_program>:
    238a:	ff cf       	rjmp	.-2      	; 0x238a <__stop_program>
