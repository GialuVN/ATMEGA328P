
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000c66  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c4  00800126  00800126  00000d20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000797f  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001703  00000000  00000000  00008a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fb  00000000  00000000  0000a172  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a50  00000000  00000000  0000b570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c0d  00000000  00000000  0000bfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d03  00000000  00000000  0000dbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  000118d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_1>
   8:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_2>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_7>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_16>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_18>
  4c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_19>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
  69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
  7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
  91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
  a5:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

000000b0 <__ctors_start>:
  b0:	8f 02       	muls	r24, r31
  b2:	ff 02       	muls	r31, r31

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e6       	ldi	r30, 0x66	; 102
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 32       	cpi	r26, 0x26	; 38
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 3e       	cpi	r26, 0xEA	; 234
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	ca e5       	ldi	r28, 0x5A	; 90
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
  ee:	21 97       	sbiw	r28, 0x01	; 1
  f0:	fe 01       	movw	r30, r28
  f2:	0e 94 2b 06 	call	0xc56	; 0xc56 <__tablejump2__>
  f6:	c8 35       	cpi	r28, 0x58	; 88
  f8:	d1 07       	cpc	r29, r17
  fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
  fc:	0e 94 0b 03 	call	0x616	; 0x616 <main>
 100:	0c 94 31 06 	jmp	0xc62	; 0xc62 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <setup>:


uint8_t temp[16];
uint8_t _crc;

void setup() {
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 10c:	26 e0       	ldi	r18, 0x06	; 6
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	55 e2       	ldi	r21, 0x25	; 37
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	87 e3       	ldi	r24, 0x37	; 55
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN14HardwareSerial5beginEmh>
 11e:	c7 e2       	ldi	r28, 0x27	; 39
 120:	d1 e0       	ldi	r29, 0x01	; 1
 122:	fe 01       	movw	r30, r28
 124:	84 e6       	ldi	r24, 0x64	; 100
  // initialize digital pin 13 as an output.
  Serial.begin(9600);
  
 // pinMode(13, OUTPUT);
 
 for (uint8_t i = 0;i<15;i++) temp[i] = i+100;
 126:	81 93       	st	Z+, r24
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	83 37       	cpi	r24, 0x73	; 115
 12c:	e1 f7       	brne	.-8      	; 0x126 <setup+0x1e>
 12e:	46 e3       	ldi	r20, 0x36	; 54
 130:	51 e0       	ldi	r21, 0x01	; 1
 132:	e7 e2       	ldi	r30, 0x27	; 39
 134:	f1 e0       	ldi	r31, 0x01	; 1
 136:	20 e0       	ldi	r18, 0x00	; 0
 _crc = 0;
 
 for (uint8_t i = 0;i<15;i++) _crc = _crc_ibutton_update(_crc,temp[i]);
 138:	91 91       	ld	r25, Z+
		"	brcc	2f" "\n\t"
		"	eor	%0, %2" "\n\t"
		"2:	dec	%1" "\n\t"
		"	brne	1b" "\n\t"
		: "=r" (__crc), "=d" (__i), "=d" (__pattern)
		: "0" (__crc), "r" (__data));
 13a:	82 2f       	mov	r24, r18
 13c:	89 27       	eor	r24, r25
 13e:	98 e0       	ldi	r25, 0x08	; 8
 140:	2c e8       	ldi	r18, 0x8C	; 140
 142:	86 95       	lsr	r24
 144:	08 f4       	brcc	.+2      	; 0x148 <setup+0x40>
 146:	82 27       	eor	r24, r18
 148:	9a 95       	dec	r25
 14a:	d9 f7       	brne	.-10     	; 0x142 <setup+0x3a>
 14c:	28 2f       	mov	r18, r24
 14e:	e4 17       	cp	r30, r20
 150:	f5 07       	cpc	r31, r21
 152:	91 f7       	brne	.-28     	; 0x138 <setup+0x30>
 154:	80 93 26 01 	sts	0x0126, r24
 
 temp[15] = _crc;
 158:	80 93 36 01 	sts	0x0136, r24
 
 Serial.print("CRC:  ");
 15c:	69 e0       	ldi	r22, 0x09	; 9
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	87 e3       	ldi	r24, 0x37	; 55
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 49 03 	call	0x692	; 0x692 <_ZN5Print5printEPKc>
 Serial.print(_crc);
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	60 91 26 01 	lds	r22, 0x0126
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5Print5printEhi>
 178:	47 e3       	ldi	r20, 0x37	; 55
 17a:	51 e0       	ldi	r21, 0x01	; 1
 17c:	20 e0       	ldi	r18, 0x00	; 0
 
 _crc = 0;
 for (uint8_t i = 0;i<16;i++) _crc = _crc_ibutton_update(_crc,temp[i]);
 17e:	99 91       	ld	r25, Y+
 180:	82 2f       	mov	r24, r18
 182:	89 27       	eor	r24, r25
 184:	98 e0       	ldi	r25, 0x08	; 8
 186:	2c e8       	ldi	r18, 0x8C	; 140
 188:	86 95       	lsr	r24
 18a:	08 f4       	brcc	.+2      	; 0x18e <setup+0x86>
 18c:	82 27       	eor	r24, r18
 18e:	9a 95       	dec	r25
 190:	d9 f7       	brne	.-10     	; 0x188 <setup+0x80>
 192:	28 2f       	mov	r18, r24
 194:	c4 17       	cp	r28, r20
 196:	d5 07       	cpc	r29, r21
 198:	91 f7       	brne	.-28     	; 0x17e <setup+0x76>
 19a:	80 93 26 01 	sts	0x0126, r24
 
 Serial.print("rec CRC:  ");
 19e:	65 e0       	ldi	r22, 0x05	; 5
 1a0:	71 e0       	ldi	r23, 0x01	; 1
 1a2:	87 e3       	ldi	r24, 0x37	; 55
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 49 03 	call	0x692	; 0x692 <_ZN5Print5printEPKc>
 Serial.print(_crc);
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	60 91 26 01 	lds	r22, 0x0126
 1b2:	87 e3       	ldi	r24, 0x37	; 55
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5Print5printEhi>
 
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <loop>:
void loop() {
	
	
//	Serial.print(10);
 // digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(1000);              // wait for a second
 1c0:	68 ee       	ldi	r22, 0xE8	; 232
 1c2:	73 e0       	ldi	r23, 0x03	; 3
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 42 05 	call	0xa84	; 0xa84 <delay>
 1cc:	08 95       	ret

000001ce <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1ce:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1d0:	91 8d       	ldd	r25, Z+25	; 0x19
 1d2:	22 8d       	ldd	r18, Z+26	; 0x1a
 1d4:	89 2f       	mov	r24, r25
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	80 5c       	subi	r24, 0xC0	; 192
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	82 1b       	sub	r24, r18
 1de:	91 09       	sbc	r25, r1
}
 1e0:	8f 73       	andi	r24, 0x3F	; 63
 1e2:	99 27       	eor	r25, r25
 1e4:	08 95       	ret

000001e6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 1e6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 1e8:	91 8d       	ldd	r25, Z+25	; 0x19
 1ea:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ec:	98 17       	cp	r25, r24
 1ee:	31 f0       	breq	.+12     	; 0x1fc <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 1f0:	82 8d       	ldd	r24, Z+26	; 0x1a
 1f2:	e8 0f       	add	r30, r24
 1f4:	f1 1d       	adc	r31, r1
 1f6:	85 8d       	ldd	r24, Z+29	; 0x1d
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 200:	08 95       	ret

00000202 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 202:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 204:	91 8d       	ldd	r25, Z+25	; 0x19
 206:	82 8d       	ldd	r24, Z+26	; 0x1a
 208:	98 17       	cp	r25, r24
 20a:	61 f0       	breq	.+24     	; 0x224 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 20c:	82 8d       	ldd	r24, Z+26	; 0x1a
 20e:	df 01       	movw	r26, r30
 210:	a8 0f       	add	r26, r24
 212:	b1 1d       	adc	r27, r1
 214:	5d 96       	adiw	r26, 0x1d	; 29
 216:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 218:	92 8d       	ldd	r25, Z+26	; 0x1a
 21a:	9f 5f       	subi	r25, 0xFF	; 255
 21c:	9f 73       	andi	r25, 0x3F	; 63
 21e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 228:	08 95       	ret

0000022a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 22a:	85 e8       	ldi	r24, 0x85	; 133
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	89 2b       	or	r24, r25
 230:	49 f0       	breq	.+18     	; 0x244 <_Z14serialEventRunv+0x1a>
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	89 2b       	or	r24, r25
 238:	29 f0       	breq	.+10     	; 0x244 <_Z14serialEventRunv+0x1a>
 23a:	0e 94 85 02 	call	0x50a	; 0x50a <_Z17Serial0_availablev>
 23e:	81 11       	cpse	r24, r1
 240:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 244:	08 95       	ret

00000246 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 246:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 248:	84 8d       	ldd	r24, Z+28	; 0x1c
 24a:	df 01       	movw	r26, r30
 24c:	a8 0f       	add	r26, r24
 24e:	b1 1d       	adc	r27, r1
 250:	a3 5a       	subi	r26, 0xA3	; 163
 252:	bf 4f       	sbci	r27, 0xFF	; 255
 254:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 256:	24 8d       	ldd	r18, Z+28	; 0x1c
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	2f 73       	andi	r18, 0x3F	; 63
 260:	30 78       	andi	r19, 0x80	; 128
 262:	33 23       	and	r19, r19
 264:	34 f4       	brge	.+12     	; 0x272 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 266:	21 50       	subi	r18, 0x01	; 1
 268:	31 09       	sbc	r19, r1
 26a:	20 6c       	ori	r18, 0xC0	; 192
 26c:	3f 6f       	ori	r19, 0xFF	; 255
 26e:	2f 5f       	subi	r18, 0xFF	; 255
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 274:	a6 89       	ldd	r26, Z+22	; 0x16
 276:	b7 89       	ldd	r27, Z+23	; 0x17
 278:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 27a:	a0 89       	ldd	r26, Z+16	; 0x10
 27c:	b1 89       	ldd	r27, Z+17	; 0x11
 27e:	8c 91       	ld	r24, X
 280:	80 64       	ori	r24, 0x40	; 64
 282:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 284:	93 8d       	ldd	r25, Z+27	; 0x1b
 286:	84 8d       	ldd	r24, Z+28	; 0x1c
 288:	98 13       	cpse	r25, r24
 28a:	06 c0       	rjmp	.+12     	; 0x298 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 28c:	02 88       	ldd	r0, Z+18	; 0x12
 28e:	f3 89       	ldd	r31, Z+19	; 0x13
 290:	e0 2d       	mov	r30, r0
 292:	80 81       	ld	r24, Z
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 2a0:	88 8d       	ldd	r24, Y+24	; 0x18
 2a2:	81 11       	cpse	r24, r1
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <_ZN14HardwareSerial5flushEv+0x2a>
 2a6:	18 c0       	rjmp	.+48     	; 0x2d8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	07 fc       	sbrc	r0, 7
 2ac:	0d c0       	rjmp	.+26     	; 0x2c8 <_ZN14HardwareSerial5flushEv+0x2e>
 2ae:	90 81       	ld	r25, Z
 2b0:	95 ff       	sbrs	r25, 5
 2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 2b4:	a8 89       	ldd	r26, Y+16	; 0x10
 2b6:	b9 89       	ldd	r27, Y+17	; 0x11
 2b8:	8c 91       	ld	r24, X
 2ba:	85 ff       	sbrs	r24, 5
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 23 01 	call	0x246	; 0x246 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 2c4:	ea 89       	ldd	r30, Y+18	; 0x12
 2c6:	fb 89       	ldd	r31, Y+19	; 0x13
 2c8:	90 81       	ld	r25, Z
 2ca:	95 fd       	sbrc	r25, 5
 2cc:	ed cf       	rjmp	.-38     	; 0x2a8 <_ZN14HardwareSerial5flushEv+0xe>
 2ce:	a8 89       	ldd	r26, Y+16	; 0x10
 2d0:	b9 89       	ldd	r27, Y+17	; 0x11
 2d2:	8c 91       	ld	r24, X
 2d4:	86 ff       	sbrs	r24, 6
 2d6:	e8 cf       	rjmp	.-48     	; 0x2a8 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	fc 01       	movw	r30, r24
  _written = true;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2ec:	93 8d       	ldd	r25, Z+27	; 0x1b
 2ee:	84 8d       	ldd	r24, Z+28	; 0x1c
 2f0:	98 13       	cpse	r25, r24
 2f2:	22 c0       	rjmp	.+68     	; 0x338 <_ZN14HardwareSerial5writeEh+0x5a>
 2f4:	a0 89       	ldd	r26, Z+16	; 0x10
 2f6:	b1 89       	ldd	r27, Z+17	; 0x11
 2f8:	8c 91       	ld	r24, X
 2fa:	85 fd       	sbrc	r24, 5
 2fc:	2f c0       	rjmp	.+94     	; 0x35c <_ZN14HardwareSerial5writeEh+0x7e>
 2fe:	1c c0       	rjmp	.+56     	; 0x338 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	07 fc       	sbrc	r0, 7
 304:	08 c0       	rjmp	.+16     	; 0x316 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 306:	e8 89       	ldd	r30, Y+16	; 0x10
 308:	f9 89       	ldd	r31, Y+17	; 0x11
 30a:	80 81       	ld	r24, Z
 30c:	85 ff       	sbrs	r24, 5
 30e:	03 c0       	rjmp	.+6      	; 0x316 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
 310:	ce 01       	movw	r24, r28
 312:	0e 94 23 01 	call	0x246	; 0x246 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 316:	9c 8d       	ldd	r25, Y+28	; 0x1c
 318:	09 17       	cp	r16, r25
 31a:	91 f3       	breq	.-28     	; 0x300 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 31e:	fe 01       	movw	r30, r28
 320:	e8 0f       	add	r30, r24
 322:	f1 1d       	adc	r31, r1
 324:	e3 5a       	subi	r30, 0xA3	; 163
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	10 83       	st	Z, r17
  _tx_buffer_head = i;
 32a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 32c:	ea 89       	ldd	r30, Y+18	; 0x12
 32e:	fb 89       	ldd	r31, Y+19	; 0x13
 330:	80 81       	ld	r24, Z
 332:	80 62       	ori	r24, 0x20	; 32
 334:	80 83       	st	Z, r24
  
  return 1;
 336:	1b c0       	rjmp	.+54     	; 0x36e <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 338:	23 8d       	ldd	r18, Z+27	; 0x1b
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	2f 73       	andi	r18, 0x3F	; 63
 342:	30 78       	andi	r19, 0x80	; 128
 344:	33 23       	and	r19, r19
 346:	34 f4       	brge	.+12     	; 0x354 <_ZN14HardwareSerial5writeEh+0x76>
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	31 09       	sbc	r19, r1
 34c:	20 6c       	ori	r18, 0xC0	; 192
 34e:	3f 6f       	ori	r19, 0xFF	; 255
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	16 2f       	mov	r17, r22
 356:	ef 01       	movw	r28, r30
 358:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 35a:	dd cf       	rjmp	.-70     	; 0x316 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 35c:	a6 89       	ldd	r26, Z+22	; 0x16
 35e:	b7 89       	ldd	r27, Z+23	; 0x17
 360:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
 362:	00 88       	ldd	r0, Z+16	; 0x10
 364:	f1 89       	ldd	r31, Z+17	; 0x11
 366:	e0 2d       	mov	r30, r0
 368:	80 81       	ld	r24, Z
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	08 95       	ret

0000037c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
 390:	6a 01       	movw	r12, r20
 392:	7b 01       	movw	r14, r22
 394:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 396:	e8 89       	ldd	r30, Y+16	; 0x10
 398:	f9 89       	ldd	r31, Y+17	; 0x11
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 39e:	41 15       	cp	r20, r1
 3a0:	51 4e       	sbci	r21, 0xE1	; 225
 3a2:	61 05       	cpc	r22, r1
 3a4:	71 05       	cpc	r23, r1
 3a6:	b1 f0       	breq	.+44     	; 0x3d4 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	79 e0       	ldi	r23, 0x09	; 9
 3ac:	8d e3       	ldi	r24, 0x3D	; 61
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	a7 01       	movw	r20, r14
 3b2:	96 01       	movw	r18, r12
 3b4:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodsi4>
 3b8:	89 01       	movw	r16, r18
 3ba:	9a 01       	movw	r18, r20
 3bc:	01 50       	subi	r16, 0x01	; 1
 3be:	11 09       	sbc	r17, r1
 3c0:	21 09       	sbc	r18, r1
 3c2:	31 09       	sbc	r19, r1
 3c4:	36 95       	lsr	r19
 3c6:	27 95       	ror	r18
 3c8:	17 95       	ror	r17
 3ca:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 3cc:	01 15       	cp	r16, r1
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	18 07       	cpc	r17, r24
 3d2:	a8 f0       	brcs	.+42     	; 0x3fe <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
 3d4:	e8 89       	ldd	r30, Y+16	; 0x10
 3d6:	f9 89       	ldd	r31, Y+17	; 0x11
 3d8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3da:	60 e8       	ldi	r22, 0x80	; 128
 3dc:	74 e8       	ldi	r23, 0x84	; 132
 3de:	8e e1       	ldi	r24, 0x1E	; 30
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	a7 01       	movw	r20, r14
 3e4:	96 01       	movw	r18, r12
 3e6:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodsi4>
 3ea:	da 01       	movw	r26, r20
 3ec:	c9 01       	movw	r24, r18
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	a1 09       	sbc	r26, r1
 3f2:	b1 09       	sbc	r27, r1
 3f4:	b6 95       	lsr	r27
 3f6:	a7 95       	ror	r26
 3f8:	97 95       	ror	r25
 3fa:	87 95       	ror	r24
 3fc:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3fe:	ec 85       	ldd	r30, Y+12	; 0x0c
 400:	fd 85       	ldd	r31, Y+13	; 0x0d
 402:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
 404:	ee 85       	ldd	r30, Y+14	; 0x0e
 406:	ff 85       	ldd	r31, Y+15	; 0x0f
 408:	00 83       	st	Z, r16

  _written = false;
 40a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 40c:	ec 89       	ldd	r30, Y+20	; 0x14
 40e:	fd 89       	ldd	r31, Y+21	; 0x15
 410:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
 412:	ea 89       	ldd	r30, Y+18	; 0x12
 414:	fb 89       	ldd	r31, Y+19	; 0x13
 416:	80 81       	ld	r24, Z
 418:	80 61       	ori	r24, 0x10	; 16
 41a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 41c:	ea 89       	ldd	r30, Y+18	; 0x12
 41e:	fb 89       	ldd	r31, Y+19	; 0x13
 420:	80 81       	ld	r24, Z
 422:	88 60       	ori	r24, 0x08	; 8
 424:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 426:	ea 89       	ldd	r30, Y+18	; 0x12
 428:	fb 89       	ldd	r31, Y+19	; 0x13
 42a:	80 81       	ld	r24, Z
 42c:	80 68       	ori	r24, 0x80	; 128
 42e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 430:	ea 89       	ldd	r30, Y+18	; 0x12
 432:	fb 89       	ldd	r31, Y+19	; 0x13
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	cf 90       	pop	r12
 44a:	bf 90       	pop	r11
 44c:	08 95       	ret

0000044e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	8f 93       	push	r24
 45c:	9f 93       	push	r25
 45e:	af 93       	push	r26
 460:	bf 93       	push	r27
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 466:	e0 91 47 01 	lds	r30, 0x0147
 46a:	f0 91 48 01 	lds	r31, 0x0148
 46e:	80 81       	ld	r24, Z
 470:	82 fd       	sbrc	r24, 2
 472:	14 c0       	rjmp	.+40     	; 0x49c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 474:	e7 e3       	ldi	r30, 0x37	; 55
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	a6 89       	ldd	r26, Z+22	; 0x16
 47a:	b7 89       	ldd	r27, Z+23	; 0x17
 47c:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 47e:	81 8d       	ldd	r24, Z+25	; 0x19
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 484:	92 8d       	ldd	r25, Z+26	; 0x1a
 486:	89 17       	cp	r24, r25
 488:	71 f0       	breq	.+28     	; 0x4a6 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
 48a:	df 01       	movw	r26, r30
 48c:	e1 8d       	ldd	r30, Z+25	; 0x19
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	e9 5c       	subi	r30, 0xC9	; 201
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
 496:	59 96       	adiw	r26, 0x19	; 25
 498:	8c 93       	st	X, r24
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 49c:	e0 91 4d 01 	lds	r30, 0x014D
 4a0:	f0 91 4e 01 	lds	r31, 0x014E
 4a4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4e0:	87 e3       	ldi	r24, 0x37	; 55
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	0e 94 23 01 	call	0x246	; 0x246 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	7f 91       	pop	r23
 4f6:	6f 91       	pop	r22
 4f8:	5f 91       	pop	r21
 4fa:	4f 91       	pop	r20
 4fc:	3f 91       	pop	r19
 4fe:	2f 91       	pop	r18
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 50a:	87 e3       	ldi	r24, 0x37	; 55
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN14HardwareSerial9availableEv>
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	89 2b       	or	r24, r25
 516:	09 f4       	brne	.+2      	; 0x51a <_Z17Serial0_availablev+0x10>
 518:	20 e0       	ldi	r18, 0x00	; 0
}
 51a:	82 2f       	mov	r24, r18
 51c:	08 95       	ret

0000051e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 51e:	e7 e3       	ldi	r30, 0x37	; 55
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	13 82       	std	Z+3, r1	; 0x03
 524:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 526:	88 ee       	ldi	r24, 0xE8	; 232
 528:	93 e0       	ldi	r25, 0x03	; 3
 52a:	a0 e0       	ldi	r26, 0x00	; 0
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	84 83       	std	Z+4, r24	; 0x04
 530:	95 83       	std	Z+5, r25	; 0x05
 532:	a6 83       	std	Z+6, r26	; 0x06
 534:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 536:	84 e1       	ldi	r24, 0x14	; 20
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	91 83       	std	Z+1, r25	; 0x01
 53c:	80 83       	st	Z, r24
 53e:	85 ec       	ldi	r24, 0xC5	; 197
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	95 87       	std	Z+13, r25	; 0x0d
 544:	84 87       	std	Z+12, r24	; 0x0c
 546:	84 ec       	ldi	r24, 0xC4	; 196
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	97 87       	std	Z+15, r25	; 0x0f
 54c:	86 87       	std	Z+14, r24	; 0x0e
 54e:	80 ec       	ldi	r24, 0xC0	; 192
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	91 8b       	std	Z+17, r25	; 0x11
 554:	80 8b       	std	Z+16, r24	; 0x10
 556:	81 ec       	ldi	r24, 0xC1	; 193
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	93 8b       	std	Z+19, r25	; 0x13
 55c:	82 8b       	std	Z+18, r24	; 0x12
 55e:	82 ec       	ldi	r24, 0xC2	; 194
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	95 8b       	std	Z+21, r25	; 0x15
 564:	84 8b       	std	Z+20, r24	; 0x14
 566:	86 ec       	ldi	r24, 0xC6	; 198
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	97 8b       	std	Z+23, r25	; 0x17
 56c:	86 8b       	std	Z+22, r24	; 0x16
 56e:	11 8e       	std	Z+25, r1	; 0x19
 570:	12 8e       	std	Z+26, r1	; 0x1a
 572:	13 8e       	std	Z+27, r1	; 0x1b
 574:	14 8e       	std	Z+28, r1	; 0x1c
 576:	08 95       	ret

00000578 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 578:	08 95       	ret

0000057a <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
 57a:	8f 92       	push	r8
 57c:	9f 92       	push	r9
 57e:	af 92       	push	r10
 580:	bf 92       	push	r11
 582:	cf 92       	push	r12
 584:	df 92       	push	r13
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	5c 01       	movw	r10, r24
 594:	7b 01       	movw	r14, r22
 596:	4c 01       	movw	r8, r24
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	88 0e       	add	r8, r24
 59c:	91 1c       	adc	r9, r1
 59e:	65 01       	movw	r12, r10
 5a0:	e5 e0       	ldi	r30, 0x05	; 5
 5a2:	ce 0e       	add	r12, r30
 5a4:	d1 1c       	adc	r13, r1
    size_t n = 0;
 5a6:	00 e0       	ldi	r16, 0x00	; 0
 5a8:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
 5aa:	f4 01       	movw	r30, r8
 5ac:	61 91       	ld	r22, Z+
 5ae:	4f 01       	movw	r8, r30
 5b0:	4a e0       	ldi	r20, 0x0A	; 10
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	c7 01       	movw	r24, r14
 5b6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5Print5printEhi>
 5ba:	ec 01       	movw	r28, r24
        n += p.print('.');
 5bc:	6e e2       	ldi	r22, 0x2E	; 46
 5be:	c7 01       	movw	r24, r14
 5c0:	0e 94 5f 03 	call	0x6be	; 0x6be <_ZN5Print5printEc>
 5c4:	8c 0f       	add	r24, r28
 5c6:	9d 1f       	adc	r25, r29
 5c8:	08 0f       	add	r16, r24
 5ca:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
 5cc:	8c 14       	cp	r8, r12
 5ce:	9d 04       	cpc	r9, r13
 5d0:	61 f7       	brne	.-40     	; 0x5aa <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
 5d2:	4a e0       	ldi	r20, 0x0A	; 10
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	f5 01       	movw	r30, r10
 5d8:	65 81       	ldd	r22, Z+5	; 0x05
 5da:	c7 01       	movw	r24, r14
 5dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5Print5printEhi>
    return n;
}
 5e0:	80 0f       	add	r24, r16
 5e2:	91 1f       	adc	r25, r17
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	cf 90       	pop	r12
 5f4:	bf 90       	pop	r11
 5f6:	af 90       	pop	r10
 5f8:	9f 90       	pop	r9
 5fa:	8f 90       	pop	r8
 5fc:	08 95       	ret

000005fe <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 5fe:	e4 ed       	ldi	r30, 0xD4	; 212
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	84 e2       	ldi	r24, 0x24	; 36
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	91 83       	std	Z+1, r25	; 0x01
 608:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
 60a:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
 60c:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
 60e:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
 610:	15 82       	std	Z+5, r1	; 0x05
 612:	08 95       	ret

00000614 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 614:	08 95       	ret

00000616 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 616:	0e 94 6e 05 	call	0xadc	; 0xadc <init>

	initVariant();
 61a:	0e 94 0a 03 	call	0x614	; 0x614 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 61e:	0e 94 84 00 	call	0x108	; 0x108 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 622:	c5 e1       	ldi	r28, 0x15	; 21
 624:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 626:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <loop>
		if (serialEventRun) serialEventRun();
 62a:	20 97       	sbiw	r28, 0x00	; 0
 62c:	e1 f3       	breq	.-8      	; 0x626 <main+0x10>
 62e:	0e 94 15 01 	call	0x22a	; 0x22a <_Z14serialEventRunv>
 632:	f9 cf       	rjmp	.-14     	; 0x626 <main+0x10>

00000634 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 634:	cf 92       	push	r12
 636:	df 92       	push	r13
 638:	ef 92       	push	r14
 63a:	ff 92       	push	r15
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
 644:	41 15       	cp	r20, r1
 646:	51 05       	cpc	r21, r1
 648:	c1 f0       	breq	.+48     	; 0x67a <_ZN5Print5writeEPKhj+0x46>
 64a:	6a 01       	movw	r12, r20
 64c:	8c 01       	movw	r16, r24
 64e:	e6 2e       	mov	r14, r22
 650:	f7 2e       	mov	r15, r23
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
    if (write(*buffer++)) n++;
 656:	d7 01       	movw	r26, r14
 658:	6d 91       	ld	r22, X+
 65a:	7d 01       	movw	r14, r26
 65c:	d8 01       	movw	r26, r16
 65e:	ed 91       	ld	r30, X+
 660:	fc 91       	ld	r31, X
 662:	01 90       	ld	r0, Z+
 664:	f0 81       	ld	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	c8 01       	movw	r24, r16
 66a:	09 95       	icall
 66c:	89 2b       	or	r24, r25
 66e:	39 f0       	breq	.+14     	; 0x67e <_ZN5Print5writeEPKhj+0x4a>
 670:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 672:	cc 16       	cp	r12, r28
 674:	dd 06       	cpc	r13, r29
 676:	79 f7       	brne	.-34     	; 0x656 <_ZN5Print5writeEPKhj+0x22>
 678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN5Print5writeEPKhj+0x4a>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 67a:	c0 e0       	ldi	r28, 0x00	; 0
 67c:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 67e:	ce 01       	movw	r24, r28
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	df 90       	pop	r13
 68e:	cf 90       	pop	r12
 690:	08 95       	ret

00000692 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 692:	61 15       	cp	r22, r1
 694:	71 05       	cpc	r23, r1
 696:	81 f0       	breq	.+32     	; 0x6b8 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
 698:	fb 01       	movw	r30, r22
 69a:	01 90       	ld	r0, Z+
 69c:	00 20       	and	r0, r0
 69e:	e9 f7       	brne	.-6      	; 0x69a <_ZN5Print5printEPKc+0x8>
 6a0:	31 97       	sbiw	r30, 0x01	; 1
 6a2:	af 01       	movw	r20, r30
 6a4:	46 1b       	sub	r20, r22
 6a6:	57 0b       	sbc	r21, r23
 6a8:	dc 01       	movw	r26, r24
 6aa:	ed 91       	ld	r30, X+
 6ac:	fc 91       	ld	r31, X
 6ae:	02 80       	ldd	r0, Z+2	; 0x02
 6b0:	f3 81       	ldd	r31, Z+3	; 0x03
 6b2:	e0 2d       	mov	r30, r0
 6b4:	09 95       	icall
 6b6:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
 6bc:	08 95       	ret

000006be <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 6be:	dc 01       	movw	r26, r24
 6c0:	ed 91       	ld	r30, X+
 6c2:	fc 91       	ld	r31, X
 6c4:	01 90       	ld	r0, Z+
 6c6:	f0 81       	ld	r31, Z
 6c8:	e0 2d       	mov	r30, r0
 6ca:	09 95       	icall
}
 6cc:	08 95       	ret

000006ce <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 6ce:	4f 92       	push	r4
 6d0:	5f 92       	push	r5
 6d2:	6f 92       	push	r6
 6d4:	7f 92       	push	r7
 6d6:	9f 92       	push	r9
 6d8:	af 92       	push	r10
 6da:	bf 92       	push	r11
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	a1 97       	sbiw	r28, 0x21	; 33
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	5c 01       	movw	r10, r24
 6fe:	6a 01       	movw	r12, r20
 700:	7b 01       	movw	r14, r22
 702:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 704:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	82 17       	cp	r24, r18
 70a:	20 f0       	brcs	.+8      	; 0x714 <_ZN5Print11printNumberEmh+0x46>
 70c:	0f 2e       	mov	r0, r31
 70e:	fa e0       	ldi	r31, 0x0A	; 10
 710:	9f 2e       	mov	r9, r31
 712:	f0 2d       	mov	r31, r0
 714:	8e 01       	movw	r16, r28
 716:	0f 5d       	subi	r16, 0xDF	; 223
 718:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
 71a:	49 2c       	mov	r4, r9
 71c:	51 2c       	mov	r5, r1
 71e:	61 2c       	mov	r6, r1
 720:	71 2c       	mov	r7, r1
 722:	c7 01       	movw	r24, r14
 724:	b6 01       	movw	r22, r12
 726:	a3 01       	movw	r20, r6
 728:	92 01       	movw	r18, r4
 72a:	0e 94 09 06 	call	0xc12	; 0xc12 <__udivmodsi4>
    char c = m - base * n;
 72e:	8c 2d       	mov	r24, r12
 730:	92 9e       	mul	r9, r18
 732:	80 19       	sub	r24, r0
 734:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 736:	01 50       	subi	r16, 0x01	; 1
 738:	11 09       	sbc	r17, r1
 73a:	8a 30       	cpi	r24, 0x0A	; 10
 73c:	10 f4       	brcc	.+4      	; 0x742 <_ZN5Print11printNumberEmh+0x74>
 73e:	80 5d       	subi	r24, 0xD0	; 208
 740:	01 c0       	rjmp	.+2      	; 0x744 <_ZN5Print11printNumberEmh+0x76>
 742:	89 5c       	subi	r24, 0xC9	; 201
 744:	d8 01       	movw	r26, r16
 746:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 748:	c2 2e       	mov	r12, r18
 74a:	d3 2e       	mov	r13, r19
 74c:	e4 2e       	mov	r14, r20
 74e:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 750:	c1 14       	cp	r12, r1
 752:	d1 04       	cpc	r13, r1
 754:	e1 04       	cpc	r14, r1
 756:	f1 04       	cpc	r15, r1
 758:	21 f7       	brne	.-56     	; 0x722 <_ZN5Print11printNumberEmh+0x54>
 75a:	01 15       	cp	r16, r1
 75c:	11 05       	cpc	r17, r1
 75e:	91 f0       	breq	.+36     	; 0x784 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
 760:	f8 01       	movw	r30, r16
 762:	01 90       	ld	r0, Z+
 764:	00 20       	and	r0, r0
 766:	e9 f7       	brne	.-6      	; 0x762 <_ZN5Print11printNumberEmh+0x94>
 768:	31 97       	sbiw	r30, 0x01	; 1
 76a:	af 01       	movw	r20, r30
 76c:	40 1b       	sub	r20, r16
 76e:	51 0b       	sbc	r21, r17
 770:	d5 01       	movw	r26, r10
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	02 80       	ldd	r0, Z+2	; 0x02
 778:	f3 81       	ldd	r31, Z+3	; 0x03
 77a:	e0 2d       	mov	r30, r0
 77c:	b8 01       	movw	r22, r16
 77e:	c5 01       	movw	r24, r10
 780:	09 95       	icall
 782:	02 c0       	rjmp	.+4      	; 0x788 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
 788:	a1 96       	adiw	r28, 0x21	; 33
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	ff 90       	pop	r15
 79e:	ef 90       	pop	r14
 7a0:	df 90       	pop	r13
 7a2:	cf 90       	pop	r12
 7a4:	bf 90       	pop	r11
 7a6:	af 90       	pop	r10
 7a8:	9f 90       	pop	r9
 7aa:	7f 90       	pop	r7
 7ac:	6f 90       	pop	r6
 7ae:	5f 90       	pop	r5
 7b0:	4f 90       	pop	r4
 7b2:	08 95       	ret

000007b4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 7b4:	21 15       	cp	r18, r1
 7b6:	31 05       	cpc	r19, r1
 7b8:	49 f4       	brne	.+18     	; 0x7cc <_ZN5Print5printEmi+0x18>
 7ba:	dc 01       	movw	r26, r24
 7bc:	ed 91       	ld	r30, X+
 7be:	fc 91       	ld	r31, X
 7c0:	01 90       	ld	r0, Z+
 7c2:	f0 81       	ld	r31, Z
 7c4:	e0 2d       	mov	r30, r0
 7c6:	64 2f       	mov	r22, r20
 7c8:	09 95       	icall
 7ca:	08 95       	ret
  else return printNumber(n, base);
 7cc:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN5Print11printNumberEmh>
}
 7d0:	08 95       	ret

000007d2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 7d2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 7d4:	46 2f       	mov	r20, r22
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN5Print5printEmi>
}
 7e0:	08 95       	ret

000007e2 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	39 f0       	breq	.+14     	; 0x7f4 <_Z12disableTimerh+0x12>
 7e6:	18 f0       	brcs	.+6      	; 0x7ee <_Z12disableTimerh+0xc>
 7e8:	82 30       	cpi	r24, 0x02	; 2
 7ea:	51 f0       	breq	.+20     	; 0x800 <_Z12disableTimerh+0x1e>
 7ec:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 7ee:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 7f2:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 7f4:	ef e6       	ldi	r30, 0x6F	; 111
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	80 81       	ld	r24, Z
 7fa:	8d 7f       	andi	r24, 0xFD	; 253
 7fc:	80 83       	st	Z, r24
      break;
 7fe:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 800:	e0 e7       	ldi	r30, 0x70	; 112
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	8d 7f       	andi	r24, 0xFD	; 253
 808:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 810:	e1 eb       	ldi	r30, 0xB1	; 177
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	88 7f       	andi	r24, 0xF8	; 248
 818:	84 60       	ori	r24, 0x04	; 4
 81a:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 81c:	10 92 b3 00 	sts	0x00B3, r1
 820:	08 95       	ret

00000822 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
 822:	cf 93       	push	r28
 824:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
 826:	80 91 00 01 	lds	r24, 0x0100
 82a:	8c 13       	cpse	r24, r28
 82c:	07 c0       	rjmp	.+14     	; 0x83c <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 82e:	e8 e6       	ldi	r30, 0x68	; 104
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
 834:	9f ef       	ldi	r25, 0xFF	; 255
 836:	90 93 00 01 	sts	0x0100, r25
      break;
 83a:	01 c0       	rjmp	.+2      	; 0x83e <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
 83c:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
 83e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	8c 2f       	mov	r24, r28
 846:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <digitalWrite>
}
 84a:	cf 91       	pop	r28
 84c:	08 95       	ret

0000084e <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	2f 93       	push	r18
 85a:	3f 93       	push	r19
 85c:	4f 93       	push	r20
 85e:	5f 93       	push	r21
 860:	6f 93       	push	r22
 862:	7f 93       	push	r23
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
 870:	80 91 dd 01 	lds	r24, 0x01DD
 874:	90 91 de 01 	lds	r25, 0x01DE
 878:	a0 91 df 01 	lds	r26, 0x01DF
 87c:	b0 91 e0 01 	lds	r27, 0x01E0
 880:	89 2b       	or	r24, r25
 882:	8a 2b       	or	r24, r26
 884:	8b 2b       	or	r24, r27
 886:	51 f1       	breq	.+84     	; 0x8dc <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 888:	80 91 da 01 	lds	r24, 0x01DA
 88c:	e0 91 db 01 	lds	r30, 0x01DB
 890:	f0 91 dc 01 	lds	r31, 0x01DC
 894:	90 81       	ld	r25, Z
 896:	89 27       	eor	r24, r25
 898:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
 89a:	80 91 dd 01 	lds	r24, 0x01DD
 89e:	90 91 de 01 	lds	r25, 0x01DE
 8a2:	a0 91 df 01 	lds	r26, 0x01DF
 8a6:	b0 91 e0 01 	lds	r27, 0x01E0
 8aa:	18 16       	cp	r1, r24
 8ac:	19 06       	cpc	r1, r25
 8ae:	1a 06       	cpc	r1, r26
 8b0:	1b 06       	cpc	r1, r27
 8b2:	c4 f4       	brge	.+48     	; 0x8e4 <__vector_7+0x96>
      timer2_toggle_count--;
 8b4:	80 91 dd 01 	lds	r24, 0x01DD
 8b8:	90 91 de 01 	lds	r25, 0x01DE
 8bc:	a0 91 df 01 	lds	r26, 0x01DF
 8c0:	b0 91 e0 01 	lds	r27, 0x01E0
 8c4:	01 97       	sbiw	r24, 0x01	; 1
 8c6:	a1 09       	sbc	r26, r1
 8c8:	b1 09       	sbc	r27, r1
 8ca:	80 93 dd 01 	sts	0x01DD, r24
 8ce:	90 93 de 01 	sts	0x01DE, r25
 8d2:	a0 93 df 01 	sts	0x01DF, r26
 8d6:	b0 93 e0 01 	sts	0x01E0, r27
 8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 8dc:	80 91 00 01 	lds	r24, 0x0100
 8e0:	0e 94 11 04 	call	0x822	; 0x822 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 8e4:	ff 91       	pop	r31
 8e6:	ef 91       	pop	r30
 8e8:	bf 91       	pop	r27
 8ea:	af 91       	pop	r26
 8ec:	9f 91       	pop	r25
 8ee:	8f 91       	pop	r24
 8f0:	7f 91       	pop	r23
 8f2:	6f 91       	pop	r22
 8f4:	5f 91       	pop	r21
 8f6:	4f 91       	pop	r20
 8f8:	3f 91       	pop	r19
 8fa:	2f 91       	pop	r18
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
 906:	08 95       	ret

00000908 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
 908:	1f 92       	push	r1
 90a:	0f 92       	push	r0
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	0f 92       	push	r0
 910:	11 24       	eor	r1, r1
 912:	2f 93       	push	r18
 914:	3f 93       	push	r19
 916:	4f 93       	push	r20
 918:	5f 93       	push	r21
 91a:	6f 93       	push	r22
 91c:	7f 93       	push	r23
 91e:	8f 93       	push	r24
 920:	9f 93       	push	r25
 922:	af 93       	push	r26
 924:	bf 93       	push	r27
 926:	ef 93       	push	r30
 928:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_0]();
 92a:	e0 91 01 01 	lds	r30, 0x0101
 92e:	f0 91 02 01 	lds	r31, 0x0102
 932:	09 95       	icall
}
 934:	ff 91       	pop	r31
 936:	ef 91       	pop	r30
 938:	bf 91       	pop	r27
 93a:	af 91       	pop	r26
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	7f 91       	pop	r23
 942:	6f 91       	pop	r22
 944:	5f 91       	pop	r21
 946:	4f 91       	pop	r20
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <__vector_2>:

ISR(INT1_vect) {
 956:	1f 92       	push	r1
 958:	0f 92       	push	r0
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	0f 92       	push	r0
 95e:	11 24       	eor	r1, r1
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31
    intFunc[EXTERNAL_INT_1]();
 978:	e0 91 03 01 	lds	r30, 0x0103
 97c:	f0 91 04 01 	lds	r31, 0x0104
 980:	09 95       	icall
}
 982:	ff 91       	pop	r31
 984:	ef 91       	pop	r30
 986:	bf 91       	pop	r27
 988:	af 91       	pop	r26
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	7f 91       	pop	r23
 990:	6f 91       	pop	r22
 992:	5f 91       	pop	r21
 994:	4f 91       	pop	r20
 996:	3f 91       	pop	r19
 998:	2f 91       	pop	r18
 99a:	0f 90       	pop	r0
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	0f 90       	pop	r0
 9a0:	1f 90       	pop	r1
 9a2:	18 95       	reti

000009a4 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 9a4:	1f 92       	push	r1
 9a6:	0f 92       	push	r0
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	0f 92       	push	r0
 9ac:	11 24       	eor	r1, r1
 9ae:	2f 93       	push	r18
 9b0:	3f 93       	push	r19
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 9ba:	80 91 e2 01 	lds	r24, 0x01E2
 9be:	90 91 e3 01 	lds	r25, 0x01E3
 9c2:	a0 91 e4 01 	lds	r26, 0x01E4
 9c6:	b0 91 e5 01 	lds	r27, 0x01E5
	unsigned char f = timer0_fract;
 9ca:	30 91 e1 01 	lds	r19, 0x01E1

	m += MILLIS_INC;
	f += FRACT_INC;
 9ce:	23 e0       	ldi	r18, 0x03	; 3
 9d0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 9d2:	2d 37       	cpi	r18, 0x7D	; 125
 9d4:	20 f4       	brcc	.+8      	; 0x9de <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	a1 1d       	adc	r26, r1
 9da:	b1 1d       	adc	r27, r1
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 9de:	26 e8       	ldi	r18, 0x86	; 134
 9e0:	23 0f       	add	r18, r19
		m += 1;
 9e2:	02 96       	adiw	r24, 0x02	; 2
 9e4:	a1 1d       	adc	r26, r1
 9e6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 9e8:	20 93 e1 01 	sts	0x01E1, r18
	timer0_millis = m;
 9ec:	80 93 e2 01 	sts	0x01E2, r24
 9f0:	90 93 e3 01 	sts	0x01E3, r25
 9f4:	a0 93 e4 01 	sts	0x01E4, r26
 9f8:	b0 93 e5 01 	sts	0x01E5, r27
	timer0_overflow_count++;
 9fc:	80 91 e6 01 	lds	r24, 0x01E6
 a00:	90 91 e7 01 	lds	r25, 0x01E7
 a04:	a0 91 e8 01 	lds	r26, 0x01E8
 a08:	b0 91 e9 01 	lds	r27, 0x01E9
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	a1 1d       	adc	r26, r1
 a10:	b1 1d       	adc	r27, r1
 a12:	80 93 e6 01 	sts	0x01E6, r24
 a16:	90 93 e7 01 	sts	0x01E7, r25
 a1a:	a0 93 e8 01 	sts	0x01E8, r26
 a1e:	b0 93 e9 01 	sts	0x01E9, r27
}
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	3f 91       	pop	r19
 a2c:	2f 91       	pop	r18
 a2e:	0f 90       	pop	r0
 a30:	0f be       	out	0x3f, r0	; 63
 a32:	0f 90       	pop	r0
 a34:	1f 90       	pop	r1
 a36:	18 95       	reti

00000a38 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 a38:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 a3a:	f8 94       	cli
	m = timer0_overflow_count;
 a3c:	80 91 e6 01 	lds	r24, 0x01E6
 a40:	90 91 e7 01 	lds	r25, 0x01E7
 a44:	a0 91 e8 01 	lds	r26, 0x01E8
 a48:	b0 91 e9 01 	lds	r27, 0x01E9
#if defined(TCNT0)
	t = TCNT0;
 a4c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 a4e:	a8 9b       	sbis	0x15, 0	; 21
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <micros+0x24>
 a52:	2f 3f       	cpi	r18, 0xFF	; 255
 a54:	19 f0       	breq	.+6      	; 0xa5c <micros+0x24>
		m++;
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	a1 1d       	adc	r26, r1
 a5a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 a5c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 a5e:	ba 2f       	mov	r27, r26
 a60:	a9 2f       	mov	r26, r25
 a62:	98 2f       	mov	r25, r24
 a64:	88 27       	eor	r24, r24
 a66:	82 0f       	add	r24, r18
 a68:	91 1d       	adc	r25, r1
 a6a:	a1 1d       	adc	r26, r1
 a6c:	b1 1d       	adc	r27, r1
 a6e:	bc 01       	movw	r22, r24
 a70:	cd 01       	movw	r24, r26
 a72:	66 0f       	add	r22, r22
 a74:	77 1f       	adc	r23, r23
 a76:	88 1f       	adc	r24, r24
 a78:	99 1f       	adc	r25, r25
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
}
 a82:	08 95       	ret

00000a84 <delay>:

void delay(unsigned long ms)
{
 a84:	cf 92       	push	r12
 a86:	df 92       	push	r13
 a88:	ef 92       	push	r14
 a8a:	ff 92       	push	r15
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	6b 01       	movw	r12, r22
 a92:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 a94:	0e 94 1c 05 	call	0xa38	; 0xa38 <micros>
 a98:	eb 01       	movw	r28, r22

	while (ms > 0) {
 a9a:	c1 14       	cp	r12, r1
 a9c:	d1 04       	cpc	r13, r1
 a9e:	e1 04       	cpc	r14, r1
 aa0:	f1 04       	cpc	r15, r1
 aa2:	a9 f0       	breq	.+42     	; 0xace <delay+0x4a>
		yield();
 aa4:	0e 94 bc 02 	call	0x578	; 0x578 <yield>
		if (((uint16_t)micros() - start) >= 1000) {
 aa8:	0e 94 1c 05 	call	0xa38	; 0xa38 <micros>
 aac:	6c 1b       	sub	r22, r28
 aae:	7d 0b       	sbc	r23, r29
 ab0:	68 3e       	cpi	r22, 0xE8	; 232
 ab2:	73 40       	sbci	r23, 0x03	; 3
 ab4:	38 f0       	brcs	.+14     	; 0xac4 <delay+0x40>
			ms--;
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	c8 1a       	sub	r12, r24
 aba:	d1 08       	sbc	r13, r1
 abc:	e1 08       	sbc	r14, r1
 abe:	f1 08       	sbc	r15, r1
			start += 1000;
 ac0:	c8 51       	subi	r28, 0x18	; 24
 ac2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 ac4:	c1 14       	cp	r12, r1
 ac6:	d1 04       	cpc	r13, r1
 ac8:	e1 04       	cpc	r14, r1
 aca:	f1 04       	cpc	r15, r1
 acc:	59 f7       	brne	.-42     	; 0xaa4 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	ff 90       	pop	r15
 ad4:	ef 90       	pop	r14
 ad6:	df 90       	pop	r13
 ad8:	cf 90       	pop	r12
 ada:	08 95       	ret

00000adc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 adc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 ade:	84 b5       	in	r24, 0x24	; 36
 ae0:	82 60       	ori	r24, 0x02	; 2
 ae2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 ae4:	84 b5       	in	r24, 0x24	; 36
 ae6:	81 60       	ori	r24, 0x01	; 1
 ae8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 aea:	85 b5       	in	r24, 0x25	; 37
 aec:	82 60       	ori	r24, 0x02	; 2
 aee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 af0:	85 b5       	in	r24, 0x25	; 37
 af2:	81 60       	ori	r24, 0x01	; 1
 af4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 af6:	ee e6       	ldi	r30, 0x6E	; 110
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	80 81       	ld	r24, Z
 afc:	81 60       	ori	r24, 0x01	; 1
 afe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b00:	e1 e8       	ldi	r30, 0x81	; 129
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b06:	80 81       	ld	r24, Z
 b08:	82 60       	ori	r24, 0x02	; 2
 b0a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b0c:	80 81       	ld	r24, Z
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b12:	e0 e8       	ldi	r30, 0x80	; 128
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	81 60       	ori	r24, 0x01	; 1
 b1a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b1c:	e1 eb       	ldi	r30, 0xB1	; 177
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	84 60       	ori	r24, 0x04	; 4
 b24:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b26:	e0 eb       	ldi	r30, 0xB0	; 176
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	81 60       	ori	r24, 0x01	; 1
 b2e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b30:	ea e7       	ldi	r30, 0x7A	; 122
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	84 60       	ori	r24, 0x04	; 4
 b38:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b3a:	80 81       	ld	r24, Z
 b3c:	82 60       	ori	r24, 0x02	; 2
 b3e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b40:	80 81       	ld	r24, Z
 b42:	81 60       	ori	r24, 0x01	; 1
 b44:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b46:	80 81       	ld	r24, Z
 b48:	80 68       	ori	r24, 0x80	; 128
 b4a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b4c:	10 92 c1 00 	sts	0x00C1, r1
 b50:	08 95       	ret

00000b52 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b52:	83 30       	cpi	r24, 0x03	; 3
 b54:	69 f0       	breq	.+26     	; 0xb70 <turnOffPWM+0x1e>
 b56:	28 f4       	brcc	.+10     	; 0xb62 <turnOffPWM+0x10>
 b58:	81 30       	cpi	r24, 0x01	; 1
 b5a:	b1 f0       	breq	.+44     	; 0xb88 <turnOffPWM+0x36>
 b5c:	82 30       	cpi	r24, 0x02	; 2
 b5e:	c1 f0       	breq	.+48     	; 0xb90 <turnOffPWM+0x3e>
 b60:	08 95       	ret
 b62:	87 30       	cpi	r24, 0x07	; 7
 b64:	c9 f0       	breq	.+50     	; 0xb98 <turnOffPWM+0x46>
 b66:	88 30       	cpi	r24, 0x08	; 8
 b68:	e9 f0       	breq	.+58     	; 0xba4 <turnOffPWM+0x52>
 b6a:	84 30       	cpi	r24, 0x04	; 4
 b6c:	01 f5       	brne	.+64     	; 0xbae <turnOffPWM+0x5c>
 b6e:	06 c0       	rjmp	.+12     	; 0xb7c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 b70:	e0 e8       	ldi	r30, 0x80	; 128
 b72:	f0 e0       	ldi	r31, 0x00	; 0
 b74:	80 81       	ld	r24, Z
 b76:	8f 77       	andi	r24, 0x7F	; 127
 b78:	80 83       	st	Z, r24
 b7a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b7c:	e0 e8       	ldi	r30, 0x80	; 128
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	80 81       	ld	r24, Z
 b82:	8f 7d       	andi	r24, 0xDF	; 223
 b84:	80 83       	st	Z, r24
 b86:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 b88:	84 b5       	in	r24, 0x24	; 36
 b8a:	8f 77       	andi	r24, 0x7F	; 127
 b8c:	84 bd       	out	0x24, r24	; 36
 b8e:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 b90:	84 b5       	in	r24, 0x24	; 36
 b92:	8f 7d       	andi	r24, 0xDF	; 223
 b94:	84 bd       	out	0x24, r24	; 36
 b96:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 b98:	e0 eb       	ldi	r30, 0xB0	; 176
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	80 81       	ld	r24, Z
 b9e:	8f 77       	andi	r24, 0x7F	; 127
 ba0:	80 83       	st	Z, r24
 ba2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ba4:	e0 eb       	ldi	r30, 0xB0	; 176
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	8f 7d       	andi	r24, 0xDF	; 223
 bac:	80 83       	st	Z, r24
 bae:	08 95       	ret

00000bb0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 bb0:	1f 93       	push	r17
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 bb6:	28 2f       	mov	r18, r24
 bb8:	30 e0       	ldi	r19, 0x00	; 0
 bba:	f9 01       	movw	r30, r18
 bbc:	e7 59       	subi	r30, 0x97	; 151
 bbe:	ff 4f       	sbci	r31, 0xFF	; 255
 bc0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 bc2:	f9 01       	movw	r30, r18
 bc4:	e3 58       	subi	r30, 0x83	; 131
 bc6:	ff 4f       	sbci	r31, 0xFF	; 255
 bc8:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 bca:	f9 01       	movw	r30, r18
 bcc:	ef 56       	subi	r30, 0x6F	; 111
 bce:	ff 4f       	sbci	r31, 0xFF	; 255
 bd0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 bd2:	cc 23       	and	r28, r28
 bd4:	d1 f0       	breq	.+52     	; 0xc0a <digitalWrite+0x5a>
 bd6:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 bd8:	81 11       	cpse	r24, r1
 bda:	0e 94 a9 05 	call	0xb52	; 0xb52 <turnOffPWM>

	out = portOutputRegister(port);
 bde:	ec 2f       	mov	r30, r28
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	ee 0f       	add	r30, r30
 be4:	ff 1f       	adc	r31, r31
 be6:	eb 55       	subi	r30, 0x5B	; 91
 be8:	ff 4f       	sbci	r31, 0xFF	; 255
 bea:	a5 91       	lpm	r26, Z+
 bec:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 bee:	8f b7       	in	r24, 0x3f	; 63
	cli();
 bf0:	f8 94       	cli

	if (val == LOW) {
 bf2:	d1 11       	cpse	r29, r1
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <digitalWrite+0x52>
		*out &= ~bit;
 bf6:	9c 91       	ld	r25, X
 bf8:	e1 2f       	mov	r30, r17
 bfa:	e0 95       	com	r30
 bfc:	e9 23       	and	r30, r25
 bfe:	ec 93       	st	X, r30
 c00:	03 c0       	rjmp	.+6      	; 0xc08 <digitalWrite+0x58>
	} else {
		*out |= bit;
 c02:	ec 91       	ld	r30, X
 c04:	e1 2b       	or	r30, r17
 c06:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 c08:	8f bf       	out	0x3f, r24	; 63
}
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	1f 91       	pop	r17
 c10:	08 95       	ret

00000c12 <__udivmodsi4>:
 c12:	a1 e2       	ldi	r26, 0x21	; 33
 c14:	1a 2e       	mov	r1, r26
 c16:	aa 1b       	sub	r26, r26
 c18:	bb 1b       	sub	r27, r27
 c1a:	fd 01       	movw	r30, r26
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <__udivmodsi4_ep>

00000c1e <__udivmodsi4_loop>:
 c1e:	aa 1f       	adc	r26, r26
 c20:	bb 1f       	adc	r27, r27
 c22:	ee 1f       	adc	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	a2 17       	cp	r26, r18
 c28:	b3 07       	cpc	r27, r19
 c2a:	e4 07       	cpc	r30, r20
 c2c:	f5 07       	cpc	r31, r21
 c2e:	20 f0       	brcs	.+8      	; 0xc38 <__udivmodsi4_ep>
 c30:	a2 1b       	sub	r26, r18
 c32:	b3 0b       	sbc	r27, r19
 c34:	e4 0b       	sbc	r30, r20
 c36:	f5 0b       	sbc	r31, r21

00000c38 <__udivmodsi4_ep>:
 c38:	66 1f       	adc	r22, r22
 c3a:	77 1f       	adc	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	99 1f       	adc	r25, r25
 c40:	1a 94       	dec	r1
 c42:	69 f7       	brne	.-38     	; 0xc1e <__udivmodsi4_loop>
 c44:	60 95       	com	r22
 c46:	70 95       	com	r23
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	9b 01       	movw	r18, r22
 c4e:	ac 01       	movw	r20, r24
 c50:	bd 01       	movw	r22, r26
 c52:	cf 01       	movw	r24, r30
 c54:	08 95       	ret

00000c56 <__tablejump2__>:
 c56:	ee 0f       	add	r30, r30
 c58:	ff 1f       	adc	r31, r31
 c5a:	05 90       	lpm	r0, Z+
 c5c:	f4 91       	lpm	r31, Z
 c5e:	e0 2d       	mov	r30, r0
 c60:	09 94       	ijmp

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
