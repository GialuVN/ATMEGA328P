
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001db  00800100  00800100  000008d4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000118  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ec3  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000060f  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ca  00000000  00000000  00001eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002f4  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000465  00000000  00000000  000027ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ac4  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f0  00000000  00000000  000036d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_14>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 37 03 	jmp	0x66e	; 0x66e <__vector_18>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_20>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	b0 01       	movw	r22, r0
  6a:	ba 01       	movw	r22, r20
  6c:	c4 01       	movw	r24, r8
  6e:	ce 01       	movw	r24, r28
  70:	d8 01       	movw	r26, r16
  72:	e2 01       	movw	r28, r4
  74:	ec 01       	movw	r28, r24
  76:	f6 01       	movw	r30, r12
  78:	00 02       	muls	r16, r16
  7a:	0a 02       	muls	r16, r26

0000007c <__trampolines_end>:
  7c:	c0 f9       	bld	r28, 0
  7e:	a4 b0       	in	r10, 0x04	; 4
  80:	99 92       	st	Y+, r9
  82:	82 f8       	bld	r8, 2
  84:	80 90 ff 88 	lds	r8, 0x88FF
  88:	83 c6       	rjmp	.+3334   	; 0xd90 <__stack+0x491>
  8a:	a1 86       	std	Z+9, r10	; 0x09
  8c:	8e c2       	rjmp	.+1308   	; 0x5aa <CheckSum+0x12>
  8e:	89 00       	.word	0x0089	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_clear_bss>:
  9c:	22 e0       	ldi	r18, 0x02	; 2
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ab 3d       	cpi	r26, 0xDB	; 219
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  b0:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <hc595_set_spi>:
	DDRB |=(1<<PINB5)|(1<<PINB2)|(1<<PINB3);
	SPCR |=(1<<SPE)|(1<<MSTR)|(1<<DORD);
	SPSR |= 1<<SPI2X;
#else
//ck,da,la ouput pin
	CK_DDR |=1<<CK_PIN;
  b8:	39 9a       	sbi	0x07, 1	; 7
	DT_DDR |=1<<DT_PIN;
  ba:	38 9a       	sbi	0x07, 0	; 7
	LA_DDR |=1<<LA_PIN;
  bc:	3a 9a       	sbi	0x07, 2	; 7
	//da, out level 1
	DT_POR |=1<<DT_PIN;
  be:	40 9a       	sbi	0x08, 0	; 8
	//la,ck out level 0
	CK_POR &=~(1<<CK_PIN);
  c0:	41 98       	cbi	0x08, 1	; 8
	LA_POR &=~(1<<LA_PIN);
  c2:	42 98       	cbi	0x08, 2	; 8
  c4:	08 95       	ret

000000c6 <hc595_byte_transmit>:
#endif
}
//xuat 1 byte du lieu ra 595
void hc595_byte_transmit(uint8_t value)
{
  c6:	27 e0       	ldi	r18, 0x07	; 7
  c8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i = 0;
	while(i<8)
	{
#ifdef MSB_FIRST
		
		if (value & (1<<(7-i)))	DT_POR |=1<<DT_PIN;
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 2e       	mov	r0, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <hc595_byte_transmit+0x10>
  d2:	55 95       	asr	r21
  d4:	47 95       	ror	r20
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <hc595_byte_transmit+0xc>
  da:	40 ff       	sbrs	r20, 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <hc595_byte_transmit+0x1c>
  de:	40 9a       	sbi	0x08, 0	; 8
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <hc595_byte_transmit+0x1e>
		else DT_POR &=~(1<<DT_PIN);
  e2:	40 98       	cbi	0x08, 0	; 8
#ifdef LSB_FIRST
		if (value & (1<<i)) DT_POR |=1<<DT_PIN;
		else DT_POR &=~(1<<DT_PIN);
		
#endif
		CK_POR |=1<<CK_PIN;
  e4:	41 9a       	sbi	0x08, 1	; 8
		CK_POR &=~(1<<CK_PIN);
  e6:	41 98       	cbi	0x08, 1	; 8
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	31 09       	sbc	r19, r1
  ec:	78 f7       	brcc	.-34     	; 0xcc <hc595_byte_transmit+0x6>
		i++;
	}

#endif	
}
  ee:	08 95       	ret

000000f0 <hc595_latch>:
#if (SPI_FUNC==1)	
	PORTB |=1<<PINB2;
	PORTB &=~(1<<PINB2);
#else	
	
	LA_POR |=1<<LA_PIN;
  f0:	42 9a       	sbi	0x08, 2	; 8
	LA_POR &=~(1<<LA_PIN);
  f2:	42 98       	cbi	0x08, 2	; 8
  f4:	08 95       	ret

000000f6 <SEG7_initial>:
volatile SEG7_CTR seg7_ctr;
const uint8_t seg7_decode[] PROGMEM ={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0xff,0x88,0x83,0xC6,0xA1,0x86,0x8E,0xC2,0x89};
void SEG7_initial(void)
{
//	DDRC|=1<<PINC0;
	TCCR0A = (1 << WGM01);                      // Set the Timer Mode to CTC
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;                                 // Set 249 as value to count to 
  fa:	89 ef       	ldi	r24, 0xF9	; 249
  fc:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);                     //Set the ISR COMPA vector
  fe:	ee e6       	ldi	r30, 0x6E	; 110
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS00) | (1 << CS01) ;        // set pre-scaler to 64 and start the timer
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	85 bd       	out	0x25, r24	; 37
	hc595_set_spi();
 10e:	0e 94 5c 00 	call	0xb8	; 0xb8 <hc595_set_spi>
 112:	08 95       	ret

00000114 <HEX2BCD_uint>:
	}
}


void HEX2BCD_uint(unsigned int val,unsigned char* bcd)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ac 01       	movw	r20, r24
 11a:	fb 01       	movw	r30, r22
	if (val<=9999)
 11c:	80 31       	cpi	r24, 0x10	; 16
 11e:	27 e2       	ldi	r18, 0x27	; 39
 120:	92 07       	cpc	r25, r18
 122:	08 f0       	brcs	.+2      	; 0x126 <HEX2BCD_uint+0x12>
 124:	8b c0       	rjmp	.+278    	; 0x23c <HEX2BCD_uint+0x128>
	{
		bcd[3]=val%10;
 126:	9c 01       	movw	r18, r24
 128:	ad ec       	ldi	r26, 0xCD	; 205
 12a:	bc ec       	ldi	r27, 0xCC	; 204
 12c:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 130:	ec 01       	movw	r28, r24
 132:	d6 95       	lsr	r29
 134:	c7 95       	ror	r28
 136:	d6 95       	lsr	r29
 138:	c7 95       	ror	r28
 13a:	d6 95       	lsr	r29
 13c:	c7 95       	ror	r28
 13e:	9e 01       	movw	r18, r28
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	ce 01       	movw	r24, r28
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	82 0f       	add	r24, r18
 154:	93 1f       	adc	r25, r19
 156:	9a 01       	movw	r18, r20
 158:	28 1b       	sub	r18, r24
 15a:	39 0b       	sbc	r19, r25
 15c:	23 83       	std	Z+3, r18	; 0x03
		bcd[2]= (val/10)%10;
 15e:	9e 01       	movw	r18, r28
 160:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	9c 01       	movw	r18, r24
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	82 0f       	add	r24, r18
 184:	93 1f       	adc	r25, r19
 186:	c8 1b       	sub	r28, r24
 188:	d9 0b       	sbc	r29, r25
 18a:	c2 83       	std	Z+2, r28	; 0x02
		bcd[1]=(val/100)%10;
 18c:	9a 01       	movw	r18, r20
 18e:	36 95       	lsr	r19
 190:	27 95       	ror	r18
 192:	36 95       	lsr	r19
 194:	27 95       	ror	r18
 196:	ab e7       	ldi	r26, 0x7B	; 123
 198:	b4 e1       	ldi	r27, 0x14	; 20
 19a:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 19e:	ec 01       	movw	r28, r24
 1a0:	d6 95       	lsr	r29
 1a2:	c7 95       	ror	r28
 1a4:	9e 01       	movw	r18, r28
 1a6:	ad ec       	ldi	r26, 0xCD	; 205
 1a8:	bc ec       	ldi	r27, 0xCC	; 204
 1aa:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	9c 01       	movw	r18, r24
 1bc:	22 0f       	add	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	82 0f       	add	r24, r18
 1ce:	93 1f       	adc	r25, r19
 1d0:	c8 1b       	sub	r28, r24
 1d2:	d9 0b       	sbc	r29, r25
 1d4:	c1 83       	std	Z+1, r28	; 0x01
		bcd[0]=(val/1000)%10;
 1d6:	9a 01       	movw	r18, r20
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	36 95       	lsr	r19
 1de:	27 95       	ror	r18
 1e0:	36 95       	lsr	r19
 1e2:	27 95       	ror	r18
 1e4:	a5 ec       	ldi	r26, 0xC5	; 197
 1e6:	b0 e2       	ldi	r27, 0x20	; 32
 1e8:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 1ec:	ac 01       	movw	r20, r24
 1ee:	52 95       	swap	r21
 1f0:	42 95       	swap	r20
 1f2:	4f 70       	andi	r20, 0x0F	; 15
 1f4:	45 27       	eor	r20, r21
 1f6:	5f 70       	andi	r21, 0x0F	; 15
 1f8:	45 27       	eor	r20, r21
 1fa:	9a 01       	movw	r18, r20
 1fc:	ad ec       	ldi	r26, 0xCD	; 205
 1fe:	bc ec       	ldi	r27, 0xCC	; 204
 200:	0e 94 1f 04 	call	0x83e	; 0x83e <__umulhisi3>
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	96 95       	lsr	r25
 20e:	87 95       	ror	r24
 210:	9c 01       	movw	r18, r24
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	82 0f       	add	r24, r18
 224:	93 1f       	adc	r25, r19
 226:	48 1b       	sub	r20, r24
 228:	59 0b       	sbc	r21, r25
 22a:	40 83       	st	Z, r20
 22c:	07 c0       	rjmp	.+14     	; 0x23c <HEX2BCD_uint+0x128>
	}
	for (unsigned char i = 0;i<4;i++)
	{
		if(bcd[i]==0) bcd[i]=10;
 22e:	90 81       	ld	r25, Z
 230:	91 11       	cpse	r25, r1
 232:	0c c0       	rjmp	.+24     	; 0x24c <HEX2BCD_uint+0x138>
 234:	21 93       	st	Z+, r18
 236:	81 50       	subi	r24, 0x01	; 1
		bcd[3]=val%10;
		bcd[2]= (val/10)%10;
		bcd[1]=(val/100)%10;
		bcd[0]=(val/1000)%10;
	}
	for (unsigned char i = 0;i<4;i++)
 238:	d1 f7       	brne	.-12     	; 0x22e <HEX2BCD_uint+0x11a>
 23a:	08 c0       	rjmp	.+16     	; 0x24c <HEX2BCD_uint+0x138>
	{
		if(bcd[i]==0) bcd[i]=10;
 23c:	80 81       	ld	r24, Z
 23e:	81 11       	cpse	r24, r1
 240:	05 c0       	rjmp	.+10     	; 0x24c <HEX2BCD_uint+0x138>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	81 93       	st	Z+, r24
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	2a e0       	ldi	r18, 0x0A	; 10
 24a:	f1 cf       	rjmp	.-30     	; 0x22e <HEX2BCD_uint+0x11a>
		else return; 
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <SEG7_disp_uint>:
	TCCR0B |= (1 << CS00) | (1 << CS01) ;        // set pre-scaler to 64 and start the timer
	hc595_set_spi();
}

void SEG7_disp_uint(unsigned int sg1,unsigned int sg2)
{
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <SEG7_disp_uint+0xa>
 25c:	00 d0       	rcall	.+0      	; 0x25e <SEG7_disp_uint+0xc>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	8b 01       	movw	r16, r22
	unsigned char _temp[4];
	if (sg1<=9999)
 264:	80 31       	cpi	r24, 0x10	; 16
 266:	27 e2       	ldi	r18, 0x27	; 39
 268:	92 07       	cpc	r25, r18
 26a:	08 f5       	brcc	.+66     	; 0x2ae <SEG7_disp_uint+0x5c>
	{
		HEX2BCD_uint(sg1,_temp);
 26c:	be 01       	movw	r22, r28
 26e:	6f 5f       	subi	r22, 0xFF	; 255
 270:	7f 4f       	sbci	r23, 0xFF	; 255
 272:	0e 94 8a 00 	call	0x114	; 0x114 <HEX2BCD_uint>
		seg7_data.seg11 = pgm_read_byte(&seg7_decode[_temp[0]]);
 276:	e9 81       	ldd	r30, Y+1	; 0x01
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e4 58       	subi	r30, 0x84	; 132
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	e4 91       	lpm	r30, Z
 280:	e0 93 00 01 	sts	0x0100, r30
		seg7_data.seg12 = pgm_read_byte(&seg7_decode[_temp[1]]);
 284:	ea 81       	ldd	r30, Y+2	; 0x02
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e4 58       	subi	r30, 0x84	; 132
 28a:	ff 4f       	sbci	r31, 0xFF	; 255
 28c:	e4 91       	lpm	r30, Z
 28e:	e0 93 01 01 	sts	0x0101, r30
		seg7_data.seg13 = pgm_read_byte(&seg7_decode[_temp[2]]);
 292:	eb 81       	ldd	r30, Y+3	; 0x03
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	e4 58       	subi	r30, 0x84	; 132
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	e4 91       	lpm	r30, Z
 29c:	e0 93 02 01 	sts	0x0102, r30
		seg7_data.seg14 = pgm_read_byte(&seg7_decode[_temp[3]]);
 2a0:	ec 81       	ldd	r30, Y+4	; 0x04
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	e4 58       	subi	r30, 0x84	; 132
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	e4 91       	lpm	r30, Z
 2aa:	e0 93 03 01 	sts	0x0103, r30
	}
	if (sg2<=9999)
 2ae:	00 31       	cpi	r16, 0x10	; 16
 2b0:	87 e2       	ldi	r24, 0x27	; 39
 2b2:	18 07       	cpc	r17, r24
 2b4:	10 f5       	brcc	.+68     	; 0x2fa <SEG7_disp_uint+0xa8>
	{
		
		HEX2BCD_uint(sg2,_temp);
 2b6:	be 01       	movw	r22, r28
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	c8 01       	movw	r24, r16
 2be:	0e 94 8a 00 	call	0x114	; 0x114 <HEX2BCD_uint>
		seg7_data.seg21 = pgm_read_byte(&seg7_decode[_temp[0]]);
 2c2:	e9 81       	ldd	r30, Y+1	; 0x01
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e4 58       	subi	r30, 0x84	; 132
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	e4 91       	lpm	r30, Z
 2cc:	e0 93 04 01 	sts	0x0104, r30
		seg7_data.seg22 = pgm_read_byte(&seg7_decode[_temp[1]]);
 2d0:	ea 81       	ldd	r30, Y+2	; 0x02
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	e4 58       	subi	r30, 0x84	; 132
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	e4 91       	lpm	r30, Z
 2da:	e0 93 05 01 	sts	0x0105, r30
		seg7_data.seg23 = pgm_read_byte(&seg7_decode[_temp[2]]);
 2de:	eb 81       	ldd	r30, Y+3	; 0x03
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e4 58       	subi	r30, 0x84	; 132
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	e4 91       	lpm	r30, Z
 2e8:	e0 93 06 01 	sts	0x0106, r30
		seg7_data.seg24 = pgm_read_byte(&seg7_decode[_temp[3]]);
 2ec:	ec 81       	ldd	r30, Y+4	; 0x04
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	e4 58       	subi	r30, 0x84	; 132
 2f2:	ff 4f       	sbci	r31, 0xFF	; 255
 2f4:	e4 91       	lpm	r30, Z
 2f6:	e0 93 07 01 	sts	0x0107, r30
	}
}
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	08 95       	ret

0000030c <SEG7_send>:
		break;
	}
}

 void SEG7_send(unsigned char mux,unsigned val)
{
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	16 2f       	mov	r17, r22
	unsigned int _temp=0xffff;
	_temp &=~(1<<mux);
 314:	c1 e0       	ldi	r28, 0x01	; 1
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	9e 01       	movw	r18, r28
 31a:	02 c0       	rjmp	.+4      	; 0x320 <SEG7_send+0x14>
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <SEG7_send+0x10>
 324:	e9 01       	movw	r28, r18
 326:	c0 95       	com	r28
 328:	d0 95       	com	r29
	hc595_byte_transmit(_temp>>8);
 32a:	8d 2f       	mov	r24, r29
 32c:	0e 94 63 00 	call	0xc6	; 0xc6 <hc595_byte_transmit>
	hc595_byte_transmit(_temp);
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 63 00 	call	0xc6	; 0xc6 <hc595_byte_transmit>
	hc595_byte_transmit(val);
 336:	81 2f       	mov	r24, r17
 338:	0e 94 63 00 	call	0xc6	; 0xc6 <hc595_byte_transmit>
	hc595_latch();
 33c:	0e 94 78 00 	call	0xf0	; 0xf0 <hc595_latch>
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <SEG7_scan>:
	}
}

void SEG7_scan(void)
{
	switch(seg7_ctr.seg7_stage)
 348:	80 91 0a 01 	lds	r24, 0x010A
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	8a 30       	cpi	r24, 0x0A	; 10
 350:	91 05       	cpc	r25, r1
 352:	08 f0       	brcs	.+2      	; 0x356 <SEG7_scan+0xe>
 354:	68 c0       	rjmp	.+208    	; 0x426 <SEG7_scan+0xde>
 356:	fc 01       	movw	r30, r24
 358:	ec 5c       	subi	r30, 0xCC	; 204
 35a:	ff 4f       	sbci	r31, 0xFF	; 255
 35c:	0c 94 19 04 	jmp	0x832	; 0x832 <__tablejump2__>
	{
		case 0:
		SEG7_send(0,seg7_data.seg12);
 360:	60 91 01 01 	lds	r22, 0x0101
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 0a 01 	sts	0x010A, r24
		break;
 372:	08 95       	ret
		case 1:
		SEG7_send(1,seg7_data.seg13);
 374:	60 91 02 01 	lds	r22, 0x0102
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =2;
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	80 93 0a 01 	sts	0x010A, r24
		break;
 386:	08 95       	ret
		case 2:
		SEG7_send(2,seg7_data.seg14);
 388:	60 91 03 01 	lds	r22, 0x0103
 38c:	70 e0       	ldi	r23, 0x00	; 0
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =3;
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	80 93 0a 01 	sts	0x010A, r24
		break;
 39a:	08 95       	ret
		case 3:
		SEG7_send(3,seg7_data.seg22);
 39c:	60 91 05 01 	lds	r22, 0x0105
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =4;
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	80 93 0a 01 	sts	0x010A, r24
		break;
 3ae:	08 95       	ret
		case 4:
		SEG7_send(4,seg7_data.seg23);
 3b0:	60 91 06 01 	lds	r22, 0x0106
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =5;
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	80 93 0a 01 	sts	0x010A, r24
		break;
 3c2:	08 95       	ret
		case 5:
		SEG7_send(5,seg7_data.seg24);
 3c4:	60 91 07 01 	lds	r22, 0x0107
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =6;
 3d0:	86 e0       	ldi	r24, 0x06	; 6
 3d2:	80 93 0a 01 	sts	0x010A, r24
		break;
 3d6:	08 95       	ret
		case 6:
		SEG7_send(6,seg7_data.seg11);
 3d8:	60 91 00 01 	lds	r22, 0x0100
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =7;
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	80 93 0a 01 	sts	0x010A, r24
		break;
 3ea:	08 95       	ret
		case 7:
		SEG7_send(7,seg7_data.seg21);
 3ec:	60 91 04 01 	lds	r22, 0x0104
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	87 e0       	ldi	r24, 0x07	; 7
 3f4:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =8;
 3f8:	88 e0       	ldi	r24, 0x08	; 8
 3fa:	80 93 0a 01 	sts	0x010A, r24
		break;
 3fe:	08 95       	ret
		case 8:
		SEG7_send(8,seg7_data.leds_61);
 400:	60 91 08 01 	lds	r22, 0x0108
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =9;
 40c:	89 e0       	ldi	r24, 0x09	; 9
 40e:	80 93 0a 01 	sts	0x010A, r24
		break;
 412:	08 95       	ret
		case 9:
		SEG7_send(9,seg7_data.leds_62);
 414:	60 91 09 01 	lds	r22, 0x0109
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	89 e0       	ldi	r24, 0x09	; 9
 41c:	0e 94 86 01 	call	0x30c	; 0x30c <SEG7_send>
		seg7_ctr.seg7_stage =0;
 420:	10 92 0a 01 	sts	0x010A, r1
		break;
 424:	08 95       	ret
		default:
		seg7_ctr.seg7_stage =0;
 426:	10 92 0a 01 	sts	0x010A, r1
 42a:	08 95       	ret

0000042c <__vector_14>:
		break;
	}
}

ISR(TIMER0_COMPA_vect)
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
	SEG7_scan();
 44e:	0e 94 a4 01 	call	0x348	; 0x348 <SEG7_scan>
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <main>:

unsigned char data[200];

int main(void)
{
	hc595_set_spi();
 474:	0e 94 5c 00 	call	0xb8	; 0xb8 <hc595_set_spi>
	SEG7_initial();
 478:	0e 94 7b 00 	call	0xf6	; 0xf6 <SEG7_initial>
	RS485_initial(MYUBRR,100);
 47c:	64 e6       	ldi	r22, 0x64	; 100
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RS485_initial>
	
	sei();
 486:	78 94       	sei
	RS485_reciving();
 488:	0e 94 81 02 	call	0x502	; 0x502 <RS485_reciving>
	{
		
		if (RS485_reading(data)==_REC_DATA)
		{
			
			SEG7_disp_uint(data[0],data[1]);
 48c:	cd e0       	ldi	r28, 0x0D	; 13
 48e:	d1 e0       	ldi	r29, 0x01	; 1
	RS485_reciving();

	while (1)
	{
		
		if (RS485_reading(data)==_REC_DATA)
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 89 02 	call	0x512	; 0x512 <RS485_reading>
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	d1 f7       	brne	.-12     	; 0x490 <main+0x1c>
		{
			
			SEG7_disp_uint(data[0],data[1]);
 49c:	68 81       	ld	r22, Y
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	80 91 0c 01 	lds	r24, 0x010C
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 29 01 	call	0x252	; 0x252 <SEG7_disp_uint>
			
			RS485_reciving();
 4aa:	0e 94 81 02 	call	0x502	; 0x502 <RS485_reciving>
 4ae:	f0 cf       	rjmp	.-32     	; 0x490 <main+0x1c>

000004b0 <RS485_initial>:
volatile RS485_CTR	 rs_ctr;
volatile RS485_flag  rs_flag;
#include "disp/xiudun2008V.h"
void RS485_initial(unsigned int ubrr,unsigned char _myaddr)// MYUBRR
{
	RS_DDR |=(1<<TXD_PIN)|(1<<TXEN_PIN);
 4b0:	2a b1       	in	r18, 0x0a	; 10
 4b2:	22 68       	ori	r18, 0x82	; 130
 4b4:	2a b9       	out	0x0a, r18	; 10
	RS_DDR &=~(1<<RXD_PIN);
 4b6:	50 98       	cbi	0x0a, 0	; 10
	RS_PORT |= 1<<RXD_PIN;
 4b8:	58 9a       	sbi	0x0b, 0	; 11
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 4ba:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 4be:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable transmitter */
	UCSR0B = (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
 4c2:	88 ed       	ldi	r24, 0xD8	; 216
 4c4:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C =(1<<USBS0)|(3<<UCSZ00);
 4c8:	8e e0       	ldi	r24, 0x0E	; 14
 4ca:	80 93 c2 00 	sts	0x00C2, r24
	rs_pack.my_ddr = _myaddr;
 4ce:	60 93 d6 02 	sts	0x02D6, r22
	rs_flag.all = 0;
 4d2:	10 92 d7 02 	sts	0x02D7, r1
	rs_ctr.stage = 0;
 4d6:	10 92 da 02 	sts	0x02DA, r1
 4da:	08 95       	ret

000004dc <RS485_TXEN>:
}

void RS485_TXEN(unsigned char _val)// _ENABLE || _DISABLE
{
	if (_val) RS_PORT |= 1<<TXEN_PIN;
 4dc:	88 23       	and	r24, r24
 4de:	11 f0       	breq	.+4      	; 0x4e4 <RS485_TXEN+0x8>
 4e0:	5f 9a       	sbi	0x0b, 7	; 11
 4e2:	08 95       	ret
	else RS_PORT &=~(1<<TXEN_PIN);
 4e4:	5f 98       	cbi	0x0b, 7	; 11
 4e6:	08 95       	ret

000004e8 <USART_Flush>:
	rs_pack.len = 5;
}
	void USART_Flush( void )
	{
		unsigned char dummy;
		while ( UCSR0A&(1<<RXC0) )
 4e8:	80 91 c0 00 	lds	r24, 0x00C0
 4ec:	88 23       	and	r24, r24
 4ee:	44 f4       	brge	.+16     	; 0x500 <USART_Flush+0x18>
		{
			dummy = UDR0;
 4f0:	a6 ec       	ldi	r26, 0xC6	; 198
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
	rs_pack.len = 5;
}
	void USART_Flush( void )
	{
		unsigned char dummy;
		while ( UCSR0A&(1<<RXC0) )
 4f4:	e0 ec       	ldi	r30, 0xC0	; 192
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
		{
			dummy = UDR0;
 4f8:	8c 91       	ld	r24, X
	rs_pack.len = 5;
}
	void USART_Flush( void )
	{
		unsigned char dummy;
		while ( UCSR0A&(1<<RXC0) )
 4fa:	80 81       	ld	r24, Z
 4fc:	88 23       	and	r24, r24
 4fe:	e4 f3       	brlt	.-8      	; 0x4f8 <USART_Flush+0x10>
 500:	08 95       	ret

00000502 <RS485_reciving>:
	UDR0 = 0;
}

void RS485_reciving(void)
{
	RS485_TXEN(_DISABLE);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RS485_TXEN>
	rs_flag.all = 0;
 508:	10 92 d7 02 	sts	0x02D7, r1
	rs_ctr.stage = 0;
 50c:	10 92 da 02 	sts	0x02DA, r1
 510:	08 95       	ret

00000512 <RS485_reading>:
}

unsigned char RS485_reading(unsigned char *_data)// [len][d0][d1][d2][d3]...
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	fc 01       	movw	r30, r24
	if ((rs_ctr.stage==255) && (rs_flag.complete==1))
 518:	80 91 da 02 	lds	r24, 0x02DA
 51c:	8f 3f       	cpi	r24, 0xFF	; 255
 51e:	a1 f5       	brne	.+104    	; 0x588 <RS485_reading+0x76>
 520:	90 91 d7 02 	lds	r25, 0x02D7
 524:	89 2f       	mov	r24, r25
 526:	81 70       	andi	r24, 0x01	; 1
 528:	90 ff       	sbrs	r25, 0
 52a:	33 c0       	rjmp	.+102    	; 0x592 <RS485_reading+0x80>
	{
		if (rs_flag.error==_ERR) return 0;
 52c:	90 91 d7 02 	lds	r25, 0x02D7
 530:	89 2f       	mov	r24, r25
 532:	88 70       	andi	r24, 0x08	; 8
 534:	93 fd       	sbrc	r25, 3
 536:	2a c0       	rjmp	.+84     	; 0x58c <RS485_reading+0x7a>
		else
		{
			if (rs_flag.mode==_REC_DATA)
 538:	90 91 d7 02 	lds	r25, 0x02D7
 53c:	96 70       	andi	r25, 0x06	; 6
 53e:	94 30       	cpi	r25, 0x04	; 4
 540:	a1 f4       	brne	.+40     	; 0x56a <RS485_reading+0x58>
			{
				for (unsigned int i = 0; i <(rs_pack.data[2]+1); i++) _data[i]=rs_pack.data[i+2];
 542:	80 91 d6 01 	lds	r24, 0x01D6
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	c6 ed       	ldi	r28, 0xD6	; 214
 54c:	d1 e0       	ldi	r29, 0x01	; 1
 54e:	d9 01       	movw	r26, r18
 550:	aa 52       	subi	r26, 0x2A	; 42
 552:	be 4f       	sbci	r27, 0xFE	; 254
 554:	8c 91       	ld	r24, X
 556:	81 93       	st	Z+, r24
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	88 81       	ld	r24, Y
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	28 17       	cp	r18, r24
 564:	39 07       	cpc	r19, r25
 566:	98 f3       	brcs	.-26     	; 0x54e <RS485_reading+0x3c>
 568:	13 c0       	rjmp	.+38     	; 0x590 <RS485_reading+0x7e>
				return _REC_DATA;
			}
			if (rs_flag.mode==_REC_RESPOND)
 56a:	90 91 d7 02 	lds	r25, 0x02D7
 56e:	96 70       	andi	r25, 0x06	; 6
 570:	96 30       	cpi	r25, 0x06	; 6
 572:	79 f4       	brne	.+30     	; 0x592 <RS485_reading+0x80>
			{
				_data[0] = 2;
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	80 83       	st	Z, r24
				_data[1] = rs_pack.data[1];
 578:	80 91 d5 01 	lds	r24, 0x01D5
 57c:	81 83       	std	Z+1, r24	; 0x01
				_data[2] = rs_pack.data[2];
 57e:	80 91 d6 01 	lds	r24, 0x01D6
 582:	82 83       	std	Z+2, r24	; 0x02
				return _REC_RESPOND;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	05 c0       	rjmp	.+10     	; 0x592 <RS485_reading+0x80>
			}
		}
	}
	return 0;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	03 c0       	rjmp	.+6      	; 0x592 <RS485_reading+0x80>

unsigned char RS485_reading(unsigned char *_data)// [len][d0][d1][d2][d3]...
{
	if ((rs_ctr.stage==255) && (rs_flag.complete==1))
	{
		if (rs_flag.error==_ERR) return 0;
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	01 c0       	rjmp	.+2      	; 0x592 <RS485_reading+0x80>
		else
		{
			if (rs_flag.mode==_REC_DATA)
			{
				for (unsigned int i = 0; i <(rs_pack.data[2]+1); i++) _data[i]=rs_pack.data[i+2];
				return _REC_DATA;
 590:	82 e0       	ldi	r24, 0x02	; 2
				return _REC_RESPOND;
			}
		}
	}
	return 0;
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <CheckSum>:

unsigned char CheckSum(volatile unsigned char *_data_in,unsigned int _data_len)	// CRC CHECK , 255 if error
{
	unsigned char crc;
	crc = 0;
	for (unsigned int i = 0;i<_data_len;i++)
 598:	61 15       	cp	r22, r1
 59a:	71 05       	cpc	r23, r1
 59c:	89 f0       	breq	.+34     	; 0x5c0 <CheckSum+0x28>
 59e:	fc 01       	movw	r30, r24
 5a0:	68 0f       	add	r22, r24
 5a2:	79 1f       	adc	r23, r25
}

unsigned char CheckSum(volatile unsigned char *_data_in,unsigned int _data_len)	// CRC CHECK , 255 if error
{
	unsigned char crc;
	crc = 0;
 5a4:	80 e0       	ldi	r24, 0x00	; 0
	for (unsigned int i = 0;i<_data_len;i++)
	crc = _crc_ibutton_update(crc,_data_in[i]);
 5a6:	91 91       	ld	r25, Z+

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 5a8:	89 27       	eor	r24, r25
 5aa:	98 e0       	ldi	r25, 0x08	; 8
 5ac:	2c e8       	ldi	r18, 0x8C	; 140
 5ae:	86 95       	lsr	r24
 5b0:	08 f4       	brcc	.+2      	; 0x5b4 <CheckSum+0x1c>
 5b2:	82 27       	eor	r24, r18
 5b4:	9a 95       	dec	r25
 5b6:	d9 f7       	brne	.-10     	; 0x5ae <CheckSum+0x16>

unsigned char CheckSum(volatile unsigned char *_data_in,unsigned int _data_len)	// CRC CHECK , 255 if error
{
	unsigned char crc;
	crc = 0;
	for (unsigned int i = 0;i<_data_len;i++)
 5b8:	e6 17       	cp	r30, r22
 5ba:	f7 07       	cpc	r31, r23
 5bc:	a1 f7       	brne	.-24     	; 0x5a6 <CheckSum+0xe>
 5be:	08 95       	ret
}

unsigned char CheckSum(volatile unsigned char *_data_in,unsigned int _data_len)	// CRC CHECK , 255 if error
{
	unsigned char crc;
	crc = 0;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
	for (unsigned int i = 0;i<_data_len;i++)
	crc = _crc_ibutton_update(crc,_data_in[i]);
	return crc;
}
 5c2:	08 95       	ret

000005c4 <__vector_20>:

ISR(USART_TX_vect)
{
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31
	
		if (rs_flag.mode!=_SEND)  return;
 5e6:	80 91 d7 02 	lds	r24, 0x02D7
 5ea:	86 70       	andi	r24, 0x06	; 6
 5ec:	82 30       	cpi	r24, 0x02	; 2
 5ee:	71 f5       	brne	.+92     	; 0x64c <__vector_20+0x88>
	
			if (rs_ctr.counter<rs_pack.len)
 5f0:	20 91 d8 02 	lds	r18, 0x02D8
 5f4:	30 91 d9 02 	lds	r19, 0x02D9
 5f8:	80 91 d4 02 	lds	r24, 0x02D4
 5fc:	90 91 d5 02 	lds	r25, 0x02D5
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	a0 f4       	brcc	.+40     	; 0x62e <__vector_20+0x6a>
			{
				while( !( UCSR0A & (1<<UDRE0)));
 606:	e0 ec       	ldi	r30, 0xC0	; 192
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	85 ff       	sbrs	r24, 5
 60e:	fd cf       	rjmp	.-6      	; 0x60a <__vector_20+0x46>
				UDR0 =rs_pack.data[rs_ctr.counter];
 610:	e8 ed       	ldi	r30, 0xD8	; 216
 612:	f2 e0       	ldi	r31, 0x02	; 2
 614:	a0 81       	ld	r26, Z
 616:	b1 81       	ldd	r27, Z+1	; 0x01
 618:	ac 52       	subi	r26, 0x2C	; 44
 61a:	be 4f       	sbci	r27, 0xFE	; 254
 61c:	8c 91       	ld	r24, X
 61e:	80 93 c6 00 	sts	0x00C6, r24
				rs_ctr.counter++;
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	01 96       	adiw	r24, 0x01	; 1
 628:	91 83       	std	Z+1, r25	; 0x01
 62a:	80 83       	st	Z, r24
 62c:	0f c0       	rjmp	.+30     	; 0x64c <__vector_20+0x88>
			}
			else
			{
				
				RS485_TXEN(_DISABLE);
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 6e 02 	call	0x4dc	; 0x4dc <RS485_TXEN>
				 USART_Flush();
 634:	0e 94 74 02 	call	0x4e8	; 0x4e8 <USART_Flush>
				rs_flag.complete = 1;
 638:	80 91 d7 02 	lds	r24, 0x02D7
 63c:	81 60       	ori	r24, 0x01	; 1
 63e:	80 93 d7 02 	sts	0x02D7, r24
				rs_flag.mode=_WAIT;
 642:	80 91 d7 02 	lds	r24, 0x02D7
 646:	89 7f       	andi	r24, 0xF9	; 249
 648:	80 93 d7 02 	sts	0x02D7, r24
			}
}
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <__vector_18>:

ISR(USART_RX_vect)
{
 66e:	1f 92       	push	r1
 670:	0f 92       	push	r0
 672:	0f b6       	in	r0, 0x3f	; 63
 674:	0f 92       	push	r0
 676:	11 24       	eor	r1, r1
 678:	2f 93       	push	r18
 67a:	3f 93       	push	r19
 67c:	4f 93       	push	r20
 67e:	5f 93       	push	r21
 680:	6f 93       	push	r22
 682:	7f 93       	push	r23
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
 68c:	cf 93       	push	r28
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	unsigned char _temp;
	_temp = UDR0;
 692:	90 91 c6 00 	lds	r25, 0x00C6
	if (rs_flag.mode ==_SEND) return;
 696:	80 91 d7 02 	lds	r24, 0x02D7
 69a:	86 70       	andi	r24, 0x06	; 6
 69c:	82 30       	cpi	r24, 0x02	; 2
 69e:	09 f4       	brne	.+2      	; 0x6a2 <__vector_18+0x34>
 6a0:	b6 c0       	rjmp	.+364    	; 0x80e <__vector_18+0x1a0>
	switch (rs_ctr.stage)
 6a2:	80 91 da 02 	lds	r24, 0x02DA
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	41 f1       	breq	.+80     	; 0x6fa <__vector_18+0x8c>
 6aa:	28 f4       	brcc	.+10     	; 0x6b6 <__vector_18+0x48>
 6ac:	88 23       	and	r24, r24
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <__vector_18+0x58>
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	c1 f0       	breq	.+48     	; 0x6e4 <__vector_18+0x76>
 6b4:	ac c0       	rjmp	.+344    	; 0x80e <__vector_18+0x1a0>
 6b6:	84 30       	cpi	r24, 0x04	; 4
 6b8:	09 f4       	brne	.+2      	; 0x6bc <__vector_18+0x4e>
 6ba:	70 c0       	rjmp	.+224    	; 0x79c <__vector_18+0x12e>
 6bc:	a0 f1       	brcs	.+104    	; 0x726 <__vector_18+0xb8>
 6be:	85 30       	cpi	r24, 0x05	; 5
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <__vector_18+0x56>
 6c2:	79 c0       	rjmp	.+242    	; 0x7b6 <__vector_18+0x148>
 6c4:	a4 c0       	rjmp	.+328    	; 0x80e <__vector_18+0x1a0>
	{
		case 0:
		if (_temp==0xAA) rs_ctr.stage = 1;
 6c6:	9a 3a       	cpi	r25, 0xAA	; 170
 6c8:	21 f4       	brne	.+8      	; 0x6d2 <__vector_18+0x64>
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	80 93 da 02 	sts	0x02DA, r24
 6d0:	9e c0       	rjmp	.+316    	; 0x80e <__vector_18+0x1a0>
		else if (_temp==0xCC) rs_ctr.stage = 4;
 6d2:	9c 3c       	cpi	r25, 0xCC	; 204
 6d4:	21 f4       	brne	.+8      	; 0x6de <__vector_18+0x70>
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	80 93 da 02 	sts	0x02DA, r24
 6dc:	98 c0       	rjmp	.+304    	; 0x80e <__vector_18+0x1a0>
		else rs_ctr.stage = 0;
 6de:	10 92 da 02 	sts	0x02DA, r1
 6e2:	95 c0       	rjmp	.+298    	; 0x80e <__vector_18+0x1a0>
		break;
		case 1:
		
		if (_temp==rs_pack.my_ddr) rs_ctr.stage = 2;
 6e4:	80 91 d6 02 	lds	r24, 0x02D6
 6e8:	89 13       	cpse	r24, r25
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__vector_18+0x86>
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	80 93 da 02 	sts	0x02DA, r24
 6f2:	8d c0       	rjmp	.+282    	; 0x80e <__vector_18+0x1a0>
		else rs_ctr.stage = 0;
 6f4:	10 92 da 02 	sts	0x02DA, r1
 6f8:	8a c0       	rjmp	.+276    	; 0x80e <__vector_18+0x1a0>
		break;
		case 2:
		if (_temp!=0) 
 6fa:	99 23       	and	r25, r25
 6fc:	89 f0       	breq	.+34     	; 0x720 <__vector_18+0xb2>
		{
			rs_pack.data[0]=0xAA;
 6fe:	8a ea       	ldi	r24, 0xAA	; 170
 700:	80 93 d4 01 	sts	0x01D4, r24
			rs_pack.data[1]=rs_pack.my_ddr;
 704:	80 91 d6 02 	lds	r24, 0x02D6
 708:	80 93 d5 01 	sts	0x01D5, r24
			rs_pack.data[2]=_temp;
 70c:	90 93 d6 01 	sts	0x01D6, r25
			rs_ctr.counter = 0;
 710:	10 92 d9 02 	sts	0x02D9, r1
 714:	10 92 d8 02 	sts	0x02D8, r1
			rs_ctr.stage = 3;
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	80 93 da 02 	sts	0x02DA, r24
 71e:	77 c0       	rjmp	.+238    	; 0x80e <__vector_18+0x1a0>
		}
		else rs_ctr.stage = 0;
 720:	10 92 da 02 	sts	0x02DA, r1
 724:	74 c0       	rjmp	.+232    	; 0x80e <__vector_18+0x1a0>
		break;
		case 3:
		rs_pack.data[rs_ctr.counter+3]=_temp;
 726:	e8 ed       	ldi	r30, 0xD8	; 216
 728:	f2 e0       	ldi	r31, 0x02	; 2
 72a:	a0 81       	ld	r26, Z
 72c:	b1 81       	ldd	r27, Z+1	; 0x01
 72e:	a9 52       	subi	r26, 0x29	; 41
 730:	be 4f       	sbci	r27, 0xFE	; 254
 732:	9c 93       	st	X, r25
		 rs_ctr.counter++;
 734:	80 81       	ld	r24, Z
 736:	91 81       	ldd	r25, Z+1	; 0x01
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	91 83       	std	Z+1, r25	; 0x01
 73c:	80 83       	st	Z, r24
		if (rs_ctr.counter>=(rs_pack.data[2]+2))
 73e:	20 81       	ld	r18, Z
 740:	31 81       	ldd	r19, Z+1	; 0x01
 742:	80 91 d6 01 	lds	r24, 0x01D6
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	02 96       	adiw	r24, 0x02	; 2
 74a:	28 17       	cp	r18, r24
 74c:	39 07       	cpc	r19, r25
 74e:	08 f4       	brcc	.+2      	; 0x752 <__vector_18+0xe4>
 750:	5e c0       	rjmp	.+188    	; 0x80e <__vector_18+0x1a0>
		{
			rs_flag.complete = 1;
 752:	80 91 d7 02 	lds	r24, 0x02D7
 756:	81 60       	ori	r24, 0x01	; 1
 758:	80 93 d7 02 	sts	0x02D7, r24
			if	(rs_pack.data[rs_pack.data[2]+3]!=CheckSum(rs_pack.data,rs_pack.data[2]+3)) rs_flag.error  = _ERR;
 75c:	e6 ed       	ldi	r30, 0xD6	; 214
 75e:	f1 e0       	ldi	r31, 0x01	; 1
 760:	a0 81       	ld	r26, Z
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	a9 52       	subi	r26, 0x29	; 41
 766:	be 4f       	sbci	r27, 0xFE	; 254
 768:	cc 91       	ld	r28, X
 76a:	60 81       	ld	r22, Z
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	6d 5f       	subi	r22, 0xFD	; 253
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	84 ed       	ldi	r24, 0xD4	; 212
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 cc 02 	call	0x598	; 0x598 <CheckSum>
 77a:	c8 17       	cp	r28, r24
 77c:	29 f0       	breq	.+10     	; 0x788 <__vector_18+0x11a>
 77e:	80 91 d7 02 	lds	r24, 0x02D7
 782:	88 60       	ori	r24, 0x08	; 8
 784:	80 93 d7 02 	sts	0x02D7, r24
			rs_flag.mode = _REC_DATA;
 788:	80 91 d7 02 	lds	r24, 0x02D7
 78c:	89 7f       	andi	r24, 0xF9	; 249
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	80 93 d7 02 	sts	0x02D7, r24
			rs_ctr.stage = 255;
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	80 93 da 02 	sts	0x02DA, r24
 79a:	39 c0       	rjmp	.+114    	; 0x80e <__vector_18+0x1a0>
		}
		break;
		case 4:
		rs_pack.data[0]=0xCC;
 79c:	8c ec       	ldi	r24, 0xCC	; 204
 79e:	80 93 d4 01 	sts	0x01D4, r24
		rs_pack.data[1] = _temp;
 7a2:	90 93 d5 01 	sts	0x01D5, r25
		rs_ctr.counter = 0;
 7a6:	10 92 d9 02 	sts	0x02D9, r1
 7aa:	10 92 d8 02 	sts	0x02D8, r1
		rs_ctr.stage = 5;
 7ae:	85 e0       	ldi	r24, 0x05	; 5
 7b0:	80 93 da 02 	sts	0x02DA, r24
		break;
 7b4:	2c c0       	rjmp	.+88     	; 0x80e <__vector_18+0x1a0>
		case 5:
		rs_pack.data[rs_ctr.counter+2]=_temp;
 7b6:	e8 ed       	ldi	r30, 0xD8	; 216
 7b8:	f2 e0       	ldi	r31, 0x02	; 2
 7ba:	a0 81       	ld	r26, Z
 7bc:	b1 81       	ldd	r27, Z+1	; 0x01
 7be:	aa 52       	subi	r26, 0x2A	; 42
 7c0:	be 4f       	sbci	r27, 0xFE	; 254
 7c2:	9c 93       	st	X, r25
		rs_ctr.counter++;
 7c4:	80 81       	ld	r24, Z
 7c6:	91 81       	ldd	r25, Z+1	; 0x01
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	91 83       	std	Z+1, r25	; 0x01
 7cc:	80 83       	st	Z, r24
		if (rs_ctr.counter>=2)
 7ce:	80 81       	ld	r24, Z
 7d0:	91 81       	ldd	r25, Z+1	; 0x01
 7d2:	02 97       	sbiw	r24, 0x02	; 2
 7d4:	e0 f0       	brcs	.+56     	; 0x80e <__vector_18+0x1a0>
		{
			rs_flag.complete = 1;
 7d6:	80 91 d7 02 	lds	r24, 0x02D7
 7da:	81 60       	ori	r24, 0x01	; 1
 7dc:	80 93 d7 02 	sts	0x02D7, r24
			if	(rs_pack.data[3]!=CheckSum(rs_pack.data,3)) rs_flag.error  = _ERR;
 7e0:	c0 91 d7 01 	lds	r28, 0x01D7
 7e4:	63 e0       	ldi	r22, 0x03	; 3
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	84 ed       	ldi	r24, 0xD4	; 212
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	0e 94 cc 02 	call	0x598	; 0x598 <CheckSum>
 7f0:	c8 17       	cp	r28, r24
 7f2:	29 f0       	breq	.+10     	; 0x7fe <__vector_18+0x190>
 7f4:	80 91 d7 02 	lds	r24, 0x02D7
 7f8:	88 60       	ori	r24, 0x08	; 8
 7fa:	80 93 d7 02 	sts	0x02D7, r24
			rs_flag.mode = _REC_RESPOND;
 7fe:	80 91 d7 02 	lds	r24, 0x02D7
 802:	86 60       	ori	r24, 0x06	; 6
 804:	80 93 d7 02 	sts	0x02D7, r24
			rs_ctr.stage = 255;
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	80 93 da 02 	sts	0x02DA, r24
		}
		break;
		default:
		break;
	}
}
 80e:	ff 91       	pop	r31
 810:	ef 91       	pop	r30
 812:	cf 91       	pop	r28
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__tablejump2__>:
 832:	ee 0f       	add	r30, r30
 834:	ff 1f       	adc	r31, r31

00000836 <__tablejump__>:
 836:	05 90       	lpm	r0, Z+
 838:	f4 91       	lpm	r31, Z
 83a:	e0 2d       	mov	r30, r0
 83c:	09 94       	ijmp

0000083e <__umulhisi3>:
 83e:	a2 9f       	mul	r26, r18
 840:	b0 01       	movw	r22, r0
 842:	b3 9f       	mul	r27, r19
 844:	c0 01       	movw	r24, r0
 846:	a3 9f       	mul	r26, r19
 848:	70 0d       	add	r23, r0
 84a:	81 1d       	adc	r24, r1
 84c:	11 24       	eor	r1, r1
 84e:	91 1d       	adc	r25, r1
 850:	b2 9f       	mul	r27, r18
 852:	70 0d       	add	r23, r0
 854:	81 1d       	adc	r24, r1
 856:	11 24       	eor	r1, r1
 858:	91 1d       	adc	r25, r1
 85a:	08 95       	ret

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
