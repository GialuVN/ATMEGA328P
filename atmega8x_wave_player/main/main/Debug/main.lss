
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c5c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001c5c  00001d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015a  00800070  00800070  00001d20  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb2  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f9  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000869  00000000  00000000  00004113  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000490  00000000  00000000  0000497c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000476  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000220a  00000000  00000000  00005282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000748c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
       2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
       4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
       6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
       8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
       a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
       c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
       e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
      10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
      12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
      14:	cc c0       	rjmp	.+408    	; 0x1ae <__vector_10>
      16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
      18:	c1 c1       	rjmp	.+898    	; 0x39c <__vector_12>
      1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
      1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	25 73       	andi	r18, 0x35	; 53
      20:	2f 25       	eor	r18, r15
      22:	73 00       	.word	0x0073	; ????

00000024 <__ctors_end>:
      24:	11 24       	eor	r1, r1
      26:	1f be       	out	0x3f, r1	; 63
      28:	cf e5       	ldi	r28, 0x5F	; 95
      2a:	d2 e0       	ldi	r29, 0x02	; 2
      2c:	de bf       	out	0x3e, r29	; 62
      2e:	cd bf       	out	0x3d, r28	; 61

00000030 <__do_copy_data>:
      30:	10 e0       	ldi	r17, 0x00	; 0
      32:	a0 e6       	ldi	r26, 0x60	; 96
      34:	b0 e0       	ldi	r27, 0x00	; 0
      36:	ec e5       	ldi	r30, 0x5C	; 92
      38:	fc e1       	ldi	r31, 0x1C	; 28
      3a:	02 c0       	rjmp	.+4      	; 0x40 <__SREG__+0x1>
      3c:	05 90       	lpm	r0, Z+
      3e:	0d 92       	st	X+, r0
      40:	a0 37       	cpi	r26, 0x70	; 112
      42:	b1 07       	cpc	r27, r17
      44:	d9 f7       	brne	.-10     	; 0x3c <__do_copy_data+0xc>

00000046 <__do_clear_bss>:
      46:	21 e0       	ldi	r18, 0x01	; 1
      48:	a0 e7       	ldi	r26, 0x70	; 112
      4a:	b0 e0       	ldi	r27, 0x00	; 0
      4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
      4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
      50:	aa 3c       	cpi	r26, 0xCA	; 202
      52:	b2 07       	cpc	r27, r18
      54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
      56:	a3 d1       	rcall	.+838    	; 0x39e <main>
      58:	ff cd       	rjmp	.-1026   	; 0xfffffc58 <__fuse+0xff7dfc58>

0000005a <__bad_interrupt>:
      5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <delay_ms>:
; void delay_us(WORD us);

.global delay_ms
.func delay_ms
delay_ms:
	wdr			; Reset WDT
      5c:	a8 95       	wdr
	sbiw	r24, 1		; if (ms-- == 0) return;
      5e:	01 97       	sbiw	r24, 0x01	; 1
	brcs	9f		; /
      60:	28 f0       	brcs	.+10     	; 0x6c <delay_ms+0x10>
	ldi	ZL, lo8(F_CPU/4000)	; 1ms delay
      62:	e0 ea       	ldi	r30, 0xA0	; 160
	ldi	ZH, hi8(F_CPU/4000)	; 
      64:	ff e0       	ldi	r31, 0x0F	; 15
1:	sbiw	ZL, 1		; 
      66:	31 97       	sbiw	r30, 0x01	; 1
	brne	1b		; /
      68:	f1 f7       	brne	.-4      	; 0x66 <delay_ms+0xa>
	rjmp	delay_ms
      6a:	f8 cf       	rjmp	.-16     	; 0x5c <delay_ms>
9:	ret
      6c:	08 95       	ret

0000006e <delay_us>:


.global delay_us
.func delay_us
delay_us:
	ldi	r23, 2
      6e:	72 e0       	ldi	r23, 0x02	; 2
1:	dec	r23
      70:	7a 95       	dec	r23
	brne	1b
      72:	f1 f7       	brne	.-4      	; 0x70 <delay_us+0x2>
	sbiw	r24, 1
      74:	01 97       	sbiw	r24, 0x01	; 1
	brne	delay_us
      76:	d9 f7       	brne	.-10     	; 0x6e <delay_us>
	wdr
      78:	a8 95       	wdr
	ret
      7a:	08 95       	ret

0000007c <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	ldi	r24, 0b00001000			; Enable only SCK and DI. DO is controlled by software
      7c:	88 e0       	ldi	r24, 0x08	; 8
	out	_SFR_IO_ADDR(USICR), r24
      7e:	8d b9       	out	0x0d, r24	; 13
	sbi	_SFR_IO_ADDR(PORTB), B_DO	; MMC DI = H
      80:	c5 9a       	sbi	0x18, 5	; 24
	sbi	_SFR_IO_ADDR(PORTB), B_CS	; MMC CS = H
      82:	c3 9a       	sbi	0x18, 3	; 24
	ret
      84:	08 95       	ret

00000086 <select>:
; void deselect (void);

.global select
.func select
select:
	cbi	_SFR_IO_ADDR(PORTB), B_CS	; CS = L
      86:	c3 98       	cbi	0x18, 3	; 24
	ret
      88:	08 95       	ret

0000008a <deselect>:
.endfunc

.global deselect
.func deselect
deselect:
	sbi	_SFR_IO_ADDR(PORTB), B_CS	; CS = H
      8a:	c3 9a       	sbi	0x18, 3	; 24
	ret
      8c:	08 95       	ret

0000008e <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0b000100			;PB2(SCK)
      8e:	84 e0       	ldi	r24, 0x04	; 4
	.rept 16				;Toggle SCK 16 times
	out	_SFR_IO_ADDR(PINB), r24		;
	.endr					;/
      90:	86 bb       	out	0x16, r24	; 22
      92:	86 bb       	out	0x16, r24	; 22
      94:	86 bb       	out	0x16, r24	; 22
      96:	86 bb       	out	0x16, r24	; 22
      98:	86 bb       	out	0x16, r24	; 22
      9a:	86 bb       	out	0x16, r24	; 22
      9c:	86 bb       	out	0x16, r24	; 22
      9e:	86 bb       	out	0x16, r24	; 22
      a0:	86 bb       	out	0x16, r24	; 22
      a2:	86 bb       	out	0x16, r24	; 22
      a4:	86 bb       	out	0x16, r24	; 22
      a6:	86 bb       	out	0x16, r24	; 22
      a8:	86 bb       	out	0x16, r24	; 22
      aa:	86 bb       	out	0x16, r24	; 22
      ac:	86 bb       	out	0x16, r24	; 22
      ae:	86 bb       	out	0x16, r24	; 22
	nop					;Read shift register
      b0:	00 00       	nop
	in	r24, _SFR_IO_ADDR(USIDR)	;/
      b2:	8f b1       	in	r24, 0x0f	; 15
	ret
      b4:	08 95       	ret

000000b6 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 0b000100			; PB2(SCK)
      b6:	94 e0       	ldi	r25, 0x04	; 4
	in	r22, _SFR_IO_ADDR(PORTB)
      b8:	68 b3       	in	r22, 0x18	; 24

	ldi	r23, 8
      ba:	78 e0       	ldi	r23, 0x08	; 8
1:	bst	r24, 7				;MMC DI = data bit to be sent
      bc:	87 fb       	bst	r24, 7
	bld	r22, B_DO			;
      be:	65 f9       	bld	r22, 5
	out	_SFR_IO_ADDR(PORTB), r22	;
      c0:	68 bb       	out	0x18, r22	; 24
	lsl	r24				;/
      c2:	88 0f       	add	r24, r24
	out	_SFR_IO_ADDR(PINB), r25		;SCK = H
      c4:	96 bb       	out	0x16, r25	; 22
	out	_SFR_IO_ADDR(PINB), r25		;SCK = L
      c6:	96 bb       	out	0x16, r25	; 22
	dec	r23				;while(--r23)
      c8:	7a 95       	dec	r23
	brne	1b				;/
      ca:	c1 f7       	brne	.-16     	; 0xbc <xmit_spi+0x6>
	sbi	_SFR_IO_ADDR(PORTB), B_DO	;MMC DI = H
      cc:	c5 9a       	sbi	0x18, 5	; 24
	ret
      ce:	08 95       	ret

000000d0 <read_blk_part>:
; void read_blk_part (void*, WORD, WORD);

.global read_blk_part
.func read_blk_part
read_blk_part:
	movw	XL, r24			;X = R25:R24 (destination memory address)
      d0:	dc 01       	movw	r26, r24
	movw	ZL, r22			;Z = R23:R22 (byte offset in the sector)
      d2:	fb 01       	movw	r30, r22

	ldi	r18, lo8(514)		;R19:R18 = 514, Number of bytes to receive
      d4:	22 e0       	ldi	r18, 0x02	; 2
	ldi	r19, hi8(514)		;/
      d6:	32 e0       	ldi	r19, 0x02	; 2
	sub	r18, ZL			;R19:R18 -= Z
      d8:	2e 1b       	sub	r18, r30
	sbc	r19, ZH			;/
      da:	3f 0b       	sbc	r19, r31
	sub	r18, r20		;R19:R18 -= R21:R20
      dc:	24 1b       	sub	r18, r20
	sbc	r19, r21		;/
      de:	35 0b       	sbc	r19, r21

	; Skip leading data bytes
	ldi	r24, 0b000100		;PB2(SCK)
      e0:	84 e0       	ldi	r24, 0x04	; 4
1:	sbiw	ZL, 1			;Skip leading data...
      e2:	31 97       	sbiw	r30, 0x01	; 1
	brcs	2f			;
      e4:	88 f0       	brcs	.+34     	; 0x108 <read_blk_part+0x38>
	.rept 16			;Discard a byte on SPI
	out	_SFR_IO_ADDR(PINB), r24	;
	.endr				;/
      e6:	86 bb       	out	0x16, r24	; 22
      e8:	86 bb       	out	0x16, r24	; 22
      ea:	86 bb       	out	0x16, r24	; 22
      ec:	86 bb       	out	0x16, r24	; 22
      ee:	86 bb       	out	0x16, r24	; 22
      f0:	86 bb       	out	0x16, r24	; 22
      f2:	86 bb       	out	0x16, r24	; 22
      f4:	86 bb       	out	0x16, r24	; 22
      f6:	86 bb       	out	0x16, r24	; 22
      f8:	86 bb       	out	0x16, r24	; 22
      fa:	86 bb       	out	0x16, r24	; 22
      fc:	86 bb       	out	0x16, r24	; 22
      fe:	86 bb       	out	0x16, r24	; 22
     100:	86 bb       	out	0x16, r24	; 22
     102:	86 bb       	out	0x16, r24	; 22
     104:	86 bb       	out	0x16, r24	; 22
	rjmp	1b			;
     106:	ed cf       	rjmp	.-38     	; 0xe2 <read_blk_part+0x12>
2:	sbiw	XL, 0			;Destination?
     108:	10 97       	sbiw	r26, 0x00	; 0
	breq	fb_wave
     10a:	31 f0       	breq	.+12     	; 0x118 <fb_wave>

0000010c <fb_mem>:

fb_mem:	; Store the data bytes to the memory
	rcall	rcv_spi			;do
     10c:	c0 df       	rcall	.-128    	; 0x8e <rcv_spi>
	st	X+, r24			; *X++ = rcv_spi()
     10e:	8d 93       	st	X+, r24
	subi	r20, 1			;while (--r21:r20)
     110:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, 0			;
     112:	50 40       	sbci	r21, 0x00	; 0
	brne	fb_mem			;/
     114:	d9 f7       	brne	.-10     	; 0x10c <fb_mem>
	rjmp	fb_exit
     116:	36 c0       	rjmp	.+108    	; 0x184 <fb_exit>

00000118 <fb_wave>:

fb_wave: ; Store the data bytes to the audio FIFO
	sbic	_FLAGS, 4		;if (16bit data) R21:R20 /= 2;
     118:	8c 99       	sbic	0x11, 4	; 17
	lsr	r21			;
     11a:	56 95       	lsr	r21
	sbic	_FLAGS, 4		;
     11c:	8c 99       	sbic	0x11, 4	; 17
	ror	r20			;/
     11e:	47 95       	ror	r20
	sbic	_FLAGS, 1		;if (Stereo data) R21:R20 /= 2;
     120:	89 99       	sbic	0x11, 1	; 17
	lsr	r21			;
     122:	56 95       	lsr	r21
	sbic	_FLAGS, 1		;
     124:	89 99       	sbic	0x11, 1	; 17
	ror	r20			;/
     126:	47 95       	ror	r20
	lds	r22, FifoWi		;r22 = FIFO write index
     128:	60 91 74 00 	lds	r22, 0x0074

3:	ldi	XL, lo8(Buff)		;X = Buff + R22
     12c:	ae e8       	ldi	r26, 0x8E	; 142
	ldi	XH, hi8(Buff)		;
     12e:	b0 e0       	ldi	r27, 0x00	; 0
	add	XL, r22			;
     130:	a6 0f       	add	r26, r22
	adc	XH, r1			;/
     132:	b1 1d       	adc	r27, r1
4:	lds	r24, FifoCt		;wait while FIFO full
     134:	80 91 9e 01 	lds	r24, 0x019E
	cpi	r24, 252		;
     138:	8c 3f       	cpi	r24, 0xFC	; 252
	brcc	4b			;/
     13a:	e0 f7       	brcc	.-8      	; 0x134 <fb_wave+0x1c>
#if MODE >= 1	/* Dual output */
#if MODE >= 2	/* Hi-Res */
	rcall	rcv_spi			;Get L-ch/Mono data into Z
     13c:	a8 df       	rcall	.-176    	; 0x8e <rcv_spi>
	clr	ZL			;
     13e:	ee 27       	eor	r30, r30
	sbis	_FLAGS, 4		;
     140:	8c 9b       	sbis	0x11, 4	; 17
	rjmp	6f			;
     142:	03 c0       	rjmp	.+6      	; 0x14a <fb_wave+0x32>
	mov	ZL, r24			;
     144:	e8 2f       	mov	r30, r24
	rcall	rcv_spi			;
     146:	a3 df       	rcall	.-186    	; 0x8e <rcv_spi>
	subi	r24, 0x80		;
     148:	80 58       	subi	r24, 0x80	; 128
6:	mov	ZH, r24			;/
     14a:	f8 2f       	mov	r31, r24
	sbis	_FLAGS, 1		;if Mono data, no R-ch data
     14c:	89 9b       	sbis	0x11, 1	; 17
	rjmp	8f			;/
     14e:	0b c0       	rjmp	.+22     	; 0x166 <fb_wave+0x4e>
	rcall	rcv_spi			;Get R-ch data and mix it to Z
     150:	9e df       	rcall	.-196    	; 0x8e <rcv_spi>
	clr	r25			;
     152:	99 27       	eor	r25, r25
	sbis	_FLAGS, 4		;
     154:	8c 9b       	sbis	0x11, 4	; 17
	rjmp	7f			;
     156:	03 c0       	rjmp	.+6      	; 0x15e <fb_wave+0x46>
	mov	r25, r24		;
     158:	98 2f       	mov	r25, r24
	rcall	rcv_spi			;
     15a:	99 df       	rcall	.-206    	; 0x8e <rcv_spi>
	subi	r24, 0x80		;
     15c:	80 58       	subi	r24, 0x80	; 128
7:	add	ZL, r25			;
     15e:	e9 0f       	add	r30, r25
	adc	ZH, r24			;
     160:	f8 1f       	adc	r31, r24
	ror	ZH			;
     162:	f7 95       	ror	r31
	ror	ZL			;/
     164:	e7 95       	ror	r30
	rcall	rcv_spi			;
	sbic	_FLAGS, 4		;
	subi	r24, 0x80		;
	mov	ZL, r24			;/
#endif
9:	st	X+, ZL			;Store Z into FIFO
     166:	ed 93       	st	X+, r30
	st	X+, ZH			;/
     168:	fd 93       	st	X+, r31
	cli				;
     16a:	f8 94       	cli
	lds	r24, FifoCt		;
     16c:	80 91 9e 01 	lds	r24, 0x019E
	subi	r24, -2			;
     170:	8e 5f       	subi	r24, 0xFE	; 254
	sts	FifoCt, r24		;
     172:	80 93 9e 01 	sts	0x019E, r24
	sei				;
     176:	78 94       	sei
	subi	r22, -2			;/
     178:	6e 5f       	subi	r22, 0xFE	; 254
	inc	r24			;
	sts	FifoCt, r24		;
	sei				;
	inc	r22			;/
#endif
	subi	r20, lo8(1)		;while(--R21:R20)
     17a:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, hi8(1)		;
     17c:	50 40       	sbci	r21, 0x00	; 0
	brne	3b			;/
     17e:	b1 f6       	brne	.-84     	; 0x12c <fb_wave+0x14>
	sts	FifoWi, r22		;Save FIFO write index
     180:	60 93 74 00 	sts	0x0074, r22

00000184 <fb_exit>:

fb_exit:	/* Diacard trailing data bytes and CRC */
	ldi	r24, 0b000100		;PB2(SCK)
     184:	84 e0       	ldi	r24, 0x04	; 4
1:	.rept 16			;Discard a byte on SPI
	out	_SFR_IO_ADDR(PINB), r24	;
	.endr				;/
     186:	86 bb       	out	0x16, r24	; 22
     188:	86 bb       	out	0x16, r24	; 22
     18a:	86 bb       	out	0x16, r24	; 22
     18c:	86 bb       	out	0x16, r24	; 22
     18e:	86 bb       	out	0x16, r24	; 22
     190:	86 bb       	out	0x16, r24	; 22
     192:	86 bb       	out	0x16, r24	; 22
     194:	86 bb       	out	0x16, r24	; 22
     196:	86 bb       	out	0x16, r24	; 22
     198:	86 bb       	out	0x16, r24	; 22
     19a:	86 bb       	out	0x16, r24	; 22
     19c:	86 bb       	out	0x16, r24	; 22
     19e:	86 bb       	out	0x16, r24	; 22
     1a0:	86 bb       	out	0x16, r24	; 22
     1a2:	86 bb       	out	0x16, r24	; 22
     1a4:	86 bb       	out	0x16, r24	; 22
	subi	r18, lo8(1)		;Repeat r19:r18 times
     1a6:	21 50       	subi	r18, 0x01	; 1
	sbci	r19, hi8(1)		;
     1a8:	30 40       	sbci	r19, 0x00	; 0
	brne	1b			;/
     1aa:	69 f7       	brne	.-38     	; 0x186 <fb_exit+0x2>

	ret
     1ac:	08 95       	ret

000001ae <__vector_10>:


.global TIM0_COMPA_vect
.func TIM0_COMPA_vect
TIM0_COMPA_vect:
	push	r24				;Save regs.
     1ae:	8f 93       	push	r24
	in	r24, _SFR_IO_ADDR(SREG)		;
     1b0:	8f b7       	in	r24, 0x3f	; 63
	push	r24				;
     1b2:	8f 93       	push	r24
	push	ZL				;
     1b4:	ef 93       	push	r30
	push	ZH				;/
     1b6:	ff 93       	push	r31

	lds	ZL, FifoRi			;Get FIFO read index
     1b8:	e0 91 75 00 	lds	r30, 0x0075
	clr	ZH				;Z = pointer to the top of FIFO
     1bc:	ff 27       	eor	r31, r31
	subi	ZL, lo8(-(Buff))		;
     1be:	e2 57       	subi	r30, 0x72	; 114
	sbci	ZH, hi8(-(Buff))		;/
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
	lds	r24, FifoCt			;Load FIFO data counter
     1c2:	80 91 9e 01 	lds	r24, 0x019E

#if MODE >= 1	/* Dual output */
	subi	r24, 2				;Check availability of the sampling data
     1c6:	82 50       	subi	r24, 0x02	; 2
	brcs	9f				;/
     1c8:	48 f0       	brcs	.+18     	; 0x1dc <__vector_10+0x2e>
	sts	FifoCt, r24			;Save FIFO data counter
     1ca:	80 93 9e 01 	sts	0x019E, r24
	ld	r24, Z+				;Get R-ch/LSB data and send it to PWM
     1ce:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1A), r24	;/
     1d0:	8e bd       	out	0x2e, r24	; 46
	ld	r24, Z+				;Get L-ch/MSB data and send it to PWM
     1d2:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1B), r24	;/
     1d4:	8b bd       	out	0x2b, r24	; 43
	brcs	9f				;/
	sts	FifoCt, r24			;Save FIFO data counter
	ld	r24, Z+				;Send data to PWM
	out	_SFR_IO_ADDR(OCR1B), r24	;/
#endif
	subi	ZL, lo8(Buff)			;Save FIFO read index
     1d6:	ee 58       	subi	r30, 0x8E	; 142
	sts	FifoRi, ZL			;/
     1d8:	e0 93 75 00 	sts	0x0075, r30

9:	pop	ZH				;Restore regs.
     1dc:	ff 91       	pop	r31
	pop	ZL				;
     1de:	ef 91       	pop	r30
	pop	r24				;
     1e0:	8f 91       	pop	r24
	out	_SFR_IO_ADDR(SREG), r24		;
     1e2:	8f bf       	out	0x3f, r24	; 63
	pop	r24				;/
     1e4:	8f 91       	pop	r24
	reti
     1e6:	18 95       	reti

000001e8 <xputc>:

.func xputc
.global xputc
xputc:
#if CR_CRLF
	cpi	r24, 10		;LF --> CRLF
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
     1ea:	19 f4       	brne	.+6      	; 0x1f2 <xputc+0xa>
	ldi	r24, 13		;
     1ec:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
     1ee:	01 d0       	rcall	.+2      	; 0x1f2 <xputc+0xa>
	ldi	r24, 10		;/
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
     1f2:	ff 93       	push	r31
	push	ZL
     1f4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     1f6:	e0 91 70 00 	lds	r30, 0x0070
	lds	ZH, xfunc_out+1	;/
     1fa:	f0 91 71 00 	lds	r31, 0x0071
	sbiw	ZL, 0		;Skip if null
     1fe:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     200:	09 f0       	breq	.+2      	; 0x204 <xputc+0x1c>
	icall
     202:	09 95       	icall
2:	pop	ZL
     204:	ef 91       	pop	r30
	pop	ZH
     206:	ff 91       	pop	r31
	ret
     208:	08 95       	ret

0000020a <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     20a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     20c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     20e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     210:	11 f0       	breq	.+4      	; 0x216 <xputs+0xc>
	rcall	xputc
     212:	ea df       	rcall	.-44     	; 0x1e8 <xputc>
	rjmp	1b
     214:	fb cf       	rjmp	.-10     	; 0x20c <xputs+0x2>
2:	ret
     216:	08 95       	ret

00000218 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     218:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     21a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     21c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     21e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     220:	0c c0       	rjmp	.+24     	; 0x23a <xitoa+0x22>
	neg	r20		;
     222:	41 95       	neg	r20
	sbrs	r25, 7		;
     224:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     226:	09 c0       	rjmp	.+18     	; 0x23a <xitoa+0x22>
	ldi	r30, '-'	;
     228:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     22a:	60 95       	com	r22
	com	r23		;
     22c:	70 95       	com	r23
	com	r24		;
     22e:	80 95       	com	r24
	com	r25		;
     230:	90 95       	com	r25
	adc	r22, r1		;
     232:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     234:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     236:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     238:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     23a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     23c:	02 c0       	rjmp	.+4      	; 0x242 <xitoa+0x2a>
	neg	r18		;
     23e:	21 95       	neg	r18
	ldi	r19, '0'	;/
     240:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     242:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     244:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     246:	66 0f       	add	r22, r22
	rol	r23		;
     248:	77 1f       	adc	r23, r23
	rol	r24		;
     24a:	88 1f       	adc	r24, r24
	rol	r25		;
     24c:	99 1f       	adc	r25, r25
	rol	r26		;
     24e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     250:	a4 17       	cp	r26, r20
	brcs	3f		;
     252:	10 f0       	brcs	.+4      	; 0x258 <xitoa+0x40>
	sub	r26, r20	;
     254:	a4 1b       	sub	r26, r20
	inc	r22		;
     256:	63 95       	inc	r22
3:	dec	r21		;
     258:	5a 95       	dec	r21
	brne	2b		;/
     25a:	a9 f7       	brne	.-22     	; 0x246 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     25c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     25e:	08 f0       	brcs	.+2      	; 0x262 <__stack+0x3>
	subi	r26, -7		;
     260:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     262:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     264:	af 93       	push	r26
	inc	r31		;/
     266:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     268:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     26a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     26c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     26e:	91 05       	cpc	r25, r1
	brne	1b		;/
     270:	41 f7       	brne	.-48     	; 0x242 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     272:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     274:	11 f4       	brne	.+4      	; 0x27a <__stack+0x1b>
	push	r30		;
     276:	ef 93       	push	r30
	inc	r31		;/
     278:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     27a:	f2 17       	cp	r31, r18
	brcc	6f		;
     27c:	18 f4       	brcc	.+6      	; 0x284 <__stack+0x25>
	push	r19		;
     27e:	3f 93       	push	r19
	inc	r31		;
     280:	f3 95       	inc	r31
	rjmp	5b		;/
     282:	fb cf       	rjmp	.-10     	; 0x27a <__stack+0x1b>

6:	pop	r24		;Flush stacked digits and exit
     284:	8f 91       	pop	r24
	rcall	xputc		;
     286:	b0 df       	rcall	.-160    	; 0x1e8 <xputc>
	dec	r31		;
     288:	fa 95       	dec	r31
	brne	6b		;/
     28a:	e1 f7       	brne	.-8      	; 0x284 <__stack+0x25>

	ret
     28c:	08 95       	ret

0000028e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     28e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     290:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     292:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     294:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     296:	21 f0       	breq	.+8      	; 0x2a0 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     298:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     29a:	19 f0       	breq	.+6      	; 0x2a2 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     29c:	a5 df       	rcall	.-182    	; 0x1e8 <xputc>
	rjmp	0b		;/
     29e:	f9 cf       	rjmp	.-14     	; 0x292 <xvprintf+0x4>
90:	ret
     2a0:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     2a2:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     2a4:	e8 94       	clt
	_LPMI	r21		;Get flags
     2a6:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     2a8:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     2aa:	c1 f3       	breq	.-16     	; 0x29c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     2ac:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <xvprintf+0x26>
	set			;/
     2b0:	68 94       	set
22:	_LPMI	r21		;Get width
     2b2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     2b4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     2b6:	48 f4       	brcc	.+18     	; 0x2ca <xvprintf+0x3c>
	subi	r21, '0'	;
     2b8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     2ba:	90 f3       	brcs	.-28     	; 0x2a0 <xvprintf+0x12>
	lsl	r18		;
     2bc:	22 0f       	add	r18, r18
	mov	r0, r18		;
     2be:	02 2e       	mov	r0, r18
	lsl	r18		;
     2c0:	22 0f       	add	r18, r18
	lsl	r18		;
     2c2:	22 0f       	add	r18, r18
	add	r18, r0		;
     2c4:	20 0d       	add	r18, r0
	add	r18, r21	;
     2c6:	25 0f       	add	r18, r21
	rjmp	22b		;/
     2c8:	f4 cf       	rjmp	.-24     	; 0x2b2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     2ca:	0e f4       	brtc	.+2      	; 0x2ce <xvprintf+0x40>
	neg	r18		;
     2cc:	21 95       	neg	r18
25:	ld	r24, Y+		;
     2ce:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     2d0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     2d2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     2d4:	19 f3       	breq	.-58     	; 0x29c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     2d6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     2d8:	29 f1       	breq	.+74     	; 0x324 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     2da:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     2dc:	59 f1       	breq	.+86     	; 0x334 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     2de:	bc 01       	movw	r22, r24
	clr	r24		;
     2e0:	88 27       	eor	r24, r24
	clr	r25		;
     2e2:	99 27       	eor	r25, r25
	clt			;/
     2e4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     2e6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     2e8:	21 f4       	brne	.+8      	; 0x2f2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     2ea:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     2ec:	99 91       	ld	r25, Y+
	set			;
     2ee:	68 94       	set
	_LPMI	r21		;/
     2f0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     2f2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     2f4:	39 f4       	brne	.+14     	; 0x304 <xvprintf+0x76>
	ldi	r20, -10	;
     2f6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     2f8:	7e f0       	brts	.+30     	; 0x318 <xvprintf+0x8a>
	sbrs	r23, 7		;
     2fa:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     2fc:	0d c0       	rjmp	.+26     	; 0x318 <xvprintf+0x8a>
	ldi	r24, -1		;
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     300:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     302:	0a c0       	rjmp	.+20     	; 0x318 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     304:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     306:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     308:	39 f0       	breq	.+14     	; 0x318 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     30a:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     30c:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     30e:	21 f0       	breq	.+8      	; 0x318 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     310:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     312:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     314:	09 f0       	breq	.+2      	; 0x318 <xvprintf+0x8a>
	ret			;abort
     316:	08 95       	ret
40:	push	ZH		;Output the value
     318:	ff 93       	push	r31
	push	ZL		;
     31a:	ef 93       	push	r30
	rcall	xitoa		;
     31c:	7d df       	rcall	.-262    	; 0x218 <xitoa>
42:	pop	ZL		;
     31e:	ef 91       	pop	r30
	pop	ZH		;
     320:	ff 91       	pop	r31
	rjmp	0b		;/
     322:	b7 cf       	rjmp	.-146    	; 0x292 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     324:	ff 93       	push	r31
	push	ZL
     326:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     328:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     32a:	81 91       	ld	r24, Z+
	cpi	r24, 0
     32c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     32e:	b9 f3       	breq	.-18     	; 0x31e <xvprintf+0x90>
	rcall	xputc
     330:	5b df       	rcall	.-330    	; 0x1e8 <xputc>
	rjmp	51b
     332:	fb cf       	rjmp	.-10     	; 0x32a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     334:	ff 93       	push	r31
	push	ZL
     336:	ef 93       	push	r30
	rcall	xputs
     338:	68 df       	rcall	.-304    	; 0x20a <xputs>
	rjmp	42b
     33a:	f1 cf       	rjmp	.-30     	; 0x31e <xvprintf+0x90>

0000033c <xprintf>:


.func xprintf
.global xprintf
xprintf:
	push	YH
     33c:	df 93       	push	r29
	push	YL
     33e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     340:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     342:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     344:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     346:	a3 df       	rcall	.-186    	; 0x28e <xvprintf>
	pop	YL
     348:	cf 91       	pop	r28
	pop	YH
     34a:	df 91       	pop	r29
	ret
     34c:	08 95       	ret

0000034e <putram>:

#if USE_XSPRINTF

.func xsprintf
putram:
	_MOVW	ZH,ZL, r15,r14
     34e:	f7 01       	movw	r30, r14
	st	Z+, r24
     350:	81 93       	st	Z+, r24
	_MOVW	r15,r14, ZH,ZL
     352:	7f 01       	movw	r14, r30
	ret
     354:	08 95       	ret

00000356 <xsprintf>:
.global xsprintf
xsprintf:
	push	YH
     356:	df 93       	push	r29
	push	YL
     358:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     35a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     35c:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     35e:	25 96       	adiw	r28, 0x05	; 5
	lds	ZL, xfunc_out+0	;Save registered output function
     360:	e0 91 70 00 	lds	r30, 0x0070
	lds	ZH, xfunc_out+1	;
     364:	f0 91 71 00 	lds	r31, 0x0071
	push	ZL		;
     368:	ef 93       	push	r30
	push	ZH		;/
     36a:	ff 93       	push	r31
	ldi	ZL, lo8(pm(putram));Set local output function
     36c:	e7 ea       	ldi	r30, 0xA7	; 167
	ldi	ZH, hi8(pm(putram));
     36e:	f1 e0       	ldi	r31, 0x01	; 1
	sts	xfunc_out+0, ZL	;
     370:	e0 93 70 00 	sts	0x0070, r30
	sts	xfunc_out+1, ZH	;/
     374:	f0 93 71 00 	sts	0x0071, r31
	push	r15		;Initialize pointer to string buffer
     378:	ff 92       	push	r15
	push	r14		;
     37a:	ef 92       	push	r14
	ld	r14, Y+		;
     37c:	e9 90       	ld	r14, Y+
	ld	r15, Y+		;/
     37e:	f9 90       	ld	r15, Y+
	rcall	xvprintf
     380:	86 df       	rcall	.-244    	; 0x28e <xvprintf>
	_MOVW	ZH,ZL, r15,r14	;Terminate string
     382:	f7 01       	movw	r30, r14
	st	Z, r1		;
     384:	10 82       	st	Z, r1
	pop	r14		;
     386:	ef 90       	pop	r14
	pop	r15		;/
     388:	ff 90       	pop	r15
	pop	ZH		;Restore registered output function
     38a:	ff 91       	pop	r31
	pop	ZL		;
     38c:	ef 91       	pop	r30
	sts	xfunc_out+0, ZL	;
     38e:	e0 93 70 00 	sts	0x0070, r30
	sts	xfunc_out+1, ZH	;/
     392:	f0 93 71 00 	sts	0x0071, r31
	pop	YL
     396:	cf 91       	pop	r28
	pop	YH
     398:	df 91       	pop	r29
	ret
     39a:	08 95       	ret

0000039c <__vector_12>:
	wdt_reset();
	WDTCR = _BV(WDE) | 0b110;				/* Set WDT to reset mode in timeout of 1s */
}


EMPTY_INTERRUPT(WDT_vect);
     39c:	18 95       	reti

0000039e <main>:

int main (void)
{
	FRESULT res;
	char *dir;
	BYTE org_osc = OSCCAL;
     39e:	41 b6       	in	r4, 0x31	; 49


	MCUSR = 0;
     3a0:	14 be       	out	0x34, r1	; 52
	WDTCR = _BV(WDE) | 0b110;	/* Enable WDT reset in timeout of 1s */
     3a2:	8e e0       	ldi	r24, 0x0E	; 14
     3a4:	81 bd       	out	0x21, r24	; 33

	PORTB = 0b101001;		/* Initialize port: - - H L H L L P */
     3a6:	89 e2       	ldi	r24, 0x29	; 41
     3a8:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b111110;
     3aa:	8e e3       	ldi	r24, 0x3E	; 62
     3ac:	87 bb       	out	0x17, r24	; 23

	sei();
     3ae:	78 94       	sei

	for (;;) {
		if (pf_mount(&Fs) == FR_OK) {	/* Initialize FS */
			wdt_reset();
			Buff[0] = 0;
     3b0:	0f 2e       	mov	r0, r31
     3b2:	fe e8       	ldi	r31, 0x8E	; 142
     3b4:	2f 2e       	mov	r2, r31
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	3f 2e       	mov	r3, r31
     3ba:	f0 2d       	mov	r31, r0
		sz -= rb;
		sw = 1;	/* Button status flag */
		do {	/* Data transfer loop */
			wdt_reset();

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
     3bc:	61 2c       	mov	r6, r1
     3be:	68 94       	set
     3c0:	55 24       	eor	r5, r5
     3c2:	52 f8       	bld	r5, 2
	DDRB  = 0b111110;

	sei();

	for (;;) {
		if (pf_mount(&Fs) == FR_OK) {	/* Initialize FS */
     3c4:	8f e9       	ldi	r24, 0x9F	; 159
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	b3 d6       	rcall	.+3430   	; 0x1130 <pf_mount>
     3ca:	81 11       	cpse	r24, r1
     3cc:	c5 c1       	rjmp	.+906    	; 0x758 <main+0x3ba>
			wdt_reset();
     3ce:	a8 95       	wdr
			Buff[0] = 0;
     3d0:	d1 01       	movw	r26, r2
     3d2:	1c 92       	st	X, r1
			if (!pf_open("osccal")) pf_read(Buff, 1, &rb);	/* Adjust frequency */
     3d4:	84 e6       	ldi	r24, 0x64	; 100
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	db d7       	rcall	.+4022   	; 0x1390 <pf_open>
     3da:	81 11       	cpse	r24, r1
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <main+0x4c>
     3de:	4c e8       	ldi	r20, 0x8C	; 140
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	c1 01       	movw	r24, r2
     3e8:	30 d8       	rcall	.-4000   	; 0xfffff44a <__fuse+0xff7df44a>
			OSCCAL = org_osc + Buff[0];
     3ea:	f1 01       	movw	r30, r2
     3ec:	80 81       	ld	r24, Z
     3ee:	84 0d       	add	r24, r4
     3f0:	81 bf       	out	0x31, r24	; 49

			res = pf_opendir(&Dir, dir = "wav");	/* Open sound file directory */
     3f2:	60 e6       	ldi	r22, 0x60	; 96
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	8e e8       	ldi	r24, 0x8E	; 142
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	31 da       	rcall	.-2974   	; 0xfffff85e <__fuse+0xff7df85e>
			if (res == FR_NO_PATH)
     3fc:	84 30       	cpi	r24, 0x04	; 4
     3fe:	61 f4       	brne	.+24     	; 0x418 <main+0x7a>
			res = pf_opendir(&Dir, dir = "");	/* Open root directory */
     400:	6f e6       	ldi	r22, 0x6F	; 111
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8e e8       	ldi	r24, 0x8E	; 142
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	2a da       	rcall	.-2988   	; 0xfffff85e <__fuse+0xff7df85e>
     40a:	0f 2e       	mov	r0, r31
     40c:	ff e6       	ldi	r31, 0x6F	; 111
     40e:	ef 2e       	mov	r14, r31
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ff 2e       	mov	r15, r31
     414:	f0 2d       	mov	r31, r0
     416:	06 c0       	rjmp	.+12     	; 0x424 <main+0x86>
			wdt_reset();
			Buff[0] = 0;
			if (!pf_open("osccal")) pf_read(Buff, 1, &rb);	/* Adjust frequency */
			OSCCAL = org_osc + Buff[0];

			res = pf_opendir(&Dir, dir = "wav");	/* Open sound file directory */
     418:	0f 2e       	mov	r0, r31
     41a:	f0 e6       	ldi	r31, 0x60	; 96
     41c:	ef 2e       	mov	r14, r31
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	ff 2e       	mov	r15, r31
     422:	f0 2d       	mov	r31, r0
			while (res == FR_OK) {				/* Repeat in the dir */
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
				while (res == FR_OK) {				/* Play all wav files in the dir */
					wdt_reset();
					res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
					if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
     424:	0f 2e       	mov	r0, r31
     426:	ff e7       	ldi	r31, 0x7F	; 127
     428:	cf 2e       	mov	r12, r31
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	df 2e       	mov	r13, r31
     42e:	f0 2d       	mov	r31, r0
     430:	90 c1       	rjmp	.+800    	; 0x752 <main+0x3b4>
			res = pf_opendir(&Dir, dir = "wav");	/* Open sound file directory */
			if (res == FR_NO_PATH)
			res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	8e e8       	ldi	r24, 0x8E	; 142
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	63 da       	rcall	.-2874   	; 0xfffff902 <__fuse+0xff7df902>
				while (res == FR_OK) {				/* Play all wav files in the dir */
     43c:	81 11       	cpse	r24, r1
     43e:	8c c1       	rjmp	.+792    	; 0x758 <main+0x3ba>
					wdt_reset();
					res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
					if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
					if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, ".WAV"))
     440:	ce e7       	ldi	r28, 0x7E	; 126
     442:	d0 e0       	ldi	r29, 0x00	; 0
			res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
				while (res == FR_OK) {				/* Play all wav files in the dir */
					wdt_reset();
     444:	a8 95       	wdr
					res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
     446:	66 e7       	ldi	r22, 0x76	; 118
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	8e e8       	ldi	r24, 0x8E	; 142
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	59 da       	rcall	.-2894   	; 0xfffff902 <__fuse+0xff7df902>
					if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
     450:	81 11       	cpse	r24, r1
     452:	7f c1       	rjmp	.+766    	; 0x752 <main+0x3b4>
     454:	d6 01       	movw	r26, r12
     456:	9c 91       	ld	r25, X
     458:	99 23       	and	r25, r25
     45a:	09 f4       	brne	.+2      	; 0x45e <main+0xc0>
     45c:	7a c1       	rjmp	.+756    	; 0x752 <main+0x3b4>
					if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, ".WAV"))
     45e:	88 81       	ld	r24, Y
     460:	82 71       	andi	r24, 0x12	; 18
     462:	81 f7       	brne	.-32     	; 0x444 <main+0xa6>
     464:	6b e6       	ldi	r22, 0x6B	; 107
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	c6 01       	movw	r24, r12
     46a:	dc db       	rcall	.-2120   	; 0xfffffc24 <__fuse+0xff7dfc24>
     46c:	89 2b       	or	r24, r25
     46e:	51 f3       	breq	.-44     	; 0x444 <main+0xa6>
	FRESULT res;
	BYTE sw;
	WORD btr;


	wdt_reset();
     470:	a8 95       	wdr

	xsprintf((char*)Buff, PSTR("%s/%s"), dir, fn);
     472:	df 92       	push	r13
     474:	cf 92       	push	r12
     476:	ff 92       	push	r15
     478:	ef 92       	push	r14
     47a:	ae e1       	ldi	r26, 0x1E	; 30
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	bf 93       	push	r27
     480:	af 93       	push	r26
     482:	3f 92       	push	r3
     484:	2f 92       	push	r2
     486:	67 df       	rcall	.-306    	; 0x356 <xsprintf>
	res = pf_open((char*)Buff);		/* Open sound file */
     488:	c1 01       	movw	r24, r2
     48a:	82 d7       	rcall	.+3844   	; 0x1390 <pf_open>
	if (res == FR_OK) {
     48c:	2d b7       	in	r18, 0x3d	; 61
     48e:	3e b7       	in	r19, 0x3e	; 62
     490:	28 5f       	subi	r18, 0xF8	; 248
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	3e bf       	out	0x3e, r19	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	2d bf       	out	0x3d, r18	; 61
     49e:	81 11       	cpse	r24, r1
     4a0:	4b c1       	rjmp	.+662    	; 0x738 <main+0x39a>
{
	DWORD sz, f;
	BYTE b, al = 0;


	if (pf_read(Buff, 12, &rb)) return 1;	/* Load file header (12 bytes) */
     4a2:	4c e8       	ldi	r20, 0x8C	; 140
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	6c e0       	ldi	r22, 0x0C	; 12
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	c1 01       	movw	r24, r2
     4ac:	ce d7       	rcall	.+3996   	; 0x144a <pf_read>
     4ae:	81 11       	cpse	r24, r1
     4b0:	53 c1       	rjmp	.+678    	; 0x758 <main+0x3ba>

	if (rb != 12 || LD_DWORD(Buff+8) != FCC('W','A','V','E')) return 0;
     4b2:	80 91 8c 00 	lds	r24, 0x008C
     4b6:	90 91 8d 00 	lds	r25, 0x008D
     4ba:	0c 97       	sbiw	r24, 0x0c	; 12
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <main+0x122>
     4be:	4c c1       	rjmp	.+664    	; 0x758 <main+0x3ba>
     4c0:	f1 01       	movw	r30, r2
     4c2:	80 85       	ldd	r24, Z+8	; 0x08
     4c4:	91 85       	ldd	r25, Z+9	; 0x09
     4c6:	a2 85       	ldd	r26, Z+10	; 0x0a
     4c8:	b3 85       	ldd	r27, Z+11	; 0x0b
     4ca:	87 35       	cpi	r24, 0x57	; 87
     4cc:	91 44       	sbci	r25, 0x41	; 65
     4ce:	a6 45       	sbci	r26, 0x56	; 86
     4d0:	b5 44       	sbci	r27, 0x45	; 69
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <main+0x138>
     4d4:	41 c1       	rjmp	.+642    	; 0x758 <main+0x3ba>
     4d6:	10 e0       	ldi	r17, 0x00	; 0

	for (;;) {
		wdt_reset();
     4d8:	a8 95       	wdr
		pf_read(Buff, 8, &rb);			/* Get Chunk ID and size */
     4da:	4c e8       	ldi	r20, 0x8C	; 140
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	68 e0       	ldi	r22, 0x08	; 8
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	c1 01       	movw	r24, r2
     4e4:	b2 d7       	rcall	.+3940   	; 0x144a <pf_read>
		if (rb != 8) return 0;
     4e6:	80 91 8c 00 	lds	r24, 0x008C
     4ea:	90 91 8d 00 	lds	r25, 0x008D
     4ee:	08 97       	sbiw	r24, 0x08	; 8
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <main+0x156>
     4f2:	32 c1       	rjmp	.+612    	; 0x758 <main+0x3ba>
		sz = LD_DWORD(&Buff[4]);		/* Chunk size */
     4f4:	d1 01       	movw	r26, r2
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	8d 90       	ld	r8, X+
     4fa:	9d 90       	ld	r9, X+
     4fc:	ad 90       	ld	r10, X+
     4fe:	bc 90       	ld	r11, X
     500:	17 97       	sbiw	r26, 0x07	; 7

		switch (LD_DWORD(&Buff[0])) {	/* Switch by chunk ID */
     502:	8d 91       	ld	r24, X+
     504:	9d 91       	ld	r25, X+
     506:	0d 90       	ld	r0, X+
     508:	bc 91       	ld	r27, X
     50a:	a0 2d       	mov	r26, r0
     50c:	8c 34       	cpi	r24, 0x4C	; 76
     50e:	e9 e4       	ldi	r30, 0x49	; 73
     510:	9e 07       	cpc	r25, r30
     512:	e3 e5       	ldi	r30, 0x53	; 83
     514:	ae 07       	cpc	r26, r30
     516:	e4 e5       	ldi	r30, 0x54	; 84
     518:	be 07       	cpc	r27, r30
     51a:	09 f4       	brne	.+2      	; 0x51e <main+0x180>
     51c:	a1 c0       	rjmp	.+322    	; 0x660 <main+0x2c2>
     51e:	78 f4       	brcc	.+30     	; 0x53e <main+0x1a0>
     520:	86 36       	cpi	r24, 0x66	; 102
     522:	2d e6       	ldi	r18, 0x6D	; 109
     524:	92 07       	cpc	r25, r18
     526:	24 e7       	ldi	r18, 0x74	; 116
     528:	a2 07       	cpc	r26, r18
     52a:	20 e2       	ldi	r18, 0x20	; 32
     52c:	b2 07       	cpc	r27, r18
     52e:	b9 f0       	breq	.+46     	; 0x55e <main+0x1c0>
     530:	84 34       	cpi	r24, 0x44	; 68
     532:	99 44       	sbci	r25, 0x49	; 73
     534:	a3 45       	sbci	r26, 0x53	; 83
     536:	b0 45       	sbci	r27, 0x50	; 80
     538:	09 f0       	breq	.+2      	; 0x53c <main+0x19e>
     53a:	06 c1       	rjmp	.+524    	; 0x748 <main+0x3aa>
     53c:	91 c0       	rjmp	.+290    	; 0x660 <main+0x2c2>
     53e:	84 36       	cpi	r24, 0x64	; 100
     540:	61 e6       	ldi	r22, 0x61	; 97
     542:	96 07       	cpc	r25, r22
     544:	64 e7       	ldi	r22, 0x74	; 116
     546:	a6 07       	cpc	r26, r22
     548:	61 e6       	ldi	r22, 0x61	; 97
     54a:	b6 07       	cpc	r27, r22
     54c:	09 f4       	brne	.+2      	; 0x550 <main+0x1b2>
     54e:	5c c0       	rjmp	.+184    	; 0x608 <main+0x26a>
     550:	86 36       	cpi	r24, 0x66	; 102
     552:	91 46       	sbci	r25, 0x61	; 97
     554:	a3 46       	sbci	r26, 0x63	; 99
     556:	b4 47       	sbci	r27, 0x74	; 116
     558:	09 f0       	breq	.+2      	; 0x55c <main+0x1be>
     55a:	f6 c0       	rjmp	.+492    	; 0x748 <main+0x3aa>
     55c:	81 c0       	rjmp	.+258    	; 0x660 <main+0x2c2>
			case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz & 1) sz++;						/* Align chunk size */
     55e:	80 fe       	sbrs	r8, 0
     560:	05 c0       	rjmp	.+10     	; 0x56c <main+0x1ce>
     562:	ff ef       	ldi	r31, 0xFF	; 255
     564:	8f 1a       	sub	r8, r31
     566:	9f 0a       	sbc	r9, r31
     568:	af 0a       	sbc	r10, r31
     56a:	bf 0a       	sbc	r11, r31
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
     56c:	d5 01       	movw	r26, r10
     56e:	c4 01       	movw	r24, r8
     570:	40 97       	sbiw	r24, 0x10	; 16
     572:	a1 09       	sbc	r26, r1
     574:	b1 09       	sbc	r27, r1
     576:	85 35       	cpi	r24, 0x55	; 85
     578:	91 05       	cpc	r25, r1
     57a:	a1 05       	cpc	r26, r1
     57c:	b1 05       	cpc	r27, r1
     57e:	08 f0       	brcs	.+2      	; 0x582 <main+0x1e4>
     580:	eb c0       	rjmp	.+470    	; 0x758 <main+0x3ba>
			pf_read(Buff, sz, &rb);					/* Get content */
     582:	4c e8       	ldi	r20, 0x8C	; 140
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	b4 01       	movw	r22, r8
     588:	c1 01       	movw	r24, r2
     58a:	5f d7       	rcall	.+3774   	; 0x144a <pf_read>
			if (rb != sz) return 0;
     58c:	80 91 8c 00 	lds	r24, 0x008C
     590:	90 91 8d 00 	lds	r25, 0x008D
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	88 16       	cp	r8, r24
     59a:	99 06       	cpc	r9, r25
     59c:	aa 06       	cpc	r10, r26
     59e:	bb 06       	cpc	r11, r27
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <main+0x206>
     5a2:	da c0       	rjmp	.+436    	; 0x758 <main+0x3ba>
			if (Buff[0] != 1) return 0;				/* Check coding type (LPCM) */
     5a4:	d1 01       	movw	r26, r2
     5a6:	8c 91       	ld	r24, X
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	09 f0       	breq	.+2      	; 0x5ae <main+0x210>
     5ac:	d5 c0       	rjmp	.+426    	; 0x758 <main+0x3ba>
			b = Buff[2];
     5ae:	e0 e9       	ldi	r30, 0x90	; 144
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	10 81       	ld	r17, Z
			if (b != 1 && b != 2) return 0;			/* Check channels (1/2) */
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	81 0f       	add	r24, r17
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	08 f0       	brcs	.+2      	; 0x5be <main+0x220>
     5bc:	cd c0       	rjmp	.+410    	; 0x758 <main+0x3ba>
			GPIOR0 = al = b;						/* Save channel flag */
     5be:	11 bb       	out	0x11, r17	; 17
			b = Buff[14];
     5c0:	ac e9       	ldi	r26, 0x9C	; 156
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	8c 91       	ld	r24, X
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
     5c6:	88 30       	cpi	r24, 0x08	; 8
     5c8:	09 f4       	brne	.+2      	; 0x5cc <main+0x22e>
     5ca:	eb c0       	rjmp	.+470    	; 0x7a2 <main+0x404>
     5cc:	80 31       	cpi	r24, 0x10	; 16
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <main+0x234>
     5d0:	e5 c0       	rjmp	.+458    	; 0x79c <main+0x3fe>
     5d2:	c2 c0       	rjmp	.+388    	; 0x758 <main+0x3ba>
			GPIOR0 |= b;							/* Save resolution flag */
			if (b & 16) al <<= 1;
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
     5d4:	f1 01       	movw	r30, r2
     5d6:	24 81       	ldd	r18, Z+4	; 0x04
     5d8:	35 81       	ldd	r19, Z+5	; 0x05
     5da:	46 81       	ldd	r20, Z+6	; 0x06
     5dc:	57 81       	ldd	r21, Z+7	; 0x07
			if (f < 8000 || f > 48000) return 4;
     5de:	da 01       	movw	r26, r20
     5e0:	c9 01       	movw	r24, r18
     5e2:	80 54       	subi	r24, 0x40	; 64
     5e4:	9f 41       	sbci	r25, 0x1F	; 31
     5e6:	a1 09       	sbc	r26, r1
     5e8:	b1 09       	sbc	r27, r1
     5ea:	81 34       	cpi	r24, 0x41	; 65
     5ec:	9c 49       	sbci	r25, 0x9C	; 156
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <main+0x258>
     5f4:	b1 c0       	rjmp	.+354    	; 0x758 <main+0x3ba>
			OCR0A = (BYTE)(F_CPU / 8 / f) - 1;		/* Set sampling interval */
     5f6:	60 e8       	ldi	r22, 0x80	; 128
     5f8:	74 e8       	ldi	r23, 0x84	; 132
     5fa:	8e e1       	ldi	r24, 0x1E	; 30
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	6e da       	rcall	.-2852   	; 0xfffffadc <__fuse+0xff7dfadc>
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	82 0f       	add	r24, r18
     604:	89 bd       	out	0x29, r24	; 41
     606:	68 cf       	rjmp	.-304    	; 0x4d8 <main+0x13a>
			break;

			case FCC('d','a','t','a') :		/* 'data' chunk */
			if (!al) return 0;							/* Check if format is valid */
     608:	11 23       	and	r17, r17
     60a:	09 f4       	brne	.+2      	; 0x60e <main+0x270>
     60c:	a5 c0       	rjmp	.+330    	; 0x758 <main+0x3ba>
			if (sz < 1024 || (sz & (al - 1))) return 0;	/* Check size */
     60e:	81 14       	cp	r8, r1
     610:	24 e0       	ldi	r18, 0x04	; 4
     612:	92 06       	cpc	r9, r18
     614:	a1 04       	cpc	r10, r1
     616:	b1 04       	cpc	r11, r1
     618:	08 f4       	brcc	.+2      	; 0x61c <main+0x27e>
     61a:	9e c0       	rjmp	.+316    	; 0x758 <main+0x3ba>
     61c:	81 2f       	mov	r24, r17
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	aa 27       	eor	r26, r26
     624:	97 fd       	sbrc	r25, 7
     626:	a0 95       	com	r26
     628:	ba 2f       	mov	r27, r26
     62a:	ac 01       	movw	r20, r24
     62c:	bd 01       	movw	r22, r26
     62e:	48 21       	and	r20, r8
     630:	59 21       	and	r21, r9
     632:	6a 21       	and	r22, r10
     634:	7b 21       	and	r23, r11
     636:	45 2b       	or	r20, r21
     638:	46 2b       	or	r20, r22
     63a:	47 2b       	or	r20, r23
     63c:	09 f0       	breq	.+2      	; 0x640 <main+0x2a2>
     63e:	8c c0       	rjmp	.+280    	; 0x758 <main+0x3ba>
			if (Fs.fptr & (al - 1)) return 0;			/* Check word alignment */
     640:	e5 eb       	ldi	r30, 0xB5	; 181
     642:	f1 e0       	ldi	r31, 0x01	; 1
     644:	40 81       	ld	r20, Z
     646:	51 81       	ldd	r21, Z+1	; 0x01
     648:	62 81       	ldd	r22, Z+2	; 0x02
     64a:	73 81       	ldd	r23, Z+3	; 0x03
     64c:	84 23       	and	r24, r20
     64e:	95 23       	and	r25, r21
     650:	a6 23       	and	r26, r22
     652:	b7 23       	and	r27, r23
     654:	89 2b       	or	r24, r25
     656:	8a 2b       	or	r24, r26
     658:	8b 2b       	or	r24, r27
     65a:	09 f0       	breq	.+2      	; 0x65e <main+0x2c0>
     65c:	7d c0       	rjmp	.+250    	; 0x758 <main+0x3ba>
     65e:	15 c0       	rjmp	.+42     	; 0x68a <main+0x2ec>
			return sz;									/* Start to play */

			case FCC('D','I','S','P') :		/* 'DISP' chunk */
			case FCC('L','I','S','T') :		/* 'LIST' chunk */
			case FCC('f','a','c','t') :		/* 'fact' chunk */
			if (sz & 1) sz++;				/* Align chunk size */
     660:	80 fe       	sbrs	r8, 0
     662:	05 c0       	rjmp	.+10     	; 0x66e <main+0x2d0>
     664:	ff ef       	ldi	r31, 0xFF	; 255
     666:	8f 1a       	sub	r8, r31
     668:	9f 0a       	sbc	r9, r31
     66a:	af 0a       	sbc	r10, r31
     66c:	bf 0a       	sbc	r11, r31
			pf_lseek(Fs.fptr + sz);			/* Skip this chunk */
     66e:	e5 eb       	ldi	r30, 0xB5	; 181
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	80 81       	ld	r24, Z
     674:	91 81       	ldd	r25, Z+1	; 0x01
     676:	a2 81       	ldd	r26, Z+2	; 0x02
     678:	b3 81       	ldd	r27, Z+3	; 0x03
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	68 0d       	add	r22, r8
     680:	79 1d       	adc	r23, r9
     682:	8a 1d       	adc	r24, r10
     684:	9b 1d       	adc	r25, r11
     686:	c0 d7       	rcall	.+3968   	; 0x1608 <pf_lseek>
     688:	27 cf       	rjmp	.-434    	; 0x4d8 <main+0x13a>
	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */
     68a:	10 92 9e 01 	sts	0x019E, r1
     68e:	10 92 75 00 	sts	0x0075, r1
     692:	10 92 74 00 	sts	0x0074, r1

		if (!TCCR1) {				/* Enable audio out if not enabled */
     696:	80 b7       	in	r24, 0x30	; 48
     698:	81 11       	cpse	r24, r1
     69a:	14 c0       	rjmp	.+40     	; 0x6c4 <main+0x326>
			PLLCSR = 0b00000110;	/* Select PLL clock for TC1.ck */
     69c:	86 e0       	ldi	r24, 0x06	; 6
     69e:	87 bd       	out	0x27, r24	; 39
			GTCCR =  0b01100000;	/* Enable OC1B as PWM */
     6a0:	80 e6       	ldi	r24, 0x60	; 96
     6a2:	8c bd       	out	0x2c, r24	; 44
			TCCR1 = MODE ? 0b01100001 : 0b00000001;	/* Start TC1 and enable OC1A as PWM if needed */
     6a4:	81 e6       	ldi	r24, 0x61	; 97
     6a6:	80 bf       	out	0x30, r24	; 48
			TCCR0A = 0b00000010;	/* Statr TC0 as interval timer at 2MHz */
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	8a bd       	out	0x2a, r24	; 42
			TCCR0B = 0b00000010;
     6ac:	83 bf       	out	0x33, r24	; 51
			TIMSK = _BV(OCIE0A);
     6ae:	80 e1       	ldi	r24, 0x10	; 16
     6b0:	89 bf       	out	0x39, r24	; 57
     6b2:	10 e0       	ldi	r17, 0x00	; 0
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
     6b4:	1f 5f       	subi	r17, 0xFF	; 255
		OCR1A = v; OCR1B = v;
     6b6:	1e bd       	out	0x2e, r17	; 46
     6b8:	1b bd       	out	0x2b, r17	; 43
		delay_us(100);
     6ba:	84 e6       	ldi	r24, 0x64	; 100
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	d7 dc       	rcall	.-1618   	; 0x6e <delay_us>
	} while (--n);
     6c0:	10 38       	cpi	r17, 0x80	; 128
     6c2:	c1 f7       	brne	.-16     	; 0x6b4 <main+0x316>
			TCCR0B = 0b00000010;
			TIMSK = _BV(OCIE0A);
			ramp(1);
		}

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
     6c4:	a5 eb       	ldi	r26, 0xB5	; 181
     6c6:	b1 e0       	ldi	r27, 0x01	; 1
     6c8:	8d 91       	ld	r24, X+
     6ca:	9c 91       	ld	r25, X
     6cc:	91 70       	andi	r25, 0x01	; 1
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	72 e0       	ldi	r23, 0x02	; 2
     6d2:	68 1b       	sub	r22, r24
     6d4:	79 0b       	sbc	r23, r25
     6d6:	4c e8       	ldi	r20, 0x8C	; 140
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	b5 d6       	rcall	.+3434   	; 0x144a <pf_read>
		sz -= rb;
     6e0:	80 91 8c 00 	lds	r24, 0x008C
     6e4:	90 91 8d 00 	lds	r25, 0x008D
     6e8:	88 1a       	sub	r8, r24
     6ea:	99 0a       	sbc	r9, r25
     6ec:	a1 08       	sbc	r10, r1
     6ee:	b1 08       	sbc	r11, r1
		sw = 1;	/* Button status flag */
     6f0:	11 e0       	ldi	r17, 0x01	; 1
		do {	/* Data transfer loop */
			wdt_reset();
     6f2:	a8 95       	wdr

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
     6f4:	b1 e0       	ldi	r27, 0x01	; 1
     6f6:	8b 16       	cp	r8, r27
     6f8:	b4 e0       	ldi	r27, 0x04	; 4
     6fa:	9b 06       	cpc	r9, r27
     6fc:	a1 04       	cpc	r10, r1
     6fe:	b1 04       	cpc	r11, r1
     700:	18 f4       	brcc	.+6      	; 0x708 <main+0x36a>
     702:	68 2d       	mov	r22, r8
     704:	79 2d       	mov	r23, r9
     706:	02 c0       	rjmp	.+4      	; 0x70c <main+0x36e>
     708:	66 2d       	mov	r22, r6
     70a:	75 2d       	mov	r23, r5
			res = pf_read(0, btr, &rb);	/* Forward the data into audio FIFO */
     70c:	4c e8       	ldi	r20, 0x8C	; 140
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9a d6       	rcall	.+3380   	; 0x144a <pf_read>
			if (rb != 1024) break;		/* Break on error or end of data */
     716:	20 91 8c 00 	lds	r18, 0x008C
     71a:	30 91 8d 00 	lds	r19, 0x008D
     71e:	21 15       	cp	r18, r1
     720:	34 40       	sbci	r19, 0x04	; 4
     722:	51 f4       	brne	.+20     	; 0x738 <main+0x39a>
			sz -= rb;					/* Decrease data counter */
     724:	f4 e0       	ldi	r31, 0x04	; 4
     726:	9f 1a       	sub	r9, r31
     728:	a1 08       	sbc	r10, r1
     72a:	b1 08       	sbc	r11, r1

			sw <<= 1;					/* Break on button down */
     72c:	11 0f       	add	r17, r17
		} while ((PINB & 1) || ++sw != 1);
     72e:	b0 99       	sbic	0x16, 0	; 22
     730:	e0 cf       	rjmp	.-64     	; 0x6f2 <main+0x354>
     732:	1f 5f       	subi	r17, 0xFF	; 255
     734:	11 30       	cpi	r17, 0x01	; 1
     736:	e9 f6       	brne	.-70     	; 0x6f2 <main+0x354>
	}

	while (FifoCt) ;			/* Wait for audio FIFO empty */
     738:	90 91 9e 01 	lds	r25, 0x019E
     73c:	91 11       	cpse	r25, r1
     73e:	fc cf       	rjmp	.-8      	; 0x738 <main+0x39a>
	OCR1A = 128; OCR1B = 128;	/* Return output to center level */
     740:	90 e8       	ldi	r25, 0x80	; 128
     742:	9e bd       	out	0x2e, r25	; 46
     744:	9b bd       	out	0x2b, r25	; 43
     746:	01 c0       	rjmp	.+2      	; 0x74a <main+0x3ac>

	xsprintf((char*)Buff, PSTR("%s/%s"), dir, fn);
	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */
     748:	8f ef       	ldi	r24, 0xFF	; 255
			if (res == FR_NO_PATH)
			res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
				while (res == FR_OK) {				/* Play all wav files in the dir */
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <main+0x3b2>
     74e:	7a ce       	rjmp	.-780    	; 0x444 <main+0xa6>
     750:	03 c0       	rjmp	.+6      	; 0x758 <main+0x3ba>

			res = pf_opendir(&Dir, dir = "wav");	/* Open sound file directory */
			if (res == FR_NO_PATH)
			res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
     752:	88 23       	and	r24, r24
     754:	09 f4       	brne	.+2      	; 0x758 <main+0x3ba>
     756:	6d ce       	rjmp	.-806    	; 0x432 <main+0x94>


static
void delay500 (void)
{
	wdt_reset();
     758:	a8 95       	wdr

	TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */
     75a:	13 be       	out	0x33, r1	; 51
     75c:	1a bc       	out	0x2a, r1	; 42

	if (TCCR1) {	/* Stop TC1 if enabled */
     75e:	80 b7       	in	r24, 0x30	; 48
     760:	88 23       	and	r24, r24
     762:	59 f0       	breq	.+22     	; 0x77a <main+0x3dc>
     764:	c0 e8       	ldi	r28, 0x80	; 128
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
     766:	c1 50       	subi	r28, 0x01	; 1
		OCR1A = v; OCR1B = v;
     768:	ce bd       	out	0x2e, r28	; 46
     76a:	cb bd       	out	0x2b, r28	; 43
		delay_us(100);
     76c:	84 e6       	ldi	r24, 0x64	; 100
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	7e dc       	rcall	.-1796   	; 0x6e <delay_us>
	} while (--n);
     772:	c1 11       	cpse	r28, r1
     774:	f8 cf       	rjmp	.-16     	; 0x766 <main+0x3c8>

	TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */

	if (TCCR1) {	/* Stop TC1 if enabled */
		ramp(0);
		TCCR1 = 0; GTCCR = 0;
     776:	10 be       	out	0x30, r1	; 48
     778:	1c bc       	out	0x2c, r1	; 44
	}

	WDTCR = _BV(WDE) | _BV(WDIE) | 0b101;	/* Set WDT to interrupt mode in timeout of 0.5s */
     77a:	8d e4       	ldi	r24, 0x4D	; 77
     77c:	81 bd       	out	0x21, r24	; 33
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	/* Enter power down mode */
     77e:	85 b7       	in	r24, 0x35	; 53
     780:	87 7e       	andi	r24, 0xE7	; 231
     782:	80 61       	ori	r24, 0x10	; 16
     784:	85 bf       	out	0x35, r24	; 53
	sleep_mode();
     786:	85 b7       	in	r24, 0x35	; 53
     788:	80 62       	ori	r24, 0x20	; 32
     78a:	85 bf       	out	0x35, r24	; 53
     78c:	88 95       	sleep
     78e:	85 b7       	in	r24, 0x35	; 53
     790:	8f 7d       	andi	r24, 0xDF	; 223
     792:	85 bf       	out	0x35, r24	; 53

	wdt_reset();
     794:	a8 95       	wdr
	WDTCR = _BV(WDE) | 0b110;				/* Set WDT to reset mode in timeout of 1s */
     796:	8e e0       	ldi	r24, 0x0E	; 14
     798:	81 bd       	out	0x21, r24	; 33
     79a:	14 ce       	rjmp	.-984    	; 0x3c4 <main+0x26>
			b = Buff[2];
			if (b != 1 && b != 2) return 0;			/* Check channels (1/2) */
			GPIOR0 = al = b;						/* Save channel flag */
			b = Buff[14];
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
			GPIOR0 |= b;							/* Save resolution flag */
     79c:	8c 9a       	sbi	0x11, 4	; 17
			if (b & 16) al <<= 1;
     79e:	11 0f       	add	r17, r17
     7a0:	19 cf       	rjmp	.-462    	; 0x5d4 <main+0x236>
			b = Buff[2];
			if (b != 1 && b != 2) return 0;			/* Check channels (1/2) */
			GPIOR0 = al = b;						/* Save channel flag */
			b = Buff[14];
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
			GPIOR0 |= b;							/* Save resolution flag */
     7a2:	8b 9a       	sbi	0x11, 3	; 17
     7a4:	17 cf       	rjmp	.-466    	; 0x5d4 <main+0x236>

000007a6 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	c8 2f       	mov	r28, r24
     7b2:	d4 2f       	mov	r29, r20
     7b4:	15 2f       	mov	r17, r21
     7b6:	06 2f       	mov	r16, r22
     7b8:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     7ba:	88 23       	and	r24, r24
     7bc:	44 f4       	brge	.+16     	; 0x7ce <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	ba 01       	movw	r22, r20
     7c4:	87 e7       	ldi	r24, 0x77	; 119
     7c6:	ef df       	rcall	.-34     	; 0x7a6 <send_cmd>
		if (res > 1) return res;
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	f8 f4       	brcc	.+62     	; 0x80a <send_cmd+0x64>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     7cc:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     7ce:	5d dc       	rcall	.-1862   	; 0x8a <deselect>
	rcv_spi();
     7d0:	5e dc       	rcall	.-1860   	; 0x8e <rcv_spi>
	select();
     7d2:	59 dc       	rcall	.-1870   	; 0x86 <select>
	rcv_spi();
     7d4:	5c dc       	rcall	.-1864   	; 0x8e <rcv_spi>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
     7d6:	8c 2f       	mov	r24, r28
     7d8:	6e dc       	rcall	.-1828   	; 0xb6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     7da:	8f 2d       	mov	r24, r15
     7dc:	6c dc       	rcall	.-1832   	; 0xb6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     7de:	80 2f       	mov	r24, r16
     7e0:	6a dc       	rcall	.-1836   	; 0xb6 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     7e2:	81 2f       	mov	r24, r17
     7e4:	68 dc       	rcall	.-1840   	; 0xb6 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     7e6:	8d 2f       	mov	r24, r29
     7e8:	66 dc       	rcall	.-1844   	; 0xb6 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     7ea:	c0 34       	cpi	r28, 0x40	; 64
     7ec:	21 f0       	breq	.+8      	; 0x7f6 <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     7ee:	c8 34       	cpi	r28, 0x48	; 72
     7f0:	21 f0       	breq	.+8      	; 0x7fa <send_cmd+0x54>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <send_cmd+0x56>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     7f6:	85 e9       	ldi	r24, 0x95	; 149
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <send_cmd+0x56>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     7fa:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
     7fc:	5c dc       	rcall	.-1864   	; 0xb6 <xmit_spi>
     7fe:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     800:	46 dc       	rcall	.-1908   	; 0x8e <rcv_spi>
	} while ((res & 0x80) && --n);
     802:	88 23       	and	r24, r24
     804:	14 f4       	brge	.+4      	; 0x80a <send_cmd+0x64>
     806:	c1 50       	subi	r28, 0x01	; 1
     808:	d9 f7       	brne	.-10     	; 0x800 <send_cmd+0x5a>

	return res;			/* Return with the response value */
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	08 95       	ret

00000816 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	00 d0       	rcall	.+0      	; 0x824 <disk_initialize+0xe>
     824:	00 d0       	rcall	.+0      	; 0x826 <disk_initialize+0x10>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();		/* Initialize USI */
     82a:	28 dc       	rcall	.-1968   	; 0x7c <init_spi>
     82c:	0a e0       	ldi	r16, 0x0A	; 10
     82e:	10 e0       	ldi	r17, 0x00	; 0

	for (tmr = 10; tmr; tmr--) rcv_spi();	/* Dummy clocks */
     830:	2e dc       	rcall	.-1956   	; 0x8e <rcv_spi>
     832:	01 50       	subi	r16, 0x01	; 1
     834:	11 09       	sbc	r17, r1
     836:	01 15       	cp	r16, r1
     838:	11 05       	cpc	r17, r1
     83a:	d1 f7       	brne	.-12     	; 0x830 <disk_initialize+0x1a>
	select();
     83c:	24 dc       	rcall	.-1976   	; 0x86 <select>
     83e:	08 e5       	ldi	r16, 0x58	; 88
     840:	12 e0       	ldi	r17, 0x02	; 2
	for (tmr = 600; tmr; tmr--) rcv_spi();	/* Dummy clocks */
     842:	25 dc       	rcall	.-1974   	; 0x8e <rcv_spi>
     844:	01 50       	subi	r16, 0x01	; 1
     846:	11 09       	sbc	r17, r1
     848:	01 15       	cp	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	d1 f7       	brne	.-12     	; 0x842 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	ba 01       	movw	r22, r20
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	a7 df       	rcall	.-178    	; 0x7a6 <send_cmd>
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	09 f0       	breq	.+2      	; 0x85e <disk_initialize+0x48>
     85c:	7b c0       	rjmp	.+246    	; 0x954 <disk_initialize+0x13e>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     85e:	4a ea       	ldi	r20, 0xAA	; 170
     860:	51 e0       	ldi	r21, 0x01	; 1
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	88 e4       	ldi	r24, 0x48	; 72
     868:	9e df       	rcall	.-196    	; 0x7a6 <send_cmd>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	09 f0       	breq	.+2      	; 0x870 <disk_initialize+0x5a>
     86e:	43 c0       	rjmp	.+134    	; 0x8f6 <disk_initialize+0xe0>
     870:	7e 01       	movw	r14, r28
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	e8 0e       	add	r14, r24
     876:	f1 1c       	adc	r15, r1
     878:	8e 01       	movw	r16, r28
     87a:	0f 5f       	subi	r16, 0xFF	; 255
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     87e:	07 dc       	rcall	.-2034   	; 0x8e <rcv_spi>
     880:	f8 01       	movw	r30, r16
     882:	81 93       	st	Z+, r24
     884:	8f 01       	movw	r16, r30
     886:	ee 15       	cp	r30, r14
     888:	ff 05       	cpc	r31, r15
     88a:	c9 f7       	brne	.-14     	; 0x87e <disk_initialize+0x68>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	09 f0       	breq	.+2      	; 0x894 <disk_initialize+0x7e>
     892:	62 c0       	rjmp	.+196    	; 0x958 <disk_initialize+0x142>
     894:	8c 81       	ldd	r24, Y+4	; 0x04
     896:	8a 3a       	cpi	r24, 0xAA	; 170
     898:	09 f0       	breq	.+2      	; 0x89c <disk_initialize+0x86>
     89a:	60 c0       	rjmp	.+192    	; 0x95c <disk_initialize+0x146>
     89c:	08 ea       	ldi	r16, 0xA8	; 168
     89e:	11 e6       	ldi	r17, 0x61	; 97
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <disk_initialize+0x98>
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     8a2:	01 50       	subi	r16, 0x01	; 1
     8a4:	11 09       	sbc	r17, r1
     8a6:	01 15       	cp	r16, r1
     8a8:	11 05       	cpc	r17, r1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <disk_initialize+0x98>
     8ac:	59 c0       	rjmp	.+178    	; 0x960 <disk_initialize+0x14a>
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e4       	ldi	r23, 0x40	; 64
     8b6:	89 ee       	ldi	r24, 0xE9	; 233
     8b8:	76 df       	rcall	.-276    	; 0x7a6 <send_cmd>
     8ba:	81 11       	cpse	r24, r1
     8bc:	f2 cf       	rjmp	.-28     	; 0x8a2 <disk_initialize+0x8c>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     8be:	01 2b       	or	r16, r17
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <disk_initialize+0xae>
     8c2:	50 c0       	rjmp	.+160    	; 0x964 <disk_initialize+0x14e>
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	ba 01       	movw	r22, r20
     8ca:	8a e7       	ldi	r24, 0x7A	; 122
     8cc:	6c df       	rcall	.-296    	; 0x7a6 <send_cmd>
     8ce:	81 11       	cpse	r24, r1
     8d0:	4b c0       	rjmp	.+150    	; 0x968 <disk_initialize+0x152>
     8d2:	8e 01       	movw	r16, r28
     8d4:	0f 5f       	subi	r16, 0xFF	; 255
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     8d8:	da db       	rcall	.-2124   	; 0x8e <rcv_spi>
     8da:	f8 01       	movw	r30, r16
     8dc:	81 93       	st	Z+, r24
     8de:	8f 01       	movw	r16, r30
     8e0:	ee 15       	cp	r30, r14
     8e2:	ff 05       	cpc	r31, r15
     8e4:	c9 f7       	brne	.-14     	; 0x8d8 <disk_initialize+0xc2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	86 ff       	sbrs	r24, 6
     8ea:	40 c0       	rjmp	.+128    	; 0x96c <disk_initialize+0x156>
     8ec:	0f 2e       	mov	r0, r31
     8ee:	fc e0       	ldi	r31, 0x0C	; 12
     8f0:	ff 2e       	mov	r15, r31
     8f2:	f0 2d       	mov	r31, r0
     8f4:	44 c0       	rjmp	.+136    	; 0x97e <disk_initialize+0x168>
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	ba 01       	movw	r22, r20
     8fc:	89 ee       	ldi	r24, 0xE9	; 233
     8fe:	53 df       	rcall	.-346    	; 0x7a6 <send_cmd>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	40 f4       	brcc	.+16     	; 0x914 <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     904:	68 94       	set
     906:	ff 24       	eor	r15, r15
     908:	f1 f8       	bld	r15, 1
     90a:	0f 2e       	mov	r0, r31
     90c:	f9 ee       	ldi	r31, 0xE9	; 233
     90e:	ef 2e       	mov	r14, r31
     910:	f0 2d       	mov	r31, r0
     912:	06 c0       	rjmp	.+12     	; 0x920 <disk_initialize+0x10a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     914:	ff 24       	eor	r15, r15
     916:	f3 94       	inc	r15
     918:	0f 2e       	mov	r0, r31
     91a:	f1 e4       	ldi	r31, 0x41	; 65
     91c:	ef 2e       	mov	r14, r31
     91e:	f0 2d       	mov	r31, r0
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
     920:	08 ea       	ldi	r16, 0xA8	; 168
     922:	11 e6       	ldi	r17, 0x61	; 97
     924:	05 c0       	rjmp	.+10     	; 0x930 <disk_initialize+0x11a>
     926:	01 50       	subi	r16, 0x01	; 1
     928:	11 09       	sbc	r17, r1
     92a:	01 15       	cp	r16, r1
     92c:	11 05       	cpc	r17, r1
     92e:	11 f1       	breq	.+68     	; 0x974 <disk_initialize+0x15e>
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	ba 01       	movw	r22, r20
     936:	8e 2d       	mov	r24, r14
     938:	36 df       	rcall	.-404    	; 0x7a6 <send_cmd>
     93a:	81 11       	cpse	r24, r1
     93c:	f4 cf       	rjmp	.-24     	; 0x926 <disk_initialize+0x110>
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
     93e:	01 2b       	or	r16, r17
     940:	d9 f0       	breq	.+54     	; 0x978 <disk_initialize+0x162>
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	52 e0       	ldi	r21, 0x02	; 2
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e5       	ldi	r24, 0x50	; 80
     94c:	2c df       	rcall	.-424    	; 0x7a6 <send_cmd>
     94e:	81 11       	cpse	r24, r1
     950:	15 c0       	rjmp	.+42     	; 0x97c <disk_initialize+0x166>
     952:	15 c0       	rjmp	.+42     	; 0x97e <disk_initialize+0x168>

	for (tmr = 10; tmr; tmr--) rcv_spi();	/* Dummy clocks */
	select();
	for (tmr = 600; tmr; tmr--) rcv_spi();	/* Dummy clocks */

	ty = 0;
     954:	f1 2c       	mov	r15, r1
     956:	13 c0       	rjmp	.+38     	; 0x97e <disk_initialize+0x168>
     958:	f1 2c       	mov	r15, r1
     95a:	11 c0       	rjmp	.+34     	; 0x97e <disk_initialize+0x168>
     95c:	f1 2c       	mov	r15, r1
     95e:	0f c0       	rjmp	.+30     	; 0x97e <disk_initialize+0x168>
     960:	f1 2c       	mov	r15, r1
     962:	0d c0       	rjmp	.+26     	; 0x97e <disk_initialize+0x168>
     964:	f1 2c       	mov	r15, r1
     966:	0b c0       	rjmp	.+22     	; 0x97e <disk_initialize+0x168>
     968:	f1 2c       	mov	r15, r1
     96a:	09 c0       	rjmp	.+18     	; 0x97e <disk_initialize+0x168>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     96c:	68 94       	set
     96e:	ff 24       	eor	r15, r15
     970:	f2 f8       	bld	r15, 2
     972:	05 c0       	rjmp	.+10     	; 0x97e <disk_initialize+0x168>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
				ty = 0;
     974:	f1 2c       	mov	r15, r1
     976:	03 c0       	rjmp	.+6      	; 0x97e <disk_initialize+0x168>
     978:	f1 2c       	mov	r15, r1
     97a:	01 c0       	rjmp	.+2      	; 0x97e <disk_initialize+0x168>
     97c:	f1 2c       	mov	r15, r1
			}
		}
	}
	CardType = ty;
     97e:	f0 92 c9 01 	sts	0x01C9, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	deselect();
     982:	83 db       	rcall	.-2298   	; 0x8a <deselect>
	rcv_spi();
     984:	84 db       	rcall	.-2296   	; 0x8e <rcv_spi>
		}
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	f1 10       	cpse	r15, r1
     98a:	80 e0       	ldi	r24, 0x00	; 0
}
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <disk_readp>:
	void *dest,		/* Pointer to the destination object to put data */
	DWORD lba,		/* Start sector number (LBA) */
	WORD ofs,		/* Byte offset in the sector (0..511) */
	WORD cnt		/* Byte count (1..512), b15:destination flag */
)
{
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ec 01       	movw	r28, r24
     9b4:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */
     9b6:	80 91 c9 01 	lds	r24, 0x01C9
     9ba:	83 fd       	sbrc	r24, 3
     9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <disk_readp+0x2e>
     9be:	03 2e       	mov	r0, r19
     9c0:	39 e0       	ldi	r19, 0x09	; 9
     9c2:	44 0f       	add	r20, r20
     9c4:	55 1f       	adc	r21, r21
     9c6:	66 1f       	adc	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	3a 95       	dec	r19
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <disk_readp+0x20>
     9ce:	30 2d       	mov	r19, r0

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {	/* READ_SINGLE_BLOCK */
     9d0:	81 e5       	ldi	r24, 0x51	; 81
     9d2:	e9 de       	rcall	.-558    	; 0x7a6 <send_cmd>
     9d4:	81 11       	cpse	r24, r1
     9d6:	18 c0       	rjmp	.+48     	; 0xa08 <disk_readp+0x66>
     9d8:	0f 2e       	mov	r0, r31
     9da:	f0 e3       	ldi	r31, 0x30	; 48
     9dc:	cf 2e       	mov	r12, r31
     9de:	f5 e7       	ldi	r31, 0x75	; 117
     9e0:	df 2e       	mov	r13, r31
     9e2:	f0 2d       	mov	r31, r0
		tmr = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
     9e4:	54 db       	rcall	.-2392   	; 0x8e <rcv_spi>
		} while (rc == 0xFF && --tmr);
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	39 f4       	brne	.+14     	; 0x9f8 <disk_readp+0x56>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	c8 1a       	sub	r12, r24
     9ee:	d1 08       	sbc	r13, r1
     9f0:	c1 14       	cp	r12, r1
     9f2:	d1 04       	cpc	r13, r1
     9f4:	b9 f7       	brne	.-18     	; 0x9e4 <disk_readp+0x42>
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <disk_readp+0x6a>
		if (rc == 0xFE) {
     9f8:	8e 3f       	cpi	r24, 0xFE	; 254
     9fa:	51 f4       	brne	.+20     	; 0xa10 <disk_readp+0x6e>
			read_blk_part(dest, ofs, cnt);	/* Read a part of the sector */
     9fc:	a8 01       	movw	r20, r16
     9fe:	b7 01       	movw	r22, r14
     a00:	ce 01       	movw	r24, r28
     a02:	66 db       	rcall	.-2356   	; 0xd0 <read_blk_part>
			res = RES_OK;
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <disk_readp+0x70>
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */

	res = RES_ERROR;
     a08:	c1 e0       	ldi	r28, 0x01	; 1
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <disk_readp+0x70>
     a0c:	c1 e0       	ldi	r28, 0x01	; 1
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <disk_readp+0x70>
     a10:	c1 e0       	ldi	r28, 0x01	; 1
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	deselect();
     a12:	3b db       	rcall	.-2442   	; 0x8a <deselect>
	rcv_spi();
     a14:	3c db       	rcall	.-2440   	; 0x8e <rcv_spi>
	}

	release_spi();

	return res;
}
     a16:	8c 2f       	mov	r24, r28
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     a2a:	8f 92       	push	r8
     a2c:	9f 92       	push	r9
     a2e:	af 92       	push	r10
     a30:	bf 92       	push	r11
     a32:	cf 92       	push	r12
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
	FATFS *fs = FatFs;
     a3e:	c0 91 72 00 	lds	r28, 0x0072
     a42:	d0 91 73 00 	lds	r29, 0x0073


	clst -= 2;
     a46:	62 50       	subi	r22, 0x02	; 2
     a48:	71 09       	sbc	r23, r1
     a4a:	81 09       	sbc	r24, r1
     a4c:	91 09       	sbc	r25, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     a4e:	ce 80       	ldd	r12, Y+6	; 0x06
     a50:	df 80       	ldd	r13, Y+7	; 0x07
     a52:	e8 84       	ldd	r14, Y+8	; 0x08
     a54:	f9 84       	ldd	r15, Y+9	; 0x09
     a56:	22 e0       	ldi	r18, 0x02	; 2
     a58:	c2 1a       	sub	r12, r18
     a5a:	d1 08       	sbc	r13, r1
     a5c:	e1 08       	sbc	r14, r1
     a5e:	f1 08       	sbc	r15, r1
     a60:	6c 15       	cp	r22, r12
     a62:	7d 05       	cpc	r23, r13
     a64:	8e 05       	cpc	r24, r14
     a66:	9f 05       	cpc	r25, r15
     a68:	a0 f4       	brcc	.+40     	; 0xa92 <clust2sect+0x68>
	return (DWORD)clst * fs->csize + fs->database;
     a6a:	2a 81       	ldd	r18, Y+2	; 0x02
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	58 d8       	rcall	.-3920   	; 0xfffffb24 <__fuse+0xff7dfb24>
     a74:	82 2e       	mov	r8, r18
     a76:	93 2e       	mov	r9, r19
     a78:	a4 2e       	mov	r10, r20
     a7a:	b5 2e       	mov	r11, r21
     a7c:	8a 89       	ldd	r24, Y+18	; 0x12
     a7e:	9b 89       	ldd	r25, Y+19	; 0x13
     a80:	ac 89       	ldd	r26, Y+20	; 0x14
     a82:	bd 89       	ldd	r27, Y+21	; 0x15
     a84:	bc 01       	movw	r22, r24
     a86:	cd 01       	movw	r24, r26
     a88:	68 0d       	add	r22, r8
     a8a:	79 1d       	adc	r23, r9
     a8c:	8a 1d       	adc	r24, r10
     a8e:	9b 1d       	adc	r25, r11
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <clust2sect+0x6e>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	08 95       	ret

00000aae <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	ec 01       	movw	r28, r24
	CLUST clst;
	FATFS *fs = FatFs;
     ab8:	e0 91 72 00 	lds	r30, 0x0072
     abc:	f0 91 73 00 	lds	r31, 0x0073


	dj->index = 0;
     ac0:	19 82       	std	Y+1, r1	; 0x01
     ac2:	18 82       	st	Y, r1
	clst = dj->sclust;
     ac4:	6c 81       	ldd	r22, Y+4	; 0x04
     ac6:	7d 81       	ldd	r23, Y+5	; 0x05
     ac8:	8e 81       	ldd	r24, Y+6	; 0x06
     aca:	9f 81       	ldd	r25, Y+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     acc:	61 30       	cpi	r22, 0x01	; 1
     ace:	71 05       	cpc	r23, r1
     ad0:	81 05       	cpc	r24, r1
     ad2:	91 05       	cpc	r25, r1
     ad4:	51 f1       	breq	.+84     	; 0xb2a <dir_rewind+0x7c>
     ad6:	06 81       	ldd	r16, Z+6	; 0x06
     ad8:	17 81       	ldd	r17, Z+7	; 0x07
     ada:	20 85       	ldd	r18, Z+8	; 0x08
     adc:	31 85       	ldd	r19, Z+9	; 0x09
     ade:	60 17       	cp	r22, r16
     ae0:	71 07       	cpc	r23, r17
     ae2:	82 07       	cpc	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	18 f5       	brcc	.+70     	; 0xb2e <dir_rewind+0x80>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     ae8:	61 15       	cp	r22, r1
     aea:	71 05       	cpc	r23, r1
     aec:	81 05       	cpc	r24, r1
     aee:	91 05       	cpc	r25, r1
     af0:	01 f5       	brne	.+64     	; 0xb32 <dir_rewind+0x84>
     af2:	80 81       	ld	r24, Z
     af4:	83 30       	cpi	r24, 0x03	; 3
     af6:	11 f5       	brne	.+68     	; 0xb3c <dir_rewind+0x8e>
		clst = (CLUST)fs->dirbase;
     af8:	66 85       	ldd	r22, Z+14	; 0x0e
     afa:	77 85       	ldd	r23, Z+15	; 0x0f
     afc:	80 89       	ldd	r24, Z+16	; 0x10
     afe:	91 89       	ldd	r25, Z+17	; 0x11
	dj->clust = clst;						/* Current cluster */
     b00:	68 87       	std	Y+8, r22	; 0x08
     b02:	79 87       	std	Y+9, r23	; 0x09
     b04:	8a 87       	std	Y+10, r24	; 0x0a
     b06:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     b08:	61 15       	cp	r22, r1
     b0a:	71 05       	cpc	r23, r1
     b0c:	81 05       	cpc	r24, r1
     b0e:	91 05       	cpc	r25, r1
     b10:	11 f0       	breq	.+4      	; 0xb16 <dir_rewind+0x68>
     b12:	8b df       	rcall	.-234    	; 0xa2a <clust2sect>
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <dir_rewind+0x70>
     b16:	66 85       	ldd	r22, Z+14	; 0x0e
     b18:	77 85       	ldd	r23, Z+15	; 0x0f
     b1a:	80 89       	ldd	r24, Z+16	; 0x10
     b1c:	91 89       	ldd	r25, Z+17	; 0x11
     b1e:	6c 87       	std	Y+12, r22	; 0x0c
     b20:	7d 87       	std	Y+13, r23	; 0x0d
     b22:	8e 87       	std	Y+14, r24	; 0x0e
     b24:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e c0       	rjmp	.+28     	; 0xb46 <dir_rewind+0x98>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0c c0       	rjmp	.+24     	; 0xb46 <dir_rewind+0x98>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <dir_rewind+0x98>
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
     b32:	68 87       	std	Y+8, r22	; 0x08
     b34:	79 87       	std	Y+9, r23	; 0x09
     b36:	8a 87       	std	Y+10, r24	; 0x0a
     b38:	9b 87       	std	Y+11, r25	; 0x0b
     b3a:	eb cf       	rjmp	.-42     	; 0xb12 <dir_rewind+0x64>
     b3c:	18 86       	std	Y+8, r1	; 0x08
     b3e:	19 86       	std	Y+9, r1	; 0x09
     b40:	1a 86       	std	Y+10, r1	; 0x0a
     b42:	1b 86       	std	Y+11, r1	; 0x0b
     b44:	e8 cf       	rjmp	.-48     	; 0xb16 <dir_rewind+0x68>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	08 95       	ret

00000b50 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
     b62:	6a 01       	movw	r12, r20
     b64:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     b66:	02 e0       	ldi	r16, 0x02	; 2
     b68:	10 e0       	ldi	r17, 0x00	; 0
     b6a:	2e ef       	ldi	r18, 0xFE	; 254
     b6c:	31 e0       	ldi	r19, 0x01	; 1
     b6e:	19 df       	rcall	.-462    	; 0x9a2 <disk_readp>
     b70:	81 11       	cpse	r24, r1
     b72:	24 c0       	rjmp	.+72     	; 0xbbc <check_fs+0x6c>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     b74:	88 81       	ld	r24, Y
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	85 35       	cpi	r24, 0x55	; 85
     b7a:	9a 4a       	sbci	r25, 0xAA	; 170
     b7c:	09 f5       	brne	.+66     	; 0xbc0 <check_fs+0x70>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     b7e:	26 e3       	ldi	r18, 0x36	; 54
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	b7 01       	movw	r22, r14
     b84:	a6 01       	movw	r20, r12
     b86:	ce 01       	movw	r24, r28
     b88:	0c df       	rcall	.-488    	; 0x9a2 <disk_readp>
     b8a:	81 11       	cpse	r24, r1
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <check_fs+0x48>
     b8e:	88 81       	ld	r24, Y
     b90:	99 81       	ldd	r25, Y+1	; 0x01
     b92:	86 34       	cpi	r24, 0x46	; 70
     b94:	91 44       	sbci	r25, 0x41	; 65
     b96:	b1 f0       	breq	.+44     	; 0xbc4 <check_fs+0x74>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     b98:	02 e0       	ldi	r16, 0x02	; 2
     b9a:	10 e0       	ldi	r17, 0x00	; 0
     b9c:	22 e5       	ldi	r18, 0x52	; 82
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	b7 01       	movw	r22, r14
     ba2:	a6 01       	movw	r20, r12
     ba4:	ce 01       	movw	r24, r28
     ba6:	fd de       	rcall	.-518    	; 0x9a2 <disk_readp>
     ba8:	81 11       	cpse	r24, r1
     baa:	0e c0       	rjmp	.+28     	; 0xbc8 <check_fs+0x78>
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	28 81       	ld	r18, Y
     bb0:	39 81       	ldd	r19, Y+1	; 0x01
     bb2:	26 34       	cpi	r18, 0x46	; 70
     bb4:	31 44       	sbci	r19, 0x41	; 65
     bb6:	49 f4       	brne	.+18     	; 0xbca <check_fs+0x7a>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	07 c0       	rjmp	.+14     	; 0xbca <check_fs+0x7a>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <check_fs+0x7a>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <check_fs+0x7a>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <check_fs+0x7a>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	08 95       	ret

00000bdc <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	af 92       	push	r10
     be6:	bf 92       	push	r11
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <get_fat+0x1e>
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <get_fat+0x20>
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	6b 01       	movw	r12, r22
     c02:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     c04:	a0 90 72 00 	lds	r10, 0x0072
     c08:	b0 90 73 00 	lds	r11, 0x0073


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	c8 16       	cp	r12, r24
     c10:	d1 04       	cpc	r13, r1
     c12:	e1 04       	cpc	r14, r1
     c14:	f1 04       	cpc	r15, r1
     c16:	08 f4       	brcc	.+2      	; 0xc1a <get_fat+0x3e>
     c18:	b3 c0       	rjmp	.+358    	; 0xd80 <get_fat+0x1a4>
     c1a:	f5 01       	movw	r30, r10
     c1c:	86 81       	ldd	r24, Z+6	; 0x06
     c1e:	97 81       	ldd	r25, Z+7	; 0x07
     c20:	a0 85       	ldd	r26, Z+8	; 0x08
     c22:	b1 85       	ldd	r27, Z+9	; 0x09
     c24:	c8 16       	cp	r12, r24
     c26:	d9 06       	cpc	r13, r25
     c28:	ea 06       	cpc	r14, r26
     c2a:	fb 06       	cpc	r15, r27
     c2c:	08 f0       	brcs	.+2      	; 0xc30 <get_fat+0x54>
     c2e:	ad c0       	rjmp	.+346    	; 0xd8a <get_fat+0x1ae>
		return 1;

	switch (fs->fs_type) {
     c30:	80 81       	ld	r24, Z
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	09 f4       	brne	.+2      	; 0xc38 <get_fat+0x5c>
     c36:	5e c0       	rjmp	.+188    	; 0xcf4 <get_fat+0x118>
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	09 f4       	brne	.+2      	; 0xc3e <get_fat+0x62>
     c3c:	78 c0       	rjmp	.+240    	; 0xd2e <get_fat+0x152>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	09 f0       	breq	.+2      	; 0xc44 <get_fat+0x68>
     c42:	a8 c0       	rjmp	.+336    	; 0xd94 <get_fat+0x1b8>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     c44:	26 01       	movw	r4, r12
     c46:	56 94       	lsr	r5
     c48:	47 94       	ror	r4
     c4a:	4c 0c       	add	r4, r12
     c4c:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     c4e:	92 01       	movw	r18, r4
     c50:	31 70       	andi	r19, 0x01	; 1
     c52:	45 2c       	mov	r4, r5
     c54:	55 24       	eor	r5, r5
     c56:	46 94       	lsr	r4
		if (ofs != 511) {
     c58:	2f 3f       	cpi	r18, 0xFF	; 255
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	3f 07       	cpc	r19, r31
     c5e:	89 f0       	breq	.+34     	; 0xc82 <get_fat+0xa6>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     c60:	f5 01       	movw	r30, r10
     c62:	42 85       	ldd	r20, Z+10	; 0x0a
     c64:	53 85       	ldd	r21, Z+11	; 0x0b
     c66:	64 85       	ldd	r22, Z+12	; 0x0c
     c68:	75 85       	ldd	r23, Z+13	; 0x0d
     c6a:	44 0d       	add	r20, r4
     c6c:	55 1d       	adc	r21, r5
     c6e:	61 1d       	adc	r22, r1
     c70:	71 1d       	adc	r23, r1
     c72:	02 e0       	ldi	r16, 0x02	; 2
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	93 de       	rcall	.-730    	; 0x9a2 <disk_readp>
     c7c:	88 23       	and	r24, r24
     c7e:	49 f1       	breq	.+82     	; 0xcd2 <get_fat+0xf6>
     c80:	8e c0       	rjmp	.+284    	; 0xd9e <get_fat+0x1c2>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     c82:	61 2c       	mov	r6, r1
     c84:	71 2c       	mov	r7, r1
     c86:	f5 01       	movw	r30, r10
     c88:	42 85       	ldd	r20, Z+10	; 0x0a
     c8a:	53 85       	ldd	r21, Z+11	; 0x0b
     c8c:	64 85       	ldd	r22, Z+12	; 0x0c
     c8e:	75 85       	ldd	r23, Z+13	; 0x0d
     c90:	44 0d       	add	r20, r4
     c92:	55 1d       	adc	r21, r5
     c94:	66 1d       	adc	r22, r6
     c96:	77 1d       	adc	r23, r7
     c98:	01 e0       	ldi	r16, 0x01	; 1
     c9a:	10 e0       	ldi	r17, 0x00	; 0
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	31 e0       	ldi	r19, 0x01	; 1
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	7e de       	rcall	.-772    	; 0x9a2 <disk_readp>
     ca6:	81 11       	cpse	r24, r1
     ca8:	7f c0       	rjmp	.+254    	; 0xda8 <get_fat+0x1cc>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     caa:	f5 01       	movw	r30, r10
     cac:	42 85       	ldd	r20, Z+10	; 0x0a
     cae:	53 85       	ldd	r21, Z+11	; 0x0b
     cb0:	64 85       	ldd	r22, Z+12	; 0x0c
     cb2:	75 85       	ldd	r23, Z+13	; 0x0d
     cb4:	4f 5f       	subi	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	6f 4f       	sbci	r22, 0xFF	; 255
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	44 0d       	add	r20, r4
     cbe:	55 1d       	adc	r21, r5
     cc0:	66 1d       	adc	r22, r6
     cc2:	77 1d       	adc	r23, r7
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ce 01       	movw	r24, r28
     cca:	02 96       	adiw	r24, 0x02	; 2
     ccc:	6a de       	rcall	.-812    	; 0x9a2 <disk_readp>
     cce:	81 11       	cpse	r24, r1
     cd0:	70 c0       	rjmp	.+224    	; 0xdb2 <get_fat+0x1d6>
		}
		wc = LD_WORD(buf);
     cd2:	69 81       	ldd	r22, Y+1	; 0x01
     cd4:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     cd6:	c0 fe       	sbrs	r12, 0
     cd8:	09 c0       	rjmp	.+18     	; 0xcec <get_fat+0x110>
     cda:	72 95       	swap	r23
     cdc:	62 95       	swap	r22
     cde:	6f 70       	andi	r22, 0x0F	; 15
     ce0:	67 27       	eor	r22, r23
     ce2:	7f 70       	andi	r23, 0x0F	; 15
     ce4:	67 27       	eor	r22, r23
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	71 c0       	rjmp	.+226    	; 0xdce <get_fat+0x1f2>
     cec:	7f 70       	andi	r23, 0x0F	; 15
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	6d c0       	rjmp	.+218    	; 0xdce <get_fat+0x1f2>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     cf4:	96 01       	movw	r18, r12
     cf6:	33 27       	eor	r19, r19
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	77 27       	eor	r23, r23
     cfe:	6f 2d       	mov	r22, r15
     d00:	5e 2d       	mov	r21, r14
     d02:	4d 2d       	mov	r20, r13
     d04:	f5 01       	movw	r30, r10
     d06:	82 85       	ldd	r24, Z+10	; 0x0a
     d08:	93 85       	ldd	r25, Z+11	; 0x0b
     d0a:	a4 85       	ldd	r26, Z+12	; 0x0c
     d0c:	b5 85       	ldd	r27, Z+13	; 0x0d
     d0e:	48 0f       	add	r20, r24
     d10:	59 1f       	adc	r21, r25
     d12:	6a 1f       	adc	r22, r26
     d14:	7b 1f       	adc	r23, r27
     d16:	02 e0       	ldi	r16, 0x02	; 2
     d18:	10 e0       	ldi	r17, 0x00	; 0
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	41 de       	rcall	.-894    	; 0x9a2 <disk_readp>
     d20:	81 11       	cpse	r24, r1
     d22:	4c c0       	rjmp	.+152    	; 0xdbc <get_fat+0x1e0>
		return LD_WORD(buf);
     d24:	69 81       	ldd	r22, Y+1	; 0x01
     d26:	7a 81       	ldd	r23, Y+2	; 0x02
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	50 c0       	rjmp	.+160    	; 0xdce <get_fat+0x1f2>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     d2e:	96 01       	movw	r18, r12
     d30:	2f 77       	andi	r18, 0x7F	; 127
     d32:	33 27       	eor	r19, r19
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	b7 01       	movw	r22, r14
     d3e:	a6 01       	movw	r20, r12
     d40:	68 94       	set
     d42:	16 f8       	bld	r1, 6
     d44:	76 95       	lsr	r23
     d46:	67 95       	ror	r22
     d48:	57 95       	ror	r21
     d4a:	47 95       	ror	r20
     d4c:	16 94       	lsr	r1
     d4e:	d1 f7       	brne	.-12     	; 0xd44 <get_fat+0x168>
     d50:	f5 01       	movw	r30, r10
     d52:	82 85       	ldd	r24, Z+10	; 0x0a
     d54:	93 85       	ldd	r25, Z+11	; 0x0b
     d56:	a4 85       	ldd	r26, Z+12	; 0x0c
     d58:	b5 85       	ldd	r27, Z+13	; 0x0d
     d5a:	48 0f       	add	r20, r24
     d5c:	59 1f       	adc	r21, r25
     d5e:	6a 1f       	adc	r22, r26
     d60:	7b 1f       	adc	r23, r27
     d62:	04 e0       	ldi	r16, 0x04	; 4
     d64:	10 e0       	ldi	r17, 0x00	; 0
     d66:	ce 01       	movw	r24, r28
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	1b de       	rcall	.-970    	; 0x9a2 <disk_readp>
     d6c:	81 11       	cpse	r24, r1
     d6e:	2b c0       	rjmp	.+86     	; 0xdc6 <get_fat+0x1ea>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	ab 81       	ldd	r26, Y+3	; 0x03
     d76:	bc 81       	ldd	r27, Y+4	; 0x04
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	9f 70       	andi	r25, 0x0F	; 15
     d7e:	27 c0       	rjmp	.+78     	; 0xdce <get_fat+0x1f2>
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
		return 1;
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	22 c0       	rjmp	.+68     	; 0xdce <get_fat+0x1f2>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	1d c0       	rjmp	.+58     	; 0xdce <get_fat+0x1f2>
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	18 c0       	rjmp	.+48     	; 0xdce <get_fat+0x1f2>
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	13 c0       	rjmp	.+38     	; 0xdce <get_fat+0x1f2>
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e c0       	rjmp	.+28     	; 0xdce <get_fat+0x1f2>
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	09 c0       	rjmp	.+18     	; 0xdce <get_fat+0x1f2>
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <get_fat+0x1f2>
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
}
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	08 95       	ret

00000df4 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     e06:	e0 90 72 00 	lds	r14, 0x0072
     e0a:	f0 90 73 00 	lds	r15, 0x0073


	i = dj->index + 1;
     e0e:	08 81       	ld	r16, Y
     e10:	19 81       	ldd	r17, Y+1	; 0x01
     e12:	0f 5f       	subi	r16, 0xFF	; 255
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     e16:	01 15       	cp	r16, r1
     e18:	11 05       	cpc	r17, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <dir_next+0x2a>
     e1c:	55 c0       	rjmp	.+170    	; 0xec8 <dir_next+0xd4>
     e1e:	4c 85       	ldd	r20, Y+12	; 0x0c
     e20:	5d 85       	ldd	r21, Y+13	; 0x0d
     e22:	6e 85       	ldd	r22, Y+14	; 0x0e
     e24:	7f 85       	ldd	r23, Y+15	; 0x0f
     e26:	41 15       	cp	r20, r1
     e28:	51 05       	cpc	r21, r1
     e2a:	61 05       	cpc	r22, r1
     e2c:	71 05       	cpc	r23, r1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <dir_next+0x3e>
     e30:	4d c0       	rjmp	.+154    	; 0xecc <dir_next+0xd8>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     e32:	c8 01       	movw	r24, r16
     e34:	8f 70       	andi	r24, 0x0F	; 15
     e36:	99 27       	eor	r25, r25
     e38:	89 2b       	or	r24, r25
     e3a:	09 f0       	breq	.+2      	; 0xe3e <dir_next+0x4a>
     e3c:	41 c0       	rjmp	.+130    	; 0xec0 <dir_next+0xcc>
		dj->sect++;			/* Next sector */
     e3e:	4f 5f       	subi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	6f 4f       	sbci	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	4c 87       	std	Y+12, r20	; 0x0c
     e48:	5d 87       	std	Y+13, r21	; 0x0d
     e4a:	6e 87       	std	Y+14, r22	; 0x0e
     e4c:	7f 87       	std	Y+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     e4e:	68 85       	ldd	r22, Y+8	; 0x08
     e50:	79 85       	ldd	r23, Y+9	; 0x09
     e52:	8a 85       	ldd	r24, Y+10	; 0x0a
     e54:	9b 85       	ldd	r25, Y+11	; 0x0b
     e56:	61 15       	cp	r22, r1
     e58:	71 05       	cpc	r23, r1
     e5a:	81 05       	cpc	r24, r1
     e5c:	91 05       	cpc	r25, r1
     e5e:	39 f4       	brne	.+14     	; 0xe6e <dir_next+0x7a>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     e60:	f7 01       	movw	r30, r14
     e62:	84 81       	ldd	r24, Z+4	; 0x04
     e64:	95 81       	ldd	r25, Z+5	; 0x05
     e66:	08 17       	cp	r16, r24
     e68:	19 07       	cpc	r17, r25
     e6a:	90 f5       	brcc	.+100    	; 0xed0 <dir_next+0xdc>
     e6c:	29 c0       	rjmp	.+82     	; 0xec0 <dir_next+0xcc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     e6e:	f7 01       	movw	r30, r14
     e70:	22 81       	ldd	r18, Z+2	; 0x02
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	21 50       	subi	r18, 0x01	; 1
     e76:	31 09       	sbc	r19, r1
     e78:	a8 01       	movw	r20, r16
     e7a:	52 95       	swap	r21
     e7c:	42 95       	swap	r20
     e7e:	4f 70       	andi	r20, 0x0F	; 15
     e80:	45 27       	eor	r20, r21
     e82:	5f 70       	andi	r21, 0x0F	; 15
     e84:	45 27       	eor	r20, r21
     e86:	24 23       	and	r18, r20
     e88:	35 23       	and	r19, r21
     e8a:	23 2b       	or	r18, r19
     e8c:	c9 f4       	brne	.+50     	; 0xec0 <dir_next+0xcc>
				clst = get_fat(dj->clust);		/* Get next cluster */
     e8e:	a6 de       	rcall	.-692    	; 0xbdc <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     e90:	62 30       	cpi	r22, 0x02	; 2
     e92:	71 05       	cpc	r23, r1
     e94:	81 05       	cpc	r24, r1
     e96:	91 05       	cpc	r25, r1
     e98:	e8 f0       	brcs	.+58     	; 0xed4 <dir_next+0xe0>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     e9a:	f7 01       	movw	r30, r14
     e9c:	c6 80       	ldd	r12, Z+6	; 0x06
     e9e:	d7 80       	ldd	r13, Z+7	; 0x07
     ea0:	e0 84       	ldd	r14, Z+8	; 0x08
     ea2:	f1 84       	ldd	r15, Z+9	; 0x09
     ea4:	6c 15       	cp	r22, r12
     ea6:	7d 05       	cpc	r23, r13
     ea8:	8e 05       	cpc	r24, r14
     eaa:	9f 05       	cpc	r25, r15
     eac:	a8 f4       	brcc	.+42     	; 0xed8 <dir_next+0xe4>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     eae:	68 87       	std	Y+8, r22	; 0x08
     eb0:	79 87       	std	Y+9, r23	; 0x09
     eb2:	8a 87       	std	Y+10, r24	; 0x0a
     eb4:	9b 87       	std	Y+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     eb6:	b9 dd       	rcall	.-1166   	; 0xa2a <clust2sect>
     eb8:	6c 87       	std	Y+12, r22	; 0x0c
     eba:	7d 87       	std	Y+13, r23	; 0x0d
     ebc:	8e 87       	std	Y+14, r24	; 0x0e
     ebe:	9f 87       	std	Y+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     ec0:	19 83       	std	Y+1, r17	; 0x01
     ec2:	08 83       	st	Y, r16

	return FR_OK;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	09 c0       	rjmp	.+18     	; 0xeda <dir_next+0xe6>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	07 c0       	rjmp	.+14     	; 0xeda <dir_next+0xe6>
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	05 c0       	rjmp	.+10     	; 0xeda <dir_next+0xe6>
	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <dir_next+0xe6>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	01 c0       	rjmp	.+2      	; 0xeda <dir_next+0xe6>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     ed8:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	08 95       	ret

00000eec <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     eec:	2f 92       	push	r2
     eee:	3f 92       	push	r3
     ef0:	4f 92       	push	r4
     ef2:	5f 92       	push	r5
     ef4:	6f 92       	push	r6
     ef6:	7f 92       	push	r7
     ef8:	8f 92       	push	r8
     efa:	9f 92       	push	r9
     efc:	af 92       	push	r10
     efe:	bf 92       	push	r11
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	7c 01       	movw	r14, r24
     f12:	6b 01       	movw	r12, r22
     f14:	5a 01       	movw	r10, r20
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     f16:	da 01       	movw	r26, r20
     f18:	8c 91       	ld	r24, X
     f1a:	80 32       	cpi	r24, 0x20	; 32
     f1c:	41 f4       	brne	.+16     	; 0xf2e <follow_path+0x42>
     f1e:	fa 01       	movw	r30, r20
     f20:	31 96       	adiw	r30, 0x01	; 1
     f22:	bf ef       	ldi	r27, 0xFF	; 255
     f24:	ab 1a       	sub	r10, r27
     f26:	bb 0a       	sbc	r11, r27
     f28:	81 91       	ld	r24, Z+
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	d1 f3       	breq	.-12     	; 0xf22 <follow_path+0x36>
	if (*path == '/') path++;			/* Strip heading separator */
     f2e:	8f 32       	cpi	r24, 0x2F	; 47
     f30:	19 f4       	brne	.+6      	; 0xf38 <follow_path+0x4c>
     f32:	ef ef       	ldi	r30, 0xFF	; 255
     f34:	ae 1a       	sub	r10, r30
     f36:	be 0a       	sbc	r11, r30
	dj->sclust = 0;						/* Set start directory (always root dir) */
     f38:	d7 01       	movw	r26, r14
     f3a:	14 96       	adiw	r26, 0x04	; 4
     f3c:	1d 92       	st	X+, r1
     f3e:	1d 92       	st	X+, r1
     f40:	1d 92       	st	X+, r1
     f42:	1c 92       	st	X, r1
     f44:	17 97       	sbiw	r26, 0x07	; 7

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     f46:	f5 01       	movw	r30, r10
     f48:	80 81       	ld	r24, Z
     f4a:	81 32       	cpi	r24, 0x21	; 33
     f4c:	30 f4       	brcc	.+12     	; 0xf5a <follow_path+0x6e>
		res = dir_rewind(dj);
     f4e:	c7 01       	movw	r24, r14
     f50:	ae dd       	rcall	.-1188   	; 0xaae <dir_rewind>
     f52:	58 2f       	mov	r21, r24
		dir[0] = 0;
     f54:	d6 01       	movw	r26, r12
     f56:	1c 92       	st	X, r1
     f58:	d7 c0       	rjmp	.+430    	; 0x1108 <follow_path+0x21c>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     f5a:	68 94       	set
     f5c:	99 24       	eor	r9, r9
     f5e:	95 f8       	bld	r9, 5
     f60:	61 2c       	mov	r6, r1
     f62:	68 94       	set
     f64:	44 24       	eor	r4, r4
     f66:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     f68:	34 2c       	mov	r3, r4
     f6a:	0f 2e       	mov	r0, r31
     f6c:	fb e0       	ldi	r31, 0x0B	; 11
     f6e:	2f 2e       	mov	r2, r31
     f70:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     f72:	55 24       	eor	r5, r5
     f74:	53 94       	inc	r5
     f76:	e6 01       	movw	r28, r12
     f78:	2b 96       	adiw	r28, 0x0b	; 11
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     f7a:	85 2c       	mov	r8, r5
     f7c:	76 2c       	mov	r7, r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     f7e:	d7 01       	movw	r26, r14
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	13 97       	sbiw	r26, 0x03	; 3
     f88:	df 01       	movw	r26, r30
     f8a:	cf 01       	movw	r24, r30
     f8c:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     f8e:	9d 92       	st	X+, r9
     f90:	a8 17       	cp	r26, r24
     f92:	b9 07       	cpc	r27, r25
     f94:	e1 f7       	brne	.-8      	; 0xf8e <follow_path+0xa2>
     f96:	36 2d       	mov	r19, r6
     f98:	26 2d       	mov	r18, r6
     f9a:	44 2d       	mov	r20, r4
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     f9c:	11 e0       	ldi	r17, 0x01	; 1
     f9e:	12 0f       	add	r17, r18
     fa0:	d5 01       	movw	r26, r10
     fa2:	a2 0f       	add	r26, r18
     fa4:	b1 1d       	adc	r27, r1
     fa6:	5c 91       	ld	r21, X
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     fa8:	51 32       	cpi	r21, 0x21	; 33
     faa:	b0 f1       	brcs	.+108    	; 0x1018 <follow_path+0x12c>
     fac:	5f 32       	cpi	r21, 0x2F	; 47
     fae:	a1 f1       	breq	.+104    	; 0x1018 <follow_path+0x12c>
		if (c == '.' || i >= ni) {
     fb0:	5e 32       	cpi	r21, 0x2E	; 46
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <follow_path+0xca>
     fb4:	9a c0       	rjmp	.+308    	; 0x10ea <follow_path+0x1fe>
     fb6:	34 17       	cp	r19, r20
     fb8:	78 f5       	brcc	.+94     	; 0x1018 <follow_path+0x12c>
		}
#ifdef _EXCVT
		if (c >= 0x80)					/* To upper extended char (SBCS) */
			c = cvt[c - 0x80];
#endif
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
     fba:	8f e7       	ldi	r24, 0x7F	; 127
     fbc:	85 0f       	add	r24, r21
     fbe:	8f 31       	cpi	r24, 0x1F	; 31
     fc0:	20 f0       	brcs	.+8      	; 0xfca <follow_path+0xde>
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	85 0f       	add	r24, r21
     fc6:	8d 31       	cpi	r24, 0x1D	; 29
     fc8:	d8 f4       	brcc	.+54     	; 0x1000 <follow_path+0x114>
     fca:	63 2f       	mov	r22, r19
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	84 2f       	mov	r24, r20
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	dc 01       	movw	r26, r24
     fd4:	11 97       	sbiw	r26, 0x01	; 1
     fd6:	cb 01       	movw	r24, r22
     fd8:	8a 17       	cp	r24, r26
     fda:	9b 07       	cpc	r25, r27
     fdc:	8c f4       	brge	.+34     	; 0x1000 <follow_path+0x114>
			d = p[si++];				/* Get 2nd byte */
     fde:	2e 5f       	subi	r18, 0xFE	; 254
     fe0:	d5 01       	movw	r26, r10
     fe2:	a1 0f       	add	r26, r17
     fe4:	b1 1d       	adc	r27, r1
     fe6:	8c 91       	ld	r24, X
			sfn[i++] = c;
     fe8:	df 01       	movw	r26, r30
     fea:	a3 0f       	add	r26, r19
     fec:	b1 1d       	adc	r27, r1
     fee:	5c 93       	st	X, r21
			sfn[i++] = d;
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	93 0f       	add	r25, r19
     ff4:	df 01       	movw	r26, r30
     ff6:	a9 0f       	add	r26, r25
     ff8:	b1 1d       	adc	r27, r1
     ffa:	3e 5f       	subi	r19, 0xFE	; 254
     ffc:	8c 93       	st	X, r24
     ffe:	ce cf       	rjmp	.-100    	; 0xf9c <follow_path+0xb0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1000:	8f e9       	ldi	r24, 0x9F	; 159
    1002:	85 0f       	add	r24, r21
    1004:	8a 31       	cpi	r24, 0x1A	; 26
    1006:	08 f4       	brcc	.+2      	; 0x100a <follow_path+0x11e>
    1008:	50 52       	subi	r21, 0x20	; 32
			sfn[i++] = c;
    100a:	df 01       	movw	r26, r30
    100c:	a3 0f       	add	r26, r19
    100e:	b1 1d       	adc	r27, r1
    1010:	5c 93       	st	X, r21
    1012:	3f 5f       	subi	r19, 0xFF	; 255
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    1014:	21 2f       	mov	r18, r17
    1016:	c2 cf       	rjmp	.-124    	; 0xf9c <follow_path+0xb0>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1018:	a1 0e       	add	r10, r17
    101a:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    101c:	85 2d       	mov	r24, r5
    101e:	51 32       	cpi	r21, 0x21	; 33
    1020:	08 f0       	brcs	.+2      	; 0x1024 <follow_path+0x138>
    1022:	86 2d       	mov	r24, r6
    1024:	83 87       	std	Z+11, r24	; 0x0b
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    1026:	c7 01       	movw	r24, r14
    1028:	42 dd       	rcall	.-1404   	; 0xaae <dir_rewind>
    102a:	58 2f       	mov	r21, r24
	if (res != FR_OK) return res;
    102c:	81 11       	cpse	r24, r1
    102e:	64 c0       	rjmp	.+200    	; 0x10f8 <follow_path+0x20c>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1030:	f7 01       	movw	r30, r14
    1032:	20 81       	ld	r18, Z
    1034:	31 81       	ldd	r19, Z+1	; 0x01
    1036:	2f 70       	andi	r18, 0x0F	; 15
    1038:	33 27       	eor	r19, r19
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	22 95       	swap	r18
    1040:	32 95       	swap	r19
    1042:	30 7f       	andi	r19, 0xF0	; 240
    1044:	32 27       	eor	r19, r18
    1046:	20 7f       	andi	r18, 0xF0	; 240
    1048:	32 27       	eor	r19, r18
    104a:	44 85       	ldd	r20, Z+12	; 0x0c
    104c:	55 85       	ldd	r21, Z+13	; 0x0d
    104e:	66 85       	ldd	r22, Z+14	; 0x0e
    1050:	77 85       	ldd	r23, Z+15	; 0x0f
    1052:	00 e2       	ldi	r16, 0x20	; 32
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	c6 01       	movw	r24, r12
    1058:	a4 dc       	rcall	.-1720   	; 0x9a2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
    105a:	58 2d       	mov	r21, r8
    105c:	81 11       	cpse	r24, r1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <follow_path+0x176>
    1060:	57 2d       	mov	r21, r7
		if (res != FR_OK) break;
    1062:	51 11       	cpse	r21, r1
    1064:	49 c0       	rjmp	.+146    	; 0x10f8 <follow_path+0x20c>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1066:	d6 01       	movw	r26, r12
    1068:	8c 91       	ld	r24, X
    106a:	88 23       	and	r24, r24
    106c:	b9 f0       	breq	.+46     	; 0x109c <follow_path+0x1b0>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    106e:	1b 96       	adiw	r26, 0x0b	; 11
    1070:	8c 91       	ld	r24, X
    1072:	83 fd       	sbrc	r24, 3
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <follow_path+0x1a4>
    1076:	f7 01       	movw	r30, r14
    1078:	22 81       	ldd	r18, Z+2	; 0x02
    107a:	33 81       	ldd	r19, Z+3	; 0x03
    107c:	f6 01       	movw	r30, r12
    107e:	d9 01       	movw	r26, r18
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <follow_path+0x19c>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1082:	ec 17       	cp	r30, r28
    1084:	fd 07       	cpc	r31, r29
    1086:	d9 f1       	breq	.+118    	; 0x10fe <follow_path+0x212>
    1088:	41 91       	ld	r20, Z+
    108a:	9d 91       	ld	r25, X+
    108c:	49 17       	cp	r20, r25
    108e:	c9 f3       	breq	.-14     	; 0x1082 <follow_path+0x196>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    1090:	c7 01       	movw	r24, r14
    1092:	b0 de       	rcall	.-672    	; 0xdf4 <dir_next>
    1094:	58 2f       	mov	r21, r24
	} while (res == FR_OK);
    1096:	88 23       	and	r24, r24
    1098:	59 f2       	breq	.-106    	; 0x1030 <follow_path+0x144>
    109a:	2e c0       	rjmp	.+92     	; 0x10f8 <follow_path+0x20c>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    109c:	d7 01       	movw	r26, r14
    109e:	12 96       	adiw	r26, 0x02	; 2
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	13 97       	sbiw	r26, 0x03	; 3
    10a6:	83 85       	ldd	r24, Z+11	; 0x0b
    10a8:	88 23       	and	r24, r24
    10aa:	d9 f0       	breq	.+54     	; 0x10e2 <follow_path+0x1f6>
    10ac:	18 c0       	rjmp	.+48     	; 0x10de <follow_path+0x1f2>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    10ae:	84 ff       	sbrs	r24, 4
    10b0:	1a c0       	rjmp	.+52     	; 0x10e6 <follow_path+0x1fa>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    10b2:	f6 01       	movw	r30, r12
    10b4:	84 89       	ldd	r24, Z+20	; 0x14
    10b6:	95 89       	ldd	r25, Z+21	; 0x15
    10b8:	a0 e0       	ldi	r26, 0x00	; 0
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	dc 01       	movw	r26, r24
    10be:	99 27       	eor	r25, r25
    10c0:	88 27       	eor	r24, r24
    10c2:	42 8d       	ldd	r20, Z+26	; 0x1a
    10c4:	53 8d       	ldd	r21, Z+27	; 0x1b
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	84 2b       	or	r24, r20
    10cc:	95 2b       	or	r25, r21
    10ce:	a6 2b       	or	r26, r22
    10d0:	b7 2b       	or	r27, r23
    10d2:	f7 01       	movw	r30, r14
    10d4:	84 83       	std	Z+4, r24	; 0x04
    10d6:	95 83       	std	Z+5, r25	; 0x05
    10d8:	a6 83       	std	Z+6, r26	; 0x06
    10da:	b7 83       	std	Z+7, r27	; 0x07
		}
    10dc:	50 cf       	rjmp	.-352    	; 0xf7e <follow_path+0x92>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
    10de:	53 e0       	ldi	r21, 0x03	; 3
    10e0:	13 c0       	rjmp	.+38     	; 0x1108 <follow_path+0x21c>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
    10e2:	54 e0       	ldi	r21, 0x04	; 4
    10e4:	11 c0       	rjmp	.+34     	; 0x1108 <follow_path+0x21c>
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    10e6:	54 e0       	ldi	r21, 0x04	; 4
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <follow_path+0x21c>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    10ea:	48 30       	cpi	r20, 0x08	; 8
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <follow_path+0x204>
    10ee:	94 cf       	rjmp	.-216    	; 0x1018 <follow_path+0x12c>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    10f0:	21 2f       	mov	r18, r17
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
    10f2:	33 2d       	mov	r19, r3
    10f4:	42 2d       	mov	r20, r2
    10f6:	52 cf       	rjmp	.-348    	; 0xf9c <follow_path+0xb0>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    10f8:	53 30       	cpi	r21, 0x03	; 3
    10fa:	31 f4       	brne	.+12     	; 0x1108 <follow_path+0x21c>
    10fc:	cf cf       	rjmp	.-98     	; 0x109c <follow_path+0x1b0>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    10fe:	d9 01       	movw	r26, r18
    1100:	1b 96       	adiw	r26, 0x0b	; 11
    1102:	9c 91       	ld	r25, X
    1104:	99 23       	and	r25, r25
    1106:	99 f2       	breq	.-90     	; 0x10ae <follow_path+0x1c2>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    1108:	85 2f       	mov	r24, r21
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	7f 90       	pop	r7
    1124:	6f 90       	pop	r6
    1126:	5f 90       	pop	r5
    1128:	4f 90       	pop	r4
    112a:	3f 90       	pop	r3
    112c:	2f 90       	pop	r2
    112e:	08 95       	ret

00001130 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	9f 92       	push	r9
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	a8 97       	sbiw	r28, 0x28	; 40
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1160:	10 92 73 00 	sts	0x0073, r1
    1164:	10 92 72 00 	sts	0x0072, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	09 f4       	brne	.+2      	; 0x116e <pf_mount+0x3e>
    116c:	e9 c0       	rjmp	.+466    	; 0x1340 <pf_mount+0x210>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    116e:	53 db       	rcall	.-2394   	; 0x816 <disk_initialize>
    1170:	80 fd       	sbrc	r24, 0
    1172:	e8 c0       	rjmp	.+464    	; 0x1344 <pf_mount+0x214>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	ba 01       	movw	r22, r20
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	e8 dc       	rcall	.-1584   	; 0xb50 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	d1 f4       	brne	.+52     	; 0x11b8 <pf_mount+0x88>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1184:	00 e1       	ldi	r16, 0x10	; 16
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	2e eb       	ldi	r18, 0xBE	; 190
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	ba 01       	movw	r22, r20
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	05 dc       	rcall	.-2038   	; 0x9a2 <disk_readp>
    1198:	81 11       	cpse	r24, r1
    119a:	d6 c0       	rjmp	.+428    	; 0x1348 <pf_mount+0x218>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	88 23       	and	r24, r24
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <pf_mount+0x74>
    11a2:	d4 c0       	rjmp	.+424    	; 0x134c <pf_mount+0x21c>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    11a4:	49 84       	ldd	r4, Y+9	; 0x09
    11a6:	5a 84       	ldd	r5, Y+10	; 0x0a
    11a8:	6b 84       	ldd	r6, Y+11	; 0x0b
    11aa:	7c 84       	ldd	r7, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    11ac:	b3 01       	movw	r22, r6
    11ae:	a2 01       	movw	r20, r4
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	cd dc       	rcall	.-1638   	; 0xb50 <check_fs>
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <pf_mount+0x8e>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
    11b8:	41 2c       	mov	r4, r1
    11ba:	51 2c       	mov	r5, r1
    11bc:	32 01       	movw	r6, r4
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <pf_mount+0x94>
    11c2:	c6 c0       	rjmp	.+396    	; 0x1350 <pf_mount+0x220>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    11c4:	81 11       	cpse	r24, r1
    11c6:	c6 c0       	rjmp	.+396    	; 0x1354 <pf_mount+0x224>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    11c8:	04 e2       	ldi	r16, 0x24	; 36
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	2d e0       	ldi	r18, 0x0D	; 13
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	b3 01       	movw	r22, r6
    11d2:	a2 01       	movw	r20, r4
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	e4 db       	rcall	.-2104   	; 0x9a2 <disk_readp>
    11da:	81 11       	cpse	r24, r1
    11dc:	bd c0       	rjmp	.+378    	; 0x1358 <pf_mount+0x228>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    11de:	6a 85       	ldd	r22, Y+10	; 0x0a
    11e0:	7b 85       	ldd	r23, Y+11	; 0x0b
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    11e6:	61 15       	cp	r22, r1
    11e8:	71 05       	cpc	r23, r1
    11ea:	81 05       	cpc	r24, r1
    11ec:	91 05       	cpc	r25, r1
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <pf_mount+0xc8>
    11f0:	68 8d       	ldd	r22, Y+24	; 0x18
    11f2:	79 8d       	ldd	r23, Y+25	; 0x19
    11f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11f6:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    11f8:	2c 81       	ldd	r18, Y+4	; 0x04
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	91 d4       	rcall	.+2338   	; 0x1b24 <__umulsidi3>
    1202:	c2 2e       	mov	r12, r18
    1204:	d3 2e       	mov	r13, r19
    1206:	e4 2e       	mov	r14, r20
    1208:	f5 2e       	mov	r15, r21
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	8c 01       	movw	r16, r24
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 0e       	add	r4, r16
    1216:	51 1e       	adc	r5, r17
    1218:	62 1e       	adc	r6, r18
    121a:	73 1e       	adc	r7, r19
    121c:	d5 01       	movw	r26, r10
    121e:	1a 96       	adiw	r26, 0x0a	; 10
    1220:	4d 92       	st	X+, r4
    1222:	5d 92       	st	X+, r5
    1224:	6d 92       	st	X+, r6
    1226:	7c 92       	st	X, r7
    1228:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    122a:	99 80       	ldd	r9, Y+1	; 0x01
    122c:	12 96       	adiw	r26, 0x02	; 2
    122e:	9c 92       	st	X, r9
    1230:	12 97       	sbiw	r26, 0x02	; 2
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1232:	ed 81       	ldd	r30, Y+5	; 0x05
    1234:	fe 81       	ldd	r31, Y+6	; 0x06
    1236:	15 96       	adiw	r26, 0x05	; 5
    1238:	fc 93       	st	X, r31
    123a:	ee 93       	st	-X, r30
    123c:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	cb 01       	movw	r24, r22
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	a1 05       	cpc	r26, r1
    124c:	b1 05       	cpc	r27, r1
    124e:	21 f4       	brne	.+8      	; 0x1258 <pf_mount+0x128>
    1250:	8c 89       	ldd	r24, Y+20	; 0x14
    1252:	9d 89       	ldd	r25, Y+21	; 0x15
    1254:	ae 89       	ldd	r26, Y+22	; 0x16
    1256:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    1258:	f2 95       	swap	r31
    125a:	e2 95       	swap	r30
    125c:	ef 70       	andi	r30, 0x0F	; 15
    125e:	ef 27       	eor	r30, r31
    1260:	ff 70       	andi	r31, 0x0F	; 15
    1262:	ef 27       	eor	r30, r31
    1264:	af 01       	movw	r20, r30
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	4d a3       	std	Y+37, r20	; 0x25
    126c:	5e a3       	std	Y+38, r21	; 0x26
    126e:	6f a3       	std	Y+39, r22	; 0x27
    1270:	78 a7       	std	Y+40, r23	; 0x28
    1272:	80 1b       	sub	r24, r16
    1274:	91 0b       	sbc	r25, r17
    1276:	a2 0b       	sbc	r26, r18
    1278:	b3 0b       	sbc	r27, r19
    127a:	8c 19       	sub	r24, r12
    127c:	9d 09       	sbc	r25, r13
    127e:	ae 09       	sbc	r26, r14
    1280:	bf 09       	sbc	r27, r15
    1282:	bc 01       	movw	r22, r24
    1284:	cd 01       	movw	r24, r26
    1286:	2d a1       	ldd	r18, Y+37	; 0x25
    1288:	3e a1       	ldd	r19, Y+38	; 0x26
    128a:	4f a1       	ldd	r20, Y+39	; 0x27
    128c:	58 a5       	ldd	r21, Y+40	; 0x28
    128e:	62 1b       	sub	r22, r18
    1290:	73 0b       	sbc	r23, r19
    1292:	84 0b       	sbc	r24, r20
    1294:	95 0b       	sbc	r25, r21
		) / fs->csize + 2;
    1296:	29 2d       	mov	r18, r9
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	1e d4       	rcall	.+2108   	; 0x1adc <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    12a0:	ba 01       	movw	r22, r20
    12a2:	a9 01       	movw	r20, r18
    12a4:	4e 5f       	subi	r20, 0xFE	; 254
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	6f 4f       	sbci	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    12ac:	d5 01       	movw	r26, r10
    12ae:	16 96       	adiw	r26, 0x06	; 6
    12b0:	4d 93       	st	X+, r20
    12b2:	5d 93       	st	X+, r21
    12b4:	6d 93       	st	X+, r22
    12b6:	7c 93       	st	X, r23
    12b8:	19 97       	sbiw	r26, 0x09	; 9

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    12ba:	47 3f       	cpi	r20, 0xF7	; 247
    12bc:	bf e0       	ldi	r27, 0x0F	; 15
    12be:	5b 07       	cpc	r21, r27
    12c0:	61 05       	cpc	r22, r1
    12c2:	71 05       	cpc	r23, r1
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <pf_mount+0x19a>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <pf_mount+0x19c>
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
#if _FS_FAT12
		fmt = FS_FAT12;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    12cc:	47 3f       	cpi	r20, 0xF7	; 247
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
    12d0:	61 05       	cpc	r22, r1
    12d2:	71 05       	cpc	r23, r1
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <pf_mount+0x1a8>
    12d6:	42 c0       	rjmp	.+132    	; 0x135c <pf_mount+0x22c>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    12d8:	d5 01       	movw	r26, r10
    12da:	8c 93       	st	X, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	51 f4       	brne	.+20     	; 0x12f4 <pf_mount+0x1c4>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    12e0:	88 a1       	ldd	r24, Y+32	; 0x20
    12e2:	99 a1       	ldd	r25, Y+33	; 0x21
    12e4:	aa a1       	ldd	r26, Y+34	; 0x22
    12e6:	bb a1       	ldd	r27, Y+35	; 0x23
    12e8:	f5 01       	movw	r30, r10
    12ea:	86 87       	std	Z+14, r24	; 0x0e
    12ec:	97 87       	std	Z+15, r25	; 0x0f
    12ee:	a0 8b       	std	Z+16, r26	; 0x10
    12f0:	b1 8b       	std	Z+17, r27	; 0x11
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <pf_mount+0x1da>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    12f4:	d7 01       	movw	r26, r14
    12f6:	c6 01       	movw	r24, r12
    12f8:	84 0d       	add	r24, r4
    12fa:	95 1d       	adc	r25, r5
    12fc:	a6 1d       	adc	r26, r6
    12fe:	b7 1d       	adc	r27, r7
    1300:	f5 01       	movw	r30, r10
    1302:	86 87       	std	Z+14, r24	; 0x0e
    1304:	97 87       	std	Z+15, r25	; 0x0f
    1306:	a0 8b       	std	Z+16, r26	; 0x10
    1308:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    130a:	2d a1       	ldd	r18, Y+37	; 0x25
    130c:	3e a1       	ldd	r19, Y+38	; 0x26
    130e:	4f a1       	ldd	r20, Y+39	; 0x27
    1310:	58 a5       	ldd	r21, Y+40	; 0x28
    1312:	42 0e       	add	r4, r18
    1314:	53 1e       	adc	r5, r19
    1316:	64 1e       	adc	r6, r20
    1318:	75 1e       	adc	r7, r21
    131a:	c4 0c       	add	r12, r4
    131c:	d5 1c       	adc	r13, r5
    131e:	e6 1c       	adc	r14, r6
    1320:	f7 1c       	adc	r15, r7
    1322:	d5 01       	movw	r26, r10
    1324:	52 96       	adiw	r26, 0x12	; 18
    1326:	cd 92       	st	X+, r12
    1328:	dd 92       	st	X+, r13
    132a:	ed 92       	st	X+, r14
    132c:	fc 92       	st	X, r15
    132e:	55 97       	sbiw	r26, 0x15	; 21

	fs->flag = 0;
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	1c 92       	st	X, r1
	FatFs = fs;
    1334:	b0 92 73 00 	sts	0x0073, r11
    1338:	a0 92 72 00 	sts	0x0072, r10

	return FR_OK;
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	12 c0       	rjmp	.+36     	; 0x1364 <pf_mount+0x234>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <pf_mount+0x234>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <pf_mount+0x234>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	0c c0       	rjmp	.+24     	; 0x1364 <pf_mount+0x234>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <pf_mount+0x234>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <pf_mount+0x234>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1354:	87 e0       	ldi	r24, 0x07	; 7
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <pf_mount+0x234>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <pf_mount+0x234>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	f5 01       	movw	r30, r10
    1360:	80 83       	st	Z, r24
    1362:	be cf       	rjmp	.-132    	; 0x12e0 <pf_mount+0x1b0>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    1364:	a8 96       	adiw	r28, 0x28	; 40
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	5f 90       	pop	r5
    138c:	4f 90       	pop	r4
    138e:	08 95       	ret

00001390 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	ec 97       	sbiw	r28, 0x3c	; 60
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    13a8:	00 91 72 00 	lds	r16, 0x0072
    13ac:	10 91 73 00 	lds	r17, 0x0073


	if (!fs)						/* Check file system */
    13b0:	01 15       	cp	r16, r1
    13b2:	11 05       	cpc	r17, r1
    13b4:	d1 f1       	breq	.+116    	; 0x142a <pf_open+0x9a>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    13b6:	f8 01       	movw	r30, r16
    13b8:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    13ba:	9e 01       	movw	r18, r28
    13bc:	2f 5e       	subi	r18, 0xEF	; 239
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    13c4:	ac 01       	movw	r20, r24
    13c6:	be 01       	movw	r22, r28
    13c8:	63 5e       	subi	r22, 0xE3	; 227
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	8d dd       	rcall	.-1254   	; 0xeec <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
    13d2:	81 11       	cpse	r24, r1
    13d4:	2f c0       	rjmp	.+94     	; 0x1434 <pf_open+0xa4>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	88 23       	and	r24, r24
    13da:	49 f1       	breq	.+82     	; 0x142e <pf_open+0x9e>
    13dc:	88 a5       	ldd	r24, Y+40	; 0x28
    13de:	84 fd       	sbrc	r24, 4
    13e0:	28 c0       	rjmp	.+80     	; 0x1432 <pf_open+0xa2>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    13e2:	89 a9       	ldd	r24, Y+49	; 0x31
    13e4:	9a a9       	ldd	r25, Y+50	; 0x32
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	dc 01       	movw	r26, r24
    13ec:	99 27       	eor	r25, r25
    13ee:	88 27       	eor	r24, r24
    13f0:	4f a9       	ldd	r20, Y+55	; 0x37
    13f2:	58 ad       	ldd	r21, Y+56	; 0x38
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	84 2b       	or	r24, r20
    13fa:	95 2b       	or	r25, r21
    13fc:	a6 2b       	or	r26, r22
    13fe:	b7 2b       	or	r27, r23
    1400:	f8 01       	movw	r30, r16
    1402:	86 8f       	std	Z+30, r24	; 0x1e
    1404:	97 8f       	std	Z+31, r25	; 0x1f
    1406:	a0 a3       	std	Z+32, r26	; 0x20
    1408:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    140a:	89 ad       	ldd	r24, Y+57	; 0x39
    140c:	9a ad       	ldd	r25, Y+58	; 0x3a
    140e:	ab ad       	ldd	r26, Y+59	; 0x3b
    1410:	bc ad       	ldd	r27, Y+60	; 0x3c
    1412:	82 8f       	std	Z+26, r24	; 0x1a
    1414:	93 8f       	std	Z+27, r25	; 0x1b
    1416:	a4 8f       	std	Z+28, r26	; 0x1c
    1418:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    141a:	16 8a       	std	Z+22, r1	; 0x16
    141c:	17 8a       	std	Z+23, r1	; 0x17
    141e:	10 8e       	std	Z+24, r1	; 0x18
    1420:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <pf_open+0xa4>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <pf_open+0xa4>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <pf_open+0xa4>
    1432:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    1434:	ec 96       	adiw	r28, 0x3c	; 60
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    144a:	2f 92       	push	r2
    144c:	3f 92       	push	r3
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	6f 92       	push	r6
    1454:	7f 92       	push	r7
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	2c 01       	movw	r4, r24
    1470:	6b 01       	movw	r12, r22
    1472:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    1474:	c0 91 72 00 	lds	r28, 0x0072
    1478:	d0 91 73 00 	lds	r29, 0x0073


	*br = 0;
    147c:	fa 01       	movw	r30, r20
    147e:	11 82       	std	Z+1, r1	; 0x01
    1480:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1482:	20 97       	sbiw	r28, 0x00	; 0
    1484:	09 f4       	brne	.+2      	; 0x1488 <pf_read+0x3e>
    1486:	a6 c0       	rjmp	.+332    	; 0x15d4 <pf_read+0x18a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	80 ff       	sbrs	r24, 0
    148c:	a5 c0       	rjmp	.+330    	; 0x15d8 <pf_read+0x18e>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    148e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1490:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1492:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1494:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1496:	4e 89       	ldd	r20, Y+22	; 0x16
    1498:	5f 89       	ldd	r21, Y+23	; 0x17
    149a:	68 8d       	ldd	r22, Y+24	; 0x18
    149c:	79 8d       	ldd	r23, Y+25	; 0x19
    149e:	84 1b       	sub	r24, r20
    14a0:	95 0b       	sbc	r25, r21
    14a2:	a6 0b       	sbc	r26, r22
    14a4:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    14a6:	a6 01       	movw	r20, r12
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	84 17       	cp	r24, r20
    14ae:	95 07       	cpc	r25, r21
    14b0:	a6 07       	cpc	r26, r22
    14b2:	b7 07       	cpc	r27, r23
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <pf_read+0x6e>
    14b6:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
    14b8:	c1 14       	cp	r12, r1
    14ba:	d1 04       	cpc	r13, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <pf_read+0x76>
    14be:	8e c0       	rjmp	.+284    	; 0x15dc <pf_read+0x192>
    14c0:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    14c2:	81 2c       	mov	r8, r1
    14c4:	68 94       	set
    14c6:	99 24       	eor	r9, r9
    14c8:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    14ca:	31 2c       	mov	r3, r1
    14cc:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    14ce:	8e 89       	ldd	r24, Y+22	; 0x16
    14d0:	9f 89       	ldd	r25, Y+23	; 0x17
    14d2:	a8 8d       	ldd	r26, Y+24	; 0x18
    14d4:	b9 8d       	ldd	r27, Y+25	; 0x19
    14d6:	ac 01       	movw	r20, r24
    14d8:	bd 01       	movw	r22, r26
    14da:	51 70       	andi	r21, 0x01	; 1
    14dc:	66 27       	eor	r22, r22
    14de:	77 27       	eor	r23, r23
    14e0:	45 2b       	or	r20, r21
    14e2:	46 2b       	or	r20, r22
    14e4:	47 2b       	or	r20, r23
    14e6:	e1 f5       	brne	.+120    	; 0x1560 <pf_read+0x116>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    14e8:	fa 80       	ldd	r15, Y+2	; 0x02
    14ea:	fa 94       	dec	r15
    14ec:	ac 01       	movw	r20, r24
    14ee:	bd 01       	movw	r22, r26
    14f0:	03 2e       	mov	r0, r19
    14f2:	39 e0       	ldi	r19, 0x09	; 9
    14f4:	76 95       	lsr	r23
    14f6:	67 95       	ror	r22
    14f8:	57 95       	ror	r21
    14fa:	47 95       	ror	r20
    14fc:	3a 95       	dec	r19
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <pf_read+0xaa>
    1500:	30 2d       	mov	r19, r0
    1502:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
    1504:	c1 f4       	brne	.+48     	; 0x1536 <pf_read+0xec>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
    1506:	89 2b       	or	r24, r25
    1508:	8a 2b       	or	r24, r26
    150a:	8b 2b       	or	r24, r27
    150c:	29 f4       	brne	.+10     	; 0x1518 <pf_read+0xce>
    150e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1510:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1512:	88 a1       	ldd	r24, Y+32	; 0x20
    1514:	99 a1       	ldd	r25, Y+33	; 0x21
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <pf_read+0xd8>
    1518:	6a a1       	ldd	r22, Y+34	; 0x22
    151a:	7b a1       	ldd	r23, Y+35	; 0x23
    151c:	8c a1       	ldd	r24, Y+36	; 0x24
    151e:	9d a1       	ldd	r25, Y+37	; 0x25
    1520:	5d db       	rcall	.-2374   	; 0xbdc <get_fat>
				if (clst <= 1) goto fr_abort;
    1522:	62 30       	cpi	r22, 0x02	; 2
    1524:	71 05       	cpc	r23, r1
    1526:	81 05       	cpc	r24, r1
    1528:	91 05       	cpc	r25, r1
    152a:	08 f4       	brcc	.+2      	; 0x152e <pf_read+0xe4>
    152c:	50 c0       	rjmp	.+160    	; 0x15ce <pf_read+0x184>
				fs->curr_clust = clst;				/* Update current cluster */
    152e:	6a a3       	std	Y+34, r22	; 0x22
    1530:	7b a3       	std	Y+35, r23	; 0x23
    1532:	8c a3       	std	Y+36, r24	; 0x24
    1534:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1536:	6a a1       	ldd	r22, Y+34	; 0x22
    1538:	7b a1       	ldd	r23, Y+35	; 0x23
    153a:	8c a1       	ldd	r24, Y+36	; 0x24
    153c:	9d a1       	ldd	r25, Y+37	; 0x25
    153e:	75 da       	rcall	.-2838   	; 0xa2a <clust2sect>
			if (!sect) goto fr_abort;
    1540:	61 15       	cp	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	81 05       	cpc	r24, r1
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <pf_read+0x102>
    154a:	41 c0       	rjmp	.+130    	; 0x15ce <pf_read+0x184>
			fs->dsect = sect + cs;
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 0d       	add	r24, r15
    1552:	91 1d       	adc	r25, r1
    1554:	a1 1d       	adc	r26, r1
    1556:	b1 1d       	adc	r27, r1
    1558:	8e a3       	std	Y+38, r24	; 0x26
    155a:	9f a3       	std	Y+39, r25	; 0x27
    155c:	a8 a7       	std	Y+40, r26	; 0x28
    155e:	b9 a7       	std	Y+41, r27	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1560:	2e 89       	ldd	r18, Y+22	; 0x16
    1562:	3f 89       	ldd	r19, Y+23	; 0x17
    1564:	31 70       	andi	r19, 0x01	; 1
    1566:	c4 01       	movw	r24, r8
    1568:	82 1b       	sub	r24, r18
    156a:	93 0b       	sbc	r25, r19
    156c:	76 01       	movw	r14, r12
    156e:	8c 15       	cp	r24, r12
    1570:	9d 05       	cpc	r25, r13
    1572:	08 f4       	brcc	.+2      	; 0x1576 <pf_read+0x12c>
    1574:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    1576:	4e a1       	ldd	r20, Y+38	; 0x26
    1578:	5f a1       	ldd	r21, Y+39	; 0x27
    157a:	68 a5       	ldd	r22, Y+40	; 0x28
    157c:	79 a5       	ldd	r23, Y+41	; 0x29
    157e:	41 14       	cp	r4, r1
    1580:	51 04       	cpc	r5, r1
    1582:	19 f4       	brne	.+6      	; 0x158a <pf_read+0x140>
    1584:	83 2d       	mov	r24, r3
    1586:	92 2d       	mov	r25, r2
    1588:	02 c0       	rjmp	.+4      	; 0x158e <pf_read+0x144>
    158a:	8a 2d       	mov	r24, r10
    158c:	9b 2d       	mov	r25, r11
    158e:	87 01       	movw	r16, r14
    1590:	08 da       	rcall	.-3056   	; 0x9a2 <disk_readp>
		if (dr) goto fr_abort;
    1592:	81 11       	cpse	r24, r1
    1594:	1c c0       	rjmp	.+56     	; 0x15ce <pf_read+0x184>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1596:	8e 89       	ldd	r24, Y+22	; 0x16
    1598:	9f 89       	ldd	r25, Y+23	; 0x17
    159a:	a8 8d       	ldd	r26, Y+24	; 0x18
    159c:	b9 8d       	ldd	r27, Y+25	; 0x19
    159e:	8e 0d       	add	r24, r14
    15a0:	9f 1d       	adc	r25, r15
    15a2:	a1 1d       	adc	r26, r1
    15a4:	b1 1d       	adc	r27, r1
    15a6:	8e 8b       	std	Y+22, r24	; 0x16
    15a8:	9f 8b       	std	Y+23, r25	; 0x17
    15aa:	a8 8f       	std	Y+24, r26	; 0x18
    15ac:	b9 8f       	std	Y+25, r27	; 0x19
    15ae:	ae 0c       	add	r10, r14
    15b0:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    15b2:	ce 18       	sub	r12, r14
    15b4:	df 08       	sbc	r13, r15
    15b6:	f3 01       	movw	r30, r6
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	e8 0e       	add	r14, r24
    15be:	f9 1e       	adc	r15, r25
    15c0:	f1 82       	std	Z+1, r15	; 0x01
    15c2:	e0 82       	st	Z, r14
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    15c4:	c1 14       	cp	r12, r1
    15c6:	d1 04       	cpc	r13, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <pf_read+0x182>
    15ca:	81 cf       	rjmp	.-254    	; 0x14ce <pf_read+0x84>
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <pf_read+0x196>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    15ce:	19 82       	std	Y+1, r1	; 0x01
	return FR_DISK_ERR;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <pf_read+0x198>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <pf_read+0x198>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    15d8:	85 e0       	ldi	r24, 0x05	; 5
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <pf_read+0x198>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <pf_read+0x198>
    15e0:	80 e0       	ldi	r24, 0x00	; 0

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	cf 90       	pop	r12
    15f2:	bf 90       	pop	r11
    15f4:	af 90       	pop	r10
    15f6:	9f 90       	pop	r9
    15f8:	8f 90       	pop	r8
    15fa:	7f 90       	pop	r7
    15fc:	6f 90       	pop	r6
    15fe:	5f 90       	pop	r5
    1600:	4f 90       	pop	r4
    1602:	3f 90       	pop	r3
    1604:	2f 90       	pop	r2
    1606:	08 95       	ret

00001608 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    1608:	2f 92       	push	r2
    160a:	3f 92       	push	r3
    160c:	4f 92       	push	r4
    160e:	5f 92       	push	r5
    1610:	6f 92       	push	r6
    1612:	7f 92       	push	r7
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	00 d0       	rcall	.+0      	; 0x162e <pf_lseek+0x26>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <pf_lseek+0x28>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	36 2f       	mov	r19, r22
    1636:	e7 2f       	mov	r30, r23
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    1638:	20 90 72 00 	lds	r2, 0x0072
    163c:	30 90 73 00 	lds	r3, 0x0073


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1640:	21 14       	cp	r2, r1
    1642:	31 04       	cpc	r3, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <pf_lseek+0x40>
    1646:	ef c0       	rjmp	.+478    	; 0x1826 <pf_lseek+0x21e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1648:	d1 01       	movw	r26, r2
    164a:	11 96       	adiw	r26, 0x01	; 1
    164c:	2c 91       	ld	r18, X
    164e:	11 97       	sbiw	r26, 0x01	; 1
    1650:	20 ff       	sbrs	r18, 0
    1652:	eb c0       	rjmp	.+470    	; 0x182a <pf_lseek+0x222>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    1654:	5a 96       	adiw	r26, 0x1a	; 26
    1656:	4d 91       	ld	r20, X+
    1658:	5d 91       	ld	r21, X+
    165a:	6d 91       	ld	r22, X+
    165c:	7c 91       	ld	r23, X
    165e:	5d 97       	sbiw	r26, 0x1d	; 29
    1660:	c3 2e       	mov	r12, r19
    1662:	de 2e       	mov	r13, r30
    1664:	e8 2e       	mov	r14, r24
    1666:	f9 2e       	mov	r15, r25
    1668:	4c 15       	cp	r20, r12
    166a:	5d 05       	cpc	r21, r13
    166c:	6e 05       	cpc	r22, r14
    166e:	7f 05       	cpc	r23, r15
    1670:	10 f4       	brcc	.+4      	; 0x1676 <pf_lseek+0x6e>
    1672:	6a 01       	movw	r12, r20
    1674:	7b 01       	movw	r14, r22
	ifptr = fs->fptr;
    1676:	f1 01       	movw	r30, r2
    1678:	86 89       	ldd	r24, Z+22	; 0x16
    167a:	97 89       	ldd	r25, Z+23	; 0x17
    167c:	a0 8d       	ldd	r26, Z+24	; 0x18
    167e:	b1 8d       	ldd	r27, Z+25	; 0x19
	fs->fptr = 0;
    1680:	16 8a       	std	Z+22, r1	; 0x16
    1682:	17 8a       	std	Z+23, r1	; 0x17
    1684:	10 8e       	std	Z+24, r1	; 0x18
    1686:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
    1688:	c1 14       	cp	r12, r1
    168a:	d1 04       	cpc	r13, r1
    168c:	e1 04       	cpc	r14, r1
    168e:	f1 04       	cpc	r15, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <pf_lseek+0x8c>
    1692:	cd c0       	rjmp	.+410    	; 0x182e <pf_lseek+0x226>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1694:	82 80       	ldd	r8, Z+2	; 0x02
    1696:	91 2c       	mov	r9, r1
    1698:	a1 2c       	mov	r10, r1
    169a:	b1 2c       	mov	r11, r1
    169c:	07 2e       	mov	r0, r23
    169e:	79 e0       	ldi	r23, 0x09	; 9
    16a0:	88 0c       	add	r8, r8
    16a2:	99 1c       	adc	r9, r9
    16a4:	aa 1c       	adc	r10, r10
    16a6:	bb 1c       	adc	r11, r11
    16a8:	7a 95       	dec	r23
    16aa:	d1 f7       	brne	.-12     	; 0x16a0 <pf_lseek+0x98>
    16ac:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	a1 05       	cpc	r26, r1
    16b2:	b1 05       	cpc	r27, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <pf_lseek+0xb0>
    16b6:	3f c0       	rjmp	.+126    	; 0x1736 <pf_lseek+0x12e>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    16b8:	2c 01       	movw	r4, r24
    16ba:	3d 01       	movw	r6, r26
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	4f 1a       	sub	r4, r31
    16c0:	51 08       	sbc	r5, r1
    16c2:	61 08       	sbc	r6, r1
    16c4:	71 08       	sbc	r7, r1
    16c6:	c7 01       	movw	r24, r14
    16c8:	b6 01       	movw	r22, r12
    16ca:	61 50       	subi	r22, 0x01	; 1
    16cc:	71 09       	sbc	r23, r1
    16ce:	81 09       	sbc	r24, r1
    16d0:	91 09       	sbc	r25, r1
    16d2:	a5 01       	movw	r20, r10
    16d4:	94 01       	movw	r18, r8
    16d6:	02 d2       	rcall	.+1028   	; 0x1adc <__udivmodsi4>
    16d8:	29 83       	std	Y+1, r18	; 0x01
    16da:	3a 83       	std	Y+2, r19	; 0x02
    16dc:	4b 83       	std	Y+3, r20	; 0x03
    16de:	5c 83       	std	Y+4, r21	; 0x04
    16e0:	c3 01       	movw	r24, r6
    16e2:	b2 01       	movw	r22, r4
    16e4:	a5 01       	movw	r20, r10
    16e6:	94 01       	movw	r18, r8
    16e8:	f9 d1       	rcall	.+1010   	; 0x1adc <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	ab 81       	ldd	r26, Y+3	; 0x03
    16f0:	bc 81       	ldd	r27, Y+4	; 0x04
    16f2:	82 17       	cp	r24, r18
    16f4:	93 07       	cpc	r25, r19
    16f6:	a4 07       	cpc	r26, r20
    16f8:	b5 07       	cpc	r27, r21
    16fa:	e8 f0       	brcs	.+58     	; 0x1736 <pf_lseek+0x12e>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    16fc:	88 27       	eor	r24, r24
    16fe:	99 27       	eor	r25, r25
    1700:	dc 01       	movw	r26, r24
    1702:	88 19       	sub	r24, r8
    1704:	99 09       	sbc	r25, r9
    1706:	aa 09       	sbc	r26, r10
    1708:	bb 09       	sbc	r27, r11
    170a:	48 22       	and	r4, r24
    170c:	59 22       	and	r5, r25
    170e:	6a 22       	and	r6, r26
    1710:	7b 22       	and	r7, r27
    1712:	d1 01       	movw	r26, r2
    1714:	56 96       	adiw	r26, 0x16	; 22
    1716:	4d 92       	st	X+, r4
    1718:	5d 92       	st	X+, r5
    171a:	6d 92       	st	X+, r6
    171c:	7c 92       	st	X, r7
    171e:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
    1720:	c4 18       	sub	r12, r4
    1722:	d5 08       	sbc	r13, r5
    1724:	e6 08       	sbc	r14, r6
    1726:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    1728:	92 96       	adiw	r26, 0x22	; 34
    172a:	6d 91       	ld	r22, X+
    172c:	7d 91       	ld	r23, X+
    172e:	8d 91       	ld	r24, X+
    1730:	9c 91       	ld	r25, X
    1732:	95 97       	sbiw	r26, 0x25	; 37
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <pf_lseek+0x140>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    1736:	f1 01       	movw	r30, r2
    1738:	66 8d       	ldd	r22, Z+30	; 0x1e
    173a:	77 8d       	ldd	r23, Z+31	; 0x1f
    173c:	80 a1       	ldd	r24, Z+32	; 0x20
    173e:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
    1740:	62 a3       	std	Z+34, r22	; 0x22
    1742:	73 a3       	std	Z+35, r23	; 0x23
    1744:	84 a3       	std	Z+36, r24	; 0x24
    1746:	95 a3       	std	Z+37, r25	; 0x25
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1748:	8c 14       	cp	r8, r12
    174a:	9d 04       	cpc	r9, r13
    174c:	ae 04       	cpc	r10, r14
    174e:	bf 04       	cpc	r11, r15
    1750:	58 f5       	brcc	.+86     	; 0x17a8 <pf_lseek+0x1a0>
			clst = get_fat(clst);		/* Follow cluster chain */
    1752:	44 da       	rcall	.-2936   	; 0xbdc <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    1754:	62 30       	cpi	r22, 0x02	; 2
    1756:	71 05       	cpc	r23, r1
    1758:	81 05       	cpc	r24, r1
    175a:	91 05       	cpc	r25, r1
    175c:	08 f4       	brcc	.+2      	; 0x1760 <pf_lseek+0x158>
    175e:	5e c0       	rjmp	.+188    	; 0x181c <pf_lseek+0x214>
    1760:	f1 01       	movw	r30, r2
    1762:	06 81       	ldd	r16, Z+6	; 0x06
    1764:	17 81       	ldd	r17, Z+7	; 0x07
    1766:	20 85       	ldd	r18, Z+8	; 0x08
    1768:	31 85       	ldd	r19, Z+9	; 0x09
    176a:	60 17       	cp	r22, r16
    176c:	71 07       	cpc	r23, r17
    176e:	82 07       	cpc	r24, r18
    1770:	93 07       	cpc	r25, r19
    1772:	08 f0       	brcs	.+2      	; 0x1776 <pf_lseek+0x16e>
    1774:	53 c0       	rjmp	.+166    	; 0x181c <pf_lseek+0x214>
			fs->curr_clust = clst;
    1776:	62 a3       	std	Z+34, r22	; 0x22
    1778:	73 a3       	std	Z+35, r23	; 0x23
    177a:	84 a3       	std	Z+36, r24	; 0x24
    177c:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
    177e:	06 89       	ldd	r16, Z+22	; 0x16
    1780:	17 89       	ldd	r17, Z+23	; 0x17
    1782:	20 8d       	ldd	r18, Z+24	; 0x18
    1784:	31 8d       	ldd	r19, Z+25	; 0x19
    1786:	08 0d       	add	r16, r8
    1788:	19 1d       	adc	r17, r9
    178a:	2a 1d       	adc	r18, r10
    178c:	3b 1d       	adc	r19, r11
    178e:	06 8b       	std	Z+22, r16	; 0x16
    1790:	17 8b       	std	Z+23, r17	; 0x17
    1792:	20 8f       	std	Z+24, r18	; 0x18
    1794:	31 8f       	std	Z+25, r19	; 0x19
			ofs -= bcs;
    1796:	c8 18       	sub	r12, r8
    1798:	d9 08       	sbc	r13, r9
    179a:	ea 08       	sbc	r14, r10
    179c:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    179e:	8c 14       	cp	r8, r12
    17a0:	9d 04       	cpc	r9, r13
    17a2:	ae 04       	cpc	r10, r14
    17a4:	bf 04       	cpc	r11, r15
    17a6:	a8 f2       	brcs	.-86     	; 0x1752 <pf_lseek+0x14a>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    17a8:	d1 01       	movw	r26, r2
    17aa:	56 96       	adiw	r26, 0x16	; 22
    17ac:	0d 91       	ld	r16, X+
    17ae:	1d 91       	ld	r17, X+
    17b0:	2d 91       	ld	r18, X+
    17b2:	3c 91       	ld	r19, X
    17b4:	59 97       	sbiw	r26, 0x19	; 25
    17b6:	c0 0e       	add	r12, r16
    17b8:	d1 1e       	adc	r13, r17
    17ba:	e2 1e       	adc	r14, r18
    17bc:	f3 1e       	adc	r15, r19
    17be:	f1 01       	movw	r30, r2
    17c0:	c6 8a       	std	Z+22, r12	; 0x16
    17c2:	d7 8a       	std	Z+23, r13	; 0x17
    17c4:	e0 8e       	std	Z+24, r14	; 0x18
    17c6:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst);		/* Current sector */
    17c8:	30 d9       	rcall	.-3488   	; 0xa2a <clust2sect>
		if (!sect) goto fe_abort;
    17ca:	61 15       	cp	r22, r1
    17cc:	71 05       	cpc	r23, r1
    17ce:	81 05       	cpc	r24, r1
    17d0:	91 05       	cpc	r25, r1
    17d2:	21 f1       	breq	.+72     	; 0x181c <pf_lseek+0x214>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    17d4:	0b 2e       	mov	r0, r27
    17d6:	b9 e0       	ldi	r27, 0x09	; 9
    17d8:	f6 94       	lsr	r15
    17da:	e7 94       	ror	r14
    17dc:	d7 94       	ror	r13
    17de:	c7 94       	ror	r12
    17e0:	ba 95       	dec	r27
    17e2:	d1 f7       	brne	.-12     	; 0x17d8 <pf_lseek+0x1d0>
    17e4:	b0 2d       	mov	r27, r0
    17e6:	d1 01       	movw	r26, r2
    17e8:	12 96       	adiw	r26, 0x02	; 2
    17ea:	0c 91       	ld	r16, X
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	01 50       	subi	r16, 0x01	; 1
    17f0:	11 09       	sbc	r17, r1
    17f2:	22 27       	eor	r18, r18
    17f4:	17 fd       	sbrc	r17, 7
    17f6:	20 95       	com	r18
    17f8:	32 2f       	mov	r19, r18
    17fa:	c0 22       	and	r12, r16
    17fc:	d1 22       	and	r13, r17
    17fe:	e2 22       	and	r14, r18
    1800:	f3 22       	and	r15, r19
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8c 0d       	add	r24, r12
    1808:	9d 1d       	adc	r25, r13
    180a:	ae 1d       	adc	r26, r14
    180c:	bf 1d       	adc	r27, r15
    180e:	f1 01       	movw	r30, r2
    1810:	86 a3       	std	Z+38, r24	; 0x26
    1812:	97 a3       	std	Z+39, r25	; 0x27
    1814:	a0 a7       	std	Z+40, r26	; 0x28
    1816:	b1 a7       	std	Z+41, r27	; 0x29
	}

	return FR_OK;
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0a c0       	rjmp	.+20     	; 0x1830 <pf_lseek+0x228>

fe_abort:
	fs->flag = 0;
    181c:	d1 01       	movw	r26, r2
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	1c 92       	st	X, r1
	return FR_DISK_ERR;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <pf_lseek+0x228>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1826:	86 e0       	ldi	r24, 0x06	; 6
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <pf_lseek+0x228>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
    182a:	85 e0       	ldi	r24, 0x05	; 5
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <pf_lseek+0x228>
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
    182e:	80 e0       	ldi	r24, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	df 90       	pop	r13
    1846:	cf 90       	pop	r12
    1848:	bf 90       	pop	r11
    184a:	af 90       	pop	r10
    184c:	9f 90       	pop	r9
    184e:	8f 90       	pop	r8
    1850:	7f 90       	pop	r7
    1852:	6f 90       	pop	r6
    1854:	5f 90       	pop	r5
    1856:	4f 90       	pop	r4
    1858:	3f 90       	pop	r3
    185a:	2f 90       	pop	r2
    185c:	08 95       	ret

0000185e <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	ac 97       	sbiw	r28, 0x2c	; 44
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1878:	80 91 72 00 	lds	r24, 0x0072
    187c:	90 91 73 00 	lds	r25, 0x0073
    1880:	89 2b       	or	r24, r25
    1882:	69 f1       	breq	.+90     	; 0x18de <pf_opendir+0x80>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	f8 01       	movw	r30, r16
    188a:	93 83       	std	Z+3, r25	; 0x03
    188c:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    188e:	ab 01       	movw	r20, r22
    1890:	be 01       	movw	r22, r28
    1892:	63 5f       	subi	r22, 0xF3	; 243
    1894:	7f 4f       	sbci	r23, 0xFF	; 255
    1896:	c8 01       	movw	r24, r16
    1898:	29 db       	rcall	.-2478   	; 0xeec <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    189a:	81 11       	cpse	r24, r1
    189c:	1b c0       	rjmp	.+54     	; 0x18d4 <pf_opendir+0x76>
			if (dir[0]) {						/* It is not the root dir */
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	88 23       	and	r24, r24
    18a2:	09 f1       	breq	.+66     	; 0x18e6 <pf_opendir+0x88>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    18a4:	88 8d       	ldd	r24, Y+24	; 0x18
    18a6:	84 ff       	sbrs	r24, 4
    18a8:	18 c0       	rjmp	.+48     	; 0x18da <pf_opendir+0x7c>
					dj->sclust = LD_CLUST(dir);
    18aa:	49 a1       	ldd	r20, Y+33	; 0x21
    18ac:	5a a1       	ldd	r21, Y+34	; 0x22
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	ba 01       	movw	r22, r20
    18b4:	55 27       	eor	r21, r21
    18b6:	44 27       	eor	r20, r20
    18b8:	8f a1       	ldd	r24, Y+39	; 0x27
    18ba:	98 a5       	ldd	r25, Y+40	; 0x28
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	48 2b       	or	r20, r24
    18c2:	59 2b       	or	r21, r25
    18c4:	6a 2b       	or	r22, r26
    18c6:	7b 2b       	or	r23, r27
    18c8:	f8 01       	movw	r30, r16
    18ca:	44 83       	std	Z+4, r20	; 0x04
    18cc:	55 83       	std	Z+5, r21	; 0x05
    18ce:	66 83       	std	Z+6, r22	; 0x06
    18d0:	77 83       	std	Z+7, r23	; 0x07
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <pf_opendir+0x88>
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	29 f0       	breq	.+10     	; 0x18e2 <pf_opendir+0x84>
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <pf_opendir+0x8e>
		if (res == FR_OK) {						/* Follow completed */
			if (dir[0]) {						/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
					dj->sclust = LD_CLUST(dir);
				else							/* The object is not a directory */
					res = FR_NO_PATH;
    18da:	84 e0       	ldi	r24, 0x04	; 4
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <pf_opendir+0x8e>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    18de:	86 e0       	ldi	r24, 0x06	; 6
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <pf_opendir+0x8e>
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <pf_opendir+0x8e>
					dj->sclust = LD_CLUST(dir);
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    18e6:	c8 01       	movw	r24, r16
    18e8:	e2 d8       	rcall	.-3644   	; 0xaae <dir_rewind>
    18ea:	f4 cf       	rjmp	.-24     	; 0x18d4 <pf_opendir+0x76>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	return res;
}
    18ec:	ac 96       	adiw	r28, 0x2c	; 44
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	08 95       	ret

00001902 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	ac 97       	sbiw	r28, 0x2c	; 44
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	7c 01       	movw	r14, r24
    1928:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    192a:	80 91 72 00 	lds	r24, 0x0072
    192e:	90 91 73 00 	lds	r25, 0x0073
    1932:	89 2b       	or	r24, r25
    1934:	09 f4       	brne	.+2      	; 0x1938 <pf_readdir+0x36>
    1936:	af c0       	rjmp	.+350    	; 0x1a96 <pf_readdir+0x194>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1938:	ce 01       	movw	r24, r28
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	f7 01       	movw	r30, r14
    193e:	93 83       	std	Z+3, r25	; 0x03
    1940:	82 83       	std	Z+2, r24	; 0x02
		if (!fno) {
    1942:	61 15       	cp	r22, r1
    1944:	71 05       	cpc	r23, r1
    1946:	29 f0       	breq	.+10     	; 0x1952 <pf_readdir+0x50>
    1948:	93 e0       	ldi	r25, 0x03	; 3


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
    194a:	bb 24       	eor	r11, r11
    194c:	b3 94       	inc	r11
    194e:	a1 2c       	mov	r10, r1
    1950:	2c c0       	rjmp	.+88     	; 0x19aa <pf_readdir+0xa8>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
    1952:	c7 01       	movw	r24, r14
    1954:	ac d8       	rcall	.-3752   	; 0xaae <dir_rewind>
    1956:	98 2f       	mov	r25, r24
    1958:	af c0       	rjmp	.+350    	; 0x1ab8 <pf_readdir+0x1b6>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    195a:	f7 01       	movw	r30, r14
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	2f 70       	andi	r18, 0x0F	; 15
    1962:	33 27       	eor	r19, r19
    1964:	22 0f       	add	r18, r18
    1966:	33 1f       	adc	r19, r19
    1968:	22 95       	swap	r18
    196a:	32 95       	swap	r19
    196c:	30 7f       	andi	r19, 0xF0	; 240
    196e:	32 27       	eor	r19, r18
    1970:	20 7f       	andi	r18, 0xF0	; 240
    1972:	32 27       	eor	r19, r18
    1974:	00 e2       	ldi	r16, 0x20	; 32
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	ce 01       	movw	r24, r28
    197a:	0d 96       	adiw	r24, 0x0d	; 13
    197c:	12 d8       	rcall	.-4060   	; 0x9a2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
    197e:	9b 2d       	mov	r25, r11
    1980:	81 11       	cpse	r24, r1
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <pf_readdir+0x84>
    1984:	9a 2d       	mov	r25, r10
		if (res != FR_OK) break;
    1986:	91 11       	cpse	r25, r1
    1988:	1c c0       	rjmp	.+56     	; 0x19c2 <pf_readdir+0xc0>
		c = dir[DIR_Name];
    198a:	8d 85       	ldd	r24, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <pf_readdir+0x90>
    1990:	84 c0       	rjmp	.+264    	; 0x1a9a <pf_readdir+0x198>
		a = dir[DIR_Attr] & AM_MASK;
    1992:	28 8d       	ldd	r18, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    1994:	85 3e       	cpi	r24, 0xE5	; 229
    1996:	21 f0       	breq	.+8      	; 0x19a0 <pf_readdir+0x9e>
    1998:	8e 32       	cpi	r24, 0x2E	; 46
    199a:	11 f0       	breq	.+4      	; 0x19a0 <pf_readdir+0x9e>
    199c:	23 ff       	sbrs	r18, 3
    199e:	21 c0       	rjmp	.+66     	; 0x19e2 <pf_readdir+0xe0>
			break;
		res = dir_next(dj);			/* Next entry */
    19a0:	c7 01       	movw	r24, r14
    19a2:	28 da       	rcall	.-2992   	; 0xdf4 <dir_next>
    19a4:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    19a6:	81 11       	cpse	r24, r1
    19a8:	0c c0       	rjmp	.+24     	; 0x19c2 <pf_readdir+0xc0>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    19aa:	f7 01       	movw	r30, r14
    19ac:	44 85       	ldd	r20, Z+12	; 0x0c
    19ae:	55 85       	ldd	r21, Z+13	; 0x0d
    19b0:	66 85       	ldd	r22, Z+14	; 0x0e
    19b2:	77 85       	ldd	r23, Z+15	; 0x0f
    19b4:	41 15       	cp	r20, r1
    19b6:	51 05       	cpc	r21, r1
    19b8:	61 05       	cpc	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	71 f6       	brne	.-100    	; 0x195a <pf_readdir+0x58>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    19be:	99 23       	and	r25, r25
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <pf_readdir+0xe0>
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    19c2:	93 30       	cpi	r25, 0x03	; 3
    19c4:	49 f4       	brne	.+18     	; 0x19d8 <pf_readdir+0xd6>
				dj->sect = 0;
    19c6:	f7 01       	movw	r30, r14
    19c8:	14 86       	std	Z+12, r1	; 0x0c
    19ca:	15 86       	std	Z+13, r1	; 0x0d
    19cc:	16 86       	std	Z+14, r1	; 0x0e
    19ce:	17 86       	std	Z+15, r1	; 0x0f
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    19d0:	96 01       	movw	r18, r12
    19d2:	27 5f       	subi	r18, 0xF7	; 247
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	51 c0       	rjmp	.+162    	; 0x1a7a <pf_readdir+0x178>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    19d8:	f7 01       	movw	r30, r14
    19da:	14 86       	std	Z+12, r1	; 0x0c
    19dc:	15 86       	std	Z+13, r1	; 0x0d
    19de:	16 86       	std	Z+14, r1	; 0x0e
    19e0:	17 86       	std	Z+15, r1	; 0x0f
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    19e2:	91 11       	cpse	r25, r1
    19e4:	69 c0       	rjmp	.+210    	; 0x1ab8 <pf_readdir+0x1b6>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    19e6:	96 01       	movw	r18, r12
    19e8:	27 5f       	subi	r18, 0xF7	; 247
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
    19ec:	f7 01       	movw	r30, r14
    19ee:	84 85       	ldd	r24, Z+12	; 0x0c
    19f0:	95 85       	ldd	r25, Z+13	; 0x0d
    19f2:	a6 85       	ldd	r26, Z+14	; 0x0e
    19f4:	b7 85       	ldd	r27, Z+15	; 0x0f
    19f6:	89 2b       	or	r24, r25
    19f8:	8a 2b       	or	r24, r26
    19fa:	8b 2b       	or	r24, r27
    19fc:	f1 f1       	breq	.+124    	; 0x1a7a <pf_readdir+0x178>
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
    19fe:	6d 85       	ldd	r22, Y+13	; 0x0d
			if (c == ' ') break;
    1a00:	60 32       	cpi	r22, 0x20	; 32
    1a02:	b1 f0       	breq	.+44     	; 0x1a30 <pf_readdir+0x12e>
    1a04:	de 01       	movw	r26, r28
    1a06:	1e 96       	adiw	r26, 0x0e	; 14
    1a08:	f9 01       	movw	r30, r18
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	4b 5e       	subi	r20, 0xEB	; 235
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
			if (c == 0x05) c = 0xE5;
    1a10:	75 ee       	ldi	r23, 0xE5	; 229
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <pf_readdir+0x11a>


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
    1a14:	6d 91       	ld	r22, X+
			if (c == ' ') break;
    1a16:	60 32       	cpi	r22, 0x20	; 32
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <pf_readdir+0x12e>
    1a1a:	fc 01       	movw	r30, r24
			if (c == 0x05) c = 0xE5;
    1a1c:	65 30       	cpi	r22, 0x05	; 5
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <pf_readdir+0x120>
    1a20:	67 2f       	mov	r22, r23
    1a22:	cf 01       	movw	r24, r30
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	9c 01       	movw	r18, r24
			*p++ = c;
    1a28:	60 83       	st	Z, r22
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1a2a:	a4 17       	cp	r26, r20
    1a2c:	b5 07       	cpc	r27, r21
    1a2e:	91 f7       	brne	.-28     	; 0x1a14 <pf_readdir+0x112>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1a30:	8d 89       	ldd	r24, Y+21	; 0x15
    1a32:	80 32       	cpi	r24, 0x20	; 32
    1a34:	79 f0       	breq	.+30     	; 0x1a54 <pf_readdir+0x152>
			*p++ = '.';
    1a36:	8e e2       	ldi	r24, 0x2E	; 46
    1a38:	f9 01       	movw	r30, r18
    1a3a:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1a3c:	4d 89       	ldd	r20, Y+21	; 0x15
				if (c == ' ') break;
    1a3e:	40 32       	cpi	r20, 0x20	; 32
    1a40:	71 f5       	brne	.+92     	; 0x1a9e <pf_readdir+0x19c>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <pf_readdir+0x152>
	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
    1a48:	9c 01       	movw	r18, r24
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <pf_readdir+0x152>
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	43 83       	std	Z+3, r20	; 0x03
    1a50:	2c 5f       	subi	r18, 0xFC	; 252
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1a54:	88 8d       	ldd	r24, Y+24	; 0x18
    1a56:	f6 01       	movw	r30, r12
    1a58:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1a5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a5e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1a60:	bc a5       	ldd	r27, Y+44	; 0x2c
    1a62:	80 83       	st	Z, r24
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	a2 83       	std	Z+2, r26	; 0x02
    1a68:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1a6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a6e:	95 83       	std	Z+5, r25	; 0x05
    1a70:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1a72:	8b a1       	ldd	r24, Y+35	; 0x23
    1a74:	9c a1       	ldd	r25, Y+36	; 0x24
    1a76:	97 83       	std	Z+7, r25	; 0x07
    1a78:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;
    1a7a:	f9 01       	movw	r30, r18
    1a7c:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1a7e:	c7 01       	movw	r24, r14
    1a80:	b9 d9       	rcall	.-3214   	; 0xdf4 <dir_next>
    1a82:	98 2f       	mov	r25, r24
				if (res == FR_NO_FILE) {
    1a84:	83 30       	cpi	r24, 0x03	; 3
    1a86:	c1 f4       	brne	.+48     	; 0x1ab8 <pf_readdir+0x1b6>
					dj->sect = 0;
    1a88:	f7 01       	movw	r30, r14
    1a8a:	14 86       	std	Z+12, r1	; 0x0c
    1a8c:	15 86       	std	Z+13, r1	; 0x0d
    1a8e:	16 86       	std	Z+14, r1	; 0x0e
    1a90:	17 86       	std	Z+15, r1	; 0x0f
					res = FR_OK;
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	11 c0       	rjmp	.+34     	; 0x1ab8 <pf_readdir+0x1b6>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <pf_readdir+0x1b6>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	92 cf       	rjmp	.-220    	; 0x19c2 <pf_readdir+0xc0>
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	02 96       	adiw	r24, 0x02	; 2
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	41 83       	std	Z+1, r20	; 0x01
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1aa6:	4e 89       	ldd	r20, Y+22	; 0x16
				if (c == ' ') break;
    1aa8:	40 32       	cpi	r20, 0x20	; 32
    1aaa:	71 f2       	breq	.-100    	; 0x1a48 <pf_readdir+0x146>
				*p++ = c;
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	42 83       	std	Z+2, r20	; 0x02
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1ab0:	4f 89       	ldd	r20, Y+23	; 0x17
				if (c == ' ') break;
    1ab2:	40 32       	cpi	r20, 0x20	; 32
    1ab4:	59 f6       	brne	.-106    	; 0x1a4c <pf_readdir+0x14a>
    1ab6:	c8 cf       	rjmp	.-112    	; 0x1a48 <pf_readdir+0x146>
			}
		}
	}

	return res;
}
    1ab8:	89 2f       	mov	r24, r25
    1aba:	ac 96       	adiw	r28, 0x2c	; 44
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	af 90       	pop	r10
    1ada:	08 95       	ret

00001adc <__udivmodsi4>:
    1adc:	a1 e2       	ldi	r26, 0x21	; 33
    1ade:	1a 2e       	mov	r1, r26
    1ae0:	aa 1b       	sub	r26, r26
    1ae2:	bb 1b       	sub	r27, r27
    1ae4:	fd 01       	movw	r30, r26
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <__udivmodsi4_ep>

00001ae8 <__udivmodsi4_loop>:
    1ae8:	aa 1f       	adc	r26, r26
    1aea:	bb 1f       	adc	r27, r27
    1aec:	ee 1f       	adc	r30, r30
    1aee:	ff 1f       	adc	r31, r31
    1af0:	a2 17       	cp	r26, r18
    1af2:	b3 07       	cpc	r27, r19
    1af4:	e4 07       	cpc	r30, r20
    1af6:	f5 07       	cpc	r31, r21
    1af8:	20 f0       	brcs	.+8      	; 0x1b02 <__udivmodsi4_ep>
    1afa:	a2 1b       	sub	r26, r18
    1afc:	b3 0b       	sbc	r27, r19
    1afe:	e4 0b       	sbc	r30, r20
    1b00:	f5 0b       	sbc	r31, r21

00001b02 <__udivmodsi4_ep>:
    1b02:	66 1f       	adc	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	1a 94       	dec	r1
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <__udivmodsi4_loop>
    1b0e:	60 95       	com	r22
    1b10:	70 95       	com	r23
    1b12:	80 95       	com	r24
    1b14:	90 95       	com	r25
    1b16:	9b 01       	movw	r18, r22
    1b18:	ac 01       	movw	r20, r24
    1b1a:	bd 01       	movw	r22, r26
    1b1c:	cf 01       	movw	r24, r30
    1b1e:	08 95       	ret

00001b20 <__mulsidi3>:
    1b20:	68 94       	set
    1b22:	00 13       	cpse	r16, r16

00001b24 <__umulsidi3>:
    1b24:	e8 94       	clt
    1b26:	a0 e0       	ldi	r26, 0x00	; 0
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e8 e9       	ldi	r30, 0x98	; 152
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	1d c0       	rjmp	.+58     	; 0x1b6a <__prologue_saves__+0x10>
    1b30:	ef ef       	ldi	r30, 0xFF	; 255
    1b32:	e7 f9       	bld	r30, 7
    1b34:	59 01       	movw	r10, r18
    1b36:	6a 01       	movw	r12, r20
    1b38:	5e 23       	and	r21, r30
    1b3a:	55 0f       	add	r21, r21
    1b3c:	ee 08       	sbc	r14, r14
    1b3e:	fe 2c       	mov	r15, r14
    1b40:	87 01       	movw	r16, r14
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	9e 23       	and	r25, r30
    1b48:	99 0f       	add	r25, r25
    1b4a:	66 0b       	sbc	r22, r22
    1b4c:	76 2f       	mov	r23, r22
    1b4e:	cb 01       	movw	r24, r22
    1b50:	3b d0       	rcall	.+118    	; 0x1bc8 <__muldi3>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	ea e0       	ldi	r30, 0x0A	; 10
    1b58:	24 c0       	rjmp	.+72     	; 0x1ba2 <__epilogue_restores__+0x10>

00001b5a <__prologue_saves__>:
    1b5a:	2f 92       	push	r2
    1b5c:	3f 92       	push	r3
    1b5e:	4f 92       	push	r4
    1b60:	5f 92       	push	r5
    1b62:	6f 92       	push	r6
    1b64:	7f 92       	push	r7
    1b66:	8f 92       	push	r8
    1b68:	9f 92       	push	r9
    1b6a:	af 92       	push	r10
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	ca 1b       	sub	r28, r26
    1b84:	db 0b       	sbc	r29, r27
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	09 94       	ijmp

00001b92 <__epilogue_restores__>:
    1b92:	2a 88       	ldd	r2, Y+18	; 0x12
    1b94:	39 88       	ldd	r3, Y+17	; 0x11
    1b96:	48 88       	ldd	r4, Y+16	; 0x10
    1b98:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ba0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ba2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ba4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ba6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ba8:	df 80       	ldd	r13, Y+7	; 0x07
    1baa:	ee 80       	ldd	r14, Y+6	; 0x06
    1bac:	fd 80       	ldd	r15, Y+5	; 0x05
    1bae:	0c 81       	ldd	r16, Y+4	; 0x04
    1bb0:	1b 81       	ldd	r17, Y+3	; 0x03
    1bb2:	aa 81       	ldd	r26, Y+2	; 0x02
    1bb4:	b9 81       	ldd	r27, Y+1	; 0x01
    1bb6:	ce 0f       	add	r28, r30
    1bb8:	d1 1d       	adc	r29, r1
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	ed 01       	movw	r28, r26
    1bc6:	08 95       	ret

00001bc8 <__muldi3>:
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	9f 92       	push	r9
    1bce:	a0 e4       	ldi	r26, 0x40	; 64
    1bd0:	9a 2e       	mov	r9, r26
    1bd2:	00 24       	eor	r0, r0
    1bd4:	d0 01       	movw	r26, r0
    1bd6:	e0 01       	movw	r28, r0
    1bd8:	f0 01       	movw	r30, r0
    1bda:	16 95       	lsr	r17
    1bdc:	07 95       	ror	r16
    1bde:	f7 94       	ror	r15
    1be0:	e7 94       	ror	r14
    1be2:	d7 94       	ror	r13
    1be4:	c7 94       	ror	r12
    1be6:	b7 94       	ror	r11
    1be8:	a7 94       	ror	r10
    1bea:	48 f4       	brcc	.+18     	; 0x1bfe <__muldi3+0x36>
    1bec:	10 68       	ori	r17, 0x80	; 128
    1bee:	a2 0f       	add	r26, r18
    1bf0:	b3 1f       	adc	r27, r19
    1bf2:	c4 1f       	adc	r28, r20
    1bf4:	d5 1f       	adc	r29, r21
    1bf6:	e6 1f       	adc	r30, r22
    1bf8:	f7 1f       	adc	r31, r23
    1bfa:	08 1e       	adc	r0, r24
    1bfc:	19 1e       	adc	r1, r25
    1bfe:	22 0f       	add	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	44 1f       	adc	r20, r20
    1c04:	55 1f       	adc	r21, r21
    1c06:	66 1f       	adc	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	9a 94       	dec	r9
    1c10:	21 f7       	brne	.-56     	; 0x1bda <__muldi3+0x12>
    1c12:	9d 01       	movw	r18, r26
    1c14:	ae 01       	movw	r20, r28
    1c16:	bf 01       	movw	r22, r30
    1c18:	c0 01       	movw	r24, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	9f 90       	pop	r9
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <strstr>:
    1c24:	fb 01       	movw	r30, r22
    1c26:	51 91       	ld	r21, Z+
    1c28:	55 23       	and	r21, r21
    1c2a:	a9 f0       	breq	.+42     	; 0x1c56 <strstr+0x32>
    1c2c:	bf 01       	movw	r22, r30
    1c2e:	dc 01       	movw	r26, r24
    1c30:	4d 91       	ld	r20, X+
    1c32:	45 17       	cp	r20, r21
    1c34:	41 11       	cpse	r20, r1
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <strstr+0xc>
    1c38:	59 f4       	brne	.+22     	; 0x1c50 <strstr+0x2c>
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	01 90       	ld	r0, Z+
    1c3e:	00 20       	and	r0, r0
    1c40:	49 f0       	breq	.+18     	; 0x1c54 <strstr+0x30>
    1c42:	4d 91       	ld	r20, X+
    1c44:	40 15       	cp	r20, r0
    1c46:	41 11       	cpse	r20, r1
    1c48:	c9 f3       	breq	.-14     	; 0x1c3c <strstr+0x18>
    1c4a:	fb 01       	movw	r30, r22
    1c4c:	41 11       	cpse	r20, r1
    1c4e:	ef cf       	rjmp	.-34     	; 0x1c2e <strstr+0xa>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	08 95       	ret

00001c58 <_exit>:
    1c58:	f8 94       	cli

00001c5a <__stop_program>:
    1c5a:	ff cf       	rjmp	.-2      	; 0x1c5a <__stop_program>
