
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00003010  000030a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000254  00800114  00800114  000030b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000250  00000000  00000000  000030e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004056  00000000  00000000  00003338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b6d  00000000  00000000  0000738e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f16  00000000  00000000  00007efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a4  00000000  00000000  00008e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ad5  00000000  00000000  000095b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e64  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000cef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__ctors_end>
       4:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
       8:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
       c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      10:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      14:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      18:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      1c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      20:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      24:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      28:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      2c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      30:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      34:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      38:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      3c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      40:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      44:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      48:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      4c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      50:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      54:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      58:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      5c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      60:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      64:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
      68:	ca 14       	cp	r12, r10
      6a:	cd 14       	cp	r12, r13
      6c:	d0 14       	cp	r13, r0
      6e:	d3 14       	cp	r13, r3
      70:	d6 14       	cp	r13, r6
      72:	d9 14       	cp	r13, r9
      74:	dc 14       	cp	r13, r12

00000076 <__trampolines_end>:
      76:	20 46       	sbci	r18, 0x60	; 96
      78:	72 65       	ori	r23, 0x52	; 82
      7a:	65 20       	and	r6, r5
      7c:	4d 65       	ori	r20, 0x5D	; 93
      7e:	6d 6f       	ori	r22, 0xFD	; 253
      80:	72 79       	andi	r23, 0x92	; 146
      82:	3a 20       	and	r3, r10
	...

00000085 <__c.2012>:
      85:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000094 <__c.1985>:
      94:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      a4:	20 63 6c 75 73 74 65 72 00                           cluster.

000000ad <__c.1983>:
      ad:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      bd:	68 61 69 6e 00                                      hain.

000000c2 <__c.1975>:
      c2:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

000000d2 <__c.1970>:
      d2:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000e2 <__c.1967>:
      e2:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      f2:	21 00                                               !.

000000f4 <__c.1958>:
      f4:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
     104:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

0000010e <__c.1956>:
     10e:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     11e:	21 00                                               !.

00000120 <__c.1954>:
     120:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

00000131 <__c.1950>:
     131:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     141:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     151:	64 61 74 61 2e 2e 00                                data...

00000158 <__c.1909>:
     158:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     168:	2e 2e 00                                            ...

0000016b <__c.1897>:
     16b:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     17b:	20 63 6c 75 73 74 65 72 00                           cluster.

00000184 <__c.1876>:
     184:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     194:	20 63 6c 75 73 74 65 72 00                           cluster.

0000019d <__c.1868>:
     19d:	52 4f 4f 54 00                                      ROOT.

000001a2 <__c.1866>:
     1a2:	44 49 52 00                                         DIR.

000001a6 <__c.1864>:
     1a6:	20 20 20 00                                            .

000001aa <__c.1862>:
     1aa:	46 49 4c 45 00                                      FILE.

000001af <__c.1860>:
     1af:	20 20 20 00                                            .

000001b3 <__c.1854>:
     1b3:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001c1 <__c.1852>:
     1c1:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001cc <__c.1847>:
     1cc:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1dc:	69 73 74 21 00                                      ist!.

000001e1 <__c.2060>:
     1e1:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001f2 <__c.2049>:
     1f2:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     202:	6f 6e 67 2e 2e 00                                   ong...

00000208 <__c.2042>:
     208:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     218:	20 00                                                .

0000021a <__c.2036>:
     21a:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

0000022b <__c.2031>:
     22b:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000239 <__c.2028>:
     239:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     249:	21 00                                               !.

0000024b <__c.2026>:
     24b:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

0000025a <__c.2022>:
     25a:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     26a:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000274 <__c.2018>:
     274:	45 72 61 73 65 64 21 00                             Erased!.

0000027c <__c.2016>:
     27c:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

0000028b <__c.2013>:
     28b:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     29b:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     2ab:	39 29 3a 00                                         9):.

000002af <__c.2010>:
     2af:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     2bf:	73 61 62 6c 65 64 21 00                             sabled!.

000002c7 <__c.2008>:
     2c7:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2d7:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

000002e5 <__c.2006>:
     2e5:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     2f5:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     305:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

00000315 <__c.2004>:
     315:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     325:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     335:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     345:	54 69 6d 65 00                                      Time.

0000034a <__c.2002>:
     34a:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     35a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     36a:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

0000037a <__c.2000>:
     37a:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     38a:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     39a:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

000003a8 <__c.1998>:
     3a8:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     3b8:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     3c8:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     3d8:	42 6c 6f 63 6b 00                                   Block.

000003de <__c.1996>:
     3de:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     3ee:	73 20 00                                            s .

000003f1 <__c.1994>:
     3f1:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00000402 <__c.1992>:
     402:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00000413 <__c.1990>:
     413:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     423:	44 65 74 65 63 74 65 64 21 00                       Detected!.

0000042d <__c.1987>:
     42d:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     43d:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     44d:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000458 <__c.1984>:
     458:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     468:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

00000475 <__c.1980>:
     475:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     485:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     495:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

000004a0 <__c.1976>:
     4a0:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     4b0:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000004bd <__c.1974>:
     4bd:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     4cd:	63 74 65 64 2e 2e 00                                cted...

000004d4 <__c.1969>:
     4d4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4e4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4f4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     504:	2a 2a 2a 2a 00                                      ****.

00000509 <__c.1967>:
     509:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     519:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     529:	69 6e 67 2e 2e 20 20 00                             ing..  .

00000531 <__c.1965>:
     531:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     541:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     551:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     561:	2a 2a 2a 2a 00                                      ****.

00000566 <__c.1798>:
     566:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000576 <__c.1796>:
     576:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     586:	65 64 2e 2e 00                                      ed...

0000058b <__c.1794>:
     58b:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     59b:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

000005a5 <__c.1792>:
     5a5:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     5b5:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     5c5:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

000005ce <__c.1789>:
     5ce:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     5de:	6d 2f 79 79 29 3a 00                                m/yy):.

000005e5 <__c.1783>:
     5e5:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000005f5 <__c.1781>:
     5f5:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     605:	65 64 2e 2e 00                                      ed...

0000060a <__c.1779>:
     60a:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     61a:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000624 <__c.1776>:
     624:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     634:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     644:	73 29 3a 00                                         s):.

00000648 <__c.1751>:
     648:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

00000650 <__c.1748>:
     650:	53 61 74 75 72 64 61 79 00                          Saturday.

00000659 <__c.1745>:
     659:	46 72 69 64 61 79 00                                Friday.

00000660 <__c.1742>:
     660:	54 68 75 72 73 64 61 79 00                          Thursday.

00000669 <__c.1739>:
     669:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

00000673 <__c.1736>:
     673:	54 75 65 73 64 61 79 00                             Tuesday.

0000067b <__c.1733>:
     67b:	4d 6f 6e 64 61 79 00                                Monday.

00000682 <__c.1729>:
     682:	53 75 6e 64 61 79 00                                Sunday.

00000689 <__c.1726>:
     689:	20 20 20 20 44 61 79 3a 20 00                           Day: .

00000693 <__c.1721>:
     693:	44 61 74 65 3a 00                                   Date:.

00000699 <__c.1715>:
     699:	54 69 6d 65 3a 00 00                                Time:..

000006a0 <__ctors_end>:
     6a0:	11 24       	eor	r1, r1
     6a2:	1f be       	out	0x3f, r1	; 63
     6a4:	cf ef       	ldi	r28, 0xFF	; 255
     6a6:	d8 e0       	ldi	r29, 0x08	; 8
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	cd bf       	out	0x3d, r28	; 61

000006ac <__do_copy_data>:
     6ac:	11 e0       	ldi	r17, 0x01	; 1
     6ae:	a0 e0       	ldi	r26, 0x00	; 0
     6b0:	b1 e0       	ldi	r27, 0x01	; 1
     6b2:	e0 e1       	ldi	r30, 0x10	; 16
     6b4:	f0 e3       	ldi	r31, 0x30	; 48
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <__do_copy_data+0x10>
     6b8:	05 90       	lpm	r0, Z+
     6ba:	0d 92       	st	X+, r0
     6bc:	a4 31       	cpi	r26, 0x14	; 20
     6be:	b1 07       	cpc	r27, r17
     6c0:	d9 f7       	brne	.-10     	; 0x6b8 <__do_copy_data+0xc>

000006c2 <__do_clear_bss>:
     6c2:	23 e0       	ldi	r18, 0x03	; 3
     6c4:	a4 e1       	ldi	r26, 0x14	; 20
     6c6:	b1 e0       	ldi	r27, 0x01	; 1
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <.do_clear_bss_start>

000006ca <.do_clear_bss_loop>:
     6ca:	1d 92       	st	X+, r1

000006cc <.do_clear_bss_start>:
     6cc:	a8 36       	cpi	r26, 0x68	; 104
     6ce:	b2 07       	cpc	r27, r18
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <.do_clear_bss_loop>
     6d2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <main>
     6d6:	0c 94 06 18 	jmp	0x300c	; 0x300c <_exit>

000006da <__bad_interrupt>:
     6da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006de <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	9b 01       	movw	r18, r22
     6e8:	ac 01       	movw	r20, r24
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     6ea:	a0 91 39 03 	lds	r26, 0x0339
     6ee:	b0 91 3a 03 	lds	r27, 0x033A
     6f2:	c0 90 21 01 	lds	r12, 0x0121
     6f6:	d0 90 22 01 	lds	r13, 0x0122
     6fa:	e0 90 23 01 	lds	r14, 0x0123
     6fe:	f0 90 24 01 	lds	r15, 0x0124
     702:	22 50       	subi	r18, 0x02	; 2
     704:	31 09       	sbc	r19, r1
     706:	41 09       	sbc	r20, r1
     708:	51 09       	sbc	r21, r1
     70a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     70e:	6c 0d       	add	r22, r12
     710:	7d 1d       	adc	r23, r13
     712:	8e 1d       	adc	r24, r14
     714:	9f 1d       	adc	r25, r15
}
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	08 95       	ret

00000720 <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     720:	4f 92       	push	r4
     722:	5f 92       	push	r5
     724:	6f 92       	push	r6
     726:	7f 92       	push	r7
     728:	8f 92       	push	r8
     72a:	9f 92       	push	r9
     72c:	af 92       	push	r10
     72e:	bf 92       	push	r11
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	4b 01       	movw	r8, r22
     742:	5c 01       	movw	r10, r24
     744:	c4 2f       	mov	r28, r20
     746:	28 01       	movw	r4, r16
     748:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     74a:	80 91 44 03 	lds	r24, 0x0344
     74e:	90 91 45 03 	lds	r25, 0x0345
     752:	22 e0       	ldi	r18, 0x02	; 2
     754:	88 0c       	add	r8, r8
     756:	99 1c       	adc	r9, r9
     758:	aa 1c       	adc	r10, r10
     75a:	bb 1c       	adc	r11, r11
     75c:	2a 95       	dec	r18
     75e:	d1 f7       	brne	.-12     	; 0x754 <getSetNextCluster+0x34>
     760:	20 91 29 01 	lds	r18, 0x0129
     764:	30 91 2a 01 	lds	r19, 0x012A
     768:	c0 90 3b 03 	lds	r12, 0x033B
     76c:	d0 90 3c 03 	lds	r13, 0x033C
     770:	e0 90 3d 03 	lds	r14, 0x033D
     774:	f0 90 3e 03 	lds	r15, 0x033E
     778:	c8 0e       	add	r12, r24
     77a:	d9 1e       	adc	r13, r25
     77c:	e1 1c       	adc	r14, r1
     77e:	f1 1c       	adc	r15, r1
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     78c:	c2 0e       	add	r12, r18
     78e:	d3 1e       	adc	r13, r19
     790:	e4 1e       	adc	r14, r20
     792:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     794:	20 91 29 01 	lds	r18, 0x0129
     798:	30 91 2a 01 	lds	r19, 0x012A
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	c5 01       	movw	r24, r10
     7a2:	b4 01       	movw	r22, r8
     7a4:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     7a8:	4b 01       	movw	r8, r22
     7aa:	5c 01       	movw	r10, r24
     7ac:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
     7b6:	88 23       	and	r24, r24
     7b8:	11 f0       	breq	.+4      	; 0x7be <getSetNextCluster+0x9e>
     7ba:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     7bc:	c1 f7       	brne	.-16     	; 0x7ae <getSetNextCluster+0x8e>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     7be:	f4 01       	movw	r30, r8
     7c0:	e7 5c       	subi	r30, 0xC7	; 199
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254

if(get_set == GET)
     7c4:	c1 11       	cpse	r28, r1
     7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <getSetNextCluster+0xb4>
  return ((*FATEntryValue) & 0x0fffffff);
     7c8:	60 81       	ld	r22, Z
     7ca:	71 81       	ldd	r23, Z+1	; 0x01
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	9f 70       	andi	r25, 0x0F	; 15
     7d2:	0b c0       	rjmp	.+22     	; 0x7ea <getSetNextCluster+0xca>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     7d4:	40 82       	st	Z, r4
     7d6:	51 82       	std	Z+1, r5	; 0x01
     7d8:	62 82       	std	Z+2, r6	; 0x02
     7da:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     7dc:	c7 01       	movw	r24, r14
     7de:	b6 01       	movw	r22, r12
     7e0:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>

return (0);
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	cb 01       	movw	r24, r22
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	7f 90       	pop	r7
     804:	6f 90       	pop	r6
     806:	5f 90       	pop	r5
     808:	4f 90       	pop	r4
     80a:	08 95       	ret

0000080c <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <getSetFreeCluster+0x12>
     81e:	00 d0       	rcall	.+0      	; 0x820 <getSetFreeCluster+0x14>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	18 2f       	mov	r17, r24
     826:	06 2f       	mov	r16, r22
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     828:	60 91 3b 03 	lds	r22, 0x033B
     82c:	70 91 3c 03 	lds	r23, 0x033C
     830:	80 91 3d 03 	lds	r24, 0x033D
     834:	90 91 3e 03 	lds	r25, 0x033E
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	8f 4f       	sbci	r24, 0xFF	; 255
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	29 83       	std	Y+1, r18	; 0x01
     842:	3a 83       	std	Y+2, r19	; 0x02
     844:	4b 83       	std	Y+3, r20	; 0x03
     846:	5c 83       	std	Y+4, r21	; 0x04
     848:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     84c:	c0 90 39 01 	lds	r12, 0x0139
     850:	d0 90 3a 01 	lds	r13, 0x013A
     854:	e0 90 3b 01 	lds	r14, 0x013B
     858:	f0 90 3c 01 	lds	r15, 0x013C
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	3a 81       	ldd	r19, Y+2	; 0x02
     860:	4b 81       	ldd	r20, Y+3	; 0x03
     862:	5c 81       	ldd	r21, Y+4	; 0x04
     864:	82 e5       	ldi	r24, 0x52	; 82
     866:	c8 16       	cp	r12, r24
     868:	d8 06       	cpc	r13, r24
     86a:	81 e6       	ldi	r24, 0x61	; 97
     86c:	e8 06       	cpc	r14, r24
     86e:	81 e4       	ldi	r24, 0x41	; 65
     870:	f8 06       	cpc	r15, r24
     872:	09 f0       	breq	.+2      	; 0x876 <getSetFreeCluster+0x6a>
     874:	57 c0       	rjmp	.+174    	; 0x924 <__stack+0x25>
     876:	c0 90 1d 03 	lds	r12, 0x031D
     87a:	d0 90 1e 03 	lds	r13, 0x031E
     87e:	e0 90 1f 03 	lds	r14, 0x031F
     882:	f0 90 20 03 	lds	r15, 0x0320
     886:	e2 e7       	ldi	r30, 0x72	; 114
     888:	ce 16       	cp	r12, r30
     88a:	de 06       	cpc	r13, r30
     88c:	e1 e4       	ldi	r30, 0x41	; 65
     88e:	ee 06       	cpc	r14, r30
     890:	e1 e6       	ldi	r30, 0x61	; 97
     892:	fe 06       	cpc	r15, r30
     894:	09 f0       	breq	.+2      	; 0x898 <getSetFreeCluster+0x8c>
     896:	46 c0       	rjmp	.+140    	; 0x924 <__stack+0x25>
     898:	c0 90 35 03 	lds	r12, 0x0335
     89c:	d0 90 36 03 	lds	r13, 0x0336
     8a0:	e0 90 37 03 	lds	r14, 0x0337
     8a4:	f0 90 38 03 	lds	r15, 0x0338
     8a8:	c1 14       	cp	r12, r1
     8aa:	d1 04       	cpc	r13, r1
     8ac:	f5 e5       	ldi	r31, 0x55	; 85
     8ae:	ef 06       	cpc	r14, r31
     8b0:	fa ea       	ldi	r31, 0xAA	; 170
     8b2:	ff 06       	cpc	r15, r31
     8b4:	b9 f5       	brne	.+110    	; 0x924 <__stack+0x25>
  return 0xffffffff;

 if(get_set == GET)
     8b6:	01 11       	cpse	r16, r1
     8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <getSetFreeCluster+0xd6>
 {
   if(totOrNext == TOTAL_FREE)
     8ba:	11 30       	cpi	r17, 0x01	; 1
     8bc:	49 f4       	brne	.+18     	; 0x8d0 <getSetFreeCluster+0xc4>
      return(FS->freeClusterCount);
     8be:	60 91 21 03 	lds	r22, 0x0321
     8c2:	70 91 22 03 	lds	r23, 0x0322
     8c6:	80 91 23 03 	lds	r24, 0x0323
     8ca:	90 91 24 03 	lds	r25, 0x0324
     8ce:	2d c0       	rjmp	.+90     	; 0x92a <__stack+0x2b>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     8d0:	60 91 25 03 	lds	r22, 0x0325
     8d4:	70 91 26 03 	lds	r23, 0x0326
     8d8:	80 91 27 03 	lds	r24, 0x0327
     8dc:	90 91 28 03 	lds	r25, 0x0328
     8e0:	24 c0       	rjmp	.+72     	; 0x92a <__stack+0x2b>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     8e2:	11 30       	cpi	r17, 0x01	; 1
     8e4:	49 f4       	brne	.+18     	; 0x8f8 <getSetFreeCluster+0xec>
      FS->freeClusterCount = FSEntry;
     8e6:	20 93 21 03 	sts	0x0321, r18
     8ea:	30 93 22 03 	sts	0x0322, r19
     8ee:	40 93 23 03 	sts	0x0323, r20
     8f2:	50 93 24 03 	sts	0x0324, r21
     8f6:	08 c0       	rjmp	.+16     	; 0x908 <__stack+0x9>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     8f8:	20 93 25 03 	sts	0x0325, r18
     8fc:	30 93 26 03 	sts	0x0326, r19
     900:	40 93 27 03 	sts	0x0327, r20
     904:	50 93 28 03 	sts	0x0328, r21
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     908:	60 91 3b 03 	lds	r22, 0x033B
     90c:	70 91 3c 03 	lds	r23, 0x033C
     910:	80 91 3d 03 	lds	r24, 0x033D
     914:	90 91 3e 03 	lds	r25, 0x033E
     918:	6f 5f       	subi	r22, 0xFF	; 255
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	8f 4f       	sbci	r24, 0xFF	; 255
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     924:	6f ef       	ldi	r22, 0xFF	; 255
     926:	7f ef       	ldi	r23, 0xFF	; 255
     928:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     94c:	10 92 3b 03 	sts	0x033B, r1
     950:	10 92 3c 03 	sts	0x033C, r1
     954:	10 92 3d 03 	sts	0x033D, r1
     958:	10 92 3e 03 	sts	0x033E, r1

SD_readSingleBlock(0);
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	cb 01       	movw	r24, r22
     962:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     966:	80 91 39 01 	lds	r24, 0x0139
     96a:	8d 7f       	andi	r24, 0xFD	; 253
     96c:	89 3e       	cpi	r24, 0xE9	; 233
     96e:	09 f0       	breq	.+2      	; 0x972 <getBootSectorData+0x2e>
     970:	8a c0       	rjmp	.+276    	; 0xa86 <getBootSectorData+0x142>
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
}

bytesPerSector = bpb->bytesPerSector;
     972:	80 91 44 01 	lds	r24, 0x0144
     976:	90 91 45 01 	lds	r25, 0x0145
     97a:	90 93 2a 01 	sts	0x012A, r25
     97e:	80 93 29 01 	sts	0x0129, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     982:	80 91 46 01 	lds	r24, 0x0146
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	90 93 3a 03 	sts	0x033A, r25
     98c:	80 93 39 03 	sts	0x0339, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     990:	e0 91 47 01 	lds	r30, 0x0147
     994:	f0 91 48 01 	lds	r31, 0x0148
     998:	f0 93 45 03 	sts	0x0345, r31
     99c:	e0 93 44 03 	sts	0x0344, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     9a0:	80 91 65 01 	lds	r24, 0x0165
     9a4:	90 91 66 01 	lds	r25, 0x0166
     9a8:	a0 91 67 01 	lds	r26, 0x0167
     9ac:	b0 91 68 01 	lds	r27, 0x0168
     9b0:	80 93 2f 01 	sts	0x012F, r24
     9b4:	90 93 30 01 	sts	0x0130, r25
     9b8:	a0 93 31 01 	sts	0x0131, r26
     9bc:	b0 93 32 01 	sts	0x0132, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     9c0:	c0 91 44 03 	lds	r28, 0x0344
     9c4:	d0 91 45 03 	lds	r29, 0x0345
     9c8:	a0 91 49 01 	lds	r26, 0x0149
     9cc:	20 91 5d 01 	lds	r18, 0x015D
     9d0:	30 91 5e 01 	lds	r19, 0x015E
     9d4:	40 91 5f 01 	lds	r20, 0x015F
     9d8:	50 91 60 01 	lds	r21, 0x0160
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     9e2:	8b 01       	movw	r16, r22
     9e4:	9c 01       	movw	r18, r24
     9e6:	80 91 55 01 	lds	r24, 0x0155
     9ea:	90 91 56 01 	lds	r25, 0x0156
     9ee:	a0 91 57 01 	lds	r26, 0x0157
     9f2:	b0 91 58 01 	lds	r27, 0x0158
     9f6:	8c 0f       	add	r24, r28
     9f8:	9d 1f       	adc	r25, r29
     9fa:	a1 1d       	adc	r26, r1
     9fc:	b1 1d       	adc	r27, r1
     9fe:	80 0f       	add	r24, r16
     a00:	91 1f       	adc	r25, r17
     a02:	a2 1f       	adc	r26, r18
     a04:	b3 1f       	adc	r27, r19
     a06:	80 93 21 01 	sts	0x0121, r24
     a0a:	90 93 22 01 	sts	0x0122, r25
     a0e:	a0 93 23 01 	sts	0x0123, r26
     a12:	b0 93 24 01 	sts	0x0124, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a16:	40 91 39 03 	lds	r20, 0x0339
     a1a:	50 91 3a 03 	lds	r21, 0x033A
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     a1e:	60 91 59 01 	lds	r22, 0x0159
     a22:	70 91 5a 01 	lds	r23, 0x015A
     a26:	80 91 5b 01 	lds	r24, 0x015B
     a2a:	90 91 5c 01 	lds	r25, 0x015C
     a2e:	6e 1b       	sub	r22, r30
     a30:	7f 0b       	sbc	r23, r31
     a32:	81 09       	sbc	r24, r1
     a34:	91 09       	sbc	r25, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     a36:	60 1b       	sub	r22, r16
     a38:	71 0b       	sbc	r23, r17
     a3a:	82 0b       	sbc	r24, r18
     a3c:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a3e:	9a 01       	movw	r18, r20
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     a48:	20 93 2b 01 	sts	0x012B, r18
     a4c:	30 93 2c 01 	sts	0x012C, r19
     a50:	40 93 2d 01 	sts	0x012D, r20
     a54:	50 93 2e 01 	sts	0x012E, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a9 01       	movw	r20, r18
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
     a66:	00 91 2b 01 	lds	r16, 0x012B
     a6a:	10 91 2c 01 	lds	r17, 0x012C
     a6e:	20 91 2d 01 	lds	r18, 0x012D
     a72:	30 91 2e 01 	lds	r19, 0x012E
     a76:	06 17       	cp	r16, r22
     a78:	17 07       	cpc	r17, r23
     a7a:	28 07       	cpc	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	20 f5       	brcc	.+72     	; 0xac8 <getBootSectorData+0x184>
     freeClusterCountUpdated = 0;
     a80:	10 92 4b 03 	sts	0x034B, r1
     a84:	24 c0       	rjmp	.+72     	; 0xace <getBootSectorData+0x18a>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     a86:	80 91 37 03 	lds	r24, 0x0337
     a8a:	90 91 38 03 	lds	r25, 0x0338
     a8e:	85 35       	cpi	r24, 0x55	; 85
     a90:	9a 4a       	sbci	r25, 0xAA	; 170
     a92:	11 f0       	breq	.+4      	; 0xa98 <getBootSectorData+0x154>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	1c c0       	rjmp	.+56     	; 0xad0 <getBootSectorData+0x18c>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     a98:	60 91 ff 02 	lds	r22, 0x02FF
     a9c:	70 91 00 03 	lds	r23, 0x0300
     aa0:	80 91 01 03 	lds	r24, 0x0301
     aa4:	90 91 02 03 	lds	r25, 0x0302
     aa8:	60 93 3b 03 	sts	0x033B, r22
     aac:	70 93 3c 03 	sts	0x033C, r23
     ab0:	80 93 3d 03 	sts	0x033D, r24
     ab4:	90 93 3e 03 	sts	0x033E, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     ab8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     abc:	80 91 39 01 	lds	r24, 0x0139
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	89 3e       	cpi	r24, 0xE9	; 233
     ac4:	39 f7       	brne	.-50     	; 0xa94 <getBootSectorData+0x150>
     ac6:	55 cf       	rjmp	.-342    	; 0x972 <getBootSectorData+0x2e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 4b 03 	sts	0x034B, r24
return 0;
     ace:	80 e0       	ldi	r24, 0x00	; 0
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	2b 97       	sbiw	r28, 0x0b	; 11
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     af0:	40 e0       	ldi	r20, 0x00	; 0
if(fileName[j] == '.') break;
     af2:	21 91       	ld	r18, Z+
     af4:	2e 32       	cpi	r18, 0x2E	; 46
     af6:	21 f0       	breq	.+8      	; 0xb00 <convertFileName+0x26>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     af8:	4f 5f       	subi	r20, 0xFF	; 255
     afa:	4c 30       	cpi	r20, 0x0C	; 12
     afc:	d1 f7       	brne	.-12     	; 0xaf2 <convertFileName+0x18>
     afe:	09 c0       	rjmp	.+18     	; 0xb12 <convertFileName+0x38>
     b00:	54 2f       	mov	r21, r20
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     b02:	49 30       	cpi	r20, 0x09	; 9
     b04:	30 f4       	brcc	.+12     	; 0xb12 <convertFileName+0x38>
     b06:	9e 01       	movw	r18, r28
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	f9 01       	movw	r30, r18
     b0e:	dc 01       	movw	r26, r24
     b10:	06 c0       	rjmp	.+12     	; 0xb1e <convertFileName+0x44>
     b12:	88 e5       	ldi	r24, 0x58	; 88
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	40 c0       	rjmp	.+128    	; 0xb9e <convertFileName+0xc4>
     b1e:	6e 2f       	mov	r22, r30
     b20:	62 1b       	sub	r22, r18

for(k=0; k<j; k++) //setting file name
     b22:	64 17       	cp	r22, r20
     b24:	18 f4       	brcc	.+6      	; 0xb2c <convertFileName+0x52>
  fileNameFAT[k] = fileName[k];
     b26:	6d 91       	ld	r22, X+
     b28:	61 93       	st	Z+, r22
     b2a:	f9 cf       	rjmp	.-14     	; 0xb1e <convertFileName+0x44>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     b2c:	60 e2       	ldi	r22, 0x20	; 32
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b2e:	48 30       	cpi	r20, 0x08	; 8
     b30:	31 f0       	breq	.+12     	; 0xb3e <convertFileName+0x64>
  fileNameFAT[k] = ' ';
     b32:	f9 01       	movw	r30, r18
     b34:	e4 0f       	add	r30, r20
     b36:	f1 1d       	adc	r31, r1
     b38:	60 83       	st	Z, r22
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b3a:	4f 5f       	subi	r20, 0xFF	; 255
     b3c:	f8 cf       	rjmp	.-16     	; 0xb2e <convertFileName+0x54>
  fileNameFAT[k] = ' ';

j++;
     b3e:	5f 5f       	subi	r21, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     b40:	70 e2       	ldi	r23, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     b42:	fc 01       	movw	r30, r24
     b44:	e5 0f       	add	r30, r21
     b46:	f1 1d       	adc	r31, r1
     b48:	60 81       	ld	r22, Z
     b4a:	66 23       	and	r22, r22
     b4c:	31 f0       	breq	.+12     	; 0xb5a <convertFileName+0x80>
    fileNameFAT[k] = fileName[j++];
     b4e:	5f 5f       	subi	r21, 0xFF	; 255
     b50:	f9 01       	movw	r30, r18
     b52:	e4 0f       	add	r30, r20
     b54:	f1 1d       	adc	r31, r1
     b56:	60 83       	st	Z, r22
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <convertFileName+0x90>
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     b5a:	64 2f       	mov	r22, r20
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     b5c:	4f 5f       	subi	r20, 0xFF	; 255
     b5e:	f9 01       	movw	r30, r18
     b60:	e6 0f       	add	r30, r22
     b62:	f1 1d       	adc	r31, r1
     b64:	70 83       	st	Z, r23
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     b66:	4b 30       	cpi	r20, 0x0B	; 11
     b68:	c0 f3       	brcs	.-16     	; 0xb5a <convertFileName+0x80>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     b6a:	4f 5f       	subi	r20, 0xFF	; 255
     b6c:	4b 30       	cpi	r20, 0x0B	; 11
     b6e:	48 f3       	brcs	.-46     	; 0xb42 <convertFileName+0x68>
     b70:	ae 01       	movw	r20, r28
     b72:	44 5f       	subi	r20, 0xF4	; 244
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     b78:	60 81       	ld	r22, Z
     b7a:	7f e9       	ldi	r23, 0x9F	; 159
     b7c:	76 0f       	add	r23, r22
     b7e:	7a 31       	cpi	r23, 0x1A	; 26
     b80:	10 f4       	brcc	.+4      	; 0xb86 <convertFileName+0xac>
    fileNameFAT[j] -= 0x20;
     b82:	60 52       	subi	r22, 0x20	; 32
     b84:	60 83       	st	Z, r22
     b86:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     b88:	e4 17       	cp	r30, r20
     b8a:	f5 07       	cpc	r31, r21
     b8c:	a9 f7       	brne	.-22     	; 0xb78 <convertFileName+0x9e>
     b8e:	dc 01       	movw	r26, r24
     b90:	f9 01       	movw	r30, r18
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     b92:	81 91       	ld	r24, Z+
     b94:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     b96:	e4 17       	cp	r30, r20
     b98:	f5 07       	cpc	r31, r21
     b9a:	d9 f7       	brne	.-10     	; 0xb92 <convertFileName+0xb8>
  fileName[j] = fileNameFAT[j];

return 0;
     b9c:	80 e0       	ldi	r24, 0x00	; 0
}
     b9e:	2b 96       	adiw	r28, 0x0b	; 11
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     bb0:	4f 92       	push	r4
     bb2:	5f 92       	push	r5
     bb4:	6f 92       	push	r6
     bb6:	7f 92       	push	r7
     bb8:	8f 92       	push	r8
     bba:	9f 92       	push	r9
     bbc:	af 92       	push	r10
     bbe:	bf 92       	push	r11
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	6b 01       	movw	r12, r22
     bca:	7c 01       	movw	r14, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     bcc:	80 e8       	ldi	r24, 0x80	; 128
     bce:	c8 22       	and	r12, r24
     bd0:	26 01       	movw	r4, r12
     bd2:	37 01       	movw	r6, r14
     bd4:	32 e0       	ldi	r19, 0x02	; 2
     bd6:	44 0c       	add	r4, r4
     bd8:	55 1c       	adc	r5, r5
     bda:	66 1c       	adc	r6, r6
     bdc:	77 1c       	adc	r7, r7
     bde:	3a 95       	dec	r19
     be0:	d1 f7       	brne	.-12     	; 0xbd6 <searchNextFreeCluster+0x26>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     be2:	80 91 2b 01 	lds	r24, 0x012B
     be6:	90 91 2c 01 	lds	r25, 0x012C
     bea:	a0 91 2d 01 	lds	r26, 0x012D
     bee:	b0 91 2e 01 	lds	r27, 0x012E
     bf2:	c8 16       	cp	r12, r24
     bf4:	d9 06       	cpc	r13, r25
     bf6:	ea 06       	cpc	r14, r26
     bf8:	fb 06       	cpc	r15, r27
     bfa:	08 f0       	brcs	.+2      	; 0xbfe <searchNextFreeCluster+0x4e>
     bfc:	42 c0       	rjmp	.+132    	; 0xc82 <searchNextFreeCluster+0xd2>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     bfe:	80 91 44 03 	lds	r24, 0x0344
     c02:	90 91 45 03 	lds	r25, 0x0345
     c06:	20 91 29 01 	lds	r18, 0x0129
     c0a:	30 91 2a 01 	lds	r19, 0x012A
     c0e:	80 90 3b 03 	lds	r8, 0x033B
     c12:	90 90 3c 03 	lds	r9, 0x033C
     c16:	a0 90 3d 03 	lds	r10, 0x033D
     c1a:	b0 90 3e 03 	lds	r11, 0x033E
     c1e:	88 0e       	add	r8, r24
     c20:	99 1e       	adc	r9, r25
     c22:	a1 1c       	adc	r10, r1
     c24:	b1 1c       	adc	r11, r1
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	c3 01       	movw	r24, r6
     c2c:	b2 01       	movw	r22, r4
     c2e:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     c32:	82 0e       	add	r8, r18
     c34:	93 1e       	adc	r9, r19
     c36:	a4 1e       	adc	r10, r20
     c38:	b5 1e       	adc	r11, r21
      SD_readSingleBlock(sector);
     c3a:	c5 01       	movw	r24, r10
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
     c42:	e9 e3       	ldi	r30, 0x39	; 57
     c44:	f1 e0       	ldi	r31, 0x01	; 1
      for(i=0; i<128; i++)
     c46:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     c48:	81 91       	ld	r24, Z+
     c4a:	91 91       	ld	r25, Z+
     c4c:	a1 91       	ld	r26, Z+
     c4e:	b1 91       	ld	r27, Z+
     c50:	bf 70       	andi	r27, 0x0F	; 15
     c52:	89 2b       	or	r24, r25
     c54:	8a 2b       	or	r24, r26
     c56:	8b 2b       	or	r24, r27
     c58:	39 f4       	brne	.+14     	; 0xc68 <searchNextFreeCluster+0xb8>
            return(cluster+i);
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	62 0f       	add	r22, r18
     c60:	71 1d       	adc	r23, r1
     c62:	81 1d       	adc	r24, r1
     c64:	91 1d       	adc	r25, r1
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	20 38       	cpi	r18, 0x80	; 128
     c6c:	69 f7       	brne	.-38     	; 0xc48 <searchNextFreeCluster+0x98>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     c6e:	80 e8       	ldi	r24, 0x80	; 128
     c70:	c8 0e       	add	r12, r24
     c72:	d1 1c       	adc	r13, r1
     c74:	e1 1c       	adc	r14, r1
     c76:	f1 1c       	adc	r15, r1
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	58 0e       	add	r5, r24
     c7c:	61 1c       	adc	r6, r1
     c7e:	71 1c       	adc	r7, r1
     c80:	b0 cf       	rjmp	.-160    	; 0xbe2 <searchNextFreeCluster+0x32>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	cb 01       	movw	r24, r22
}
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	bf 90       	pop	r11
     c92:	af 90       	pop	r10
     c94:	9f 90       	pop	r9
     c96:	8f 90       	pop	r8
     c98:	7f 90       	pop	r7
     c9a:	6f 90       	pop	r6
     c9c:	5f 90       	pop	r5
     c9e:	4f 90       	pop	r4
     ca0:	08 95       	ret

00000ca2 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	64 97       	sbiw	r28, 0x14	; 20
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	a8 2e       	mov	r10, r24
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     cca:	94 e1       	ldi	r25, 0x14	; 20
     ccc:	e0 e0       	ldi	r30, 0x00	; 0
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	de 01       	movw	r26, r28
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	01 90       	ld	r0, Z+
     cd6:	0d 92       	st	X+, r0
     cd8:	9a 95       	dec	r25
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <displayMemory+0x32>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     cdc:	ec e0       	ldi	r30, 0x0C	; 12
     cde:	be 2e       	mov	r11, r30
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     ce0:	fc e2       	ldi	r31, 0x2C	; 44
     ce2:	9f 2e       	mov	r9, r31
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     ce4:	aa e0       	ldi	r26, 0x0A	; 10
     ce6:	ca 2e       	mov	r12, r26
     ce8:	d1 2c       	mov	r13, r1
     cea:	e1 2c       	mov	r14, r1
     cec:	f1 2c       	mov	r15, r1
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	b8 16       	cp	r11, r24
     cf2:	19 f0       	breq	.+6      	; 0xcfa <displayMemory+0x58>
     cf4:	e9 e0       	ldi	r30, 0x09	; 9
     cf6:	be 12       	cpse	r11, r30
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <displayMemory+0x62>
	{
	   memoryString[i-1] = ',';  
     cfa:	fe 01       	movw	r30, r28
     cfc:	eb 0d       	add	r30, r11
     cfe:	f1 1d       	adc	r31, r1
     d00:	90 82       	st	Z, r9
	   i--;
     d02:	ba 94       	dec	r11
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     d04:	8e 01       	movw	r16, r28
     d06:	0b 0d       	add	r16, r11
     d08:	11 1d       	adc	r17, r1
     d0a:	cb 01       	movw	r24, r22
     d0c:	ba 01       	movw	r22, r20
     d0e:	a7 01       	movw	r20, r14
     d10:	96 01       	movw	r18, r12
     d12:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     d16:	ca 01       	movw	r24, r20
     d18:	60 63       	ori	r22, 0x30	; 48
     d1a:	f8 01       	movw	r30, r16
     d1c:	60 83       	st	Z, r22
    memory /= 10;
     d1e:	a9 01       	movw	r20, r18
     d20:	bc 01       	movw	r22, r24
	if(memory == 0) break;
     d22:	41 15       	cp	r20, r1
     d24:	51 05       	cpc	r21, r1
     d26:	61 05       	cpc	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	11 f0       	breq	.+4      	; 0xd30 <displayMemory+0x8e>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     d2c:	ba 94       	dec	r11
     d2e:	f9 f6       	brne	.-66     	; 0xcee <displayMemory+0x4c>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     d30:	f1 e0       	ldi	r31, 0x01	; 1
     d32:	af 12       	cpse	r10, r31
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <displayMemory+0x98>
     d36:	8b e4       	ldi	r24, 0x4B	; 75
     d38:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <transmitString>
}
     d42:	64 96       	adiw	r28, 0x14	; 20
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	08 95       	ret

00000d66 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5
     d6a:	6f 92       	push	r6
     d6c:	7f 92       	push	r7
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	28 97       	sbiw	r28, 0x08	; 8
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     d92:	20 91 2b 01 	lds	r18, 0x012B
     d96:	30 91 2c 01 	lds	r19, 0x012C
     d9a:	40 91 2d 01 	lds	r20, 0x012D
     d9e:	50 91 2e 01 	lds	r21, 0x012E
     da2:	a0 91 39 03 	lds	r26, 0x0339
     da6:	b0 91 3a 03 	lds	r27, 0x033A
     daa:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	9a e0       	ldi	r25, 0x0A	; 10
     db4:	56 95       	lsr	r21
     db6:	47 95       	ror	r20
     db8:	37 95       	ror	r19
     dba:	27 95       	ror	r18
     dbc:	9a 95       	dec	r25
     dbe:	d1 f7       	brne	.-12     	; 0xdb4 <memoryStatistics+0x4e>
totalMemory *= bytesPerSector;
     dc0:	a0 91 29 01 	lds	r26, 0x0129
     dc4:	b0 91 2a 01 	lds	r27, 0x012A
     dc8:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     dcc:	ab 01       	movw	r20, r22
     dce:	bc 01       	movw	r22, r24

TX_NEWLINE;
     dd0:	8d e0       	ldi	r24, 0x0D	; 13
     dd2:	4d 83       	std	Y+5, r20	; 0x05
     dd4:	5e 83       	std	Y+6, r21	; 0x06
     dd6:	6f 83       	std	Y+7, r22	; 0x07
     dd8:	78 87       	std	Y+8, r23	; 0x08
     dda:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
TX_NEWLINE;
     de4:	8d e0       	ldi	r24, 0x0D	; 13
     de6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     df0:	85 e8       	ldi	r24, 0x85	; 133
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>

displayMemory (HIGH, totalMemory);
     df8:	4d 81       	ldd	r20, Y+5	; 0x05
     dfa:	5e 81       	ldd	r21, Y+6	; 0x06
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	0e 94 51 06 	call	0xca2	; 0xca2 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	a9 01       	movw	r20, r18
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     e18:	80 91 2b 01 	lds	r24, 0x012B
     e1c:	90 91 2c 01 	lds	r25, 0x012C
     e20:	a0 91 2d 01 	lds	r26, 0x012D
     e24:	b0 91 2e 01 	lds	r27, 0x012E
     e28:	8c 15       	cp	r24, r12
     e2a:	9d 05       	cpc	r25, r13
     e2c:	ae 05       	cpc	r26, r14
     e2e:	bf 05       	cpc	r27, r15
     e30:	08 f0       	brcs	.+2      	; 0xe34 <memoryStatistics+0xce>
     e32:	71 c0       	rjmp	.+226    	; 0xf16 <memoryStatistics+0x1b0>
{
   freeClusterCountUpdated = 0;
     e34:	10 92 4b 03 	sts	0x034B, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     e38:	80 90 2f 01 	lds	r8, 0x012F
     e3c:	90 90 30 01 	lds	r9, 0x0130
     e40:	a0 90 31 01 	lds	r10, 0x0131
     e44:	b0 90 32 01 	lds	r11, 0x0132
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	88 0c       	add	r8, r8
     e4c:	99 1c       	adc	r9, r9
     e4e:	aa 1c       	adc	r10, r10
     e50:	bb 1c       	adc	r11, r11
     e52:	8a 95       	dec	r24
     e54:	d1 f7       	brne	.-12     	; 0xe4a <memoryStatistics+0xe4>

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     e56:	19 82       	std	Y+1, r1	; 0x01
     e58:	1a 82       	std	Y+2, r1	; 0x02
     e5a:	1b 82       	std	Y+3, r1	; 0x03
     e5c:	1c 82       	std	Y+4, r1	; 0x04
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     e5e:	c1 2c       	mov	r12, r1
     e60:	d1 2c       	mov	r13, r1
     e62:	76 01       	movw	r14, r12
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     e64:	80 91 44 03 	lds	r24, 0x0344
     e68:	90 91 45 03 	lds	r25, 0x0345
     e6c:	20 91 29 01 	lds	r18, 0x0129
     e70:	30 91 2a 01 	lds	r19, 0x012A
     e74:	40 90 3b 03 	lds	r4, 0x033B
     e78:	50 90 3c 03 	lds	r5, 0x033C
     e7c:	60 90 3d 03 	lds	r6, 0x033D
     e80:	70 90 3e 03 	lds	r7, 0x033E
     e84:	48 0e       	add	r4, r24
     e86:	59 1e       	adc	r5, r25
     e88:	61 1c       	adc	r6, r1
     e8a:	71 1c       	adc	r7, r1
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	c5 01       	movw	r24, r10
     e92:	b4 01       	movw	r22, r8
     e94:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
     e98:	42 0e       	add	r4, r18
     e9a:	53 1e       	adc	r5, r19
     e9c:	64 1e       	adc	r6, r20
     e9e:	75 1e       	adc	r7, r21
      SD_readSingleBlock(sector);
     ea0:	c3 01       	movw	r24, r6
     ea2:	b2 01       	movw	r22, r4
     ea4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
     ea8:	69 e3       	ldi	r22, 0x39	; 57
     eaa:	71 e0       	ldi	r23, 0x01	; 1
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     eac:	fb 01       	movw	r30, r22
     eae:	81 91       	ld	r24, Z+
     eb0:	91 91       	ld	r25, Z+
     eb2:	a1 91       	ld	r26, Z+
     eb4:	b1 91       	ld	r27, Z+
     eb6:	bf 01       	movw	r22, r30
     eb8:	bf 70       	andi	r27, 0x0F	; 15
     eba:	89 2b       	or	r24, r25
     ebc:	8a 2b       	or	r24, r26
     ebe:	8b 2b       	or	r24, r27
     ec0:	29 f4       	brne	.+10     	; 0xecc <memoryStatistics+0x166>
            freeClusters++;;
     ec2:	ff ef       	ldi	r31, 0xFF	; 255
     ec4:	cf 1a       	sub	r12, r31
     ec6:	df 0a       	sbc	r13, r31
     ec8:	ef 0a       	sbc	r14, r31
     eca:	ff 0a       	sbc	r15, r31
        
         totalClusterCount++;
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	3a 81       	ldd	r19, Y+2	; 0x02
     ed0:	4b 81       	ldd	r20, Y+3	; 0x03
     ed2:	5c 81       	ldd	r21, Y+4	; 0x04
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	4f 4f       	sbci	r20, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	29 83       	std	Y+1, r18	; 0x01
     ede:	3a 83       	std	Y+2, r19	; 0x02
     ee0:	4b 83       	std	Y+3, r20	; 0x03
     ee2:	5c 83       	std	Y+4, r21	; 0x04
         if(totalClusterCount == (totalClusters+2)) break;
     ee4:	80 91 2b 01 	lds	r24, 0x012B
     ee8:	90 91 2c 01 	lds	r25, 0x012C
     eec:	a0 91 2d 01 	lds	r26, 0x012D
     ef0:	b0 91 2e 01 	lds	r27, 0x012E
     ef4:	02 96       	adiw	r24, 0x02	; 2
     ef6:	a1 1d       	adc	r26, r1
     ef8:	b1 1d       	adc	r27, r1
     efa:	28 17       	cp	r18, r24
     efc:	39 07       	cpc	r19, r25
     efe:	4a 07       	cpc	r20, r26
     f00:	5b 07       	cpc	r21, r27
     f02:	49 f0       	breq	.+18     	; 0xf16 <memoryStatistics+0x1b0>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     f04:	33 e0       	ldi	r19, 0x03	; 3
     f06:	69 33       	cpi	r22, 0x39	; 57
     f08:	73 07       	cpc	r23, r19
     f0a:	81 f6       	brne	.-96     	; 0xeac <memoryStatistics+0x146>
     f0c:	42 e0       	ldi	r20, 0x02	; 2
     f0e:	94 0e       	add	r9, r20
     f10:	a1 1c       	adc	r10, r1
     f12:	b1 1c       	adc	r11, r1
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
      cluster+=128;
    } 
     f14:	a7 cf       	rjmp	.-178    	; 0xe64 <memoryStatistics+0xfe>
}

if(!freeClusterCountUpdated)
     f16:	80 91 4b 03 	lds	r24, 0x034B
     f1a:	81 11       	cpse	r24, r1
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <memoryStatistics+0x1c4>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     f1e:	a7 01       	movw	r20, r14
     f20:	96 01       	movw	r18, r12
     f22:	61 e0       	ldi	r22, 0x01	; 1
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 4b 03 	sts	0x034B, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     f30:	a0 91 39 03 	lds	r26, 0x0339
     f34:	b0 91 3a 03 	lds	r27, 0x033A
     f38:	a7 01       	movw	r20, r14
     f3a:	96 01       	movw	r18, r12
     f3c:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	ba e0       	ldi	r27, 0x0A	; 10
     f46:	56 95       	lsr	r21
     f48:	47 95       	ror	r20
     f4a:	37 95       	ror	r19
     f4c:	27 95       	ror	r18
     f4e:	ba 95       	dec	r27
     f50:	d1 f7       	brne	.-12     	; 0xf46 <memoryStatistics+0x1e0>
freeMemory *= bytesPerSector ;
     f52:	a0 91 29 01 	lds	r26, 0x0129
     f56:	b0 91 2a 01 	lds	r27, 0x012A
     f5a:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
     f5e:	ab 01       	movw	r20, r22
     f60:	bc 01       	movw	r22, r24
TX_NEWLINE;
     f62:	8d e0       	ldi	r24, 0x0D	; 13
     f64:	4d 83       	std	Y+5, r20	; 0x05
     f66:	5e 83       	std	Y+6, r21	; 0x06
     f68:	6f 83       	std	Y+7, r22	; 0x07
     f6a:	78 87       	std	Y+8, r23	; 0x08
     f6c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
     f70:	8a e0       	ldi	r24, 0x0A	; 10
     f72:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     f76:	86 e7       	ldi	r24, 0x76	; 118
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
displayMemory (HIGH, freeMemory);
     f7e:	4d 81       	ldd	r20, Y+5	; 0x05
     f80:	5e 81       	ldd	r21, Y+6	; 0x06
     f82:	6f 81       	ldd	r22, Y+7	; 0x07
     f84:	78 85       	ldd	r23, Y+8	; 0x08
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 51 06 	call	0xca2	; 0xca2 <displayMemory>
TX_NEWLINE; 
     f8c:	8d e0       	ldi	r24, 0x0D	; 13
     f8e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
     f92:	8a e0       	ldi	r24, 0x0A	; 10
}
     f94:	28 96       	adiw	r28, 0x08	; 8
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	9f 90       	pop	r9
     fb2:	8f 90       	pop	r8
     fb4:	7f 90       	pop	r7
     fb6:	6f 90       	pop	r6
     fb8:	5f 90       	pop	r5
     fba:	4f 90       	pop	r4
freeMemory = freeClusters * sectorPerCluster / 1024;
freeMemory *= bytesPerSector ;
TX_NEWLINE;
transmitString_F(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
TX_NEWLINE; 
     fbc:	0c 94 c6 13 	jmp	0x278c	; 0x278c <transmitByte>

00000fc0 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     fd0:	8a 01       	movw	r16, r20
     fd2:	9b 01       	movw	r18, r22
     fd4:	11 70       	andi	r17, 0x01	; 1
     fd6:	22 27       	eor	r18, r18
     fd8:	33 27       	eor	r19, r19
     fda:	6a 01       	movw	r12, r20
     fdc:	7b 01       	movw	r14, r22
     fde:	49 e0       	ldi	r20, 0x09	; 9
     fe0:	f6 94       	lsr	r15
     fe2:	e7 94       	ror	r14
     fe4:	d7 94       	ror	r13
     fe6:	c7 94       	ror	r12
     fe8:	4a 95       	dec	r20
     fea:	d1 f7       	brne	.-12     	; 0xfe0 <freeMemoryUpdate+0x20>
     fec:	01 2b       	or	r16, r17
     fee:	02 2b       	or	r16, r18
     ff0:	03 2b       	or	r16, r19
     ff2:	29 f0       	breq	.+10     	; 0xffe <freeMemoryUpdate+0x3e>
  else size = (size / 512) +1;
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	c8 1a       	sub	r12, r24
     ff8:	d8 0a       	sbc	r13, r24
     ffa:	e8 0a       	sbc	r14, r24
     ffc:	f8 0a       	sbc	r15, r24
  if((size % 8) == 0) size = size / 8;
     ffe:	b7 01       	movw	r22, r14
    1000:	a6 01       	movw	r20, r12
    1002:	47 70       	andi	r20, 0x07	; 7
    1004:	55 27       	eor	r21, r21
    1006:	66 27       	eor	r22, r22
    1008:	77 27       	eor	r23, r23
    100a:	23 e0       	ldi	r18, 0x03	; 3
    100c:	f6 94       	lsr	r15
    100e:	e7 94       	ror	r14
    1010:	d7 94       	ror	r13
    1012:	c7 94       	ror	r12
    1014:	2a 95       	dec	r18
    1016:	d1 f7       	brne	.-12     	; 0x100c <freeMemoryUpdate+0x4c>
    1018:	45 2b       	or	r20, r21
    101a:	46 2b       	or	r20, r22
    101c:	47 2b       	or	r20, r23
    101e:	29 f0       	breq	.+10     	; 0x102a <freeMemoryUpdate+0x6a>
  else size = (size / 8) +1;
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	c8 1a       	sub	r12, r24
    1024:	d8 0a       	sbc	r13, r24
    1026:	e8 0a       	sbc	r14, r24
    1028:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
    102a:	80 91 4b 03 	lds	r24, 0x034B
    102e:	88 23       	and	r24, r24
    1030:	f9 f0       	breq	.+62     	; 0x1070 <freeMemoryUpdate+0xb0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
  else size = (size / 8) +1;

  if(freeClusterCountUpdated)
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
    1044:	c1 11       	cpse	r28, r1
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <freeMemoryUpdate+0x92>
  	   freeClusters = freeClusters + size;
    1048:	2c 0d       	add	r18, r12
    104a:	3d 1d       	adc	r19, r13
    104c:	4e 1d       	adc	r20, r14
    104e:	5f 1d       	adc	r21, r15
    1050:	04 c0       	rjmp	.+8      	; 0x105a <freeMemoryUpdate+0x9a>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    1052:	2c 19       	sub	r18, r12
    1054:	3d 09       	sbc	r19, r13
    1056:	4e 09       	sbc	r20, r14
    1058:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    106c:	0c 94 06 04 	jmp	0x80c	; 0x80c <getSetFreeCluster>
  }
}
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	08 95       	ret

00001080 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    1080:	2f 92       	push	r2
    1082:	3f 92       	push	r3
    1084:	4f 92       	push	r4
    1086:	5f 92       	push	r5
    1088:	6f 92       	push	r6
    108a:	7f 92       	push	r7
    108c:	8f 92       	push	r8
    108e:	9f 92       	push	r9
    1090:	af 92       	push	r10
    1092:	bf 92       	push	r11
    1094:	cf 92       	push	r12
    1096:	df 92       	push	r13
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	2b 97       	sbiw	r28, 0x0b	; 11
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	38 2e       	mov	r3, r24
    10b6:	68 87       	std	Y+8, r22	; 0x08
    10b8:	27 2e       	mov	r2, r23
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    10ba:	c0 90 2f 01 	lds	r12, 0x012F
    10be:	d0 90 30 01 	lds	r13, 0x0130
    10c2:	e0 90 31 01 	lds	r14, 0x0131
    10c6:	f0 90 32 01 	lds	r15, 0x0132
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	83 0d       	add	r24, r3
    10ce:	8f 83       	std	Y+7, r24	; 0x07

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    10d0:	c7 01       	movw	r24, r14
    10d2:	b6 01       	movw	r22, r12
    10d4:	0e 94 6f 03 	call	0x6de	; 0x6de <getFirstSector>
    10d8:	6b 83       	std	Y+3, r22	; 0x03
    10da:	7c 83       	std	Y+4, r23	; 0x04
    10dc:	8d 83       	std	Y+5, r24	; 0x05
    10de:	9e 83       	std	Y+6, r25	; 0x06

   for(sector = 0; sector < sectorPerCluster; sector++)
    10e0:	41 2c       	mov	r4, r1
    10e2:	51 2c       	mov	r5, r1
    10e4:	32 01       	movw	r6, r4
    10e6:	80 91 39 03 	lds	r24, 0x0339
    10ea:	90 91 3a 03 	lds	r25, 0x033A
    10ee:	a0 e0       	ldi	r26, 0x00	; 0
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	48 16       	cp	r4, r24
    10f4:	59 06       	cpc	r5, r25
    10f6:	6a 06       	cpc	r6, r26
    10f8:	7b 06       	cpc	r7, r27
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <findFiles+0x7e>
    10fc:	94 c0       	rjmp	.+296    	; 0x1226 <findFiles+0x1a6>
   {
     SD_readSingleBlock (firstSector + sector);
    10fe:	8b 80       	ldd	r8, Y+3	; 0x03
    1100:	9c 80       	ldd	r9, Y+4	; 0x04
    1102:	ad 80       	ldd	r10, Y+5	; 0x05
    1104:	be 80       	ldd	r11, Y+6	; 0x06
    1106:	84 0c       	add	r8, r4
    1108:	95 1c       	adc	r9, r5
    110a:	a6 1c       	adc	r10, r6
    110c:	b7 1c       	adc	r11, r7
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
    1116:	04 e4       	ldi	r16, 0x44	; 68
    1118:	11 e0       	ldi	r17, 0x01	; 1
	

     for(i=0; i<bytesPerSector; i+=32)
    111a:	a9 e3       	ldi	r26, 0x39	; 57
    111c:	b1 e0       	ldi	r27, 0x01	; 1
    111e:	bb 87       	std	Y+11, r27	; 0x0b
    1120:	aa 87       	std	Y+10, r26	; 0x0a
    1122:	2a 85       	ldd	r18, Y+10	; 0x0a
    1124:	3b 85       	ldd	r19, Y+11	; 0x0b
    1126:	29 53       	subi	r18, 0x39	; 57
    1128:	31 40       	sbci	r19, 0x01	; 1
    112a:	80 91 29 01 	lds	r24, 0x0129
    112e:	90 91 2a 01 	lds	r25, 0x012A
    1132:	28 17       	cp	r18, r24
    1134:	39 07       	cpc	r19, r25
    1136:	08 f0       	brcs	.+2      	; 0x113a <findFiles+0xba>
    1138:	70 c0       	rjmp	.+224    	; 0x121a <findFiles+0x19a>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    113a:	ea 85       	ldd	r30, Y+10	; 0x0a
    113c:	fb 85       	ldd	r31, Y+11	; 0x0b
    113e:	80 81       	ld	r24, Z
    1140:	81 11       	cpse	r24, r1
    1142:	08 c0       	rjmp	.+16     	; 0x1154 <findFiles+0xd4>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	83 0d       	add	r24, r3
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	08 f0       	brcs	.+2      	; 0x114e <findFiles+0xce>
    114c:	88 c0       	rjmp	.+272    	; 0x125e <findFiles+0x1de>
		      transmitString_F(PSTR("File does not exist!"));
    114e:	8c ec       	ldi	r24, 0xCC	; 204
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	83 c0       	rjmp	.+262    	; 0x125a <findFiles+0x1da>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1154:	85 3e       	cpi	r24, 0xE5	; 229
    1156:	09 f4       	brne	.+2      	; 0x115a <findFiles+0xda>
    1158:	58 c0       	rjmp	.+176    	; 0x120a <findFiles+0x18a>
    115a:	d8 01       	movw	r26, r16
    115c:	8c 91       	ld	r24, X
    115e:	8f 30       	cpi	r24, 0x0F	; 15
    1160:	09 f4       	brne	.+2      	; 0x1164 <findFiles+0xe4>
    1162:	53 c0       	rjmp	.+166    	; 0x120a <findFiles+0x18a>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1164:	bf 81       	ldd	r27, Y+7	; 0x07
    1166:	b2 30       	cpi	r27, 0x02	; 2
    1168:	60 f4       	brcc	.+24     	; 0x1182 <findFiles+0x102>
    116a:	e8 85       	ldd	r30, Y+8	; 0x08
    116c:	f2 2d       	mov	r31, r2
    116e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1170:	bb 85       	ldd	r27, Y+11	; 0x0b
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    1172:	9d 91       	ld	r25, X+
    1174:	81 91       	ld	r24, Z+
    1176:	98 13       	cpse	r25, r24
    1178:	48 c0       	rjmp	.+144    	; 0x120a <findFiles+0x18a>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    117a:	a0 17       	cp	r26, r16
    117c:	b1 07       	cpc	r27, r17
    117e:	c9 f7       	brne	.-14     	; 0x1172 <findFiles+0xf2>
    1180:	71 c0       	rjmp	.+226    	; 0x1264 <findFiles+0x1e4>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    1182:	8d e0       	ldi	r24, 0x0D	; 13
    1184:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1188:	8a e0       	ldi	r24, 0x0A	; 10
    118a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    118e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1190:	fb 85       	ldd	r31, Y+11	; 0x0b
    1192:	fa 83       	std	Y+2, r31	; 0x02
    1194:	e9 83       	std	Y+1, r30	; 0x01
			 for(j=0; j<11; j++)
    1196:	90 e0       	ldi	r25, 0x00	; 0
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
    1198:	a9 81       	ldd	r26, Y+1	; 0x01
    119a:	ba 81       	ldd	r27, Y+2	; 0x02
    119c:	8d 91       	ld	r24, X+
    119e:	ba 83       	std	Y+2, r27	; 0x02
    11a0:	a9 83       	std	Y+1, r26	; 0x01
    11a2:	99 87       	std	Y+9, r25	; 0x09
    11a4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    11a8:	99 85       	ldd	r25, Y+9	; 0x09
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	9b 30       	cpi	r25, 0x0B	; 11
    11ae:	41 f0       	breq	.+16     	; 0x11c0 <findFiles+0x140>
		     {
			   if(j == 8) transmitByte(' ');
    11b0:	98 30       	cpi	r25, 0x08	; 8
    11b2:	91 f7       	brne	.-28     	; 0x1198 <findFiles+0x118>
    11b4:	80 e2       	ldi	r24, 0x20	; 32
    11b6:	99 87       	std	Y+9, r25	; 0x09
    11b8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    11bc:	99 85       	ldd	r25, Y+9	; 0x09
    11be:	ec cf       	rjmp	.-40     	; 0x1198 <findFiles+0x118>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    11c0:	8f ea       	ldi	r24, 0xAF	; 175
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    11c8:	f8 01       	movw	r30, r16
    11ca:	80 81       	ld	r24, Z
    11cc:	80 31       	cpi	r24, 0x10	; 16
    11ce:	b1 f0       	breq	.+44     	; 0x11fc <findFiles+0x17c>
    11d0:	88 30       	cpi	r24, 0x08	; 8
    11d2:	b9 f0       	breq	.+46     	; 0x1202 <findFiles+0x182>
			 {
			     transmitString_F (PSTR("FILE" ));
    11d4:	8a ea       	ldi	r24, 0xAA	; 170
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
		         transmitString_F (PSTR("   "));
    11dc:	86 ea       	ldi	r24, 0xA6	; 166
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    11e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    11e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    11e8:	5c 96       	adiw	r26, 0x1c	; 28
    11ea:	4d 91       	ld	r20, X+
    11ec:	5d 91       	ld	r21, X+
    11ee:	6d 91       	ld	r22, X+
    11f0:	7c 91       	ld	r23, X
    11f2:	5f 97       	sbiw	r26, 0x1f	; 31
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 51 06 	call	0xca2	; 0xca2 <displayMemory>
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <findFiles+0x18a>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    11fc:	82 ea       	ldi	r24, 0xA2	; 162
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <findFiles+0x186>
    1202:	8d e9       	ldi	r24, 0x9D	; 157
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    120a:	ea 85       	ldd	r30, Y+10	; 0x0a
    120c:	fb 85       	ldd	r31, Y+11	; 0x0b
    120e:	b0 96       	adiw	r30, 0x20	; 32
    1210:	fb 87       	std	Y+11, r31	; 0x0b
    1212:	ea 87       	std	Y+10, r30	; 0x0a
    1214:	00 5e       	subi	r16, 0xE0	; 224
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	84 cf       	rjmp	.-248    	; 0x1122 <findFiles+0xa2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    121a:	ff ef       	ldi	r31, 0xFF	; 255
    121c:	4f 1a       	sub	r4, r31
    121e:	5f 0a       	sbc	r5, r31
    1220:	6f 0a       	sbc	r6, r31
    1222:	7f 0a       	sbc	r7, r31
    1224:	60 cf       	rjmp	.-320    	; 0x10e6 <findFiles+0x66>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	10 e0       	ldi	r17, 0x00	; 0
    122a:	98 01       	movw	r18, r16
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	c7 01       	movw	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    1236:	6b 01       	movw	r12, r22
    1238:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    123a:	87 ef       	ldi	r24, 0xF7	; 247
    123c:	c8 16       	cp	r12, r24
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	d8 06       	cpc	r13, r24
    1242:	e8 06       	cpc	r14, r24
    1244:	8f e0       	ldi	r24, 0x0F	; 15
    1246:	f8 06       	cpc	r15, r24
    1248:	50 f4       	brcc	.+20     	; 0x125e <findFiles+0x1de>
   	 return 0;
   if(cluster == 0) 
    124a:	c1 14       	cp	r12, r1
    124c:	d1 04       	cpc	r13, r1
    124e:	e1 04       	cpc	r14, r1
    1250:	f1 04       	cpc	r15, r1
    1252:	09 f0       	breq	.+2      	; 0x1256 <findFiles+0x1d6>
    1254:	3d cf       	rjmp	.-390    	; 0x10d0 <findFiles+0x50>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    1256:	84 e8       	ldi	r24, 0x84	; 132
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	ae c0       	rjmp	.+348    	; 0x13c0 <findFiles+0x340>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	39 12       	cpse	r3, r25
    1268:	3b c0       	rjmp	.+118    	; 0x12e0 <findFiles+0x260>
              {
			    appendFileSector = firstSector + sector;
    126a:	80 92 4c 03 	sts	0x034C, r8
    126e:	90 92 4d 03 	sts	0x034D, r9
    1272:	a0 92 4e 03 	sts	0x034E, r10
    1276:	b0 92 4f 03 	sts	0x034F, r11
				appendFileLocation = i;
    127a:	c9 01       	movw	r24, r18
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	80 93 1b 01 	sts	0x011B, r24
    1284:	90 93 1c 01 	sts	0x011C, r25
    1288:	a0 93 1d 01 	sts	0x011D, r26
    128c:	b0 93 1e 01 	sts	0x011E, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    1290:	ea 85       	ldd	r30, Y+10	; 0x0a
    1292:	fb 85       	ldd	r31, Y+11	; 0x0b
    1294:	84 89       	ldd	r24, Z+20	; 0x14
    1296:	95 89       	ldd	r25, Z+21	; 0x15
    1298:	a0 e0       	ldi	r26, 0x00	; 0
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	dc 01       	movw	r26, r24
    129e:	99 27       	eor	r25, r25
    12a0:	88 27       	eor	r24, r24
    12a2:	42 8d       	ldd	r20, Z+26	; 0x1a
    12a4:	53 8d       	ldd	r21, Z+27	; 0x1b
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	84 2b       	or	r24, r20
    12ac:	95 2b       	or	r25, r21
    12ae:	a6 2b       	or	r26, r22
    12b0:	b7 2b       	or	r27, r23
    12b2:	80 93 46 03 	sts	0x0346, r24
    12b6:	90 93 47 03 	sts	0x0347, r25
    12ba:	a0 93 48 03 	sts	0x0348, r26
    12be:	b0 93 49 03 	sts	0x0349, r27
				fileSize = dir->fileSize;
    12c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    12c4:	95 8d       	ldd	r25, Z+29	; 0x1d
    12c6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    12c8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    12ca:	80 93 25 01 	sts	0x0125, r24
    12ce:	90 93 26 01 	sts	0x0126, r25
    12d2:	a0 93 27 01 	sts	0x0127, r26
    12d6:	b0 93 28 01 	sts	0x0128, r27
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    12da:	8a 85       	ldd	r24, Y+10	; 0x0a
    12dc:	9b 85       	ldd	r25, Y+11	; 0x0b
              {
			    appendFileSector = firstSector + sector;
				appendFileLocation = i;
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
				fileSize = dir->fileSize;
			    return (dir);
    12de:	70 c0       	rjmp	.+224    	; 0x13c0 <findFiles+0x340>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    12e0:	8d e0       	ldi	r24, 0x0D	; 13
    12e2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    12e6:	8a e0       	ldi	r24, 0x0A	; 10
    12e8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    12ec:	81 ec       	ldi	r24, 0xC1	; 193
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
				 TX_NEWLINE;
    12f4:	8d e0       	ldi	r24, 0x0D	; 13
    12f6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    12fa:	8a e0       	ldi	r24, 0x0A	; 10
    12fc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
				 TX_NEWLINE;
    1300:	8d e0       	ldi	r24, 0x0D	; 13
    1302:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1306:	8a e0       	ldi	r24, 0x0A	; 10
    1308:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    130c:	aa 85       	ldd	r26, Y+10	; 0x0a
    130e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1310:	54 96       	adiw	r26, 0x14	; 20
    1312:	cd 90       	ld	r12, X+
    1314:	dc 90       	ld	r13, X
    1316:	55 97       	sbiw	r26, 0x15	; 21
    1318:	e1 2c       	mov	r14, r1
    131a:	f1 2c       	mov	r15, r1
    131c:	76 01       	movw	r14, r12
    131e:	dd 24       	eor	r13, r13
    1320:	cc 24       	eor	r12, r12
    1322:	5a 96       	adiw	r26, 0x1a	; 26
    1324:	8d 91       	ld	r24, X+
    1326:	9c 91       	ld	r25, X
    1328:	5b 97       	sbiw	r26, 0x1b	; 27
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	c8 2a       	or	r12, r24
    1330:	d9 2a       	or	r13, r25
    1332:	ea 2a       	or	r14, r26
    1334:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1336:	85 ee       	ldi	r24, 0xE5	; 229
    1338:	ea 85       	ldd	r30, Y+10	; 0x0a
    133a:	fb 85       	ldd	r31, Y+11	; 0x0b
    133c:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    133e:	c5 01       	movw	r24, r10
    1340:	b4 01       	movw	r22, r8
    1342:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1346:	aa 85       	ldd	r26, Y+10	; 0x0a
    1348:	bb 85       	ldd	r27, Y+11	; 0x0b
    134a:	5c 96       	adiw	r26, 0x1c	; 28
    134c:	4d 91       	ld	r20, X+
    134e:	5d 91       	ld	r21, X+
    1350:	6d 91       	ld	r22, X+
    1352:	7c 91       	ld	r23, X
    1354:	5f 97       	sbiw	r26, 0x1f	; 31
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
				 if(firstCluster < cluster)
    136a:	c6 16       	cp	r12, r22
    136c:	d7 06       	cpc	r13, r23
    136e:	e8 06       	cpc	r14, r24
    1370:	f9 06       	cpc	r15, r25
    1372:	30 f4       	brcc	.+12     	; 0x1380 <findFiles+0x300>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1374:	a7 01       	movw	r20, r14
    1376:	96 01       	movw	r18, r12
    1378:	61 e0       	ldi	r22, 0x01	; 1
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    1380:	00 e0       	ldi	r16, 0x00	; 0
    1382:	10 e0       	ldi	r17, 0x00	; 0
    1384:	98 01       	movw	r18, r16
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    1390:	4b 01       	movw	r8, r22
    1392:	5c 01       	movw	r10, r24
					getSetNextCluster (firstCluster, SET, 0);
    1394:	00 e0       	ldi	r16, 0x00	; 0
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	98 01       	movw	r18, r16
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	c7 01       	movw	r24, r14
    139e:	b6 01       	movw	r22, r12
    13a0:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    13a4:	b7 ef       	ldi	r27, 0xF7	; 247
    13a6:	8b 16       	cp	r8, r27
    13a8:	bf ef       	ldi	r27, 0xFF	; 255
    13aa:	9b 06       	cpc	r9, r27
    13ac:	ab 06       	cpc	r10, r27
    13ae:	bf e0       	ldi	r27, 0x0F	; 15
    13b0:	bb 06       	cpc	r11, r27
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <findFiles+0x33a>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    13b4:	75 01       	movw	r14, r10
    13b6:	64 01       	movw	r12, r8
    13b8:	e3 cf       	rjmp	.-58     	; 0x1380 <findFiles+0x300>
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    13ba:	83 eb       	ldi	r24, 0xB3	; 179
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	4d cf       	rjmp	.-358    	; 0x125a <findFiles+0x1da>
   	 return 0;
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    13c0:	2b 96       	adiw	r28, 0x0b	; 11
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	7f 90       	pop	r7
    13e6:	6f 90       	pop	r6
    13e8:	5f 90       	pop	r5
    13ea:	4f 90       	pop	r4
    13ec:	3f 90       	pop	r3
    13ee:	2f 90       	pop	r2
    13f0:	08 95       	ret

000013f2 <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    13f2:	2f 92       	push	r2
    13f4:	3f 92       	push	r3
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	28 97       	sbiw	r28, 0x08	; 8
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	18 2f       	mov	r17, r24
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1428:	cb 01       	movw	r24, r22
    142a:	6f 83       	std	Y+7, r22	; 0x07
    142c:	78 87       	std	Y+8, r23	; 0x08
    142e:	0e 94 6d 05 	call	0xada	; 0xada <convertFileName>
if(error) return 2;
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	81 11       	cpse	r24, r1
    1438:	86 c0       	rjmp	.+268    	; 0x1546 <readFile+0x154>

dir = findFiles (GET_FILE, fileName); //get the file location
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 40 08 	call	0x1080	; 0x1080 <findFiles>
    1440:	fc 01       	movw	r30, r24
if(dir == 0) 
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	09 f4       	brne	.+2      	; 0x1448 <readFile+0x56>
    1446:	7d c0       	rjmp	.+250    	; 0x1542 <readFile+0x150>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1448:	11 30       	cpi	r17, 0x01	; 1
    144a:	09 f4       	brne	.+2      	; 0x144e <readFile+0x5c>
    144c:	7e c0       	rjmp	.+252    	; 0x154a <readFile+0x158>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    144e:	c4 88       	ldd	r12, Z+20	; 0x14
    1450:	d5 88       	ldd	r13, Z+21	; 0x15
    1452:	e1 2c       	mov	r14, r1
    1454:	f1 2c       	mov	r15, r1
    1456:	76 01       	movw	r14, r12
    1458:	dd 24       	eor	r13, r13
    145a:	cc 24       	eor	r12, r12
    145c:	42 8d       	ldd	r20, Z+26	; 0x1a
    145e:	53 8d       	ldd	r21, Z+27	; 0x1b
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	c4 2a       	or	r12, r20
    1466:	d5 2a       	or	r13, r21
    1468:	e6 2a       	or	r14, r22
    146a:	f7 2a       	or	r15, r23

fileSize = dir->fileSize;
    146c:	44 8c       	ldd	r4, Z+28	; 0x1c
    146e:	55 8c       	ldd	r5, Z+29	; 0x1d
    1470:	66 8c       	ldd	r6, Z+30	; 0x1e
    1472:	77 8c       	ldd	r7, Z+31	; 0x1f

TX_NEWLINE;
    1474:	8d e0       	ldi	r24, 0x0D	; 13
    1476:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    147a:	8a e0       	ldi	r24, 0x0A	; 10
    147c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
TX_NEWLINE;
    1480:	8d e0       	ldi	r24, 0x0D	; 13
    1482:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1486:	8a e0       	ldi	r24, 0x0A	; 10
    1488:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    148c:	81 2c       	mov	r8, r1
    148e:	91 2c       	mov	r9, r1
    1490:	54 01       	movw	r10, r8
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    1492:	c7 01       	movw	r24, r14
    1494:	b6 01       	movw	r22, r12
    1496:	0e 94 6f 03 	call	0x6de	; 0x6de <getFirstSector>
    149a:	69 83       	std	Y+1, r22	; 0x01
    149c:	7a 83       	std	Y+2, r23	; 0x02
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	9c 83       	std	Y+4, r25	; 0x04

  for(j=0; j<sectorPerCluster; j++)
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	80 91 39 03 	lds	r24, 0x0339
    14a8:	90 91 3a 03 	lds	r25, 0x033A
    14ac:	21 2f       	mov	r18, r17
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	28 17       	cp	r18, r24
    14b2:	39 07       	cpc	r19, r25
    14b4:	90 f5       	brcc	.+100    	; 0x151a <readFile+0x128>
  {
    SD_readSingleBlock(firstSector + j);
    14b6:	69 81       	ldd	r22, Y+1	; 0x01
    14b8:	7a 81       	ldd	r23, Y+2	; 0x02
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	61 0f       	add	r22, r17
    14c0:	71 1d       	adc	r23, r1
    14c2:	81 1d       	adc	r24, r1
    14c4:	91 1d       	adc	r25, r1
    14c6:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
    14ca:	b5 01       	movw	r22, r10
    14cc:	a4 01       	movw	r20, r8
    
	for(k=0; k<512; k++)
    14ce:	21 2c       	mov	r2, r1
    14d0:	31 2c       	mov	r3, r1
    {
      transmitByte(buffer[k]);
    14d2:	f1 01       	movw	r30, r2
    14d4:	e7 5c       	subi	r30, 0xC7	; 199
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	80 81       	ld	r24, Z
    14da:	4d 83       	std	Y+5, r20	; 0x05
    14dc:	5e 83       	std	Y+6, r21	; 0x06
    14de:	6f 83       	std	Y+7, r22	; 0x07
    14e0:	78 87       	std	Y+8, r23	; 0x08
    14e2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	88 1a       	sub	r8, r24
    14ea:	98 0a       	sbc	r9, r24
    14ec:	a8 0a       	sbc	r10, r24
    14ee:	b8 0a       	sbc	r11, r24
    14f0:	4d 81       	ldd	r20, Y+5	; 0x05
    14f2:	5e 81       	ldd	r21, Y+6	; 0x06
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	44 15       	cp	r20, r4
    14fa:	55 05       	cpc	r21, r5
    14fc:	66 05       	cpc	r22, r6
    14fe:	77 05       	cpc	r23, r7
    1500:	00 f5       	brcc	.+64     	; 0x1542 <readFile+0x150>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    1502:	ef ef       	ldi	r30, 0xFF	; 255
    1504:	2e 1a       	sub	r2, r30
    1506:	3e 0a       	sbc	r3, r30
    1508:	21 14       	cp	r2, r1
    150a:	f2 e0       	ldi	r31, 0x02	; 2
    150c:	3f 06       	cpc	r3, r31
    150e:	19 f0       	breq	.+6      	; 0x1516 <readFile+0x124>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    1510:	b5 01       	movw	r22, r10
    1512:	a4 01       	movw	r20, r8
    1514:	de cf       	rjmp	.-68     	; 0x14d2 <readFile+0xe0>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1516:	1f 5f       	subi	r17, 0xFF	; 255
    1518:	c5 cf       	rjmp	.-118    	; 0x14a4 <readFile+0xb2>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    151a:	00 e0       	ldi	r16, 0x00	; 0
    151c:	10 e0       	ldi	r17, 0x00	; 0
    151e:	98 01       	movw	r18, r16
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	c7 01       	movw	r24, r14
    1524:	b6 01       	movw	r22, r12
    1526:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    152a:	6b 01       	movw	r12, r22
    152c:	7c 01       	movw	r14, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    152e:	61 15       	cp	r22, r1
    1530:	71 05       	cpc	r23, r1
    1532:	81 05       	cpc	r24, r1
    1534:	91 05       	cpc	r25, r1
    1536:	09 f0       	breq	.+2      	; 0x153a <readFile+0x148>
    1538:	ac cf       	rjmp	.-168    	; 0x1492 <readFile+0xa0>
    153a:	8b e6       	ldi	r24, 0x6B	; 107
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	03 c0       	rjmp	.+6      	; 0x154c <readFile+0x15a>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	01 c0       	rjmp	.+2      	; 0x154c <readFile+0x15a>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    154a:	81 e0       	ldi	r24, 0x01	; 1
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    154c:	28 96       	adiw	r28, 0x08	; 8
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	08 95       	ret

0000157e <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1584:	0e 94 6d 05 	call	0xada	; 0xada <convertFileName>
  if(error) return;
    1588:	81 11       	cpse	r24, r1
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <deleteFile+0x1a>

  findFiles (DELETE, fileName);
    158c:	be 01       	movw	r22, r28
    158e:	82 e0       	ldi	r24, 0x02	; 2
}
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
  unsigned char error;

  error = convertFileName (fileName);
  if(error) return;

  findFiles (DELETE, fileName);
    1594:	0c 94 40 08 	jmp	0x1080	; 0x1080 <findFiles>
}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    159e:	2f 92       	push	r2
    15a0:	3f 92       	push	r3
    15a2:	4f 92       	push	r4
    15a4:	5f 92       	push	r5
    15a6:	6f 92       	push	r6
    15a8:	7f 92       	push	r7
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	28 97       	sbiw	r28, 0x08	; 8
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	9e 83       	std	Y+6, r25	; 0x06
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    15d6:	bc 01       	movw	r22, r24
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <readFile>

if(j == 1) 
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <writeFile+0x46>
    15e2:	55 c0       	rjmp	.+170    	; 0x168e <writeFile+0xf0>
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
    15e4:	81 e3       	ldi	r24, 0x31	; 49
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    15ec:	c0 90 46 03 	lds	r12, 0x0346
    15f0:	d0 90 47 03 	lds	r13, 0x0347
    15f4:	e0 90 48 03 	lds	r14, 0x0348
    15f8:	f0 90 49 03 	lds	r15, 0x0349
  clusterCount=0;
    15fc:	81 2c       	mov	r8, r1
    15fe:	91 2c       	mov	r9, r1
    1600:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    1602:	00 e0       	ldi	r16, 0x00	; 0
    1604:	10 e0       	ldi	r17, 0x00	; 0
    1606:	98 01       	movw	r18, r16
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	c7 01       	movw	r24, r14
    160c:	b6 01       	movw	r22, r12
    160e:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    if(nextCluster == EOF) break;
    1612:	6f 3f       	cpi	r22, 0xFF	; 255
    1614:	2f ef       	ldi	r18, 0xFF	; 255
    1616:	72 07       	cpc	r23, r18
    1618:	82 07       	cpc	r24, r18
    161a:	2f e0       	ldi	r18, 0x0F	; 15
    161c:	92 07       	cpc	r25, r18
    161e:	41 f0       	breq	.+16     	; 0x1630 <writeFile+0x92>
	cluster = nextCluster;
	clusterCount++;
    1620:	4f ef       	ldi	r20, 0xFF	; 255
    1622:	84 1a       	sub	r8, r20
    1624:	94 0a       	sbc	r9, r20
    1626:	a4 0a       	sbc	r10, r20
    1628:	b4 0a       	sbc	r11, r20
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    162a:	6b 01       	movw	r12, r22
    162c:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    162e:	e9 cf       	rjmp	.-46     	; 0x1602 <writeFile+0x64>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    1630:	a0 91 39 03 	lds	r26, 0x0339
    1634:	b0 91 3a 03 	lds	r27, 0x033A
    1638:	20 91 29 01 	lds	r18, 0x0129
    163c:	30 91 2a 01 	lds	r19, 0x012A
    1640:	e0 91 29 01 	lds	r30, 0x0129
    1644:	f0 91 2a 01 	lds	r31, 0x012A
    1648:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__umulhisi3>
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	c5 01       	movw	r24, r10
    1652:	b4 01       	movw	r22, r8
    1654:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__mulsi3>
    1658:	8b 01       	movw	r16, r22
    165a:	9c 01       	movw	r18, r24
    165c:	60 91 25 01 	lds	r22, 0x0125
    1660:	70 91 26 01 	lds	r23, 0x0126
    1664:	80 91 27 01 	lds	r24, 0x0127
    1668:	90 91 28 01 	lds	r25, 0x0128
    166c:	60 1b       	sub	r22, r16
    166e:	71 0b       	sbc	r23, r17
    1670:	82 0b       	sbc	r24, r18
    1672:	93 0b       	sbc	r25, r19
    1674:	9f 01       	movw	r18, r30
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    167e:	a2 2e       	mov	r10, r18
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    1680:	1c 82       	std	Y+4, r1	; 0x04
    1682:	1b 82       	std	Y+3, r1	; 0x03
    1684:	21 2c       	mov	r2, r1
    1686:	31 2c       	mov	r3, r1
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    1688:	88 24       	eor	r8, r8
    168a:	83 94       	inc	r8
    168c:	4f c0       	rjmp	.+158    	; 0x172c <writeFile+0x18e>
//  appendFile();
//  return;
}
else if(j == 2) 
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	09 f4       	brne	.+2      	; 0x1694 <writeFile+0xf6>
    1692:	2c c3       	rjmp	.+1624   	; 0x1cec <writeFile+0x74e>
{
   return; //invalid file name
}
else
{
  TX_NEWLINE;
    1694:	8d e0       	ldi	r24, 0x0D	; 13
    1696:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    169a:	8a e0       	ldi	r24, 0x0A	; 10
    169c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	a9 01       	movw	r20, r18
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>
  if(cluster > totalClusters)
    16b6:	00 91 2b 01 	lds	r16, 0x012B
    16ba:	10 91 2c 01 	lds	r17, 0x012C
    16be:	20 91 2d 01 	lds	r18, 0x012D
    16c2:	30 91 2e 01 	lds	r19, 0x012E
    16c6:	06 17       	cp	r16, r22
    16c8:	17 07       	cpc	r17, r23
    16ca:	28 07       	cpc	r18, r24
    16cc:	39 07       	cpc	r19, r25
    16ce:	40 f4       	brcc	.+16     	; 0x16e0 <writeFile+0x142>
     cluster = rootCluster;
    16d0:	60 91 2f 01 	lds	r22, 0x012F
    16d4:	70 91 30 01 	lds	r23, 0x0130
    16d8:	80 91 31 01 	lds	r24, 0x0131
    16dc:	90 91 32 01 	lds	r25, 0x0132

  cluster = searchNextFreeCluster(cluster);
    16e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <searchNextFreeCluster>
    16e4:	6b 01       	movw	r12, r22
    16e6:	7c 01       	movw	r14, r24
   if(cluster == 0)
    16e8:	61 15       	cp	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	81 05       	cpc	r24, r1
    16ee:	91 05       	cpc	r25, r1
    16f0:	49 f4       	brne	.+18     	; 0x1704 <writeFile+0x166>
   {
      TX_NEWLINE;
    16f2:	8d e0       	ldi	r24, 0x0D	; 13
    16f4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    16fe:	8e e0       	ldi	r24, 0x0E	; 14
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	d7 c2       	rjmp	.+1454   	; 0x1cb2 <writeFile+0x714>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    1704:	0f ef       	ldi	r16, 0xFF	; 255
    1706:	1f ef       	ldi	r17, 0xFF	; 255
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	3f e0       	ldi	r19, 0x0F	; 15
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    1712:	17 01       	movw	r2, r14
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1714:	dc 82       	std	Y+4, r13	; 0x04
    1716:	cb 82       	std	Y+3, r12	; 0x03
  fileSize = 0;
    1718:	10 92 25 01 	sts	0x0125, r1
    171c:	10 92 26 01 	sts	0x0126, r1
    1720:	10 92 27 01 	sts	0x0127, r1
    1724:	10 92 28 01 	sts	0x0128, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    1728:	a1 2c       	mov	r10, r1
    172a:	81 2c       	mov	r8, r1
    172c:	b1 2c       	mov	r11, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    172e:	4a 2c       	mov	r4, r10
    1730:	51 2c       	mov	r5, r1
    1732:	61 2c       	mov	r6, r1
    1734:	71 2c       	mov	r7, r1



while(1)
{
   if(start)
    1736:	88 20       	and	r8, r8
    1738:	f1 f1       	breq	.+124    	; 0x17b6 <writeFile+0x218>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    173a:	c7 01       	movw	r24, r14
    173c:	b6 01       	movw	r22, r12
    173e:	0e 94 6f 03 	call	0x6de	; 0x6de <getFirstSector>
    1742:	64 0d       	add	r22, r4
    1744:	75 1d       	adc	r23, r5
    1746:	86 1d       	adc	r24, r6
    1748:	97 1d       	adc	r25, r7
    174a:	60 93 35 01 	sts	0x0135, r22
    174e:	70 93 36 01 	sts	0x0136, r23
    1752:	80 93 37 01 	sts	0x0137, r24
    1756:	90 93 38 01 	sts	0x0138, r25
	  SD_readSingleBlock (startBlock);
    175a:	60 91 35 01 	lds	r22, 0x0135
    175e:	70 91 36 01 	lds	r23, 0x0136
    1762:	80 91 37 01 	lds	r24, 0x0137
    1766:	90 91 38 01 	lds	r25, 0x0138
    176a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    176e:	20 91 29 01 	lds	r18, 0x0129
    1772:	30 91 2a 01 	lds	r19, 0x012A
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	60 91 25 01 	lds	r22, 0x0125
    177e:	70 91 26 01 	lds	r23, 0x0126
    1782:	80 91 27 01 	lds	r24, 0x0127
    1786:	90 91 28 01 	lds	r25, 0x0128
    178a:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    178e:	3b 01       	movw	r6, r22
    1790:	21 c0       	rjmp	.+66     	; 0x17d4 <writeFile+0x236>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    1792:	8b 01       	movw	r16, r22
    1794:	9c 01       	movw	r18, r24
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	c7 01       	movw	r24, r14
    179a:	b6 01       	movw	r22, r12
    179c:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    17a0:	0f ef       	ldi	r16, 0xFF	; 255
    17a2:	1f ef       	ldi	r17, 0xFF	; 255
    17a4:	2f ef       	ldi	r18, 0xFF	; 255
    17a6:	3f e0       	ldi	r19, 0x0F	; 15
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	c3 01       	movw	r24, r6
    17ac:	b2 01       	movw	r22, r4
    17ae:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
}        
    17b2:	73 01       	movw	r14, r6
    17b4:	62 01       	movw	r12, r4
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    17b6:	c7 01       	movw	r24, r14
    17b8:	b6 01       	movw	r22, r12
    17ba:	0e 94 6f 03 	call	0x6de	; 0x6de <getFirstSector>
    17be:	60 93 35 01 	sts	0x0135, r22
    17c2:	70 93 36 01 	sts	0x0136, r23
    17c6:	80 93 37 01 	sts	0x0137, r24
    17ca:	90 93 38 01 	sts	0x0138, r25
	  i=0;
    17ce:	61 2c       	mov	r6, r1
    17d0:	71 2c       	mov	r7, r1
	  j=0;
    17d2:	a1 2c       	mov	r10, r1
   }
   

   TX_NEWLINE;
    17d4:	8d e0       	ldi	r24, 0x0D	; 13
    17d6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    17da:	8a e0       	ldi	r24, 0x0A	; 10
    17dc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    17e0:	84 ef       	ldi	r24, 0xF4	; 244
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	b8 12       	cpse	r11, r24
    17ec:	1e c0       	rjmp	.+60     	; 0x182a <writeFile+0x28c>
	 {
	 	transmitByte ('\n');
    17ee:	8a e0       	ldi	r24, 0x0A	; 10
    17f0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    17f4:	f3 01       	movw	r30, r6
    17f6:	e7 5c       	subi	r30, 0xC7	; 199
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	8a e0       	ldi	r24, 0x0A	; 10
    17fc:	80 83       	st	Z, r24
		fileSize++;
    17fe:	80 91 25 01 	lds	r24, 0x0125
    1802:	90 91 26 01 	lds	r25, 0x0126
    1806:	a0 91 27 01 	lds	r26, 0x0127
    180a:	b0 91 28 01 	lds	r27, 0x0128
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	a1 1d       	adc	r26, r1
    1812:	b1 1d       	adc	r27, r1
    1814:	80 93 25 01 	sts	0x0125, r24
    1818:	90 93 26 01 	sts	0x0126, r25
    181c:	a0 93 27 01 	sts	0x0127, r26
    1820:	b0 93 28 01 	sts	0x0128, r27
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1824:	d3 01       	movw	r26, r6
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	3d 01       	movw	r6, r26
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    182a:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    182e:	98 2e       	mov	r9, r24
	 if(data == 0x08)	//'Back Space' key pressed
    1830:	b8 e0       	ldi	r27, 0x08	; 8
    1832:	8b 13       	cpse	r24, r27
    1834:	24 c0       	rjmp	.+72     	; 0x187e <writeFile+0x2e0>
	 { 
	   if(i != 0)
    1836:	61 14       	cp	r6, r1
    1838:	71 04       	cpc	r7, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <writeFile+0x2a0>
    183c:	54 c2       	rjmp	.+1192   	; 0x1ce6 <writeFile+0x748>
	   { 
	     transmitByte(data);
    183e:	88 e0       	ldi	r24, 0x08	; 8
    1840:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
		 transmitByte(' '); 
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	     transmitByte(data); 
    184a:	88 e0       	ldi	r24, 0x08	; 8
    184c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	     i--; 
    1850:	e1 e0       	ldi	r30, 0x01	; 1
    1852:	6e 1a       	sub	r6, r30
    1854:	71 08       	sbc	r7, r1
		 fileSize--;
    1856:	80 91 25 01 	lds	r24, 0x0125
    185a:	90 91 26 01 	lds	r25, 0x0126
    185e:	a0 91 27 01 	lds	r26, 0x0127
    1862:	b0 91 28 01 	lds	r27, 0x0128
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	a1 09       	sbc	r26, r1
    186a:	b1 09       	sbc	r27, r1
    186c:	80 93 25 01 	sts	0x0125, r24
    1870:	90 93 26 01 	sts	0x0126, r25
    1874:	a0 93 27 01 	sts	0x0127, r26
    1878:	b0 93 28 01 	sts	0x0128, r27
    187c:	34 c2       	rjmp	.+1128   	; 0x1ce6 <writeFile+0x748>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    187e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
     buffer[i++] = data;
    1882:	83 01       	movw	r16, r6
    1884:	0f 5f       	subi	r16, 0xFF	; 255
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	f3 01       	movw	r30, r6
    188a:	e7 5c       	subi	r30, 0xC7	; 199
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	90 82       	st	Z, r9
	 fileSize++;
    1890:	80 91 25 01 	lds	r24, 0x0125
    1894:	90 91 26 01 	lds	r25, 0x0126
    1898:	a0 91 27 01 	lds	r26, 0x0127
    189c:	b0 91 28 01 	lds	r27, 0x0128
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	a1 1d       	adc	r26, r1
    18a4:	b1 1d       	adc	r27, r1
    18a6:	80 93 25 01 	sts	0x0125, r24
    18aa:	90 93 26 01 	sts	0x0126, r25
    18ae:	a0 93 27 01 	sts	0x0127, r26
    18b2:	b0 93 28 01 	sts	0x0128, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    18b6:	fd e0       	ldi	r31, 0x0D	; 13
    18b8:	9f 12       	cpse	r9, r31
    18ba:	21 c0       	rjmp	.+66     	; 0x18fe <writeFile+0x360>
     {
        if(i == 512)
    18bc:	01 15       	cp	r16, r1
    18be:	22 e0       	ldi	r18, 0x02	; 2
    18c0:	12 07       	cpc	r17, r18
    18c2:	19 f1       	breq	.+70     	; 0x190a <writeFile+0x36c>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    18c4:	8a e0       	ldi	r24, 0x0A	; 10
    18c6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    18ca:	f8 01       	movw	r30, r16
    18cc:	e7 5c       	subi	r30, 0xC7	; 199
    18ce:	fe 4f       	sbci	r31, 0xFE	; 254
    18d0:	8a e0       	ldi	r24, 0x0A	; 10
    18d2:	80 83       	st	Z, r24
		   fileSize++;
    18d4:	80 91 25 01 	lds	r24, 0x0125
    18d8:	90 91 26 01 	lds	r25, 0x0126
    18dc:	a0 91 27 01 	lds	r26, 0x0127
    18e0:	b0 91 28 01 	lds	r27, 0x0128
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	a1 1d       	adc	r26, r1
    18e8:	b1 1d       	adc	r27, r1
    18ea:	80 93 25 01 	sts	0x0125, r24
    18ee:	90 93 26 01 	sts	0x0126, r25
    18f2:	a0 93 27 01 	sts	0x0127, r26
    18f6:	b0 93 28 01 	sts	0x0128, r27
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    18fa:	0f 5f       	subi	r16, 0xFF	; 255
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	b1 2c       	mov	r11, r1
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    1900:	01 15       	cp	r16, r1
    1902:	42 e0       	ldi	r20, 0x02	; 2
    1904:	14 07       	cpc	r17, r20
    1906:	60 f1       	brcs	.+88     	; 0x1960 <writeFile+0x3c2>
    1908:	02 c0       	rjmp	.+4      	; 0x190e <writeFile+0x370>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    190a:	bb 24       	eor	r11, r11
    190c:	b3 94       	inc	r11
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    190e:	60 91 35 01 	lds	r22, 0x0135
    1912:	70 91 36 01 	lds	r23, 0x0136
    1916:	80 91 37 01 	lds	r24, 0x0137
    191a:	90 91 38 01 	lds	r25, 0x0138
    191e:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
       j++;
    1922:	a3 94       	inc	r10
	   if(j == sectorPerCluster) {j = 0; break;}
    1924:	40 91 39 03 	lds	r20, 0x0339
    1928:	50 91 3a 03 	lds	r21, 0x033A
    192c:	2a 2d       	mov	r18, r10
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	24 17       	cp	r18, r20
    1932:	35 07       	cpc	r19, r21
    1934:	d1 f0       	breq	.+52     	; 0x196a <writeFile+0x3cc>
	   startBlock++; 
    1936:	80 91 35 01 	lds	r24, 0x0135
    193a:	90 91 36 01 	lds	r25, 0x0136
    193e:	a0 91 37 01 	lds	r26, 0x0137
    1942:	b0 91 38 01 	lds	r27, 0x0138
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	80 93 35 01 	sts	0x0135, r24
    1950:	90 93 36 01 	sts	0x0136, r25
    1954:	a0 93 37 01 	sts	0x0137, r26
    1958:	b0 93 38 01 	sts	0x0138, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    1960:	8e e7       	ldi	r24, 0x7E	; 126
    1962:	98 16       	cp	r9, r24
    1964:	39 f0       	breq	.+14     	; 0x1974 <writeFile+0x3d6>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1966:	38 01       	movw	r6, r16
    1968:	3f cf       	rjmp	.-386    	; 0x17e8 <writeFile+0x24a>
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');

   if(data == '~') 
    196a:	9e e7       	ldi	r25, 0x7E	; 126
    196c:	99 12       	cpse	r9, r25
    196e:	3f c0       	rjmp	.+126    	; 0x19ee <writeFile+0x450>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1970:	00 e0       	ldi	r16, 0x00	; 0
    1972:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1974:	80 91 25 01 	lds	r24, 0x0125
    1978:	90 91 26 01 	lds	r25, 0x0126
    197c:	a0 91 27 01 	lds	r26, 0x0127
    1980:	b0 91 28 01 	lds	r27, 0x0128
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	a1 09       	sbc	r26, r1
    1988:	b1 09       	sbc	r27, r1
    198a:	80 93 25 01 	sts	0x0125, r24
    198e:	90 93 26 01 	sts	0x0126, r25
    1992:	a0 93 27 01 	sts	0x0127, r26
    1996:	b0 93 28 01 	sts	0x0128, r27
	  i--;
    199a:	01 50       	subi	r16, 0x01	; 1
    199c:	11 09       	sbc	r17, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    199e:	01 15       	cp	r16, r1
    19a0:	a2 e0       	ldi	r26, 0x02	; 2
    19a2:	1a 07       	cpc	r17, r26
    19a4:	38 f4       	brcc	.+14     	; 0x19b4 <writeFile+0x416>
        buffer[i]= 0x00;
    19a6:	f8 01       	movw	r30, r16
    19a8:	e7 5c       	subi	r30, 0xC7	; 199
    19aa:	fe 4f       	sbci	r31, 0xFE	; 254
    19ac:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    19ae:	0f 5f       	subi	r16, 0xFF	; 255
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	f5 cf       	rjmp	.-22     	; 0x199e <writeFile+0x400>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    19b4:	60 91 35 01 	lds	r22, 0x0135
    19b8:	70 91 36 01 	lds	r23, 0x0136
    19bc:	80 91 37 01 	lds	r24, 0x0137
    19c0:	90 91 38 01 	lds	r25, 0x0138
    19c4:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    19c8:	a7 01       	movw	r20, r14
    19ca:	96 01       	movw	r18, r12
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	0e 94 06 04 	call	0x80c	; 0x80c <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    19d4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    19d8:	88 23       	and	r24, r24
    19da:	f1 f0       	breq	.+60     	; 0x1a18 <writeFile+0x47a>
    19dc:	10 92 20 01 	sts	0x0120, r1
    19e0:	10 92 1f 01 	sts	0x011F, r1
    19e4:	10 92 34 01 	sts	0x0134, r1
    19e8:	10 92 33 01 	sts	0x0133, r1
    19ec:	15 c0       	rjmp	.+42     	; 0x1a18 <writeFile+0x47a>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    19ee:	c7 01       	movw	r24, r14
    19f0:	b6 01       	movw	r22, r12
    19f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <searchNextFreeCluster>
    19f6:	2b 01       	movw	r4, r22
    19f8:	3c 01       	movw	r6, r24

   if(cluster == 0)
    19fa:	61 15       	cp	r22, r1
    19fc:	71 05       	cpc	r23, r1
    19fe:	81 05       	cpc	r24, r1
    1a00:	91 05       	cpc	r25, r1
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <writeFile+0x468>
    1a04:	c6 ce       	rjmp	.-628    	; 0x1792 <writeFile+0x1f4>
   {
      TX_NEWLINE;
    1a06:	8d e0       	ldi	r24, 0x0D	; 13
    1a08:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1a0c:	8a e0       	ldi	r24, 0x0A	; 10
    1a0e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    1a12:	82 ee       	ldi	r24, 0xE2	; 226
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	4d c1       	rjmp	.+666    	; 0x1cb2 <writeFile+0x714>
getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
    1a18:	88 20       	and	r8, r8
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <writeFile+0x480>
    1a1c:	6b c0       	rjmp	.+214    	; 0x1af4 <writeFile+0x556>
{
  SD_readSingleBlock (appendFileSector);    
    1a1e:	60 91 4c 03 	lds	r22, 0x034C
    1a22:	70 91 4d 03 	lds	r23, 0x034D
    1a26:	80 91 4e 03 	lds	r24, 0x034E
    1a2a:	90 91 4f 03 	lds	r25, 0x034F
    1a2e:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1a32:	e0 91 1b 01 	lds	r30, 0x011B
    1a36:	f0 91 1c 01 	lds	r31, 0x011C
    1a3a:	e7 5c       	subi	r30, 0xC7	; 199
    1a3c:	fe 4f       	sbci	r31, 0xFE	; 254

  dir->lastAccessDate = 0;   //date of last access ignored
    1a3e:	13 8a       	std	Z+19, r1	; 0x13
    1a40:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    1a42:	80 91 33 01 	lds	r24, 0x0133
    1a46:	90 91 34 01 	lds	r25, 0x0134
    1a4a:	97 8b       	std	Z+23, r25	; 0x17
    1a4c:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    1a4e:	80 91 1f 01 	lds	r24, 0x011F
    1a52:	90 91 20 01 	lds	r25, 0x0120
    1a56:	91 8f       	std	Z+25, r25	; 0x19
    1a58:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    1a5a:	80 91 25 01 	lds	r24, 0x0125
    1a5e:	90 91 26 01 	lds	r25, 0x0126
    1a62:	a0 91 27 01 	lds	r26, 0x0127
    1a66:	b0 91 28 01 	lds	r27, 0x0128
    1a6a:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a6c:	55 8d       	ldd	r21, Z+29	; 0x1d
    1a6e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1a70:	77 8d       	ldd	r23, Z+31	; 0x1f
    1a72:	6c 01       	movw	r12, r24
    1a74:	7d 01       	movw	r14, r26
    1a76:	c4 1a       	sub	r12, r20
    1a78:	d5 0a       	sbc	r13, r21
    1a7a:	e6 0a       	sbc	r14, r22
    1a7c:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    1a7e:	84 8f       	std	Z+28, r24	; 0x1c
    1a80:	95 8f       	std	Z+29, r25	; 0x1d
    1a82:	a6 8f       	std	Z+30, r26	; 0x1e
    1a84:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1a86:	60 91 4c 03 	lds	r22, 0x034C
    1a8a:	70 91 4d 03 	lds	r23, 0x034D
    1a8e:	80 91 4e 03 	lds	r24, 0x034E
    1a92:	90 91 4f 03 	lds	r25, 0x034F
    1a96:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	a6 01       	movw	r20, r12
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <freeMemoryUpdate>

  
  TX_NEWLINE;
    1aa4:	8d e0       	ldi	r24, 0x0D	; 13
    1aa6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
    1aac:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1ab0:	82 ed       	ldi	r24, 0xD2	; 210
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  TX_NEWLINE;
    1ab8:	8d e0       	ldi	r24, 0x0D	; 13
    1aba:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1abe:	8a e0       	ldi	r24, 0x0A	; 10
   
   prevCluster = cluster;
 }
 
 return;
}
    1ac0:	28 96       	adiw	r28, 0x08	; 8
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	bf 90       	pop	r11
    1ade:	af 90       	pop	r10
    1ae0:	9f 90       	pop	r9
    1ae2:	8f 90       	pop	r8
    1ae4:	7f 90       	pop	r7
    1ae6:	6f 90       	pop	r6
    1ae8:	5f 90       	pop	r5
    1aea:	4f 90       	pop	r4
    1aec:	3f 90       	pop	r3
    1aee:	2f 90       	pop	r2
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;

  
  TX_NEWLINE;
  transmitString_F(PSTR(" File appended!"));
  TX_NEWLINE;
    1af0:	0c 94 c6 13 	jmp	0x278c	; 0x278c <transmitByte>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1af4:	c0 90 2f 01 	lds	r12, 0x012F
    1af8:	d0 90 30 01 	lds	r13, 0x0130
    1afc:	e0 90 31 01 	lds	r14, 0x0131
    1b00:	f0 90 32 01 	lds	r15, 0x0132
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    1b04:	1a 82       	std	Y+2, r1	; 0x02

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    1b06:	c7 01       	movw	r24, r14
    1b08:	b6 01       	movw	r22, r12
    1b0a:	0e 94 6f 03 	call	0x6de	; 0x6de <getFirstSector>
    1b0e:	2b 01       	movw	r4, r22
    1b10:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	80 91 39 03 	lds	r24, 0x0339
    1b18:	90 91 3a 03 	lds	r25, 0x033A
    1b1c:	49 81       	ldd	r20, Y+1	; 0x01
    1b1e:	24 2f       	mov	r18, r20
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <writeFile+0x58c>
    1b28:	87 c0       	rjmp	.+270    	; 0x1c38 <writeFile+0x69a>
   {
     SD_readSingleBlock (firstSector + sector);
    1b2a:	53 01       	movw	r10, r6
    1b2c:	42 01       	movw	r8, r4
    1b2e:	29 81       	ldd	r18, Y+1	; 0x01
    1b30:	82 0e       	add	r8, r18
    1b32:	91 1c       	adc	r9, r1
    1b34:	a1 1c       	adc	r10, r1
    1b36:	b1 1c       	adc	r11, r1
    1b38:	c5 01       	movw	r24, r10
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
    1b40:	89 e3       	ldi	r24, 0x39	; 57
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	8f 83       	std	Y+7, r24	; 0x07
	

     for(i=0; i<bytesPerSector; i+=32)
    1b48:	00 e0       	ldi	r16, 0x00	; 0
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	80 91 29 01 	lds	r24, 0x0129
    1b50:	90 91 2a 01 	lds	r25, 0x012A
    1b54:	08 17       	cp	r16, r24
    1b56:	19 07       	cpc	r17, r25
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <writeFile+0x5be>
    1b5a:	6a c0       	rjmp	.+212    	; 0x1c30 <writeFile+0x692>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	91 11       	cpse	r25, r1
    1b60:	c5 c0       	rjmp	.+394    	; 0x1cec <writeFile+0x74e>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1b62:	af 81       	ldd	r26, Y+7	; 0x07
    1b64:	b8 85       	ldd	r27, Y+8	; 0x08
    1b66:	8c 91       	ld	r24, X
    1b68:	88 23       	and	r24, r24
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <writeFile+0x5d4>
    1b6c:	85 3e       	cpi	r24, 0xE5	; 229
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <writeFile+0x5d4>
    1b70:	57 c0       	rjmp	.+174    	; 0x1c20 <writeFile+0x682>
    1b72:	ed 81       	ldd	r30, Y+5	; 0x05
    1b74:	fe 81       	ldd	r31, Y+6	; 0x06
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
   
   prevCluster = cluster;
    1b76:	af 81       	ldd	r26, Y+7	; 0x07
    1b78:	b8 85       	ldd	r27, Y+8	; 0x08
    1b7a:	8b e0       	ldi	r24, 0x0B	; 11
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1b7c:	91 91       	ld	r25, Z+
    1b7e:	9d 93       	st	X+, r25
    1b80:	81 50       	subi	r24, 0x01	; 1
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <writeFile+0x5de>
    1b84:	f8 01       	movw	r30, r16
    1b86:	e7 5c       	subi	r30, 0xC7	; 199
    1b88:	fe 4f       	sbci	r31, 0xFE	; 254
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1b8a:	b0 e2       	ldi	r27, 0x20	; 32
    1b8c:	b3 87       	std	Z+11, r27	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    1b8e:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    1b90:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    1b92:	80 91 33 01 	lds	r24, 0x0133
    1b96:	90 91 34 01 	lds	r25, 0x0134
    1b9a:	ef 81       	ldd	r30, Y+7	; 0x07
    1b9c:	f8 85       	ldd	r31, Y+8	; 0x08
    1b9e:	97 87       	std	Z+15, r25	; 0x0f
    1ba0:	86 87       	std	Z+14, r24	; 0x0e
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    1ba2:	20 91 1f 01 	lds	r18, 0x011F
    1ba6:	30 91 20 01 	lds	r19, 0x0120
    1baa:	31 8b       	std	Z+17, r19	; 0x11
    1bac:	20 8b       	std	Z+16, r18	; 0x10
		  dir->lastAccessDate = 0;   	//date of last access ignored
    1bae:	13 8a       	std	Z+19, r1	; 0x13
    1bb0:	12 8a       	std	Z+18, r1	; 0x12
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    1bb2:	97 8b       	std	Z+23, r25	; 0x17
    1bb4:	86 8b       	std	Z+22, r24	; 0x16
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    1bb6:	31 8f       	std	Z+25, r19	; 0x19
    1bb8:	20 8f       	std	Z+24, r18	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1bba:	35 8a       	std	Z+21, r3	; 0x15
    1bbc:	24 8a       	std	Z+20, r2	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	93 8f       	std	Z+27, r25	; 0x1b
    1bc4:	82 8f       	std	Z+26, r24	; 0x1a
		  dir->fileSize = fileSize;
    1bc6:	80 91 25 01 	lds	r24, 0x0125
    1bca:	90 91 26 01 	lds	r25, 0x0126
    1bce:	a0 91 27 01 	lds	r26, 0x0127
    1bd2:	b0 91 28 01 	lds	r27, 0x0128
    1bd6:	84 8f       	std	Z+28, r24	; 0x1c
    1bd8:	95 8f       	std	Z+29, r25	; 0x1d
    1bda:	a6 8f       	std	Z+30, r26	; 0x1e
    1bdc:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1bde:	c5 01       	movw	r24, r10
    1be0:	b4 01       	movw	r22, r8
    1be2:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1be6:	8d e0       	ldi	r24, 0x0D	; 13
    1be8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1bec:	8a e0       	ldi	r24, 0x0A	; 10
    1bee:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
		  TX_NEWLINE;
    1bf2:	8d e0       	ldi	r24, 0x0D	; 13
    1bf4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1bf8:	8a e0       	ldi	r24, 0x0A	; 10
    1bfa:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
		  transmitString_F(PSTR(" File Created! "));
    1bfe:	82 ec       	ldi	r24, 0xC2	; 194
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1c06:	40 91 25 01 	lds	r20, 0x0125
    1c0a:	50 91 26 01 	lds	r21, 0x0126
    1c0e:	60 91 27 01 	lds	r22, 0x0127
    1c12:	70 91 28 01 	lds	r23, 0x0128
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1c1c:	f1 e0       	ldi	r31, 0x01	; 1
    1c1e:	fa 83       	std	Y+2, r31	; 0x02
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1c20:	00 5e       	subi	r16, 0xE0	; 224
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	80 96       	adiw	r24, 0x20	; 32
    1c2a:	98 87       	std	Y+8, r25	; 0x08
    1c2c:	8f 83       	std	Y+7, r24	; 0x07
    1c2e:	8e cf       	rjmp	.-228    	; 0x1b4c <writeFile+0x5ae>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c30:	29 81       	ldd	r18, Y+1	; 0x01
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	29 83       	std	Y+1, r18	; 0x01
    1c36:	6e cf       	rjmp	.-292    	; 0x1b14 <writeFile+0x576>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1c38:	00 e0       	ldi	r16, 0x00	; 0
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	98 01       	movw	r18, r16
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    1c48:	4b 01       	movw	r8, r22
    1c4a:	5c 01       	movw	r10, r24

   if(cluster > 0x0ffffff6)
    1c4c:	87 ef       	ldi	r24, 0xF7	; 247
    1c4e:	88 16       	cp	r8, r24
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	98 06       	cpc	r9, r24
    1c54:	a8 06       	cpc	r10, r24
    1c56:	8f e0       	ldi	r24, 0x0F	; 15
    1c58:	b8 06       	cpc	r11, r24
    1c5a:	08 f1       	brcs	.+66     	; 0x1c9e <writeFile+0x700>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	89 16       	cp	r8, r25
    1c60:	99 06       	cpc	r9, r25
    1c62:	a9 06       	cpc	r10, r25
    1c64:	9f e0       	ldi	r25, 0x0F	; 15
    1c66:	b9 06       	cpc	r11, r25
    1c68:	b9 f4       	brne	.+46     	; 0x1c98 <writeFile+0x6fa>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1c6a:	c7 01       	movw	r24, r14
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <searchNextFreeCluster>
    1c72:	4b 01       	movw	r8, r22
    1c74:	5c 01       	movw	r10, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1c76:	8b 01       	movw	r16, r22
    1c78:	9c 01       	movw	r18, r24
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	b6 01       	movw	r22, r12
    1c80:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1c84:	0f ef       	ldi	r16, 0xFF	; 255
    1c86:	1f ef       	ldi	r17, 0xFF	; 255
    1c88:	2f ef       	ldi	r18, 0xFF	; 255
    1c8a:	3f e0       	ldi	r19, 0x0F	; 15
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	c5 01       	movw	r24, r10
    1c90:	b4 01       	movw	r22, r8
    1c92:	0e 94 90 03 	call	0x720	; 0x720 <getSetNextCluster>
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <writeFile+0x700>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1c98:	8d ea       	ldi	r24, 0xAD	; 173
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	0a c0       	rjmp	.+20     	; 0x1cb2 <writeFile+0x714>
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1c9e:	81 14       	cp	r8, r1
    1ca0:	91 04       	cpc	r9, r1
    1ca2:	a1 04       	cpc	r10, r1
    1ca4:	b1 04       	cpc	r11, r1
    1ca6:	19 f0       	breq	.+6      	; 0x1cae <writeFile+0x710>
   
   prevCluster = cluster;
    1ca8:	75 01       	movw	r14, r10
    1caa:	64 01       	movw	r12, r8
    1cac:	2c cf       	rjmp	.-424    	; 0x1b06 <writeFile+0x568>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1cae:	84 e9       	ldi	r24, 0x94	; 148
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
   
   prevCluster = cluster;
 }
 
 return;
}
    1cb2:	28 96       	adiw	r28, 0x08	; 8
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	df 90       	pop	r13
    1ccc:	cf 90       	pop	r12
    1cce:	bf 90       	pop	r11
    1cd0:	af 90       	pop	r10
    1cd2:	9f 90       	pop	r9
    1cd4:	8f 90       	pop	r8
    1cd6:	7f 90       	pop	r7
    1cd8:	6f 90       	pop	r6
    1cda:	5f 90       	pop	r5
    1cdc:	4f 90       	pop	r4
    1cde:	3f 90       	pop	r3
    1ce0:	2f 90       	pop	r2
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1ce2:	0c 94 df 13 	jmp	0x27be	; 0x27be <transmitString_F>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1ce6:	83 01       	movw	r16, r6
    1ce8:	b1 2c       	mov	r11, r1
    1cea:	3d ce       	rjmp	.-902    	; 0x1966 <writeFile+0x3c8>
   
   prevCluster = cluster;
 }
 
 return;
}
    1cec:	28 96       	adiw	r28, 0x08	; 8
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	3f 90       	pop	r3
    1d1a:	2f 90       	pop	r2
    1d1c:	08 95       	ret

00001d1e <init_devices>:
#include "FAT32.h"

//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    1d1e:	f8 94       	cli
 spi_init();
    1d20:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <spi_init>
 twi_init();
    1d24:	0e 94 41 17 	call	0x2e82	; 0x2e82 <twi_init>
 uart0_init();
    1d28:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <uart0_init>

00001d2c <main>:
 //all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	2d 97       	sbiw	r28, 0x0d	; 13
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d40:	2f ef       	ldi	r18, 0xFF	; 255
    1d42:	81 ee       	ldi	r24, 0xE1	; 225
    1d44:	94 e0       	ldi	r25, 0x04	; 4
    1d46:	21 50       	subi	r18, 0x01	; 1
    1d48:	80 40       	sbci	r24, 0x00	; 0
    1d4a:	90 40       	sbci	r25, 0x00	; 0
    1d4c:	e1 f7       	brne	.-8      	; 0x1d46 <main+0x1a>
    1d4e:	00 c0       	rjmp	.+0      	; 0x1d50 <main+0x24>
    1d50:	00 00       	nop
unsigned char option, error, data, FAT32_active;
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization
init_devices();
    1d52:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <init_devices>
DDRD |=1<<PORTD4;
    1d56:	54 9a       	sbi	0x0a, 4	; 10
PORTD |=1<<PORTD4;; //switching ON the LED (for testing purpose only)
    1d58:	5c 9a       	sbi	0x0b, 4	; 11

TX_NEWLINE;
    1d5a:	8d e0       	ldi	r24, 0x0D	; 13
    1d5c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1d60:	8a e0       	ldi	r24, 0x0A	; 10
    1d62:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
TX_NEWLINE;
    1d66:	8d e0       	ldi	r24, 0x0D	; 13
    1d68:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1d6c:	8a e0       	ldi	r24, 0x0A	; 10
    1d6e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1d72:	81 e3       	ldi	r24, 0x31	; 49
    1d74:	95 e0       	ldi	r25, 0x05	; 5
    1d76:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1d7a:	8d e0       	ldi	r24, 0x0D	; 13
    1d7c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1d80:	8a e0       	ldi	r24, 0x0A	; 10
    1d82:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    1d86:	89 e0       	ldi	r24, 0x09	; 9
    1d88:	95 e0       	ldi	r25, 0x05	; 5
    1d8a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1d8e:	8d e0       	ldi	r24, 0x0D	; 13
    1d90:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1d94:	8a e0       	ldi	r24, 0x0A	; 10
    1d96:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1d9a:	84 ed       	ldi	r24, 0xD4	; 212
    1d9c:	94 e0       	ldi	r25, 0x04	; 4
    1d9e:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1da2:	8d e0       	ldi	r24, 0x0D	; 13
    1da4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1da8:	8a e0       	ldi	r24, 0x0A	; 10
    1daa:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>

cardType = 0;
    1dae:	10 92 4a 03 	sts	0x034A, r1
    1db2:	0a e0       	ldi	r16, 0x0A	; 10
    1db4:	10 e0       	ldi	r17, 0x00	; 0
for (i=0; i<10; i++)
{
  error = SD_init();
    1db6:	0e 94 2c 12 	call	0x2458	; 0x2458 <SD_init>
  if(!error) break;
    1dba:	88 23       	and	r24, r24
    1dbc:	a1 f0       	breq	.+40     	; 0x1de6 <main+0xba>
    1dbe:	01 50       	subi	r16, 0x01	; 1
    1dc0:	11 09       	sbc	r17, r1
TX_NEWLINE;
transmitString_F (PSTR("****************************************************"));
TX_NEWLINE;

cardType = 0;
for (i=0; i<10; i++)
    1dc2:	01 15       	cp	r16, r1
    1dc4:	11 05       	cpc	r17, r1
    1dc6:	b9 f7       	brne	.-18     	; 0x1db6 <main+0x8a>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	29 f4       	brne	.+10     	; 0x1dd6 <main+0xaa>
    1dcc:	8d eb       	ldi	r24, 0xBD	; 189
    1dce:	94 e0       	ldi	r25, 0x04	; 4
    1dd0:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <main+0xae>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <main+0xb0>
    1dda:	ff cf       	rjmp	.-2      	; 0x1dda <main+0xae>
    1ddc:	80 ea       	ldi	r24, 0xA0	; 160
    1dde:	94 e0       	ldi	r25, 0x04	; 4
    1de0:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    1de4:	fa cf       	rjmp	.-12     	; 0x1dda <main+0xae>
  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    1de6:	80 91 4a 03 	lds	r24, 0x034A
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	39 f0       	breq	.+14     	; 0x1dfc <main+0xd0>
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	41 f0       	breq	.+16     	; 0x1e02 <main+0xd6>
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	49 f4       	brne	.+18     	; 0x1e08 <main+0xdc>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1df6:	85 e7       	ldi	r24, 0x75	; 117
    1df8:	94 e0       	ldi	r25, 0x04	; 4
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <main+0xe0>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1dfc:	88 e5       	ldi	r24, 0x58	; 88
    1dfe:	94 e0       	ldi	r25, 0x04	; 4
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <main+0xe0>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1e02:	8d e2       	ldi	r24, 0x2D	; 45
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <main+0xe0>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1e08:	83 e1       	ldi	r24, 0x13	; 19
    1e0a:	94 e0       	ldi	r25, 0x04	; 4
    1e0c:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    1e10:	82 e5       	ldi	r24, 0x52	; 82
    1e12:	8c bd       	out	0x2c, r24	; 44
    1e14:	8d b5       	in	r24, 0x2d	; 45
    1e16:	81 60       	ori	r24, 0x01	; 1
    1e18:	8d bd       	out	0x2d, r24	; 45
    1e1a:	8f e9       	ldi	r24, 0x9F	; 159
    1e1c:	9f e0       	ldi	r25, 0x0F	; 15
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <main+0xf2>
    1e22:	00 c0       	rjmp	.+0      	; 0x1e24 <main+0xf8>
    1e24:	00 00       	nop
_delay_ms(1);   //some delay

FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1e26:	0e 94 a2 04 	call	0x944	; 0x944 <getBootSectorData>
if(error) 	
    1e2a:	88 23       	and	r24, r24
    1e2c:	61 f0       	breq	.+24     	; 0x1e46 <main+0x11a>
{
  TX_NEWLINE;
    1e2e:	8d e0       	ldi	r24, 0x0D	; 13
    1e30:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1e34:	8a e0       	ldi	r24, 0x0A	; 10
    1e36:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	94 e0       	ldi	r25, 0x04	; 4
    1e3e:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  FAT32_active = 0;
    1e42:	d1 2c       	mov	r13, r1
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <main+0x11e>


SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay

FAT32_active = 1;
    1e46:	dd 24       	eor	r13, r13
    1e48:	d3 94       	inc	r13
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    1e4a:	81 2c       	mov	r8, r1
    1e4c:	91 2c       	mov	r9, r1
    1e4e:	54 01       	movw	r10, r8
    1e50:	83 94       	inc	r8
    1e52:	1e 01       	movw	r2, r28
    1e54:	9e e0       	ldi	r25, 0x0E	; 14
    1e56:	29 0e       	add	r2, r25
    1e58:	31 1c       	adc	r3, r1
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    1e5a:	98 ee       	ldi	r25, 0xE8	; 232
    1e5c:	e9 2e       	mov	r14, r25
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	f9 2e       	mov	r15, r25
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1e62:	8d e0       	ldi	r24, 0x0D	; 13
    1e64:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1e68:	8a e0       	ldi	r24, 0x0A	; 10
    1e6a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("Press any key..."));
    1e6e:	81 ef       	ldi	r24, 0xF1	; 241
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1e76:	8d e0       	ldi	r24, 0x0D	; 13
    1e78:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1e7c:	8a e0       	ldi	r24, 0x0A	; 10
    1e7e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
option = receiveByte();
    1e82:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
TX_NEWLINE;
    1e86:	8d e0       	ldi	r24, 0x0D	; 13
    1e88:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1e8c:	8a e0       	ldi	r24, 0x0A	; 10
    1e8e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> 0: Erase Blocks "));
    1e92:	8e ed       	ldi	r24, 0xDE	; 222
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1e9a:	8d e0       	ldi	r24, 0x0D	; 13
    1e9c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1ea0:	8a e0       	ldi	r24, 0x0A	; 10
    1ea2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    1ea6:	88 ea       	ldi	r24, 0xA8	; 168
    1ea8:	93 e0       	ldi	r25, 0x03	; 3
    1eaa:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
#ifndef FAT_TESTING_ONLY
TX_NEWLINE;
transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
#endif

TX_NEWLINE;
    1eae:	8d e0       	ldi	r24, 0x0D	; 13
    1eb0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1eb4:	8a e0       	ldi	r24, 0x0A	; 10
    1eb6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    1eba:	8a e7       	ldi	r24, 0x7A	; 122
    1ebc:	93 e0       	ldi	r25, 0x03	; 3
    1ebe:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1ec2:	8d e0       	ldi	r24, 0x0D	; 13
    1ec4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1ec8:	8a e0       	ldi	r24, 0x0A	; 10
    1eca:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    1ece:	8a e4       	ldi	r24, 0x4A	; 74
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1ed6:	8d e0       	ldi	r24, 0x0D	; 13
    1ed8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1edc:	8a e0       	ldi	r24, 0x0A	; 10
    1ede:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    1ee2:	85 e1       	ldi	r24, 0x15	; 21
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>

TX_NEWLINE;
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1ef0:	8a e0       	ldi	r24, 0x0A	; 10
    1ef2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    1ef6:	85 ee       	ldi	r24, 0xE5	; 229
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
TX_NEWLINE;
    1efe:	8d e0       	ldi	r24, 0x0D	; 13
    1f00:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f04:	8a e0       	ldi	r24, 0x0A	; 10
    1f06:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>

TX_NEWLINE;
    1f0a:	8d e0       	ldi	r24, 0x0D	; 13
    1f0c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f10:	8a e0       	ldi	r24, 0x0A	; 10
    1f12:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
TX_NEWLINE;
    1f16:	8d e0       	ldi	r24, 0x0D	; 13
    1f18:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f1c:	8a e0       	ldi	r24, 0x0A	; 10
    1f1e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    1f22:	87 ec       	ldi	r24, 0xC7	; 199
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    1f2a:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    1f2e:	18 2f       	mov	r17, r24
transmitByte(option);
    1f30:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1f34:	8b ec       	ldi	r24, 0xCB	; 203
    1f36:	81 0f       	add	r24, r17
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	98 f4       	brcc	.+38     	; 0x1f62 <main+0x236>
{
  if(!FAT32_active) 
    1f3c:	d1 10       	cpse	r13, r1
    1f3e:	11 c0       	rjmp	.+34     	; 0x1f62 <main+0x236>
  {
    TX_NEWLINE;
    1f40:	8d e0       	ldi	r24, 0x0D	; 13
    1f42:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f46:	8a e0       	ldi	r24, 0x0A	; 10
    1f48:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    TX_NEWLINE;
    1f4c:	8d e0       	ldi	r24, 0x0D	; 13
    1f4e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f52:	8a e0       	ldi	r24, 0x0A	; 10
    1f54:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    1f58:	8f ea       	ldi	r24, 0xAF	; 175
    1f5a:	92 e0       	ldi	r25, 0x02	; 2
    1f5c:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
	continue;
    1f60:	80 cf       	rjmp	.-256    	; 0x1e62 <main+0x136>
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1f62:	80 ed       	ldi	r24, 0xD0	; 208
    1f64:	81 0f       	add	r24, r17
    1f66:	85 30       	cpi	r24, 0x05	; 5
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <main+0x240>
    1f6a:	8f c0       	rjmp	.+286    	; 0x208a <main+0x35e>
{
TX_NEWLINE;
    1f6c:	8d e0       	ldi	r24, 0x0D	; 13
    1f6e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f72:	8a e0       	ldi	r24, 0x0A	; 10
    1f74:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
TX_NEWLINE;
    1f78:	8d e0       	ldi	r24, 0x0D	; 13
    1f7a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    1f7e:	8a e0       	ldi	r24, 0x0A	; 10
    1f80:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1f84:	8b e8       	ldi	r24, 0x8B	; 139
    1f86:	92 e0       	ldi	r25, 0x02	; 2
    1f88:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
data = receiveByte(); transmitByte(data);
    1f8c:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    1f90:	08 2f       	mov	r16, r24
    1f92:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
startBlock = (data & 0x0f) * 1000;
    1f96:	30 2f       	mov	r19, r16
    1f98:	3f 70       	andi	r19, 0x0F	; 15
    1f9a:	3e 9d       	mul	r19, r14
    1f9c:	c0 01       	movw	r24, r0
    1f9e:	3f 9d       	mul	r19, r15
    1fa0:	90 0d       	add	r25, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	aa 27       	eor	r26, r26
    1fa6:	97 fd       	sbrc	r25, 7
    1fa8:	a0 95       	com	r26
    1faa:	ba 2f       	mov	r27, r26
    1fac:	80 93 35 01 	sts	0x0135, r24
    1fb0:	90 93 36 01 	sts	0x0136, r25
    1fb4:	a0 93 37 01 	sts	0x0137, r26
    1fb8:	b0 93 38 01 	sts	0x0138, r27
data = receiveByte(); transmitByte(data);
    1fbc:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    1fc0:	08 2f       	mov	r16, r24
    1fc2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
startBlock += (data & 0x0f) * 100;
    1fc6:	40 90 35 01 	lds	r4, 0x0135
    1fca:	50 90 36 01 	lds	r5, 0x0136
    1fce:	60 90 37 01 	lds	r6, 0x0137
    1fd2:	70 90 38 01 	lds	r7, 0x0138
    1fd6:	40 2f       	mov	r20, r16
    1fd8:	4f 70       	andi	r20, 0x0F	; 15
    1fda:	24 e6       	ldi	r18, 0x64	; 100
    1fdc:	42 9f       	mul	r20, r18
    1fde:	a0 01       	movw	r20, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	66 27       	eor	r22, r22
    1fe4:	57 fd       	sbrc	r21, 7
    1fe6:	60 95       	com	r22
    1fe8:	76 2f       	mov	r23, r22
    1fea:	44 0d       	add	r20, r4
    1fec:	55 1d       	adc	r21, r5
    1fee:	66 1d       	adc	r22, r6
    1ff0:	77 1d       	adc	r23, r7
    1ff2:	40 93 35 01 	sts	0x0135, r20
    1ff6:	50 93 36 01 	sts	0x0136, r21
    1ffa:	60 93 37 01 	sts	0x0137, r22
    1ffe:	70 93 38 01 	sts	0x0138, r23
data = receiveByte(); transmitByte(data);
    2002:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2006:	08 2f       	mov	r16, r24
    2008:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
startBlock += (data & 0x0f) * 10;
    200c:	40 90 35 01 	lds	r4, 0x0135
    2010:	50 90 36 01 	lds	r5, 0x0136
    2014:	60 90 37 01 	lds	r6, 0x0137
    2018:	70 90 38 01 	lds	r7, 0x0138
    201c:	40 2f       	mov	r20, r16
    201e:	4f 70       	andi	r20, 0x0F	; 15
    2020:	8a e0       	ldi	r24, 0x0A	; 10
    2022:	48 9f       	mul	r20, r24
    2024:	a0 01       	movw	r20, r0
    2026:	11 24       	eor	r1, r1
    2028:	66 27       	eor	r22, r22
    202a:	57 fd       	sbrc	r21, 7
    202c:	60 95       	com	r22
    202e:	76 2f       	mov	r23, r22
    2030:	44 0d       	add	r20, r4
    2032:	55 1d       	adc	r21, r5
    2034:	66 1d       	adc	r22, r6
    2036:	77 1d       	adc	r23, r7
    2038:	40 93 35 01 	sts	0x0135, r20
    203c:	50 93 36 01 	sts	0x0136, r21
    2040:	60 93 37 01 	sts	0x0137, r22
    2044:	70 93 38 01 	sts	0x0138, r23
data = receiveByte(); transmitByte(data);
    2048:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    204c:	08 2f       	mov	r16, r24
    204e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
startBlock += (data & 0x0f);
    2052:	40 91 35 01 	lds	r20, 0x0135
    2056:	50 91 36 01 	lds	r21, 0x0136
    205a:	60 91 37 01 	lds	r22, 0x0137
    205e:	70 91 38 01 	lds	r23, 0x0138
    2062:	80 2f       	mov	r24, r16
    2064:	8f 70       	andi	r24, 0x0F	; 15
    2066:	48 0f       	add	r20, r24
    2068:	51 1d       	adc	r21, r1
    206a:	61 1d       	adc	r22, r1
    206c:	71 1d       	adc	r23, r1
    206e:	40 93 35 01 	sts	0x0135, r20
    2072:	50 93 36 01 	sts	0x0136, r21
    2076:	60 93 37 01 	sts	0x0137, r22
    207a:	70 93 38 01 	sts	0x0138, r23
TX_NEWLINE;
    207e:	8d e0       	ldi	r24, 0x0D	; 13
    2080:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2084:	8a e0       	ldi	r24, 0x0A	; 10
    2086:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
}

totalBlocks = 1;
    208a:	80 92 40 03 	sts	0x0340, r8
    208e:	90 92 41 03 	sts	0x0341, r9
    2092:	a0 92 42 03 	sts	0x0342, r10
    2096:	b0 92 43 03 	sts	0x0343, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    209a:	19 33       	cpi	r17, 0x39	; 57
    209c:	09 f4       	brne	.+2      	; 0x20a0 <main+0x374>
    209e:	43 c1       	rjmp	.+646    	; 0x2326 <main+0x5fa>
    20a0:	70 f5       	brcc	.+92     	; 0x20fe <main+0x3d2>
    20a2:	12 33       	cpi	r17, 0x32	; 50
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <main+0x37c>
    20a6:	a9 c0       	rjmp	.+338    	; 0x21fa <main+0x4ce>
    20a8:	90 f4       	brcc	.+36     	; 0x20ce <main+0x3a2>
    20aa:	10 33       	cpi	r17, 0x30	; 48
    20ac:	e9 f1       	breq	.+122    	; 0x2128 <main+0x3fc>
    20ae:	11 33       	cpi	r17, 0x31	; 49
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <main+0x388>
    20b2:	47 c1       	rjmp	.+654    	; 0x2342 <main+0x616>
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
          break;

case '1': TX_NEWLINE;
    20b4:	8d e0       	ldi	r24, 0x0D	; 13
    20b6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    20ba:	8a e0       	ldi	r24, 0x0A	; 10
    20bc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    20c0:	8a e5       	ldi	r24, 0x5A	; 90
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
          i=0;
    20c8:	61 2c       	mov	r6, r1
    20ca:	71 2c       	mov	r7, r1
    20cc:	5f c0       	rjmp	.+190    	; 0x218c <main+0x460>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    20ce:	15 33       	cpi	r17, 0x35	; 53
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <main+0x3a8>
    20d2:	ca c0       	rjmp	.+404    	; 0x2268 <main+0x53c>
    20d4:	08 f4       	brcc	.+2      	; 0x20d8 <main+0x3ac>
    20d6:	35 c1       	rjmp	.+618    	; 0x2342 <main+0x616>
  		  findFiles(GET_LIST,0);
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    20d8:	8d e0       	ldi	r24, 0x0D	; 13
    20da:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    20de:	8a e0       	ldi	r24, 0x0A	; 10
    20e0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
		  TX_NEWLINE;
    20e4:	8d e0       	ldi	r24, 0x0D	; 13
    20e6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    20ea:	8a e0       	ldi	r24, 0x0A	; 10
    20ec:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    20f0:	88 e0       	ldi	r24, 0x08	; 8
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    20f8:	fe 01       	movw	r30, r28
    20fa:	31 96       	adiw	r30, 0x01	; 1
    20fc:	c1 c0       	rjmp	.+386    	; 0x2280 <main+0x554>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    20fe:	13 34       	cpi	r17, 0x43	; 67
    2100:	09 f4       	brne	.+2      	; 0x2104 <main+0x3d8>
    2102:	1c c1       	rjmp	.+568    	; 0x233c <main+0x610>
    2104:	38 f4       	brcc	.+14     	; 0x2114 <main+0x3e8>
    2106:	11 34       	cpi	r17, 0x41	; 65
    2108:	09 f4       	brne	.+2      	; 0x210c <main+0x3e0>
    210a:	10 c1       	rjmp	.+544    	; 0x232c <main+0x600>
    210c:	12 34       	cpi	r17, 0x42	; 66
    210e:	09 f4       	brne	.+2      	; 0x2112 <main+0x3e6>
    2110:	12 c1       	rjmp	.+548    	; 0x2336 <main+0x60a>
    2112:	17 c1       	rjmp	.+558    	; 0x2342 <main+0x616>
    2114:	12 36       	cpi	r17, 0x62	; 98
    2116:	09 f4       	brne	.+2      	; 0x211a <main+0x3ee>
    2118:	0e c1       	rjmp	.+540    	; 0x2336 <main+0x60a>
    211a:	13 36       	cpi	r17, 0x63	; 99
    211c:	09 f4       	brne	.+2      	; 0x2120 <main+0x3f4>
    211e:	0e c1       	rjmp	.+540    	; 0x233c <main+0x610>
    2120:	11 36       	cpi	r17, 0x61	; 97
    2122:	09 f0       	breq	.+2      	; 0x2126 <main+0x3fa>
    2124:	0e c1       	rjmp	.+540    	; 0x2342 <main+0x616>
    2126:	02 c1       	rjmp	.+516    	; 0x232c <main+0x600>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2128:	20 91 40 03 	lds	r18, 0x0340
    212c:	30 91 41 03 	lds	r19, 0x0341
    2130:	40 91 42 03 	lds	r20, 0x0342
    2134:	50 91 43 03 	lds	r21, 0x0343
    2138:	60 91 35 01 	lds	r22, 0x0135
    213c:	70 91 36 01 	lds	r23, 0x0136
    2140:	80 91 37 01 	lds	r24, 0x0137
    2144:	90 91 38 01 	lds	r25, 0x0138
    2148:	0e 94 ad 12 	call	0x255a	; 0x255a <SD_erase>
    214c:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    214e:	8d e0       	ldi	r24, 0x0D	; 13
    2150:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2154:	8a e0       	ldi	r24, 0x0A	; 10
    2156:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
          if(error)
    215a:	cc 20       	and	r12, r12
    215c:	19 f0       	breq	.+6      	; 0x2164 <main+0x438>
              transmitString_F(PSTR("Erase failed.."));
    215e:	8c e7       	ldi	r24, 0x7C	; 124
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	48 c0       	rjmp	.+144    	; 0x21f4 <main+0x4c8>
          else
              transmitString_F(PSTR("Erased!"));
    2164:	84 e7       	ldi	r24, 0x74	; 116
    2166:	92 e0       	ldi	r25, 0x02	; 2
    2168:	45 c0       	rjmp	.+138    	; 0x21f4 <main+0x4c8>
                data = receiveByte();
                transmitByte(data);
                buffer[i++] = data;
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
    216a:	8a e0       	ldi	r24, 0x0A	; 10
    216c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
                    buffer[i++] = 0x0a;
    2170:	22 e0       	ldi	r18, 0x02	; 2
    2172:	62 0e       	add	r6, r18
    2174:	71 1c       	adc	r7, r1
    2176:	f2 01       	movw	r30, r4
    2178:	e7 5c       	subi	r30, 0xC7	; 199
    217a:	fe 4f       	sbci	r31, 0xFE	; 254
    217c:	8a e0       	ldi	r24, 0x0A	; 10
    217e:	80 83       	st	Z, r24
                }
                if(i == 512) break;
    2180:	61 14       	cp	r6, r1
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	78 06       	cpc	r7, r24
    2186:	a9 f0       	breq	.+42     	; 0x21b2 <main+0x486>
    2188:	23 01       	movw	r4, r6
    218a:	32 01       	movw	r6, r4
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    218c:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2190:	18 2f       	mov	r17, r24
                transmitByte(data);
    2192:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
                buffer[i++] = data;
    2196:	23 01       	movw	r4, r6
    2198:	9f ef       	ldi	r25, 0xFF	; 255
    219a:	49 1a       	sub	r4, r25
    219c:	59 0a       	sbc	r5, r25
    219e:	f3 01       	movw	r30, r6
    21a0:	e7 5c       	subi	r30, 0xC7	; 199
    21a2:	fe 4f       	sbci	r31, 0xFE	; 254
    21a4:	10 83       	st	Z, r17
                if(data == 0x0d)
    21a6:	1d 30       	cpi	r17, 0x0D	; 13
    21a8:	01 f3       	breq	.-64     	; 0x216a <main+0x43e>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
    21aa:	41 14       	cp	r4, r1
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	59 06       	cpc	r5, r25
    21b0:	e1 f4       	brne	.+56     	; 0x21ea <main+0x4be>
            }while (data != '~');

            error = SD_writeSingleBlock (startBlock);
    21b2:	60 91 35 01 	lds	r22, 0x0135
    21b6:	70 91 36 01 	lds	r23, 0x0136
    21ba:	80 91 37 01 	lds	r24, 0x0137
    21be:	90 91 38 01 	lds	r25, 0x0138
    21c2:	0e 94 14 13 	call	0x2628	; 0x2628 <SD_writeSingleBlock>
    21c6:	c8 2e       	mov	r12, r24
            TX_NEWLINE;
    21c8:	8d e0       	ldi	r24, 0x0D	; 13
    21ca:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    21ce:	8a e0       	ldi	r24, 0x0A	; 10
    21d0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            TX_NEWLINE;
    21d4:	8d e0       	ldi	r24, 0x0D	; 13
    21d6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    21da:	8a e0       	ldi	r24, 0x0A	; 10
    21dc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            if(error)
    21e0:	cc 20       	and	r12, r12
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <main+0x4c4>
                transmitString_F(PSTR("Write failed.."));
    21e4:	8b e4       	ldi	r24, 0x4B	; 75
    21e6:	92 e0       	ldi	r25, 0x02	; 2
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <main+0x4c8>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
            }while (data != '~');
    21ea:	1e 37       	cpi	r17, 0x7E	; 126
    21ec:	71 f6       	brne	.-100    	; 0x218a <main+0x45e>
    21ee:	e1 cf       	rjmp	.-62     	; 0x21b2 <main+0x486>
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
    21f0:	89 e3       	ldi	r24, 0x39	; 57
    21f2:	92 e0       	ldi	r25, 0x02	; 2

            error = SD_writeSingleBlock (startBlock);
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
    21f4:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
    21f8:	ba c0       	rjmp	.+372    	; 0x236e <main+0x642>
            else
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
    21fa:	60 91 35 01 	lds	r22, 0x0135
    21fe:	70 91 36 01 	lds	r23, 0x0136
    2202:	80 91 37 01 	lds	r24, 0x0137
    2206:	90 91 38 01 	lds	r25, 0x0138
    220a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <SD_readSingleBlock>
    220e:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    2210:	8d e0       	ldi	r24, 0x0D	; 13
    2212:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2216:	8a e0       	ldi	r24, 0x0A	; 10
    2218:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
          if(error)
    221c:	cc 20       	and	r12, r12
    221e:	19 f0       	breq	.+6      	; 0x2226 <main+0x4fa>
            transmitString_F(PSTR("Read failed.."));
    2220:	8b e2       	ldi	r24, 0x2B	; 43
    2222:	92 e0       	ldi	r25, 0x02	; 2
    2224:	e7 cf       	rjmp	.-50     	; 0x21f4 <main+0x4c8>
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
    2226:	00 e0       	ldi	r16, 0x00	; 0
    2228:	10 e0       	ldi	r17, 0x00	; 0
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    222a:	f8 01       	movw	r30, r16
    222c:	e7 5c       	subi	r30, 0xC7	; 199
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	80 81       	ld	r24, Z
    2232:	8e 37       	cpi	r24, 0x7E	; 126
    2234:	79 f4       	brne	.+30     	; 0x2254 <main+0x528>
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    2236:	8d e0       	ldi	r24, 0x0D	; 13
    2238:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    223c:	8a e0       	ldi	r24, 0x0A	; 10
    223e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            TX_NEWLINE;
    2242:	8d e0       	ldi	r24, 0x0D	; 13
    2244:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2248:	8a e0       	ldi	r24, 0x0A	; 10
    224a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    224e:	8a e1       	ldi	r24, 0x1A	; 26
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	d0 cf       	rjmp	.-96     	; 0x21f4 <main+0x4c8>
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
    2254:	80 81       	ld	r24, Z
    2256:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    225a:	0f 5f       	subi	r16, 0xFF	; 255
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	01 15       	cp	r16, r1
    2260:	22 e0       	ldi	r18, 0x02	; 2
    2262:	12 07       	cpc	r17, r18
    2264:	11 f7       	brne	.-60     	; 0x222a <main+0x4fe>
    2266:	e7 cf       	rjmp	.-50     	; 0x2236 <main+0x50a>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    2268:	8d e0       	ldi	r24, 0x0D	; 13
    226a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    226e:	8a e0       	ldi	r24, 0x0A	; 10
    2270:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  		  findFiles(GET_LIST,0);
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 40 08 	call	0x1080	; 0x1080 <findFiles>
          break;
    227e:	77 c0       	rjmp	.+238    	; 0x236e <main+0x642>
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    2280:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    2282:	e2 15       	cp	r30, r2
    2284:	f3 05       	cpc	r31, r3
    2286:	e1 f7       	brne	.-8      	; 0x2280 <main+0x554>
    2288:	61 2c       	mov	r6, r1
    228a:	71 2c       	mov	r7, r1
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    228c:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2290:	08 2f       	mov	r16, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    2292:	8d 30       	cpi	r24, 0x0D	; 13
    2294:	59 f1       	breq	.+86     	; 0x22ec <main+0x5c0>
			if(data == 0x08)	//'Back Space' key pressed
    2296:	88 30       	cpi	r24, 0x08	; 8
    2298:	81 f4       	brne	.+32     	; 0x22ba <main+0x58e>
	 		{ 
	   			if(i != 0)
    229a:	61 14       	cp	r6, r1
    229c:	71 04       	cpc	r7, r1
    229e:	b1 f3       	breq	.-20     	; 0x228c <main+0x560>
	   			{ 
	     			transmitByte(data);
    22a0:	88 e0       	ldi	r24, 0x08	; 8
    22a2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
					transmitByte(' '); 
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	     			transmitByte(data); 
    22ac:	88 e0       	ldi	r24, 0x08	; 8
    22ae:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	     			i--; 
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	68 1a       	sub	r6, r24
    22b6:	71 08       	sbc	r7, r1
    22b8:	e9 cf       	rjmp	.-46     	; 0x228c <main+0x560>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    22ba:	80 ee       	ldi	r24, 0xE0	; 224
    22bc:	80 0f       	add	r24, r16
    22be:	8f 35       	cpi	r24, 0x5F	; 95
    22c0:	28 f7       	brcc	.-54     	; 0x228c <main+0x560>
			transmitByte(data);
    22c2:	80 2f       	mov	r24, r16
    22c4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
            fileName[i++] = data;
    22c8:	a3 01       	movw	r20, r6
    22ca:	4f 5f       	subi	r20, 0xFF	; 255
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255
    22ce:	e1 e0       	ldi	r30, 0x01	; 1
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	ec 0f       	add	r30, r28
    22d4:	fd 1f       	adc	r31, r29
    22d6:	e6 0d       	add	r30, r6
    22d8:	f7 1d       	adc	r31, r7
    22da:	00 83       	st	Z, r16
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    22dc:	4d 30       	cpi	r20, 0x0D	; 13
    22de:	51 05       	cpc	r21, r1
    22e0:	11 f0       	breq	.+4      	; 0x22e6 <main+0x5ba>
    22e2:	3a 01       	movw	r6, r20
    22e4:	d3 cf       	rjmp	.-90     	; 0x228c <main+0x560>
    22e6:	82 ef       	ldi	r24, 0xF2	; 242
    22e8:	91 e0       	ldi	r25, 0x01	; 1
    22ea:	84 cf       	rjmp	.-248    	; 0x21f4 <main+0x4c8>
          }
          if(i>12) break;
    22ec:	9d e0       	ldi	r25, 0x0D	; 13
    22ee:	69 16       	cp	r6, r25
    22f0:	71 04       	cpc	r7, r1
    22f2:	e8 f5       	brcc	.+122    	; 0x236e <main+0x642>
       
	      TX_NEWLINE;
    22f4:	8d e0       	ldi	r24, 0x0D	; 13
    22f6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    22fa:	8a e0       	ldi	r24, 0x0A	; 10
    22fc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
		  if(option == '6')
    2300:	16 33       	cpi	r17, 0x36	; 54
    2302:	39 f4       	brne	.+14     	; 0x2312 <main+0x5e6>
		     readFile( READ, fileName);
    2304:	be 01       	movw	r22, r28
    2306:	6f 5f       	subi	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <readFile>
    2310:	2e c0       	rjmp	.+92     	; 0x236e <main+0x642>
		  if(option == '7')
		  	 writeFile(fileName);
    2312:	ce 01       	movw	r24, r28
    2314:	01 96       	adiw	r24, 0x01	; 1
          if(i>12) break;
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
		  if(option == '7')
    2316:	17 33       	cpi	r17, 0x37	; 55
    2318:	19 f4       	brne	.+6      	; 0x2320 <main+0x5f4>
		  	 writeFile(fileName);
    231a:	0e 94 cf 0a 	call	0x159e	; 0x159e <writeFile>
    231e:	27 c0       	rjmp	.+78     	; 0x236e <main+0x642>
 		  if(option == '8')
		     deleteFile(fileName);
    2320:	0e 94 bf 0a 	call	0x157e	; 0x157e <deleteFile>
    2324:	24 c0       	rjmp	.+72     	; 0x236e <main+0x642>
          break;

case '9': memoryStatistics();
    2326:	0e 94 b3 06 	call	0xd66	; 0xd66 <memoryStatistics>
          break;
    232a:	21 c0       	rjmp	.+66     	; 0x236e <main+0x642>

case 'a': 
case 'A': RTC_displayDate();
    232c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <RTC_displayDate>
		  RTC_displayTime();
    2330:	0e 94 a5 14 	call	0x294a	; 0x294a <RTC_displayTime>
		  break;
    2334:	1c c0       	rjmp	.+56     	; 0x236e <main+0x642>
case 'b': 
case 'B': RTC_updateDate();
    2336:	0e 94 21 16 	call	0x2c42	; 0x2c42 <RTC_updateDate>
		  break;
    233a:	19 c0       	rjmp	.+50     	; 0x236e <main+0x642>
case 'c': 
case 'C': RTC_updateTime();
    233c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <RTC_updateTime>
	      break;
    2340:	16 c0       	rjmp	.+44     	; 0x236e <main+0x642>

default: TX_NEWLINE;
    2342:	8d e0       	ldi	r24, 0x0D	; 13
    2344:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2348:	8a e0       	ldi	r24, 0x0A	; 10
    234a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
         TX_NEWLINE;
    234e:	8d e0       	ldi	r24, 0x0D	; 13
    2350:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2354:	8a e0       	ldi	r24, 0x0A	; 10
    2356:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    235a:	81 ee       	ldi	r24, 0xE1	; 225
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
         TX_NEWLINE;
    2362:	8d e0       	ldi	r24, 0x0D	; 13
    2364:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2368:	8a e0       	ldi	r24, 0x0A	; 10
    236a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
}

TX_NEWLINE;
    236e:	8d e0       	ldi	r24, 0x0D	; 13
    2370:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2374:	8a e0       	ldi	r24, 0x0A	; 10
    2376:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    237a:	73 cd       	rjmp	.-1306   	; 0x1e62 <main+0x136>

0000237c <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	00 d0       	rcall	.+0      	; 0x2388 <SD_sendCommand+0xc>
    2388:	00 d0       	rcall	.+0      	; 0x238a <SD_sendCommand+0xe>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	08 2f       	mov	r16, r24
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    2390:	80 91 3f 03 	lds	r24, 0x033F
    2394:	81 11       	cpse	r24, r1
    2396:	13 c0       	rjmp	.+38     	; 0x23be <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    2398:	8f ee       	ldi	r24, 0xEF	; 239
    239a:	80 0f       	add	r24, r16
    239c:	82 30       	cpi	r24, 0x02	; 2
    239e:	40 f0       	brcs	.+16     	; 0x23b0 <SD_sendCommand+0x34>
   cmd == READ_MULTIPLE_BLOCKS  ||
    23a0:	88 ee       	ldi	r24, 0xE8	; 232
    23a2:	80 0f       	add	r24, r16
    23a4:	82 30       	cpi	r24, 0x02	; 2
    23a6:	20 f0       	brcs	.+8      	; 0x23b0 <SD_sendCommand+0x34>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    23a8:	80 ee       	ldi	r24, 0xE0	; 224
    23aa:	80 0f       	add	r24, r16
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	38 f4       	brcc	.+14     	; 0x23be <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	44 0f       	add	r20, r20
    23b4:	55 1f       	adc	r21, r21
    23b6:	66 1f       	adc	r22, r22
    23b8:	77 1f       	adc	r23, r23
    23ba:	8a 95       	dec	r24
    23bc:	d1 f7       	brne	.-12     	; 0x23b2 <SD_sendCommand+0x36>
   }	   

SD_CS_ASSERT;
    23be:	2a 98       	cbi	0x05, 2	; 5

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    23c0:	80 2f       	mov	r24, r16
    23c2:	80 64       	ori	r24, 0x40	; 64
    23c4:	49 83       	std	Y+1, r20	; 0x01
    23c6:	5a 83       	std	Y+2, r21	; 0x02
    23c8:	6b 83       	std	Y+3, r22	; 0x03
    23ca:	7c 83       	std	Y+4, r23	; 0x04
    23cc:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit(arg>>24);
    23d0:	7c 81       	ldd	r23, Y+4	; 0x04
    23d2:	87 2f       	mov	r24, r23
    23d4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit(arg>>16);
    23d8:	6b 81       	ldd	r22, Y+3	; 0x03
    23da:	86 2f       	mov	r24, r22
    23dc:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit(arg>>8);
    23e0:	5a 81       	ldd	r21, Y+2	; 0x02
    23e2:	85 2f       	mov	r24, r21
    23e4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit(arg);
    23e8:	49 81       	ldd	r20, Y+1	; 0x01
    23ea:	84 2f       	mov	r24, r20
    23ec:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    23f0:	08 30       	cpi	r16, 0x08	; 8
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <SD_sendCommand+0x7c>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    23f4:	87 e8       	ldi	r24, 0x87	; 135
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    23f8:	85 e9       	ldi	r24, 0x95	; 149
    23fa:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    23fe:	10 e0       	ldi	r17, 0x00	; 0
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    2400:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    2404:	f8 2e       	mov	r15, r24
    2406:	8f ef       	ldi	r24, 0xFF	; 255
    2408:	f8 12       	cpse	r15, r24
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <SD_sendCommand+0x96>
    240c:	11 50       	subi	r17, 0x01	; 1
   if(retry++ > 0xfe) break; //time out error
    240e:	c1 f7       	brne	.-16     	; 0x2400 <SD_sendCommand+0x84>
    2410:	15 c0       	rjmp	.+42     	; 0x243c <SD_sendCommand+0xc0>

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    2412:	f1 10       	cpse	r15, r1
    2414:	13 c0       	rjmp	.+38     	; 0x243c <SD_sendCommand+0xc0>
    2416:	0a 33       	cpi	r16, 0x3A	; 58
    2418:	89 f4       	brne	.+34     	; 0x243c <SD_sendCommand+0xc0>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    241a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    241e:	86 ff       	sbrs	r24, 6
    2420:	04 c0       	rjmp	.+8      	; 0x242a <SD_sendCommand+0xae>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	80 93 3f 03 	sts	0x033F, r24
    2428:	02 c0       	rjmp	.+4      	; 0x242e <SD_sendCommand+0xb2>
  else SDHC_flag = 0;
    242a:	10 92 3f 03 	sts	0x033F, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    242e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    2432:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  SPI_receive(); 
    2436:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    243a:	f1 2c       	mov	r15, r1
}

SPI_receive(); //extra 8 CLK
    243c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SD_CS_DEASSERT;
    2440:	2a 9a       	sbi	0x05, 2	; 5

return response; //return state
}
    2442:	8f 2d       	mov	r24, r15
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	08 95       	ret

00002458 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    2462:	8f ef       	ldi	r24, 0xFF	; 255
    2464:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
    2468:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    246a:	d9 f7       	brne	.-10     	; 0x2462 <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
SD_CS_ASSERT;
    246c:	2a 98       	cbi	0x05, 2	; 5
    246e:	c1 e2       	ldi	r28, 0x21	; 33
    2470:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	ba 01       	movw	r22, r20
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
    247e:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    2480:	20 97       	sbiw	r28, 0x00	; 0
    2482:	09 f4       	brne	.+2      	; 0x2486 <SD_init+0x2e>
    2484:	63 c0       	rjmp	.+198    	; 0x254c <SD_init+0xf4>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	a1 f7       	brne	.-24     	; 0x2472 <SD_init+0x1a>

SD_CS_DEASSERT;
    248a:	2a 9a       	sbi	0x05, 2	; 5
SPI_transmit (0xff);
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit (0xff);
    2492:	8f ef       	ldi	r24, 0xFF	; 255
    2494:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
    2498:	cf ef       	ldi	r28, 0xFF	; 255
    249a:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    249c:	4a ea       	ldi	r20, 0xAA	; 170
    249e:	51 e0       	ldi	r21, 0x01	; 1
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
    24aa:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    24ac:	20 97       	sbiw	r28, 0x00	; 0
    24ae:	59 f4       	brne	.+22     	; 0x24c6 <SD_init+0x6e>
   {
	  TX_NEWLINE;
    24b0:	8d e0       	ldi	r24, 0x0D	; 13
    24b2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    24b6:	8a e0       	ldi	r24, 0x0A	; 10
    24b8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	80 93 4a 03 	sts	0x034A, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
	  SD_version = 1;
    24c2:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <SD_init+0x74>
   } //time out

}while(response != 0x01);
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	49 f7       	brne	.-46     	; 0x249c <SD_init+0x44>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    24ca:	02 e0       	ldi	r16, 0x02	; 2
    24cc:	cf ef       	ldi	r28, 0xFF	; 255
    24ce:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	ba 01       	movw	r22, r20
    24d6:	87 e3       	ldi	r24, 0x37	; 55
    24d8:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	70 e4       	ldi	r23, 0x40	; 64
    24e4:	89 e2       	ldi	r24, 0x29	; 41
    24e6:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
    24ea:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    24ec:	20 97       	sbiw	r28, 0x00	; 0
    24ee:	41 f4       	brne	.+16     	; 0x2500 <SD_init+0xa8>
   {
      TX_NEWLINE;
    24f0:	8d e0       	ldi	r24, 0x0D	; 13
    24f2:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    24f6:	8a e0       	ldi	r24, 0x0A	; 10
    24f8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	  return 2;  //time out, card initialization failed
    24fc:	12 e0       	ldi	r17, 0x02	; 2
    24fe:	27 c0       	rjmp	.+78     	; 0x254e <SD_init+0xf6>
   } 

}while(response != 0x00);
    2500:	81 11       	cpse	r24, r1
    2502:	e6 cf       	rjmp	.-52     	; 0x24d0 <SD_init+0x78>


retry = 0;
SDHC_flag = 0;
    2504:	10 92 3f 03 	sts	0x033F, r1

if (SD_version == 2)
    2508:	02 30       	cpi	r16, 0x02	; 2
    250a:	09 f5       	brne	.+66     	; 0x254e <SD_init+0xf6>
    250c:	cf ef       	ldi	r28, 0xFF	; 255
    250e:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	ba 01       	movw	r22, r20
    2516:	8a e3       	ldi	r24, 0x3A	; 58
    2518:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
    251c:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    251e:	20 97       	sbiw	r28, 0x00	; 0
    2520:	49 f4       	brne	.+18     	; 0x2534 <SD_init+0xdc>
     {
       TX_NEWLINE;
    2522:	8d e0       	ldi	r24, 0x0D	; 13
    2524:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2528:	8a e0       	ldi	r24, 0x0A	; 10
    252a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	   cardType = 0;
    252e:	10 92 4a 03 	sts	0x034A, r1
	   break;
    2532:	02 c0       	rjmp	.+4      	; 0x2538 <SD_init+0xe0>
     } //time out

   }while(response != 0x00);
    2534:	81 11       	cpse	r24, r1
    2536:	ec cf       	rjmp	.-40     	; 0x2510 <SD_init+0xb8>

   if(SDHC_flag == 1) cardType = 2;
    2538:	80 91 3f 03 	lds	r24, 0x033F
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	11 f4       	brne	.+4      	; 0x2544 <SD_init+0xec>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <SD_init+0xee>
   else cardType = 3;
    2544:	83 e0       	ldi	r24, 0x03	; 3
    2546:	80 93 4a 03 	sts	0x034A, r24
    254a:	01 c0       	rjmp	.+2      	; 0x254e <SD_init+0xf6>
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    254c:	11 e0       	ldi	r17, 0x01	; 1
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    254e:	81 2f       	mov	r24, r17
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    255a:	8f 92       	push	r8
    255c:	9f 92       	push	r9
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	6b 01       	movw	r12, r22
    256c:	7c 01       	movw	r14, r24
    256e:	49 01       	movw	r8, r18
    2570:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    2572:	ab 01       	movw	r20, r22
    2574:	bc 01       	movw	r22, r24
    2576:	80 e2       	ldi	r24, 0x20	; 32
    2578:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    257c:	81 11       	cpse	r24, r1
    257e:	1d c0       	rjmp	.+58     	; 0x25ba <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    2580:	b5 01       	movw	r22, r10
    2582:	a4 01       	movw	r20, r8
    2584:	41 50       	subi	r20, 0x01	; 1
    2586:	51 09       	sbc	r21, r1
    2588:	61 09       	sbc	r22, r1
    258a:	71 09       	sbc	r23, r1
    258c:	4c 0d       	add	r20, r12
    258e:	5d 1d       	adc	r21, r13
    2590:	6e 1d       	adc	r22, r14
    2592:	7f 1d       	adc	r23, r15
    2594:	81 e2       	ldi	r24, 0x21	; 33
    2596:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
if(response != 0x00)
    259a:	81 11       	cpse	r24, r1
    259c:	0e c0       	rjmp	.+28     	; 0x25ba <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	ba 01       	movw	r22, r20
    25a4:	86 e2       	ldi	r24, 0x26	; 38
if(response != 0x00)
  return response;

return 0; //normal return
}
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	8f 90       	pop	r8

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
if(response != 0x00)
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    25b6:	0c 94 be 11 	jmp	0x237c	; 0x237c <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	df 90       	pop	r13
    25c0:	cf 90       	pop	r12
    25c2:	bf 90       	pop	r11
    25c4:	af 90       	pop	r10
    25c6:	9f 90       	pop	r9
    25c8:	8f 90       	pop	r8
    25ca:	08 95       	ret

000025cc <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	ab 01       	movw	r20, r22
    25d2:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    25d4:	81 e1       	ldi	r24, 0x11	; 17
    25d6:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    25da:	81 11       	cpse	r24, r1
    25dc:	22 c0       	rjmp	.+68     	; 0x2622 <SD_readSingleBlock+0x56>

SD_CS_ASSERT;
    25de:	2a 98       	cbi	0x05, 2	; 5

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    25e0:	c0 e0       	ldi	r28, 0x00	; 0
    25e2:	d0 e0       	ldi	r29, 0x00	; 0
    25e4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    25e8:	8e 3f       	cpi	r24, 0xFE	; 254
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <SD_readSingleBlock+0x2c>
    25ec:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    25ee:	20 97       	sbiw	r28, 0x00	; 0
    25f0:	c9 f7       	brne	.-14     	; 0x25e4 <SD_readSingleBlock+0x18>
    25f2:	2a 9a       	sbi	0x05, 2	; 5
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	15 c0       	rjmp	.+42     	; 0x2622 <SD_readSingleBlock+0x56>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    25f8:	c0 e0       	ldi	r28, 0x00	; 0
    25fa:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    25fc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    2600:	fe 01       	movw	r30, r28
    2602:	e7 5c       	subi	r30, 0xC7	; 199
    2604:	fe 4f       	sbci	r31, 0xFE	; 254
    2606:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2608:	21 96       	adiw	r28, 0x01	; 1
    260a:	c1 15       	cp	r28, r1
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	d8 07       	cpc	r29, r24
    2610:	a9 f7       	brne	.-22     	; 0x25fc <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    2612:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SPI_receive();
    2616:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    261a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SD_CS_DEASSERT;
    261e:	2a 9a       	sbi	0x05, 2	; 5

return 0;
    2620:	80 e0       	ldi	r24, 0x00	; 0
}
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	08 95       	ret

00002628 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	ab 01       	movw	r20, r22
    262e:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    2630:	88 e1       	ldi	r24, 0x18	; 24
    2632:	0e 94 be 11 	call	0x237c	; 0x237c <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2636:	81 11       	cpse	r24, r1
    2638:	3c c0       	rjmp	.+120    	; 0x26b2 <SD_writeSingleBlock+0x8a>

SD_CS_ASSERT;
    263a:	2a 98       	cbi	0x05, 2	; 5

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    263c:	8e ef       	ldi	r24, 0xFE	; 254
    263e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    2642:	c0 e0       	ldi	r28, 0x00	; 0
    2644:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2646:	fe 01       	movw	r30, r28
    2648:	e7 5c       	subi	r30, 0xC7	; 199
    264a:	fe 4f       	sbci	r31, 0xFE	; 254
    264c:	80 81       	ld	r24, Z
    264e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    2652:	21 96       	adiw	r28, 0x01	; 1
    2654:	c1 15       	cp	r28, r1
    2656:	22 e0       	ldi	r18, 0x02	; 2
    2658:	d2 07       	cpc	r29, r18
    265a:	a9 f7       	brne	.-22     	; 0x2646 <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SPI_transmit(0xff);
    2662:	8f ef       	ldi	r24, 0xFF	; 255
    2664:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>

response = SPI_receive();
    2668:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    266c:	98 2f       	mov	r25, r24
    266e:	9f 71       	andi	r25, 0x1F	; 31
    2670:	95 30       	cpi	r25, 0x05	; 5
    2672:	11 f0       	breq	.+4      	; 0x2678 <SD_writeSingleBlock+0x50>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    2674:	2a 9a       	sbi	0x05, 2	; 5
  return response;
    2676:	1d c0       	rjmp	.+58     	; 0x26b2 <SD_writeSingleBlock+0x8a>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2678:	c0 e0       	ldi	r28, 0x00	; 0
    267a:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    267c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    2680:	81 11       	cpse	r24, r1
    2682:	03 c0       	rjmp	.+6      	; 0x268a <SD_writeSingleBlock+0x62>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2684:	21 96       	adiw	r28, 0x01	; 1
    2686:	d1 f7       	brne	.-12     	; 0x267c <SD_writeSingleBlock+0x54>
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <SD_writeSingleBlock+0x6e>

SD_CS_DEASSERT;
    268a:	2a 9a       	sbi	0x05, 2	; 5
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    2692:	2a 98       	cbi	0x05, 2	; 5

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <SD_writeSingleBlock+0x7e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    2696:	2a 9a       	sbi	0x05, 2	; 5
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0b c0       	rjmp	.+22     	; 0x26b2 <SD_writeSingleBlock+0x8a>
    269c:	ce 01       	movw	r24, r28
    269e:	01 96       	adiw	r24, 0x01	; 1
    26a0:	21 96       	adiw	r28, 0x01	; 1
    26a2:	c9 f3       	breq	.-14     	; 0x2696 <SD_writeSingleBlock+0x6e>
    26a4:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26a6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    26aa:	88 23       	and	r24, r24
    26ac:	b9 f3       	breq	.-18     	; 0x269c <SD_writeSingleBlock+0x74>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    26ae:	2a 9a       	sbi	0x05, 2	; 5

return 0;
    26b0:	80 e0       	ldi	r24, 0x00	; 0
}
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
	DDRB |=(1<<PINB5)|(1<<PINB2)|(1<<PINB3);
    26b8:	84 b1       	in	r24, 0x04	; 4
    26ba:	8c 62       	ori	r24, 0x2C	; 44
    26bc:	84 b9       	out	0x04, r24	; 4
	DDRB &=~(1<<PINB4);
    26be:	24 98       	cbi	0x04, 4	; 4
	SPCR |=(1<<MSTR)|(1<<SPE)|(1<<SPR1)|(1<<SPR0);//125khz
    26c0:	8c b5       	in	r24, 0x2c	; 44
    26c2:	83 65       	ori	r24, 0x53	; 83
    26c4:	8c bd       	out	0x2c, r24	; 44
    26c6:	08 95       	ret

000026c8 <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    26c8:	8e bd       	out	0x2e, r24	; 46
// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    26ca:	0d b4       	in	r0, 0x2d	; 45
    26cc:	07 fe       	sbrs	r0, 7
    26ce:	fd cf       	rjmp	.-6      	; 0x26ca <SPI_transmit+0x2>
data = SPDR;
    26d0:	8e b5       	in	r24, 0x2e	; 46

return(data);
}
    26d2:	08 95       	ret

000026d4 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));
    26d8:	0d b4       	in	r0, 0x2d	; 45
    26da:	07 fe       	sbrs	r0, 7
    26dc:	fd cf       	rjmp	.-6      	; 0x26d8 <SPI_receive+0x4>
data = SPDR;
    26de:	8e b5       	in	r24, 0x2e	; 46

// Return data register
return data;
}
    26e0:	08 95       	ret

000026e2 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
	RS_DDR |=(1<<TXD_PIN)|(1<<TXEN_PIN);
    26e2:	8a b1       	in	r24, 0x0a	; 10
    26e4:	82 68       	ori	r24, 0x82	; 130
    26e6:	8a b9       	out	0x0a, r24	; 10
	RS_DDR &=~(1<<RXD_PIN);
    26e8:	50 98       	cbi	0x0a, 0	; 10
	RS_PORT |= 1<<RXD_PIN;
    26ea:	58 9a       	sbi	0x0b, 0	; 11
	UCSR0B = 0x00; //disable while setting baud rate
    26ec:	e1 ec       	ldi	r30, 0xC1	; 193
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    26f2:	10 92 c0 00 	sts	0x00C0, r1
	/* Enable transmitter */
	/* Set frame format: 8data, 1stop bit */
	UCSR0C =(1<<UCSZ00)|(1<<UCSZ01);
    26f6:	86 e0       	ldi	r24, 0x06	; 6
    26f8:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H =(unsigned char)((MYUBRR)>>8);
    26fc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) (MYUBRR);
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
    2706:	88 e1       	ldi	r24, 0x18	; 24
    2708:	80 83       	st	Z, r24
	_holding = 0;
    270a:	10 92 50 03 	sts	0x0350, r1
    270e:	08 95       	ret

00002710 <USART_Flush>:
}

void USART_Flush( void )
{
	unsigned char  dummy;
	while ( UCSR0A & (1<<RXC0) ) dummy = UDR0;
    2710:	80 91 c0 00 	lds	r24, 0x00C0
    2714:	87 ff       	sbrs	r24, 7
    2716:	03 c0       	rjmp	.+6      	; 0x271e <USART_Flush+0xe>
    2718:	80 91 c6 00 	lds	r24, 0x00C6
    271c:	f9 cf       	rjmp	.-14     	; 0x2710 <USART_Flush>
}
    271e:	08 95       	ret

00002720 <RS485_TXEN.part.0>:

void RS485_TXEN(unsigned char _val)// _ENABLE || _DISABLE
{
	if (_val)
	{
		 RS_PORT |= 1<<TXEN_PIN;
    2720:	5f 9a       	sbi	0x0b, 7	; 11
		 UCSR0B &= ~(1<<RXEN0);
    2722:	e1 ec       	ldi	r30, 0xC1	; 193
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	80 83       	st	Z, r24
		 USART_Flush();
    272c:	0e 94 88 13 	call	0x2710	; 0x2710 <USART_Flush>
    2730:	8f e9       	ldi	r24, 0x9F	; 159
    2732:	9f e0       	ldi	r25, 0x0F	; 15
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <RS485_TXEN.part.0+0x14>
    2738:	00 c0       	rjmp	.+0      	; 0x273a <RS485_TXEN.part.0+0x1a>
    273a:	00 00       	nop
    273c:	08 95       	ret

0000273e <RS485_TXEN>:
}


void RS485_TXEN(unsigned char _val)// _ENABLE || _DISABLE
{
	if (_val)
    273e:	81 11       	cpse	r24, r1
    2740:	0c 94 90 13 	jmp	0x2720	; 0x2720 <RS485_TXEN.part.0>
		
	}
	
	else
	{
		while ( !(UCSR0A & (1<<TXC0)));
    2744:	80 91 c0 00 	lds	r24, 0x00C0
    2748:	86 ff       	sbrs	r24, 6
    274a:	fc cf       	rjmp	.-8      	; 0x2744 <RS485_TXEN+0x6>
		 RS_PORT &=~(1<<TXEN_PIN);
    274c:	5f 98       	cbi	0x0b, 7	; 11
		 UCSR0B |= (1<<RXEN0);
    274e:	80 91 c1 00 	lds	r24, 0x00C1
    2752:	80 61       	ori	r24, 0x10	; 16
    2754:	80 93 c1 00 	sts	0x00C1, r24
    2758:	8f e3       	ldi	r24, 0x3F	; 63
    275a:	9c e9       	ldi	r25, 0x9C	; 156
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <RS485_TXEN+0x1e>
    2760:	00 c0       	rjmp	.+0      	; 0x2762 <RS485_TXEN+0x24>
    2762:	00 00       	nop
		   _delay_ms(10);
			USART_Flush();
    2764:	0c 94 88 13 	jmp	0x2710	; 0x2710 <USART_Flush>

00002768 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	if (_holding==0) RS485_TXEN(_DISABLE);
    2768:	80 91 50 03 	lds	r24, 0x0350
    276c:	81 11       	cpse	r24, r1
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <receiveByte+0xc>
    2770:	0e 94 9f 13 	call	0x273e	; 0x273e <RS485_TXEN>
	_holding =1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	80 93 50 03 	sts	0x0350, r24
	while(!(UCSR0A & (1<<RXC0))); 	// Wait for incomming data
    277a:	80 91 c0 00 	lds	r24, 0x00C0
    277e:	87 ff       	sbrs	r24, 7
    2780:	fc cf       	rjmp	.-8      	; 0x277a <receiveByte+0x12>
	status = UCSR0A;
    2782:	80 91 c0 00 	lds	r24, 0x00C0
	data = UDR0;
    2786:	80 91 c6 00 	lds	r24, 0x00C6
	return(data);
}
    278a:	08 95       	ret

0000278c <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	1f 92       	push	r1
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	if (_holding==1) RS485_TXEN(_ENABLE);
    2796:	90 91 50 03 	lds	r25, 0x0350
    279a:	91 30       	cpi	r25, 0x01	; 1
    279c:	21 f4       	brne	.+8      	; 0x27a6 <transmitByte+0x1a>
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	0e 94 90 13 	call	0x2720	; 0x2720 <RS485_TXEN.part.0>
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
	_holding =0;
    27a6:	10 92 50 03 	sts	0x0350, r1
	while ( !(UCSR0A & (1<<UDRE0)) )
    27aa:	90 91 c0 00 	lds	r25, 0x00C0
    27ae:	95 ff       	sbrs	r25, 5
    27b0:	fc cf       	rjmp	.-8      	; 0x27aa <transmitByte+0x1e>
		; 			                /* Wait for empty transmit buffer */
	UDR0 = data; 			        /* Start transmition */
    27b2:	80 93 c6 00 	sts	0x00C6, r24
	
}
    27b6:	0f 90       	pop	r0
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	08 95       	ret

000027be <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F( const char* string)
{
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    27c4:	ce 01       	movw	r24, r28
    27c6:	fe 01       	movw	r30, r28
    27c8:	24 91       	lpm	r18, Z
    27ca:	22 23       	and	r18, r18
    27cc:	31 f0       	breq	.+12     	; 0x27da <transmitString_F+0x1c>
   transmitByte(pgm_read_byte(&(*string++)));
    27ce:	21 96       	adiw	r28, 0x01	; 1
    27d0:	fc 01       	movw	r30, r24
    27d2:	84 91       	lpm	r24, Z
    27d4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    27d8:	f5 cf       	rjmp	.-22     	; 0x27c4 <transmitString_F+0x6>
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	ec 01       	movw	r28, r24
  while (*string)
    27e6:	89 91       	ld	r24, Y+
    27e8:	88 23       	and	r24, r24
    27ea:	19 f0       	breq	.+6      	; 0x27f2 <transmitString+0x12>
   transmitByte(*string++);
    27ec:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    27f0:	fa cf       	rjmp	.-12     	; 0x27e6 <transmitString+0x6>
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    27fe:	0e 94 49 17 	call	0x2e92	; 0x2e92 <i2c_start>
   if(errorStatus == 1)
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	f9 f0       	breq	.+62     	; 0x2844 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2806:	80 ed       	ldi	r24, 0xD0	; 208
    2808:	0e 94 67 17 	call	0x2ece	; 0x2ece <i2c_sendAddress>
   
   if(errorStatus == 1)
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	d1 f0       	breq	.+52     	; 0x2844 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	0e 94 7d 17 	call	0x2efa	; 0x2efa <i2c_sendData>
   if(errorStatus == 1)
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	a9 f0       	breq	.+42     	; 0x2844 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    281a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <i2c_repeatStart>
   if(errorStatus == 1)
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	89 f0       	breq	.+34     	; 0x2844 <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    2822:	81 ed       	ldi	r24, 0xD1	; 209
    2824:	0e 94 67 17 	call	0x2ece	; 0x2ece <i2c_sendAddress>
   
   if(errorStatus == 1)
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	61 f0       	breq	.+24     	; 0x2844 <RTC_read+0x4c>
    282c:	c4 e1       	ldi	r28, 0x14	; 20
    282e:	d1 e0       	ldi	r29, 0x01	; 1
    2830:	10 e0       	ldi	r17, 0x00	; 0
	 return 1;
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    2832:	16 30       	cpi	r17, 0x06	; 6
    2834:	19 f4       	brne	.+6      	; 0x283c <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    2836:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <i2c_receiveData_NACK>
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    283c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    2840:	8e 37       	cpi	r24, 0x7E	; 126
    2842:	21 f4       	brne	.+8      	; 0x284c <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    2844:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	   		return 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	07 c0       	rjmp	.+14     	; 0x285a <RTC_read+0x62>
   	  }
	  
	  rtc_register[i] = data;
    284c:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    284e:	1f 5f       	subi	r17, 0xFF	; 255
    2850:	17 30       	cpi	r17, 0x07	; 7
    2852:	79 f7       	brne	.-34     	; 0x2832 <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    2854:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	return 0;
    2858:	80 e0       	ldi	r24, 0x00	; 0
}	  
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	1f 91       	pop	r17
    2860:	08 95       	ret

00002862 <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    2862:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <RTC_read>
   if(error) return 1;
    2866:	81 11       	cpse	r24, r1
    2868:	32 c0       	rjmp	.+100    	; 0x28ce <RTC_getTime+0x6c>

   RTC_read();
    286a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <RTC_read>
   time[8] = 0x00;	  //NIL
    286e:	10 92 59 03 	sts	0x0359, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    2872:	80 91 14 01 	lds	r24, 0x0114
    2876:	98 2f       	mov	r25, r24
    2878:	9f 70       	andi	r25, 0x0F	; 15
    287a:	90 63       	ori	r25, 0x30	; 48
    287c:	90 93 58 03 	sts	0x0358, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    2880:	80 77       	andi	r24, 0x70	; 112
    2882:	82 95       	swap	r24
    2884:	8f 70       	andi	r24, 0x0F	; 15
    2886:	80 63       	ori	r24, 0x30	; 48
    2888:	80 93 57 03 	sts	0x0357, r24
   time[5] = ':';
    288c:	2a e3       	ldi	r18, 0x3A	; 58
    288e:	20 93 56 03 	sts	0x0356, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    2892:	80 91 15 01 	lds	r24, 0x0115
    2896:	98 2f       	mov	r25, r24
    2898:	9f 70       	andi	r25, 0x0F	; 15
    289a:	90 63       	ori	r25, 0x30	; 48
    289c:	90 93 55 03 	sts	0x0355, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    28a0:	80 77       	andi	r24, 0x70	; 112
    28a2:	82 95       	swap	r24
    28a4:	8f 70       	andi	r24, 0x0F	; 15
    28a6:	80 63       	ori	r24, 0x30	; 48
    28a8:	80 93 54 03 	sts	0x0354, r24
   time[2] = ':'; 
    28ac:	20 93 53 03 	sts	0x0353, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    28b0:	80 91 16 01 	lds	r24, 0x0116
    28b4:	98 2f       	mov	r25, r24
    28b6:	9f 70       	andi	r25, 0x0F	; 15
    28b8:	90 63       	ori	r25, 0x30	; 48
    28ba:	90 93 52 03 	sts	0x0352, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    28be:	80 73       	andi	r24, 0x30	; 48
    28c0:	82 95       	swap	r24
    28c2:	8f 70       	andi	r24, 0x0F	; 15
    28c4:	80 63       	ori	r24, 0x30	; 48
    28c6:	80 93 51 03 	sts	0x0351, r24

   return 0;
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
    28d0:	08 95       	ret

000028d2 <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    28d2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <RTC_read>
  if(error) return 1;
    28d6:	81 11       	cpse	r24, r1
    28d8:	36 c0       	rjmp	.+108    	; 0x2946 <RTC_getDate+0x74>

  date[11] = 0x00;
    28da:	10 92 67 03 	sts	0x0367, r1
  date[10] = 0x00;
    28de:	10 92 66 03 	sts	0x0366, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    28e2:	80 91 1a 01 	lds	r24, 0x011A
    28e6:	98 2f       	mov	r25, r24
    28e8:	9f 70       	andi	r25, 0x0F	; 15
    28ea:	90 63       	ori	r25, 0x30	; 48
    28ec:	90 93 65 03 	sts	0x0365, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    28f0:	82 95       	swap	r24
    28f2:	8f 70       	andi	r24, 0x0F	; 15
    28f4:	80 63       	ori	r24, 0x30	; 48
    28f6:	80 93 64 03 	sts	0x0364, r24
  date[7] = '0';
    28fa:	80 e3       	ldi	r24, 0x30	; 48
    28fc:	80 93 63 03 	sts	0x0363, r24
  date[6] = '2';
    2900:	82 e3       	ldi	r24, 0x32	; 50
    2902:	80 93 62 03 	sts	0x0362, r24
  date[5] = '/';
    2906:	9f e2       	ldi	r25, 0x2F	; 47
    2908:	90 93 61 03 	sts	0x0361, r25
  date[4] = (MONTH & 0x0f) | 0x30;
    290c:	20 91 19 01 	lds	r18, 0x0119
    2910:	82 2f       	mov	r24, r18
    2912:	8f 70       	andi	r24, 0x0F	; 15
    2914:	80 63       	ori	r24, 0x30	; 48
    2916:	80 93 60 03 	sts	0x0360, r24
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    291a:	22 95       	swap	r18
    291c:	21 70       	andi	r18, 0x01	; 1
    291e:	20 63       	ori	r18, 0x30	; 48
    2920:	20 93 5f 03 	sts	0x035F, r18
  date[2] = '/';
    2924:	90 93 5e 03 	sts	0x035E, r25
  date[1] = (DATE & 0x0f) | 0x30;
    2928:	80 91 18 01 	lds	r24, 0x0118
    292c:	98 2f       	mov	r25, r24
    292e:	9f 70       	andi	r25, 0x0F	; 15
    2930:	90 63       	ori	r25, 0x30	; 48
    2932:	90 93 5d 03 	sts	0x035D, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    2936:	80 73       	andi	r24, 0x30	; 48
    2938:	82 95       	swap	r24
    293a:	8f 70       	andi	r24, 0x0F	; 15
    293c:	80 63       	ori	r24, 0x30	; 48
    293e:	80 93 5c 03 	sts	0x035C, r24
  return 0;
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
    2948:	08 95       	ret

0000294a <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    294a:	0e 94 31 14 	call	0x2862	; 0x2862 <RTC_getTime>
  if(error) return 1;
    294e:	81 11       	cpse	r24, r1
    2950:	10 c0       	rjmp	.+32     	; 0x2972 <RTC_displayTime+0x28>
  
  TX_NEWLINE;
    2952:	8d e0       	ldi	r24, 0x0D	; 13
    2954:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2958:	8a e0       	ldi	r24, 0x0A	; 10
    295a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Time:"));
    295e:	89 e9       	ldi	r24, 0x99	; 153
    2960:	96 e0       	ldi	r25, 0x06	; 6
    2962:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  transmitString(time);
    2966:	81 e5       	ldi	r24, 0x51	; 81
    2968:	93 e0       	ldi	r25, 0x03	; 3
    296a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <transmitString>

  return 0;
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
    2974:	08 95       	ret

00002976 <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    2976:	89 e8       	ldi	r24, 0x89	; 137
    2978:	96 e0       	ldi	r25, 0x06	; 6
    297a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  
  switch(DAY)
    297e:	80 91 17 01 	lds	r24, 0x0117
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	87 30       	cpi	r24, 0x07	; 7
    2986:	91 05       	cpc	r25, r1
    2988:	d0 f4       	brcc	.+52     	; 0x29be <RTC_displayDay+0x48>
    298a:	fc 01       	movw	r30, r24
    298c:	ec 5c       	subi	r30, 0xCC	; 204
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__tablejump2__>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    2994:	82 e8       	ldi	r24, 0x82	; 130
    2996:	96 e0       	ldi	r25, 0x06	; 6
    2998:	14 c0       	rjmp	.+40     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    299a:	8b e7       	ldi	r24, 0x7B	; 123
    299c:	96 e0       	ldi	r25, 0x06	; 6
    299e:	11 c0       	rjmp	.+34     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    29a0:	83 e7       	ldi	r24, 0x73	; 115
    29a2:	96 e0       	ldi	r25, 0x06	; 6
    29a4:	0e c0       	rjmp	.+28     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    29a6:	89 e6       	ldi	r24, 0x69	; 105
    29a8:	96 e0       	ldi	r25, 0x06	; 6
    29aa:	0b c0       	rjmp	.+22     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    29ac:	80 e6       	ldi	r24, 0x60	; 96
    29ae:	96 e0       	ldi	r25, 0x06	; 6
    29b0:	08 c0       	rjmp	.+16     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    29b2:	89 e5       	ldi	r24, 0x59	; 89
    29b4:	96 e0       	ldi	r25, 0x06	; 6
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <RTC_displayDay+0x4c>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    29b8:	80 e5       	ldi	r24, 0x50	; 80
    29ba:	96 e0       	ldi	r25, 0x06	; 6
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <RTC_displayDay+0x4c>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    29be:	88 e4       	ldi	r24, 0x48	; 72
    29c0:	96 e0       	ldi	r25, 0x06	; 6
    29c2:	0c 94 df 13 	jmp	0x27be	; 0x27be <transmitString_F>

000029c6 <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    29c6:	0e 94 69 14 	call	0x28d2	; 0x28d2 <RTC_getDate>
  if(error) return 1;
    29ca:	81 11       	cpse	r24, r1
    29cc:	12 c0       	rjmp	.+36     	; 0x29f2 <RTC_displayDate+0x2c>
  
  TX_NEWLINE;
    29ce:	8d e0       	ldi	r24, 0x0D	; 13
    29d0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    29d4:	8a e0       	ldi	r24, 0x0A	; 10
    29d6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Date:")); 
    29da:	83 e9       	ldi	r24, 0x93	; 147
    29dc:	96 e0       	ldi	r25, 0x06	; 6
    29de:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  transmitString(date);  
    29e2:	8c e5       	ldi	r24, 0x5C	; 92
    29e4:	93 e0       	ldi	r25, 0x03	; 3
    29e6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <transmitString>
  RTC_displayDay();  
    29ea:	0e 94 bb 14 	call	0x2976	; 0x2976 <RTC_displayDay>
  
  return 0; 
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
    29f4:	08 95       	ret

000029f6 <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    29f6:	20 91 57 03 	lds	r18, 0x0357
    29fa:	27 70       	andi	r18, 0x07	; 7
    29fc:	80 e1       	ldi	r24, 0x10	; 16
    29fe:	28 9f       	mul	r18, r24
    2a00:	90 01       	movw	r18, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	30 91 58 03 	lds	r19, 0x0358
    2a08:	3f 70       	andi	r19, 0x0F	; 15
    2a0a:	32 2b       	or	r19, r18
    2a0c:	30 93 14 01 	sts	0x0114, r19
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    2a10:	20 91 54 03 	lds	r18, 0x0354
    2a14:	27 70       	andi	r18, 0x07	; 7
    2a16:	80 e1       	ldi	r24, 0x10	; 16
    2a18:	28 9f       	mul	r18, r24
    2a1a:	90 01       	movw	r18, r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	30 91 55 03 	lds	r19, 0x0355
    2a22:	3f 70       	andi	r19, 0x0F	; 15
    2a24:	32 2b       	or	r19, r18
    2a26:	30 93 15 01 	sts	0x0115, r19
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    2a2a:	20 91 51 03 	lds	r18, 0x0351
    2a2e:	23 70       	andi	r18, 0x03	; 3
    2a30:	80 e1       	ldi	r24, 0x10	; 16
    2a32:	28 9f       	mul	r18, r24
    2a34:	90 01       	movw	r18, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	30 91 52 03 	lds	r19, 0x0352
    2a3c:	3f 70       	andi	r19, 0x0F	; 15
    2a3e:	32 2b       	or	r19, r18
    2a40:	30 93 16 01 	sts	0x0116, r19
  DAY = date[10];
    2a44:	20 91 66 03 	lds	r18, 0x0366
    2a48:	20 93 17 01 	sts	0x0117, r18
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    2a4c:	20 91 5c 03 	lds	r18, 0x035C
    2a50:	23 70       	andi	r18, 0x03	; 3
    2a52:	80 e1       	ldi	r24, 0x10	; 16
    2a54:	28 9f       	mul	r18, r24
    2a56:	90 01       	movw	r18, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	30 91 5d 03 	lds	r19, 0x035D
    2a5e:	3f 70       	andi	r19, 0x0F	; 15
    2a60:	32 2b       	or	r19, r18
    2a62:	30 93 18 01 	sts	0x0118, r19
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    2a66:	20 91 5f 03 	lds	r18, 0x035F
    2a6a:	82 2f       	mov	r24, r18
    2a6c:	81 70       	andi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	24 e0       	ldi	r18, 0x04	; 4
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	2a 95       	dec	r18
    2a78:	e1 f7       	brne	.-8      	; 0x2a72 <RTC_updateRegisters+0x7c>
    2a7a:	90 91 60 03 	lds	r25, 0x0360
    2a7e:	9f 70       	andi	r25, 0x0F	; 15
    2a80:	98 2b       	or	r25, r24
    2a82:	90 93 19 01 	sts	0x0119, r25
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    2a86:	80 91 64 03 	lds	r24, 0x0364
    2a8a:	20 e1       	ldi	r18, 0x10	; 16
    2a8c:	82 9f       	mul	r24, r18
    2a8e:	c0 01       	movw	r24, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	90 91 65 03 	lds	r25, 0x0365
    2a96:	9f 70       	andi	r25, 0x0F	; 15
    2a98:	98 2b       	or	r25, r24
    2a9a:	90 93 1a 01 	sts	0x011A, r25
    2a9e:	08 95       	ret

00002aa0 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2aa4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <i2c_start>
   if(errorStatus == 1)
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	21 f4       	brne	.+8      	; 0x2ab4 <RTC_writeTime+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    2aac:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	 return(1);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	18 c0       	rjmp	.+48     	; 0x2ae4 <RTC_writeTime+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2ab4:	80 ed       	ldi	r24, 0xD0	; 208
    2ab6:	0e 94 67 17 	call	0x2ece	; 0x2ece <i2c_sendAddress>
   
   if(errorStatus == 1)
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	b9 f3       	breq	.-18     	; 0x2aac <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <i2c_sendData>
   if(errorStatus == 1)
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	91 f3       	breq	.-28     	; 0x2aac <RTC_writeTime+0xc>
    2ac8:	c4 e1       	ldi	r28, 0x14	; 20
    2aca:	d1 e0       	ldi	r29, 0x01	; 1
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2acc:	89 91       	ld	r24, Y+
    2ace:	0e 94 7d 17 	call	0x2efa	; 0x2efa <i2c_sendData>
   	  if(errorStatus == 1)
    2ad2:	81 30       	cpi	r24, 0x01	; 1
    2ad4:	59 f3       	breq	.-42     	; 0x2aac <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	c7 31       	cpi	r28, 0x17	; 23
    2ada:	d8 07       	cpc	r29, r24
    2adc:	b9 f7       	brne	.-18     	; 0x2acc <RTC_writeTime+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2ade:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	return(0);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	08 95       	ret

00002aea <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2aee:	0e 94 49 17 	call	0x2e92	; 0x2e92 <i2c_start>
   if(errorStatus == 1)
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	21 f4       	brne	.+8      	; 0x2afe <RTC_writeDate+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    2af6:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	 return(1);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	18 c0       	rjmp	.+48     	; 0x2b2e <RTC_writeDate+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2afe:	80 ed       	ldi	r24, 0xD0	; 208
    2b00:	0e 94 67 17 	call	0x2ece	; 0x2ece <i2c_sendAddress>
   
   if(errorStatus == 1)
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	b9 f3       	breq	.-18     	; 0x2af6 <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <i2c_sendData>
   if(errorStatus == 1)
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	91 f3       	breq	.-28     	; 0x2af6 <RTC_writeDate+0xc>
    2b12:	c7 e1       	ldi	r28, 0x17	; 23
    2b14:	d1 e0       	ldi	r29, 0x01	; 1
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2b16:	89 91       	ld	r24, Y+
    2b18:	0e 94 7d 17 	call	0x2efa	; 0x2efa <i2c_sendData>
   	  if(errorStatus == 1)
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	59 f3       	breq	.-42     	; 0x2af6 <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	cb 31       	cpi	r28, 0x1B	; 27
    2b24:	d8 07       	cpc	r29, r24
    2b26:	b9 f7       	brne	.-18     	; 0x2b16 <RTC_writeDate+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2b28:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <i2c_stop>
	return(0);
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
}
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	08 95       	ret

00002b34 <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    2b34:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    2b36:	8d e0       	ldi	r24, 0x0D	; 13
    2b38:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2b3c:	8a e0       	ldi	r24, 0x0A	; 10
    2b3e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    2b42:	84 e2       	ldi	r24, 0x24	; 36
    2b44:	96 e0       	ldi	r25, 0x06	; 6
    2b46:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    2b4a:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2b4e:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2b50:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x32)
    2b54:	80 ed       	ldi	r24, 0xD0	; 208
    2b56:	8c 0f       	add	r24, r28
    2b58:	83 30       	cpi	r24, 0x03	; 3
    2b5a:	08 f0       	brcs	.+2      	; 0x2b5e <RTC_updateTime+0x2a>
    2b5c:	65 c0       	rjmp	.+202    	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[0]= data;
    2b5e:	c0 93 51 03 	sts	0x0351, r28
	 
	data = receiveByte();
    2b62:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2b66:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2b68:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2b6c:	80 ed       	ldi	r24, 0xD0	; 208
    2b6e:	8c 0f       	add	r24, r28
    2b70:	8a 30       	cpi	r24, 0x0A	; 10
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <RTC_updateTime+0x42>
    2b74:	59 c0       	rjmp	.+178    	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	time[1]= data;
    2b76:	c0 93 52 03 	sts	0x0352, r28
	
	transmitByte(':');
    2b7a:	8a e3       	ldi	r24, 0x3A	; 58
    2b7c:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    2b80:	80 91 51 03 	lds	r24, 0x0351
    2b84:	83 70       	andi	r24, 0x03	; 3
    2b86:	20 91 52 03 	lds	r18, 0x0352
    2b8a:	2f 70       	andi	r18, 0x0F	; 15
    2b8c:	3a e0       	ldi	r19, 0x0A	; 10
    2b8e:	83 9f       	mul	r24, r19
    2b90:	c0 01       	movw	r24, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	82 0f       	add	r24, r18
    2b96:	91 1d       	adc	r25, r1
    2b98:	48 97       	sbiw	r24, 0x18	; 24
    2b9a:	0c f0       	brlt	.+2      	; 0x2b9e <RTC_updateTime+0x6a>
    2b9c:	45 c0       	rjmp	.+138    	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    2b9e:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2ba2:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2ba4:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x35)
    2ba8:	80 ed       	ldi	r24, 0xD0	; 208
    2baa:	8c 0f       	add	r24, r28
    2bac:	86 30       	cpi	r24, 0x06	; 6
    2bae:	e0 f5       	brcc	.+120    	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    2bb0:	c0 93 54 03 	sts	0x0354, r28
	
	data = receiveByte();
    2bb4:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2bb8:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2bba:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2bbe:	80 ed       	ldi	r24, 0xD0	; 208
    2bc0:	8c 0f       	add	r24, r28
    2bc2:	8a 30       	cpi	r24, 0x0A	; 10
    2bc4:	88 f5       	brcc	.+98     	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    2bc6:	c0 93 55 03 	sts	0x0355, r28
	
	transmitByte(':');
    2bca:	8a e3       	ldi	r24, 0x3A	; 58
    2bcc:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    2bd0:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2bd4:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2bd6:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x35)
    2bda:	80 ed       	ldi	r24, 0xD0	; 208
    2bdc:	8c 0f       	add	r24, r28
    2bde:	86 30       	cpi	r24, 0x06	; 6
    2be0:	18 f5       	brcc	.+70     	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    2be2:	c0 93 57 03 	sts	0x0357, r28
	
	data = receiveByte();
    2be6:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2bea:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2bec:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2bf0:	80 ed       	ldi	r24, 0xD0	; 208
    2bf2:	8c 0f       	add	r24, r28
    2bf4:	8a 30       	cpi	r24, 0x0A	; 10
    2bf6:	c0 f4       	brcc	.+48     	; 0x2c28 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    2bf8:	c0 93 58 03 	sts	0x0358, r28
	
	 	  
  RTC_updateRegisters(); 
    2bfc:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <RTC_updateRegisters>
  data = RTC_writeTime();
    2c00:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <RTC_writeTime>
    2c04:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    2c06:	8d e0       	ldi	r24, 0x0D	; 13
    2c08:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2c0c:	8a e0       	ldi	r24, 0x0A	; 10
    2c0e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  if(data == 0)
    2c12:	c1 11       	cpse	r28, r1
    2c14:	06 c0       	rjmp	.+12     	; 0x2c22 <RTC_updateTime+0xee>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2c16:	8a e0       	ldi	r24, 0x0A	; 10
    2c18:	96 e0       	ldi	r25, 0x06	; 6
    2c1a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
	 return 0;
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	0e c0       	rjmp	.+28     	; 0x2c3e <RTC_updateTime+0x10a>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    2c22:	85 ef       	ldi	r24, 0xF5	; 245
    2c24:	95 e0       	ldi	r25, 0x05	; 5
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <RTC_updateTime+0x104>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    2c28:	8d e0       	ldi	r24, 0x0D	; 13
    2c2a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2c2e:	8a e0       	ldi	r24, 0x0A	; 10
    2c30:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2c34:	85 ee       	ldi	r24, 0xE5	; 229
    2c36:	95 e0       	ldi	r25, 0x05	; 5
    2c38:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  return 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
}  
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
  unsigned char data;
  TX_NEWLINE;
    2c46:	8d e0       	ldi	r24, 0x0D	; 13
    2c48:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2c4c:	8a e0       	ldi	r24, 0x0A	; 10
    2c4e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    2c52:	8e ec       	ldi	r24, 0xCE	; 206
    2c54:	95 e0       	ldi	r25, 0x05	; 5
    2c56:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    2c5a:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2c5e:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
    2c60:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x33)
    2c64:	80 ed       	ldi	r24, 0xD0	; 208
    2c66:	8c 0f       	add	r24, r28
    2c68:	84 30       	cpi	r24, 0x04	; 4
    2c6a:	08 f0       	brcs	.+2      	; 0x2c6e <RTC_updateDate+0x2c>
    2c6c:	95 c0       	rjmp	.+298    	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[0]= data;
    2c6e:	c0 93 5c 03 	sts	0x035C, r28
	 
	data = receiveByte();
    2c72:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2c76:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2c78:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2c7c:	80 ed       	ldi	r24, 0xD0	; 208
    2c7e:	8c 0f       	add	r24, r28
    2c80:	8a 30       	cpi	r24, 0x0A	; 10
    2c82:	08 f0       	brcs	.+2      	; 0x2c86 <RTC_updateDate+0x44>
    2c84:	89 c0       	rjmp	.+274    	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[1]= data;
    2c86:	c0 93 5d 03 	sts	0x035D, r28
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    2c8a:	20 91 5c 03 	lds	r18, 0x035C
    2c8e:	23 70       	andi	r18, 0x03	; 3
    2c90:	cf 70       	andi	r28, 0x0F	; 15
    2c92:	8a e0       	ldi	r24, 0x0A	; 10
    2c94:	28 9f       	mul	r18, r24
    2c96:	90 01       	movw	r18, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2c 0f       	add	r18, r28
    2c9c:	31 1d       	adc	r19, r1
    2c9e:	20 32       	cpi	r18, 0x20	; 32
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	0c f0       	brlt	.+2      	; 0x2ca6 <RTC_updateDate+0x64>
    2ca4:	79 c0       	rjmp	.+242    	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
    transmitByte('/');
    2ca6:	8f e2       	ldi	r24, 0x2F	; 47
    2ca8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	
	date[2] = '/';
    2cac:	df e2       	ldi	r29, 0x2F	; 47
    2cae:	d0 93 5e 03 	sts	0x035E, r29
	   
	
	data = receiveByte();			   			  //receive month
    2cb2:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2cb6:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2cb8:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x31)
    2cbc:	80 ed       	ldi	r24, 0xD0	; 208
    2cbe:	8c 0f       	add	r24, r28
    2cc0:	82 30       	cpi	r24, 0x02	; 2
    2cc2:	08 f0       	brcs	.+2      	; 0x2cc6 <RTC_updateDate+0x84>
    2cc4:	69 c0       	rjmp	.+210    	; 0x2d98 <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    2cc6:	c0 93 5f 03 	sts	0x035F, r28
	
	data = receiveByte();
    2cca:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2cce:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2cd0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2cd4:	80 ed       	ldi	r24, 0xD0	; 208
    2cd6:	8c 0f       	add	r24, r28
    2cd8:	8a 30       	cpi	r24, 0x0A	; 10
    2cda:	08 f0       	brcs	.+2      	; 0x2cde <RTC_updateDate+0x9c>
    2cdc:	5d c0       	rjmp	.+186    	; 0x2d98 <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    2cde:	c0 93 60 03 	sts	0x0360, r28
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    2ce2:	20 91 5f 03 	lds	r18, 0x035F
    2ce6:	23 70       	andi	r18, 0x03	; 3
    2ce8:	cf 70       	andi	r28, 0x0F	; 15
    2cea:	8a e0       	ldi	r24, 0x0A	; 10
    2cec:	28 9f       	mul	r18, r24
    2cee:	90 01       	movw	r18, r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	2c 0f       	add	r18, r28
    2cf4:	31 1d       	adc	r19, r1
    2cf6:	2d 30       	cpi	r18, 0x0D	; 13
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	0c f0       	brlt	.+2      	; 0x2cfe <RTC_updateDate+0xbc>
    2cfc:	4d c0       	rjmp	.+154    	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	transmitByte('/');
    2cfe:	8f e2       	ldi	r24, 0x2F	; 47
    2d00:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	   
	
	date[5] = '/';
    2d04:	d0 93 61 03 	sts	0x0361, r29
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    2d08:	82 e3       	ldi	r24, 0x32	; 50
    2d0a:	80 93 62 03 	sts	0x0362, r24
	date[7] = '0';
    2d0e:	80 e3       	ldi	r24, 0x30	; 48
    2d10:	80 93 63 03 	sts	0x0363, r24
	
	data = receiveByte();			   			 
    2d14:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2d18:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2d1a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2d1e:	80 ed       	ldi	r24, 0xD0	; 208
    2d20:	8c 0f       	add	r24, r28
    2d22:	8a 30       	cpi	r24, 0x0A	; 10
    2d24:	c8 f5       	brcc	.+114    	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    2d26:	c0 93 64 03 	sts	0x0364, r28
	
	data = receiveByte();
    2d2a:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2d2e:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2d30:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x39)
    2d34:	80 ed       	ldi	r24, 0xD0	; 208
    2d36:	8c 0f       	add	r24, r28
    2d38:	8a 30       	cpi	r24, 0x0A	; 10
    2d3a:	70 f5       	brcc	.+92     	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    2d3c:	c0 93 65 03 	sts	0x0365, r28
	
	TX_NEWLINE;
    2d40:	8d e0       	ldi	r24, 0x0D	; 13
    2d42:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2d46:	8a e0       	ldi	r24, 0x0A	; 10
    2d48:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    2d4c:	85 ea       	ldi	r24, 0xA5	; 165
    2d4e:	95 e0       	ldi	r25, 0x05	; 5
    2d50:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    2d54:	0e 94 b4 13 	call	0x2768	; 0x2768 <receiveByte>
    2d58:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2d5a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
	if(data < 0x30 || data > 0x36)
    2d5e:	80 ed       	ldi	r24, 0xD0	; 208
    2d60:	8c 0f       	add	r24, r28
    2d62:	87 30       	cpi	r24, 0x07	; 7
    2d64:	c8 f4       	brcc	.+50     	; 0x2d98 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    2d66:	cf 70       	andi	r28, 0x0F	; 15
    2d68:	c0 93 66 03 	sts	0x0366, r28
		 	  
  RTC_updateRegisters(); 
    2d6c:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <RTC_updateRegisters>
  data = RTC_writeDate();
    2d70:	0e 94 75 15 	call	0x2aea	; 0x2aea <RTC_writeDate>
    2d74:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    2d76:	8d e0       	ldi	r24, 0x0D	; 13
    2d78:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2d7c:	8a e0       	ldi	r24, 0x0A	; 10
    2d7e:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  if(data == 0)
    2d82:	c1 11       	cpse	r28, r1
    2d84:	06 c0       	rjmp	.+12     	; 0x2d92 <RTC_updateDate+0x150>
  {
	  
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    2d86:	8b e8       	ldi	r24, 0x8B	; 139
    2d88:	95 e0       	ldi	r25, 0x05	; 5
    2d8a:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
	 return 0;
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	0e c0       	rjmp	.+28     	; 0x2dae <RTC_updateDate+0x16c>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2d92:	86 e7       	ldi	r24, 0x76	; 118
    2d94:	95 e0       	ldi	r25, 0x05	; 5
    2d96:	08 c0       	rjmp	.+16     	; 0x2da8 <RTC_updateDate+0x166>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
    2d9e:	8a e0       	ldi	r24, 0x0A	; 10
    2da0:	0e 94 c6 13 	call	0x278c	; 0x278c <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2da4:	86 e6       	ldi	r24, 0x66	; 102
    2da6:	95 e0       	ldi	r25, 0x05	; 5
    2da8:	0e 94 df 13 	call	0x27be	; 0x27be <transmitString_F>
  return 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
}  
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

00002db4 <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    2db4:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <RTC_read>
   if(error) return 1;
    2db8:	81 11       	cpse	r24, r1
    2dba:	61 c0       	rjmp	.+194    	; 0x2e7e <getDateTime_FAT+0xca>

   yr = (YEAR & 0xf0) >> 4;
    2dbc:	80 91 1a 01 	lds	r24, 0x011A
    2dc0:	68 2f       	mov	r22, r24
    2dc2:	62 95       	swap	r22
    2dc4:	6f 70       	andi	r22, 0x0F	; 15
   yr = (yr * 10)+(YEAR & 0x0f);
    2dc6:	8f 70       	andi	r24, 0x0F	; 15
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	44 96       	adiw	r24, 0x14	; 20
   yr = yr+2000;
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    2dcc:	30 91 19 01 	lds	r19, 0x0119
    2dd0:	53 2f       	mov	r21, r19
    2dd2:	52 95       	swap	r21
    2dd4:	5f 70       	andi	r21, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    2dd6:	20 91 18 01 	lds	r18, 0x0118
    2dda:	42 2f       	mov	r20, r18
    2ddc:	42 95       	swap	r20
    2dde:	4f 70       	andi	r20, 0x0F	; 15
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
   yr = yr+2000;
   yr = yr - 1980;
    2de0:	7a e0       	ldi	r23, 0x0A	; 10
    2de2:	67 9f       	mul	r22, r23
    2de4:	80 0d       	add	r24, r0
    2de6:	91 1d       	adc	r25, r1
    2de8:	11 24       	eor	r1, r1
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    2dea:	64 e0       	ldi	r22, 0x04	; 4
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	6a 95       	dec	r22
    2df2:	e1 f7       	brne	.-8      	; 0x2dec <getDateTime_FAT+0x38>
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    2df4:	3f 70       	andi	r19, 0x0F	; 15
    2df6:	6a e0       	ldi	r22, 0x0A	; 10
    2df8:	56 9f       	mul	r21, r22
    2dfa:	30 0d       	add	r19, r0
    2dfc:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;
    2dfe:	83 2b       	or	r24, r19

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    2e00:	75 e0       	ldi	r23, 0x05	; 5
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	7a 95       	dec	r23
    2e08:	e1 f7       	brne	.-8      	; 0x2e02 <getDateTime_FAT+0x4e>
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    2e0a:	2f 70       	andi	r18, 0x0F	; 15
    2e0c:	7a e0       	ldi	r23, 0x0A	; 10
    2e0e:	47 9f       	mul	r20, r23
    2e10:	20 0d       	add	r18, r0
    2e12:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    2e14:	82 2b       	or	r24, r18
    2e16:	90 93 20 01 	sts	0x0120, r25
    2e1a:	80 93 1f 01 	sts	0x011F, r24


   hr = (HOURS & 0xf0) >> 4;
    2e1e:	80 91 16 01 	lds	r24, 0x0116
    2e22:	98 2f       	mov	r25, r24
    2e24:	92 95       	swap	r25
    2e26:	9f 70       	andi	r25, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    2e28:	30 91 15 01 	lds	r19, 0x0115
    2e2c:	43 2f       	mov	r20, r19
    2e2e:	42 95       	swap	r20
    2e30:	4f 70       	andi	r20, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    2e32:	20 91 14 01 	lds	r18, 0x0114
    2e36:	52 2f       	mov	r21, r18
    2e38:	52 95       	swap	r21
    2e3a:	5f 70       	andi	r21, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    2e3c:	2f 70       	andi	r18, 0x0F	; 15
    2e3e:	6a e0       	ldi	r22, 0x0A	; 10
    2e40:	56 9f       	mul	r21, r22
    2e42:	20 0d       	add	r18, r0
    2e44:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    2e46:	8f 70       	andi	r24, 0x0F	; 15
    2e48:	7a e0       	ldi	r23, 0x0A	; 10
    2e4a:	97 9f       	mul	r25, r23
    2e4c:	80 0d       	add	r24, r0
    2e4e:	11 24       	eor	r1, r1
   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    2e50:	50 e4       	ldi	r21, 0x40	; 64
    2e52:	85 9f       	mul	r24, r21
    2e54:	c0 01       	movw	r24, r0
    2e56:	11 24       	eor	r1, r1
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    2e58:	3f 70       	andi	r19, 0x0F	; 15
    2e5a:	6a e0       	ldi	r22, 0x0A	; 10
    2e5c:	46 9f       	mul	r20, r22
    2e5e:	30 0d       	add	r19, r0
    2e60:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;
    2e62:	83 2b       	or	r24, r19

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    2e64:	e5 e0       	ldi	r30, 0x05	; 5
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	ea 95       	dec	r30
    2e6c:	e1 f7       	brne	.-8      	; 0x2e66 <getDateTime_FAT+0xb2>

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    2e6e:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    2e70:	82 2b       	or	r24, r18
    2e72:	90 93 34 01 	sts	0x0134, r25
    2e76:	80 93 33 01 	sts	0x0133, r24

   
   return 0;
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    2e80:	08 95       	ret

00002e82 <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
    2e82:	10 92 bc 00 	sts	0x00BC, r1
 TWBR= 0x12; //set bit rate
    2e86:	82 e1       	ldi	r24, 0x12	; 18
    2e88:	80 93 b8 00 	sts	0x00B8, r24
 TWSR= 0x00; //set prescale
    2e8c:	10 92 b9 00 	sts	0x00B9, r1
    2e90:	08 95       	ret

00002e92 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    2e92:	84 ea       	ldi	r24, 0xA4	; 164
    2e94:	80 93 bc 00 	sts	0x00BC, r24
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    2e98:	80 91 bc 00 	lds	r24, 0x00BC
    2e9c:	87 ff       	sbrs	r24, 7
    2e9e:	fc cf       	rjmp	.-8      	; 0x2e98 <i2c_start+0x6>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    2ea0:	90 91 b9 00 	lds	r25, 0x00B9
    2ea4:	98 7f       	andi	r25, 0xF8	; 248
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	98 30       	cpi	r25, 0x08	; 8
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <i2c_start+0x1c>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    2eae:	08 95       	ret

00002eb0 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    2eb0:	84 ea       	ldi	r24, 0xA4	; 164
    2eb2:	80 93 bc 00 	sts	0x00BC, r24
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    2eb6:	80 91 bc 00 	lds	r24, 0x00BC
    2eba:	87 ff       	sbrs	r24, 7
    2ebc:	fc cf       	rjmp	.-8      	; 0x2eb6 <i2c_repeatStart+0x6>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    2ebe:	90 91 b9 00 	lds	r25, 0x00B9
    2ec2:	98 7f       	andi	r25, 0xF8	; 248
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 31       	cpi	r25, 0x10	; 16
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <i2c_repeatStart+0x1c>
    2eca:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    2ecc:	08 95       	ret

00002ece <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    2ece:	80 fd       	sbrc	r24, 0
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
    2ed2:	28 e1       	ldi	r18, 0x18	; 24
    2ed4:	01 c0       	rjmp	.+2      	; 0x2ed8 <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
    2ed6:	20 e4       	ldi	r18, 0x40	; 64
   
   TWDR = address; 
    2ed8:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    2edc:	84 e8       	ldi	r24, 0x84	; 132
    2ede:	80 93 bc 00 	sts	0x00BC, r24
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    2ee2:	80 91 bc 00 	lds	r24, 0x00BC
    2ee6:	87 ff       	sbrs	r24, 7
    2ee8:	fc cf       	rjmp	.-8      	; 0x2ee2 <i2c_sendAddress+0x14>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    2eea:	90 91 b9 00 	lds	r25, 0x00B9
    2eee:	98 7f       	andi	r25, 0xF8	; 248
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	92 13       	cpse	r25, r18
    2ef4:	01 c0       	rjmp	.+2      	; 0x2ef8 <i2c_sendAddress+0x2a>
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
   	  return(0);
   else 
      return(1);
}
    2ef8:	08 95       	ret

00002efa <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    2efa:	80 93 bb 00 	sts	0x00BB, r24
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    2efe:	84 e8       	ldi	r24, 0x84	; 132
    2f00:	80 93 bc 00 	sts	0x00BC, r24
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    2f04:	80 91 bc 00 	lds	r24, 0x00BC
    2f08:	87 ff       	sbrs	r24, 7
    2f0a:	fc cf       	rjmp	.-8      	; 0x2f04 <i2c_sendData+0xa>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    2f0c:	90 91 b9 00 	lds	r25, 0x00B9
    2f10:	98 7f       	andi	r25, 0xF8	; 248
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	98 32       	cpi	r25, 0x28	; 40
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <i2c_sendData+0x20>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
   	  return(1);
   else
      return(0);
}
    2f1a:	08 95       	ret

00002f1c <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    2f1c:	84 ec       	ldi	r24, 0xC4	; 196
    2f1e:	80 93 bc 00 	sts	0x00BC, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    2f22:	80 91 bc 00 	lds	r24, 0x00BC
    2f26:	87 ff       	sbrs	r24, 7
    2f28:	fc cf       	rjmp	.-8      	; 0x2f22 <i2c_receiveData_ACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    2f2a:	80 91 b9 00 	lds	r24, 0x00B9
    2f2e:	88 7f       	andi	r24, 0xF8	; 248
    2f30:	80 35       	cpi	r24, 0x50	; 80
    2f32:	19 f4       	brne	.+6      	; 0x2f3a <i2c_receiveData_ACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
    2f34:	80 91 bb 00 	lds	r24, 0x00BB
  return(data);
    2f38:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    2f3a:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    2f3c:	08 95       	ret

00002f3e <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    2f3e:	84 e8       	ldi	r24, 0x84	; 132
    2f40:	80 93 bc 00 	sts	0x00BC, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    2f44:	80 91 bc 00 	lds	r24, 0x00BC
    2f48:	87 ff       	sbrs	r24, 7
    2f4a:	fc cf       	rjmp	.-8      	; 0x2f44 <i2c_receiveData_NACK+0x6>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    2f4c:	80 91 b9 00 	lds	r24, 0x00B9
    2f50:	88 7f       	andi	r24, 0xF8	; 248
    2f52:	88 35       	cpi	r24, 0x58	; 88
    2f54:	19 f4       	brne	.+6      	; 0x2f5c <i2c_receiveData_NACK+0x1e>
   	  return(ERROR_CODE);
  
  data = TWDR;
    2f56:	80 91 bb 00 	lds	r24, 0x00BB
  return(data);
    2f5a:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    2f5c:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    2f5e:	08 95       	ret

00002f60 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    2f60:	84 e9       	ldi	r24, 0x94	; 148
    2f62:	80 93 bc 00 	sts	0x00BC, r24
    2f66:	08 95       	ret

00002f68 <__mulsi3>:
    2f68:	db 01       	movw	r26, r22
    2f6a:	8f 93       	push	r24
    2f6c:	9f 93       	push	r25
    2f6e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <__muluhisi3>
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	a2 9f       	mul	r26, r18
    2f78:	80 0d       	add	r24, r0
    2f7a:	91 1d       	adc	r25, r1
    2f7c:	a3 9f       	mul	r26, r19
    2f7e:	90 0d       	add	r25, r0
    2f80:	b2 9f       	mul	r27, r18
    2f82:	90 0d       	add	r25, r0
    2f84:	11 24       	eor	r1, r1
    2f86:	08 95       	ret

00002f88 <__udivmodsi4>:
    2f88:	a1 e2       	ldi	r26, 0x21	; 33
    2f8a:	1a 2e       	mov	r1, r26
    2f8c:	aa 1b       	sub	r26, r26
    2f8e:	bb 1b       	sub	r27, r27
    2f90:	fd 01       	movw	r30, r26
    2f92:	0d c0       	rjmp	.+26     	; 0x2fae <__udivmodsi4_ep>

00002f94 <__udivmodsi4_loop>:
    2f94:	aa 1f       	adc	r26, r26
    2f96:	bb 1f       	adc	r27, r27
    2f98:	ee 1f       	adc	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	a2 17       	cp	r26, r18
    2f9e:	b3 07       	cpc	r27, r19
    2fa0:	e4 07       	cpc	r30, r20
    2fa2:	f5 07       	cpc	r31, r21
    2fa4:	20 f0       	brcs	.+8      	; 0x2fae <__udivmodsi4_ep>
    2fa6:	a2 1b       	sub	r26, r18
    2fa8:	b3 0b       	sbc	r27, r19
    2faa:	e4 0b       	sbc	r30, r20
    2fac:	f5 0b       	sbc	r31, r21

00002fae <__udivmodsi4_ep>:
    2fae:	66 1f       	adc	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	1a 94       	dec	r1
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <__udivmodsi4_loop>
    2fba:	60 95       	com	r22
    2fbc:	70 95       	com	r23
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	bd 01       	movw	r22, r26
    2fc8:	cf 01       	movw	r24, r30
    2fca:	08 95       	ret

00002fcc <__tablejump2__>:
    2fcc:	ee 0f       	add	r30, r30
    2fce:	ff 1f       	adc	r31, r31

00002fd0 <__tablejump__>:
    2fd0:	05 90       	lpm	r0, Z+
    2fd2:	f4 91       	lpm	r31, Z
    2fd4:	e0 2d       	mov	r30, r0
    2fd6:	09 94       	ijmp

00002fd8 <__umulhisi3>:
    2fd8:	a2 9f       	mul	r26, r18
    2fda:	b0 01       	movw	r22, r0
    2fdc:	b3 9f       	mul	r27, r19
    2fde:	c0 01       	movw	r24, r0
    2fe0:	a3 9f       	mul	r26, r19
    2fe2:	70 0d       	add	r23, r0
    2fe4:	81 1d       	adc	r24, r1
    2fe6:	11 24       	eor	r1, r1
    2fe8:	91 1d       	adc	r25, r1
    2fea:	b2 9f       	mul	r27, r18
    2fec:	70 0d       	add	r23, r0
    2fee:	81 1d       	adc	r24, r1
    2ff0:	11 24       	eor	r1, r1
    2ff2:	91 1d       	adc	r25, r1
    2ff4:	08 95       	ret

00002ff6 <__muluhisi3>:
    2ff6:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__umulhisi3>
    2ffa:	a5 9f       	mul	r26, r21
    2ffc:	90 0d       	add	r25, r0
    2ffe:	b4 9f       	mul	r27, r20
    3000:	90 0d       	add	r25, r0
    3002:	a4 9f       	mul	r26, r20
    3004:	80 0d       	add	r24, r0
    3006:	91 1d       	adc	r25, r1
    3008:	11 24       	eor	r1, r1
    300a:	08 95       	ret

0000300c <_exit>:
    300c:	f8 94       	cli

0000300e <__stop_program>:
    300e:	ff cf       	rjmp	.-2      	; 0x300e <__stop_program>
