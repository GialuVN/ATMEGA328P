
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800100  00800100  00000382  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000f8  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009ea  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000381  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000423  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000041e  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000035a  00000000  00000000  00001c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "pt2260_dec.h"
int edge;

int main(void)
{
	pwm_phasecorrect_timer0_initial(clk_timer0_div64);
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 58 01 	call	0x2b0	; 0x2b0 <pwm_phasecorrect_timer0_initial>
	//pwm_phasecorrect_timer1_initial(clk_timer1_div64);
	pwm_phasecorrect_timer2_initial(clk_timer2_div64);
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	0e 94 77 01 	call	0x2ee	; 0x2ee <pwm_phasecorrect_timer2_initial>
	pwm_servo_timer1_initial();
  9c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pwm_servo_timer1_initial>
	edge = 700;
  a0:	8c eb       	ldi	r24, 0xBC	; 188
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	90 93 01 01 	sts	0x0101, r25
  a8:	80 93 00 01 	sts	0x0100, r24
	pwm_servo_timer1_OCR1B_updata(edge);
  ac:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pwm_servo_timer1_OCR1B_updata>
	RF_decode_initial(0xDA);
  b0:	8a ed       	ldi	r24, 0xDA	; 218
  b2:	0e 94 ad 00 	call	0x15a	; 0x15a <RF_decode_initial>
	sei();
  b6:	78 94       	sei
				pwm_servo_timer1_OCR1B_updata(edge);
				if(edge<=700) break;
				else edge-=10;
				break;
				case 4:
				edge = 700;
  b8:	0c eb       	ldi	r16, 0xBC	; 188
  ba:	12 e0       	ldi	r17, 0x02	; 2
				pwm_servo_timer1_OCR1B_updata(edge);
				break;
				case 8:
				edge = 2400;
  bc:	c0 e6       	ldi	r28, 0x60	; 96
  be:	d9 e0       	ldi	r29, 0x09	; 9
	pwm_servo_timer1_OCR1B_updata(edge);
	RF_decode_initial(0xDA);
	sei();
    while(1)
    {
		if(RF_check_new_key())
  c0:	0e 94 ce 00 	call	0x19c	; 0x19c <RF_check_new_key>
  c4:	88 23       	and	r24, r24
  c6:	e1 f3       	breq	.-8      	; 0xc0 <main+0x30>
		{
			switch (RF_decode_read())
  c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <RF_decode_read>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	f1 f0       	breq	.+60     	; 0x10c <main+0x7c>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <main+0x48>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	31 f0       	breq	.+12     	; 0xe2 <main+0x52>
  d6:	3e c0       	rjmp	.+124    	; 0x154 <main+0xc4>
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	69 f1       	breq	.+90     	; 0x136 <main+0xa6>
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	99 f1       	breq	.+102    	; 0x146 <main+0xb6>
  e0:	39 c0       	rjmp	.+114    	; 0x154 <main+0xc4>
			{
				case 1:
				pwm_servo_timer1_OCR1B_updata(edge);
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	90 91 01 01 	lds	r25, 0x0101
  ea:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pwm_servo_timer1_OCR1B_updata>
				if(edge>=2400) break;
  ee:	20 91 00 01 	lds	r18, 0x0100
  f2:	30 91 01 01 	lds	r19, 0x0101
  f6:	20 36       	cpi	r18, 0x60	; 96
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	38 07       	cpc	r19, r24
  fc:	5c f5       	brge	.+86     	; 0x154 <main+0xc4>
				else edge+=10;
  fe:	26 5f       	subi	r18, 0xF6	; 246
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	30 93 01 01 	sts	0x0101, r19
 106:	20 93 00 01 	sts	0x0100, r18
				break;
 10a:	24 c0       	rjmp	.+72     	; 0x154 <main+0xc4>
				case 2:
				pwm_servo_timer1_OCR1B_updata(edge);
 10c:	80 91 00 01 	lds	r24, 0x0100
 110:	90 91 01 01 	lds	r25, 0x0101
 114:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pwm_servo_timer1_OCR1B_updata>
				if(edge<=700) break;
 118:	20 91 00 01 	lds	r18, 0x0100
 11c:	30 91 01 01 	lds	r19, 0x0101
 120:	2d 3b       	cpi	r18, 0xBD	; 189
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	38 07       	cpc	r19, r24
 126:	b4 f0       	brlt	.+44     	; 0x154 <main+0xc4>
				else edge-=10;
 128:	2a 50       	subi	r18, 0x0A	; 10
 12a:	31 09       	sbc	r19, r1
 12c:	30 93 01 01 	sts	0x0101, r19
 130:	20 93 00 01 	sts	0x0100, r18
				break;
 134:	0f c0       	rjmp	.+30     	; 0x154 <main+0xc4>
				case 4:
				edge = 700;
 136:	10 93 01 01 	sts	0x0101, r17
 13a:	00 93 00 01 	sts	0x0100, r16
				pwm_servo_timer1_OCR1B_updata(edge);
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pwm_servo_timer1_OCR1B_updata>
				break;
 144:	07 c0       	rjmp	.+14     	; 0x154 <main+0xc4>
				case 8:
				edge = 2400;
 146:	d0 93 01 01 	sts	0x0101, r29
 14a:	c0 93 00 01 	sts	0x0100, r28
				pwm_servo_timer1_OCR1B_updata(edge);
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 72 01 	call	0x2e4	; 0x2e4 <pwm_servo_timer1_OCR1B_updata>
				break;
				default:
				break;
			}
		//	_delay_ms(50);
			RF_decode_start();
 154:	0e 94 c6 00 	call	0x18c	; 0x18c <RF_decode_start>
 158:	b3 cf       	rjmp	.-154    	; 0xc0 <main+0x30>

0000015a <RF_decode_initial>:

volatile RF_DECODE rf_decode;

void RF_decode_initial(unsigned char id)
{
	DDR_RF &= ~(1<<IN_RF);
 15a:	20 98       	cbi	0x04, 0	; 4
	POR_RF |=1<<IN_RF;
 15c:	28 9a       	sbi	0x05, 0	; 5
	PCICR = 1<<PCIE0;	// PCINT0 select
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	90 93 68 00 	sts	0x0068, r25
	PCMSK0 = 1<<PCINT0;
 164:	90 93 6b 00 	sts	0x006B, r25
	PCMSK1 =0;
 168:	10 92 6c 00 	sts	0x006C, r1
	PCMSK2 =0;
 16c:	10 92 6d 00 	sts	0x006D, r1
	rf_decode.rf_id = id;
 170:	80 93 03 01 	sts	0x0103, r24
	rf_decode.rf_new_key = 0;	
 174:	10 92 04 01 	sts	0x0104, r1
 178:	08 95       	ret

0000017a <RF_decode_stop>:
}

void RF_decode_stop(void)		//auto stopping went having a new key
{
	PCICR &=~(1<<PCIE0);	// PCINT0 disable	
 17a:	e8 e6       	ldi	r30, 0x68	; 104
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8e 7f       	andi	r24, 0xFE	; 254
 182:	80 83       	st	Z, r24
	rf_decode.rf_new_key = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 04 01 	sts	0x0104, r24
 18a:	08 95       	ret

0000018c <RF_decode_start>:
}

void RF_decode_start(void)
{
	PCICR |=(1<<PCIE0);		// PCINT0 enable
 18c:	e8 e6       	ldi	r30, 0x68	; 104
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
	rf_decode.rf_new_key = 0;
 196:	10 92 04 01 	sts	0x0104, r1
 19a:	08 95       	ret

0000019c <RF_check_new_key>:
}

unsigned char RF_check_new_key(void)
{
	return rf_decode.rf_new_key;
 19c:	80 91 04 01 	lds	r24, 0x0104
}
 1a0:	08 95       	ret

000001a2 <RF_decode_read>:



unsigned char RF_decode_read(void) //rf_key read back
{
	return rf_decode.rf_data;
 1a2:	80 91 02 01 	lds	r24, 0x0102
}
 1a6:	08 95       	ret

000001a8 <__vector_3>:
		}
		return 0;
}

ISR(PCINT0_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	unsigned char _temp_data;
	// start condition detector
	if (!(PIN_RF&(1<<IN_RF)))
 1ca:	18 99       	sbic	0x03, 0	; 3
 1cc:	60 c0       	rjmp	.+192    	; 0x28e <__vector_3+0xe6>
	{
		for (unsigned char i = 0;i<50;i++)
		{
			if (PIN_RF&(1<<IN_RF)) return;
 1ce:	18 9b       	sbis	0x03, 0	; 3
 1d0:	56 c0       	rjmp	.+172    	; 0x27e <__vector_3+0xd6>
 1d2:	5d c0       	rjmp	.+186    	; 0x28e <__vector_3+0xe6>
 1d4:	18 99       	sbic	0x03, 0	; 3
 1d6:	5b c0       	rjmp	.+182    	; 0x28e <__vector_3+0xe6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	ef e1       	ldi	r30, 0x1F	; 31
 1da:	f3 e0       	ldi	r31, 0x03	; 3
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <__vector_3+0x34>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <__vector_3+0x3a>
 1e2:	00 00       	nop
 1e4:	81 50       	subi	r24, 0x01	; 1
{
	unsigned char _temp_data;
	// start condition detector
	if (!(PIN_RF&(1<<IN_RF)))
	{
		for (unsigned char i = 0;i<50;i++)
 1e6:	b1 f7       	brne	.-20     	; 0x1d4 <__vector_3+0x2c>
		{
			if (PIN_RF&(1<<IN_RF)) return;
			_delay_us(200);
		}
		
		if (!(PIN_RF&(1<<IN_RF))) 
 1e8:	18 99       	sbic	0x03, 0	; 3
 1ea:	51 c0       	rjmp	.+162    	; 0x28e <__vector_3+0xe6>
 1ec:	2c e0       	ldi	r18, 0x0C	; 12
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
{
	unsigned int _data = 0;
	unsigned char _counter = 0;
	while(1)
	{
		while (!(PIN_RF&(1<<IN_RF))) {}; // waitting 1
 1f2:	18 9b       	sbis	0x03, 0	; 3
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <__vector_3+0x4a>
 1f6:	ef e1       	ldi	r30, 0x1F	; 31
 1f8:	fd e0       	ldi	r31, 0x0D	; 13
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <__vector_3+0x52>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__vector_3+0x58>
 200:	00 00       	nop
			_delay_us(2*rf_1a);
			
			if (PIN_RF&(1<<IN_RF))
 202:	18 9b       	sbis	0x03, 0	; 3
 204:	12 c0       	rjmp	.+36     	; 0x22a <__vector_3+0x82>
			{
				while (PIN_RF&(1<<IN_RF)) {}; //waitting 0
 206:	18 99       	sbic	0x03, 0	; 3
 208:	fe cf       	rjmp	.-4      	; 0x206 <__vector_3+0x5e>
				while (!(PIN_RF&(1<<IN_RF))) {}; // waitting 1
 20a:	18 9b       	sbis	0x03, 0	; 3
 20c:	fe cf       	rjmp	.-4      	; 0x20a <__vector_3+0x62>
 20e:	ef e1       	ldi	r30, 0x1F	; 31
 210:	fd e0       	ldi	r31, 0x0D	; 13
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <__vector_3+0x6a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__vector_3+0x70>
 218:	00 00       	nop
				_delay_us(2*rf_1a);
				if (PIN_RF&(1<<IN_RF))
 21a:	18 9b       	sbis	0x03, 0	; 3
 21c:	38 c0       	rjmp	.+112    	; 0x28e <__vector_3+0xe6>
				{
					//bit 1 detected
					_data <<=1;
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
					_data|=1;
 222:	81 60       	ori	r24, 0x01	; 1
					while (PIN_RF&(1<<IN_RF)) {}; //waitting 0
 224:	18 99       	sbic	0x03, 0	; 3
 226:	fe cf       	rjmp	.-4      	; 0x224 <__vector_3+0x7c>
 228:	12 c0       	rjmp	.+36     	; 0x24e <__vector_3+0xa6>
				}
				else return 0;
			}
			else
			{
				while (!(PIN_RF&(1<<IN_RF))) {}; // waitting 1
 22a:	18 9b       	sbis	0x03, 0	; 3
 22c:	fe cf       	rjmp	.-4      	; 0x22a <__vector_3+0x82>
 22e:	ef e1       	ldi	r30, 0x1F	; 31
 230:	fd e0       	ldi	r31, 0x0D	; 13
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <__vector_3+0x8a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <__vector_3+0x90>
 238:	00 00       	nop
				_delay_us(2*rf_1a);
				if (!(PIN_RF&(1<<IN_RF)))
 23a:	18 99       	sbic	0x03, 0	; 3
 23c:	03 c0       	rjmp	.+6      	; 0x244 <__vector_3+0x9c>
				{
					//bit 0 detected
					_data <<=1;
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	05 c0       	rjmp	.+10     	; 0x24e <__vector_3+0xa6>
				}
				else 
				{
					//floating detected  = 1
					_data <<=1;
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
					_data|=1;
 248:	81 60       	ori	r24, 0x01	; 1
					while (PIN_RF&(1<<IN_RF)) {}; //waitting 0
 24a:	18 99       	sbic	0x03, 0	; 3
 24c:	fe cf       	rjmp	.-4      	; 0x24a <__vector_3+0xa2>
 24e:	21 50       	subi	r18, 0x01	; 1
				}
			}
				_counter++;
				if (_counter>=rf_data_len)
 250:	81 f6       	brne	.-96     	; 0x1f2 <__vector_3+0x4a>
				{
					if ((_data>>4)==(unsigned int)rf_decode.rf_id) return _data &=0x000f;
 252:	20 91 03 01 	lds	r18, 0x0103
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	52 95       	swap	r21
 25c:	42 95       	swap	r20
 25e:	4f 70       	andi	r20, 0x0F	; 15
 260:	45 27       	eor	r20, r21
 262:	5f 70       	andi	r21, 0x0F	; 15
 264:	45 27       	eor	r20, r21
 266:	42 17       	cp	r20, r18
 268:	53 07       	cpc	r21, r19
 26a:	89 f4       	brne	.+34     	; 0x28e <__vector_3+0xe6>
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	99 27       	eor	r25, r25
		}
		
		if (!(PIN_RF&(1<<IN_RF))) 
		{
			_temp_data = RF_decode();
			if (_temp_data!=0)
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	69 f0       	breq	.+26     	; 0x28e <__vector_3+0xe6>
			{
				 rf_decode.rf_data = _temp_data;
 274:	80 93 02 01 	sts	0x0102, r24
				 RF_decode_stop();// removeable
 278:	0e 94 bd 00 	call	0x17a	; 0x17a <RF_decode_stop>
 27c:	08 c0       	rjmp	.+16     	; 0x28e <__vector_3+0xe6>
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	93 e0       	ldi	r25, 0x03	; 3
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <__vector_3+0xda>
 286:	00 c0       	rjmp	.+0      	; 0x288 <__vector_3+0xe0>
 288:	00 00       	nop
 28a:	81 e3       	ldi	r24, 0x31	; 49
 28c:	a3 cf       	rjmp	.-186    	; 0x1d4 <__vector_3+0x2c>
				 
			}
			
		}
	}
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	bf 91       	pop	r27
 294:	af 91       	pop	r26
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	7f 91       	pop	r23
 29c:	6f 91       	pop	r22
 29e:	5f 91       	pop	r21
 2a0:	4f 91       	pop	r20
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <pwm_phasecorrect_timer0_initial>:

//timer 0 pwm_phasecorect

void pwm_phasecorrect_timer0_initial(unsigned char clk)
{
	DDRD |=(1<<PORTD5)|(1<<PORTD6); // OC0A,OC0B IS OUTPUT
 2b0:	9a b1       	in	r25, 0x0a	; 10
 2b2:	90 66       	ori	r25, 0x60	; 96
 2b4:	9a b9       	out	0x0a, r25	; 10
	TCCR0A = (0<<COM0A0)| (1<<COM0A1)| (0<<COM0B0)| (1<<COM0B1)| (1<<WGM00);
 2b6:	91 ea       	ldi	r25, 0xA1	; 161
 2b8:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (0<<WGM02)|(clk<<CS00);
 2ba:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
 2bc:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
 2be:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 2c0:	18 bc       	out	0x28, r1	; 40
 2c2:	08 95       	ret

000002c4 <pwm_servo_timer1_initial>:
	OCR1B =val;
}

void pwm_servo_timer1_initial(void)
{
	DDRB |=(1<<PINB1)|(1<<PINB2);
 2c4:	84 b1       	in	r24, 0x04	; 4
 2c6:	86 60       	ori	r24, 0x06	; 6
 2c8:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 1<<COM1A1|1<<COM1B1;// non invert
 2ca:	80 ea       	ldi	r24, 0xA0	; 160
 2cc:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 1<<WGM13|2<<CS10;	//clk/8
 2d0:	82 e1       	ldi	r24, 0x12	; 18
 2d2:	80 93 81 00 	sts	0x0081, r24
	ICR1 =20000; //20000 with xtal 16MHZ, 13824 if xtal 11.0592MHZ,10000 if xtal 8MHZ, 5000 if xtal 4Mhz
 2d6:	80 e2       	ldi	r24, 0x20	; 32
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	90 93 87 00 	sts	0x0087, r25
 2de:	80 93 86 00 	sts	0x0086, r24
 2e2:	08 95       	ret

000002e4 <pwm_servo_timer1_OCR1B_updata>:
	OCR1A = val;
}

void pwm_servo_timer1_OCR1B_updata(unsigned int val)
{
	OCR1B = val;
 2e4:	90 93 8b 00 	sts	0x008B, r25
 2e8:	80 93 8a 00 	sts	0x008A, r24
 2ec:	08 95       	ret

000002ee <pwm_phasecorrect_timer2_initial>:

//timer 2 pwm_phasecorect
void pwm_phasecorrect_timer2_initial(unsigned char clk)
{
	 // OC2A,OC2B IS OUTPUT
	DDRB |=(1<<PORTB3);
 2ee:	23 9a       	sbi	0x04, 3	; 4
	DDRD |=(1<<PORTD3);
 2f0:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR2A = (0<<COM2A0)| (1<<COM2A1)| (0<<COM2B0)| (1<<COM2B1)| (1<<WGM20);
 2f2:	91 ea       	ldi	r25, 0xA1	; 161
 2f4:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B =(clk<<CS00);
 2f8:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0;
 2fc:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 0;
 300:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
 304:	10 92 b4 00 	sts	0x00B4, r1
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
