
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000893  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c5  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007df  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030b  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e9  00000000  00000000  00002013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_3>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_14>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  58:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  5c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  60:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  68:	43 02       	muls	r20, r19
  6a:	4f 02       	muls	r20, r31
  6c:	85 02       	muls	r24, r21
  6e:	b5 02       	muls	r27, r21
  70:	bc 02       	muls	r27, r28
  72:	c3 02       	muls	r28, r19
  74:	fd 02       	muls	r31, r29
  76:	23 03       	mulsu	r18, r19

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 31       	cpi	r26, 0x13	; 19
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  98:	0c 94 6f 03 	jmp	0x6de	; 0x6de <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <main>:
#define OUT1  PORTB2
#define OUT2  PORTB3

int main(void)
{
	wdt_reset();
  a0:	a8 95       	wdr
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  a2:	9c e0       	ldi	r25, 0x0C	; 12
  a4:	88 e1       	ldi	r24, 0x18	; 24
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	a8 95       	wdr
  ac:	80 93 60 00 	sts	0x0060, r24
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	90 93 60 00 	sts	0x0060, r25
	wdt_enable(WDTO_250MS);
	timer0_init();
  b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <timer0_init>
	RF_decode_initial(0x00);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <RF_decode_initial>
	RF_decode_setup(300,25);
  c0:	69 e1       	ldi	r22, 0x19	; 25
  c2:	8c e2       	ldi	r24, 0x2C	; 44
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 6d 01 	call	0x2da	; 0x2da <RF_decode_setup>
	RF_decode_start();
  ca:	0e 94 c6 01 	call	0x38c	; 0x38c <RF_decode_start>
	DDRD|=1<<PORTD4;
  ce:	54 9a       	sbi	0x0a, 4	; 10
	DDRC &=~(1<<CKIN);
  d0:	3c 98       	cbi	0x07, 4	; 7
	PORTC|=1<<CKIN;
  d2:	44 9a       	sbi	0x08, 4	; 8
	DDRB |=(1<<OUT1)|(1<<OUT2);
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	84 b9       	out	0x04, r24	; 4
	RF_clear_key();
  da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
    {
		
		if (!(PINC&(1<<CKIN)))
		{
				
					PORTD^=1<<PORTD4;
  de:	c0 e1       	ldi	r28, 0x10	; 16
	DDRB |=(1<<OUT1)|(1<<OUT2);
	RF_clear_key();
    while(1)
    {
		
		if (!(PINC&(1<<CKIN)))
  e0:	34 99       	sbic	0x06, 4	; 6
  e2:	23 c0       	rjmp	.+70     	; 0x12a <main+0x8a>
		{
				
					PORTD^=1<<PORTD4;
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8c 27       	eor	r24, r28
  e8:	8b b9       	out	0x0b, r24	; 11
					PORTB |= 1<<OUT1;
  ea:	2a 9a       	sbi	0x05, 2	; 5
					PORTB &=~(1<<OUT2);
  ec:	2b 98       	cbi	0x05, 3	; 5
					set_ms_counter(3200);
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	9c e0       	ldi	r25, 0x0C	; 12
  f2:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
					while (!check_ms_counter()){};
  f6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
  fa:	88 23       	and	r24, r24
  fc:	e1 f3       	breq	.-8      	; 0xf6 <main+0x56>
					PORTB &=~(1<<OUT1);
  fe:	2a 98       	cbi	0x05, 2	; 5
					PORTB &=~(1<<OUT2);
 100:	2b 98       	cbi	0x05, 3	; 5
					set_ms_counter(16000);
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	9e e3       	ldi	r25, 0x3E	; 62
 106:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
					while (!check_ms_counter()){};
 10a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 10e:	88 23       	and	r24, r24
 110:	e1 f3       	breq	.-8      	; 0x10a <main+0x6a>
					PORTB |= 1<<OUT2;
 112:	2b 9a       	sbi	0x05, 3	; 5
					PORTB &=~(1<<OUT1);
 114:	2a 98       	cbi	0x05, 2	; 5
					set_ms_counter(3200);
 116:	80 e8       	ldi	r24, 0x80	; 128
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
					while (!check_ms_counter()){};
 11e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 122:	88 23       	and	r24, r24
 124:	e1 f3       	breq	.-8      	; 0x11e <main+0x7e>
					PORTB &=~(1<<OUT1);
 126:	2a 98       	cbi	0x05, 2	; 5
					PORTB &=~(1<<OUT2);
 128:	2b 98       	cbi	0x05, 3	; 5
				
		}
		
		if (RF_get_key()==8)
 12a:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	09 f0       	breq	.+2      	; 0x134 <main+0x94>
 132:	44 c0       	rjmp	.+136    	; 0x1bc <main+0x11c>
		{
			PORTD|=1<<PORTD4;
 134:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	85 ea       	ldi	r24, 0xA5	; 165
 13a:	9e e0       	ldi	r25, 0x0E	; 14
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x9c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xa6>
 146:	00 00       	nop
			_delay_ms(300);
			RF_clear_key();
 148:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
			
			while (1)
			{
				PORTB |= 1<<OUT1;
 14c:	2a 9a       	sbi	0x05, 2	; 5
				PORTB &=~(1<<OUT2);
 14e:	2b 98       	cbi	0x05, 3	; 5
				set_ms_counter(1280);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	95 e0       	ldi	r25, 0x05	; 5
 154:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
				while (!check_ms_counter()){};
 158:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 15c:	88 23       	and	r24, r24
 15e:	e1 f3       	breq	.-8      	; 0x158 <main+0xb8>
				PORTB &=~(1<<OUT1);
 160:	2a 98       	cbi	0x05, 2	; 5
				PORTB &=~(1<<OUT2);
 162:	2b 98       	cbi	0x05, 3	; 5
				set_ms_counter(1280);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	95 e0       	ldi	r25, 0x05	; 5
 168:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
				while (!check_ms_counter()){};
 16c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 170:	88 23       	and	r24, r24
 172:	e1 f3       	breq	.-8      	; 0x16c <main+0xcc>
				PORTB |= 1<<OUT2;
 174:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &=~(1<<OUT1);
 176:	2a 98       	cbi	0x05, 2	; 5
				set_ms_counter(1280);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	95 e0       	ldi	r25, 0x05	; 5
 17c:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
				while (!check_ms_counter()){};
 180:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 184:	88 23       	and	r24, r24
 186:	e1 f3       	breq	.-8      	; 0x180 <main+0xe0>
				PORTB &=~(1<<OUT1);
 188:	2a 98       	cbi	0x05, 2	; 5
				PORTB &=~(1<<OUT2);
 18a:	2b 98       	cbi	0x05, 3	; 5
				set_ms_counter(1280);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	95 e0       	ldi	r25, 0x05	; 5
 190:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
				while (!check_ms_counter()){};
 194:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 198:	88 23       	and	r24, r24
 19a:	e1 f3       	breq	.-8      	; 0x194 <main+0xf4>
				if (RF_get_key()==8)
 19c:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	a1 f6       	brne	.-88     	; 0x14c <main+0xac>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	83 ed       	ldi	r24, 0xD3	; 211
 1a8:	90 e3       	ldi	r25, 0x30	; 48
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x10a>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x114>
 1b4:	00 00       	nop
				{
					_delay_ms(1000);
					RF_clear_key();
 1b6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
 1ba:	72 c0       	rjmp	.+228    	; 0x2a0 <main+0x200>
					break;
				}
			}
	
		}
	else if (RF_get_key()==4)
 1bc:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <main+0x126>
 1c4:	44 c0       	rjmp	.+136    	; 0x24e <main+0x1ae>
	{
		
		
		PORTD|=1<<PORTD4;
 1c6:	5c 9a       	sbi	0x0b, 4	; 11
 1c8:	2f ef       	ldi	r18, 0xFF	; 255
 1ca:	85 ea       	ldi	r24, 0xA5	; 165
 1cc:	9e e0       	ldi	r25, 0x0E	; 14
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <main+0x12e>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x138>
 1d8:	00 00       	nop
		_delay_ms(300);
		RF_clear_key();
 1da:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
		
		while (1)
		{
			PORTB |= 1<<OUT1;
 1de:	2a 9a       	sbi	0x05, 2	; 5
			PORTB &=~(1<<OUT2);
 1e0:	2b 98       	cbi	0x05, 3	; 5
			set_ms_counter(640);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
			while (!check_ms_counter()){};
 1ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 1ee:	88 23       	and	r24, r24
 1f0:	e1 f3       	breq	.-8      	; 0x1ea <main+0x14a>
			PORTB &=~(1<<OUT1);
 1f2:	2a 98       	cbi	0x05, 2	; 5
			PORTB &=~(1<<OUT2);
 1f4:	2b 98       	cbi	0x05, 3	; 5
			set_ms_counter(640);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
			while (!check_ms_counter()){};
 1fe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 202:	88 23       	and	r24, r24
 204:	e1 f3       	breq	.-8      	; 0x1fe <main+0x15e>
			PORTB |= 1<<OUT2;
 206:	2b 9a       	sbi	0x05, 3	; 5
			PORTB &=~(1<<OUT1);
 208:	2a 98       	cbi	0x05, 2	; 5
			set_ms_counter(640);
 20a:	80 e8       	ldi	r24, 0x80	; 128
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
			while (!check_ms_counter()){};
 212:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 216:	88 23       	and	r24, r24
 218:	e1 f3       	breq	.-8      	; 0x212 <main+0x172>
			PORTB &=~(1<<OUT1);
 21a:	2a 98       	cbi	0x05, 2	; 5
			PORTB &=~(1<<OUT2);
 21c:	2b 98       	cbi	0x05, 3	; 5
			set_ms_counter(640);
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	0e 94 ce 01 	call	0x39c	; 0x39c <set_ms_counter>
			while (!check_ms_counter()){};
 226:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check_ms_counter>
 22a:	88 23       	and	r24, r24
 22c:	e1 f3       	breq	.-8      	; 0x226 <main+0x186>
			if (RF_get_key()==4)
 22e:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	a1 f6       	brne	.-88     	; 0x1de <main+0x13e>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	83 ed       	ldi	r24, 0xD3	; 211
 23a:	90 e3       	ldi	r25, 0x30	; 48
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x19c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x1a6>
 246:	00 00       	nop
			{
				_delay_ms(1000);
				RF_clear_key();
 248:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
 24c:	29 c0       	rjmp	.+82     	; 0x2a0 <main+0x200>
				break;
			}
		}
	}
	else if(RF_get_key()==2)
 24e:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	29 f5       	brne	.+74     	; 0x2a0 <main+0x200>
	{
		PORTB &=~(1<<OUT1);
 256:	2a 98       	cbi	0x05, 2	; 5
		PORTB &=~(1<<OUT2);
 258:	2b 98       	cbi	0x05, 3	; 5
		PORTD|=1<<PORTD4;
 25a:	5c 9a       	sbi	0x0b, 4	; 11
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	85 ea       	ldi	r24, 0xA5	; 165
 260:	9e e0       	ldi	r25, 0x0E	; 14
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x1c2>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x1cc>
 26c:	00 00       	nop
		_delay_ms(300);
		RF_clear_key();
 26e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
		while (1)
		{
			if (RF_get_key()==2)
 272:	0e 94 ed 01 	call	0x3da	; 0x3da <RF_get_key>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	61 f4       	brne	.+24     	; 0x292 <main+0x1f2>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	83 ed       	ldi	r24, 0xD3	; 211
 27e:	90 e3       	ldi	r25, 0x30	; 48
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x1e0>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x1ea>
 28a:	00 00       	nop
			{
				_delay_ms(1000);
				RF_clear_key();
 28c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <RF_clear_key>
				break;
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <main+0x200>
 292:	8f e9       	ldi	r24, 0x9F	; 159
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x1f6>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x1fc>
 29c:	00 00       	nop
 29e:	e9 cf       	rjmp	.-46     	; 0x272 <main+0x1d2>
 2a0:	8f e9       	ldi	r24, 0x9F	; 159
 2a2:	9f e0       	ldi	r25, 0x0F	; 15
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x204>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x20a>
 2aa:	00 00       	nop
 2ac:	19 cf       	rjmp	.-462    	; 0xe0 <main+0x40>

000002ae <RF_decode_initial>:

void delay_50us(unsigned int val)
{
	x_counter = val;
	while(x_counter!=0){};
}
 2ae:	20 98       	cbi	0x04, 0	; 4
 2b0:	28 9a       	sbi	0x05, 0	; 5
 2b2:	e8 e6       	ldi	r30, 0x68	; 104
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 81       	ld	r25, Z
 2b8:	91 60       	ori	r25, 0x01	; 1
 2ba:	90 83       	st	Z, r25
 2bc:	eb e6       	ldi	r30, 0x6B	; 107
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	90 81       	ld	r25, Z
 2c2:	91 60       	ori	r25, 0x01	; 1
 2c4:	90 83       	st	Z, r25
 2c6:	e0 e0       	ldi	r30, 0x00	; 0
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	83 83       	std	Z+3, r24	; 0x03
 2cc:	14 82       	std	Z+4, r1	; 0x04
 2ce:	16 82       	std	Z+6, r1	; 0x06
 2d0:	15 82       	std	Z+5, r1	; 0x05
 2d2:	12 82       	std	Z+2, r1	; 0x02
 2d4:	11 82       	std	Z+1, r1	; 0x01
 2d6:	17 82       	std	Z+7, r1	; 0x07
 2d8:	08 95       	ret

000002da <RF_decode_setup>:
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
 2e0:	46 2f       	mov	r20, r22
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	84 e6       	ldi	r24, 0x64	; 100
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	84 1b       	sub	r24, r20
 2ea:	95 0b       	sbc	r25, r21
 2ec:	8c 9f       	mul	r24, r28
 2ee:	90 01       	movw	r18, r0
 2f0:	8d 9f       	mul	r24, r29
 2f2:	30 0d       	add	r19, r0
 2f4:	9c 9f       	mul	r25, r28
 2f6:	30 0d       	add	r19, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	36 95       	lsr	r19
 2fc:	27 95       	ror	r18
 2fe:	36 95       	lsr	r19
 300:	27 95       	ror	r18
 302:	ab e7       	ldi	r26, 0x7B	; 123
 304:	b4 e1       	ldi	r27, 0x14	; 20
 306:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__umulhisi3>
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	93 87       	std	Z+11, r25	; 0x0b
 314:	82 87       	std	Z+10, r24	; 0x0a
 316:	4c 59       	subi	r20, 0x9C	; 156
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	4c 9f       	mul	r20, r28
 31c:	90 01       	movw	r18, r0
 31e:	4d 9f       	mul	r20, r29
 320:	30 0d       	add	r19, r0
 322:	5c 9f       	mul	r21, r28
 324:	30 0d       	add	r19, r0
 326:	11 24       	eor	r1, r1
 328:	36 95       	lsr	r19
 32a:	27 95       	ror	r18
 32c:	36 95       	lsr	r19
 32e:	27 95       	ror	r18
 330:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__umulhisi3>
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	91 87       	std	Z+9, r25	; 0x09
 33a:	80 87       	std	Z+8, r24	; 0x08
 33c:	22 85       	ldd	r18, Z+10	; 0x0a
 33e:	33 85       	ldd	r19, Z+11	; 0x0b
 340:	ad ec       	ldi	r26, 0xCD	; 205
 342:	bc ec       	ldi	r27, 0xCC	; 204
 344:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__umulhisi3>
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	96 95       	lsr	r25
 34e:	87 95       	ror	r24
 350:	96 95       	lsr	r25
 352:	87 95       	ror	r24
 354:	87 87       	std	Z+15, r24	; 0x0f
 356:	20 85       	ldd	r18, Z+8	; 0x08
 358:	31 85       	ldd	r19, Z+9	; 0x09
 35a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__umulhisi3>
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	86 87       	std	Z+14, r24	; 0x0e
 36c:	97 85       	ldd	r25, Z+15	; 0x0f
 36e:	2b ea       	ldi	r18, 0xAB	; 171
 370:	92 9f       	mul	r25, r18
 372:	91 2d       	mov	r25, r1
 374:	11 24       	eor	r1, r1
 376:	96 95       	lsr	r25
 378:	95 87       	std	Z+13, r25	; 0x0d
 37a:	86 85       	ldd	r24, Z+14	; 0x0e
 37c:	82 9f       	mul	r24, r18
 37e:	81 2d       	mov	r24, r1
 380:	11 24       	eor	r1, r1
 382:	86 95       	lsr	r24
 384:	84 87       	std	Z+12, r24	; 0x0c
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <RF_decode_start>:
 38c:	10 92 04 01 	sts	0x0104, r1
 390:	e8 e6       	ldi	r30, 0x68	; 104
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	81 60       	ori	r24, 0x01	; 1
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <set_ms_counter>:

void set_ms_counter(unsigned int val)
{
	cli();
 39c:	f8 94       	cli
	x_counter = val;
 39e:	90 93 12 01 	sts	0x0112, r25
 3a2:	80 93 11 01 	sts	0x0111, r24
	sei();
 3a6:	78 94       	sei
 3a8:	08 95       	ret

000003aa <check_ms_counter>:
}

unsigned char check_ms_counter(void)
{
	if (x_counter!=0) return 0;
 3aa:	20 91 11 01 	lds	r18, 0x0111
 3ae:	30 91 12 01 	lds	r19, 0x0112
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	23 2b       	or	r18, r19
 3b6:	09 f0       	breq	.+2      	; 0x3ba <check_ms_counter+0x10>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
 3ba:	08 95       	ret

000003bc <timer0_init>:

void timer0_init(void)
{
	TIMSK0 |= (1 << OCIE0A);			// COMA     
 3bc:	ee e6       	ldi	r30, 0x6E	; 110
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	82 60       	ori	r24, 0x02	; 2
 3c4:	80 83       	st	Z, r24
	TCCR0A |= (1 << WGM01);				//CTC mode
 3c6:	84 b5       	in	r24, 0x24	; 36
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1<<CS01;					//		clk/8	
 3cc:	85 b5       	in	r24, 0x25	; 37
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	85 bd       	out	0x25, r24	; 37
	OCR0A   = 99;						 //		50us
 3d2:	83 e6       	ldi	r24, 0x63	; 99
 3d4:	87 bd       	out	0x27, r24	; 39
	sei();
 3d6:	78 94       	sei
 3d8:	08 95       	ret

000003da <RF_get_key>:
}
unsigned char RF_get_key(void)
{
	return rf_decode.rf_key;
 3da:	80 91 00 01 	lds	r24, 0x0100
}
 3de:	08 95       	ret

000003e0 <RF_clear_key>:
void RF_clear_key(void)
{
	rf_decode.rf_key = 0;
 3e0:	10 92 00 01 	sts	0x0100, r1
 3e4:	08 95       	ret

000003e6 <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	//PORTD^=1<<PORTD4;
	wdt_reset();
 3fa:	a8 95       	wdr
	if(x_counter!=0) x_counter--;
 3fc:	80 91 11 01 	lds	r24, 0x0111
 400:	90 91 12 01 	lds	r25, 0x0112
 404:	89 2b       	or	r24, r25
 406:	49 f0       	breq	.+18     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
 408:	80 91 11 01 	lds	r24, 0x0111
 40c:	90 91 12 01 	lds	r25, 0x0112
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	90 93 12 01 	sts	0x0112, r25
 416:	80 93 11 01 	sts	0x0111, r24
	if(rf_decode.rf_timer<500) rf_decode.rf_timer++;
 41a:	80 91 05 01 	lds	r24, 0x0105
 41e:	90 91 06 01 	lds	r25, 0x0106
 422:	84 3f       	cpi	r24, 0xF4	; 244
 424:	91 40       	sbci	r25, 0x01	; 1
 426:	38 f4       	brcc	.+14     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 428:	e0 e0       	ldi	r30, 0x00	; 0
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	85 81       	ldd	r24, Z+5	; 0x05
 42e:	96 81       	ldd	r25, Z+6	; 0x06
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	96 83       	std	Z+6, r25	; 0x06
 434:	85 83       	std	Z+5, r24	; 0x05
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	2f 91       	pop	r18
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <__vector_3>:

ISR(PCINT0_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	switch (rf_decode.rf_stage)
 46c:	e0 91 04 01 	lds	r30, 0x0104
 470:	8e 2f       	mov	r24, r30
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	88 30       	cpi	r24, 0x08	; 8
 476:	91 05       	cpc	r25, r1
 478:	08 f0       	brcs	.+2      	; 0x47c <__vector_3+0x32>
 47a:	ee c0       	rjmp	.+476    	; 0x658 <__vector_3+0x20e>
 47c:	fc 01       	movw	r30, r24
 47e:	ec 5c       	subi	r30, 0xCC	; 204
 480:	ff 4f       	sbci	r31, 0xFF	; 255
 482:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__tablejump2__>
	{
		case 0:
		if (!(PIN_RF&(1<<IN_RF)))
 486:	18 99       	sbic	0x03, 0	; 3
 488:	e7 c0       	rjmp	.+462    	; 0x658 <__vector_3+0x20e>
		{
			rf_decode.rf_count_bit=0;
 48a:	e0 e0       	ldi	r30, 0x00	; 0
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	17 82       	std	Z+7, r1	; 0x07
			rf_decode.rf_data = 0;
 490:	12 82       	std	Z+2, r1	; 0x02
 492:	11 82       	std	Z+1, r1	; 0x01
			rf_decode.rf_stage=1;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer=0;
 498:	16 82       	std	Z+6, r1	; 0x06
 49a:	15 82       	std	Z+5, r1	; 0x05
 49c:	dd c0       	rjmp	.+442    	; 0x658 <__vector_3+0x20e>
		}
		break;
		case 1:
		if ((rf_decode.rf_timer>=rf_min_range) && (rf_decode.rf_timer<rf_max_range))
 49e:	80 91 05 01 	lds	r24, 0x0105
 4a2:	90 91 06 01 	lds	r25, 0x0106
 4a6:	80 35       	cpi	r24, 0x50	; 80
 4a8:	91 05       	cpc	r25, r1
 4aa:	60 f1       	brcs	.+88     	; 0x504 <__vector_3+0xba>
 4ac:	80 91 05 01 	lds	r24, 0x0105
 4b0:	90 91 06 01 	lds	r25, 0x0106
 4b4:	8e 35       	cpi	r24, 0x5E	; 94
 4b6:	91 40       	sbci	r25, 0x01	; 1
 4b8:	28 f5       	brcc	.+74     	; 0x504 <__vector_3+0xba>
		{
			if (rf_decode.rf_check==0) RF_decode_setup(rf_decode.rf_timer,25);
 4ba:	80 91 10 01 	lds	r24, 0x0110
 4be:	81 11       	cpse	r24, r1
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__vector_3+0x86>
 4c2:	80 91 05 01 	lds	r24, 0x0105
 4c6:	90 91 06 01 	lds	r25, 0x0106
 4ca:	69 e1       	ldi	r22, 0x19	; 25
 4cc:	0e 94 6d 01 	call	0x2da	; 0x2da <RF_decode_setup>
			
			if ((rf_decode.rf_timer>=rf_decode.rf_min_start) && (rf_decode.rf_timer<rf_decode.rf_max_start))  //250x50= 12.5ms
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	f1 e0       	ldi	r31, 0x01	; 1
 4d4:	25 81       	ldd	r18, Z+5	; 0x05
 4d6:	36 81       	ldd	r19, Z+6	; 0x06
 4d8:	82 85       	ldd	r24, Z+10	; 0x0a
 4da:	93 85       	ldd	r25, Z+11	; 0x0b
 4dc:	28 17       	cp	r18, r24
 4de:	39 07       	cpc	r19, r25
 4e0:	60 f0       	brcs	.+24     	; 0x4fa <__vector_3+0xb0>
 4e2:	25 81       	ldd	r18, Z+5	; 0x05
 4e4:	36 81       	ldd	r19, Z+6	; 0x06
 4e6:	80 85       	ldd	r24, Z+8	; 0x08
 4e8:	91 85       	ldd	r25, Z+9	; 0x09
 4ea:	28 17       	cp	r18, r24
 4ec:	39 07       	cpc	r19, r25
 4ee:	28 f4       	brcc	.+10     	; 0x4fa <__vector_3+0xb0>
			{
				 rf_decode.rf_stage = 2;  
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	84 83       	std	Z+4, r24	; 0x04
				 rf_decode.rf_timer = 0;
 4f4:	16 82       	std	Z+6, r1	; 0x06
 4f6:	15 82       	std	Z+5, r1	; 0x05
 4f8:	af c0       	rjmp	.+350    	; 0x658 <__vector_3+0x20e>
			}
			else 
				{
					rf_decode.rf_stage =0;
 4fa:	e0 e0       	ldi	r30, 0x00	; 0
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	14 82       	std	Z+4, r1	; 0x04
					 rf_decode.rf_check = 0;
 500:	10 8a       	std	Z+16, r1	; 0x10
 502:	aa c0       	rjmp	.+340    	; 0x658 <__vector_3+0x20e>
				 }
		}
		else rf_decode.rf_stage =0;
 504:	10 92 04 01 	sts	0x0104, r1
 508:	a7 c0       	rjmp	.+334    	; 0x658 <__vector_3+0x20e>
		break;
		case 2:
		if (!(PIN_RF&(1<<IN_RF)))
 50a:	18 99       	sbic	0x03, 0	; 3
 50c:	2b c0       	rjmp	.+86     	; 0x564 <__vector_3+0x11a>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_narow) && (rf_decode.rf_timer<rf_decode.rf_max_narow)) rf_decode.rf_stage = 3;
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	25 81       	ldd	r18, Z+5	; 0x05
 514:	36 81       	ldd	r19, Z+6	; 0x06
 516:	85 85       	ldd	r24, Z+13	; 0x0d
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	28 17       	cp	r18, r24
 51c:	39 07       	cpc	r19, r25
 51e:	58 f0       	brcs	.+22     	; 0x536 <__vector_3+0xec>
 520:	25 81       	ldd	r18, Z+5	; 0x05
 522:	36 81       	ldd	r19, Z+6	; 0x06
 524:	84 85       	ldd	r24, Z+12	; 0x0c
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	28 17       	cp	r18, r24
 52a:	39 07       	cpc	r19, r25
 52c:	20 f4       	brcc	.+8      	; 0x536 <__vector_3+0xec>
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	80 93 04 01 	sts	0x0104, r24
 534:	91 c0       	rjmp	.+290    	; 0x658 <__vector_3+0x20e>
			else if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide)) rf_decode.rf_stage = 4;
 536:	e0 e0       	ldi	r30, 0x00	; 0
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	25 81       	ldd	r18, Z+5	; 0x05
 53c:	36 81       	ldd	r19, Z+6	; 0x06
 53e:	87 85       	ldd	r24, Z+15	; 0x0f
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	28 17       	cp	r18, r24
 544:	39 07       	cpc	r19, r25
 546:	58 f0       	brcs	.+22     	; 0x55e <__vector_3+0x114>
 548:	25 81       	ldd	r18, Z+5	; 0x05
 54a:	36 81       	ldd	r19, Z+6	; 0x06
 54c:	86 85       	ldd	r24, Z+14	; 0x0e
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	28 17       	cp	r18, r24
 552:	39 07       	cpc	r19, r25
 554:	20 f4       	brcc	.+8      	; 0x55e <__vector_3+0x114>
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	80 93 04 01 	sts	0x0104, r24
 55c:	7d c0       	rjmp	.+250    	; 0x658 <__vector_3+0x20e>
			else rf_decode.rf_stage =0;
 55e:	10 92 04 01 	sts	0x0104, r1
 562:	7a c0       	rjmp	.+244    	; 0x658 <__vector_3+0x20e>
	
		}
		else rf_decode.rf_stage = 0;
 564:	10 92 04 01 	sts	0x0104, r1
 568:	77 c0       	rjmp	.+238    	; 0x658 <__vector_3+0x20e>
		break;
		case 3:
			rf_decode.rf_stage = 5;
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f1 e0       	ldi	r31, 0x01	; 1
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer = 0;
 572:	16 82       	std	Z+6, r1	; 0x06
 574:	15 82       	std	Z+5, r1	; 0x05
		break;
 576:	70 c0       	rjmp	.+224    	; 0x658 <__vector_3+0x20e>
		case 4:
			rf_decode.rf_stage = 6;
 578:	e0 e0       	ldi	r30, 0x00	; 0
 57a:	f1 e0       	ldi	r31, 0x01	; 1
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	84 83       	std	Z+4, r24	; 0x04
			rf_decode.rf_timer = 0;
 580:	16 82       	std	Z+6, r1	; 0x06
 582:	15 82       	std	Z+5, r1	; 0x05
		break;
 584:	69 c0       	rjmp	.+210    	; 0x658 <__vector_3+0x20e>
		case 5:
		if (!(PIN_RF&(1<<IN_RF)))
 586:	18 99       	sbic	0x03, 0	; 3
 588:	35 c0       	rjmp	.+106    	; 0x5f4 <__vector_3+0x1aa>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_narow) && (rf_decode.rf_timer<rf_decode.rf_max_narow))
 58a:	e0 e0       	ldi	r30, 0x00	; 0
 58c:	f1 e0       	ldi	r31, 0x01	; 1
 58e:	25 81       	ldd	r18, Z+5	; 0x05
 590:	36 81       	ldd	r19, Z+6	; 0x06
 592:	85 85       	ldd	r24, Z+13	; 0x0d
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	28 17       	cp	r18, r24
 598:	39 07       	cpc	r19, r25
 59a:	80 f0       	brcs	.+32     	; 0x5bc <__vector_3+0x172>
 59c:	25 81       	ldd	r18, Z+5	; 0x05
 59e:	36 81       	ldd	r19, Z+6	; 0x06
 5a0:	84 85       	ldd	r24, Z+12	; 0x0c
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	28 17       	cp	r18, r24
 5a6:	39 07       	cpc	r19, r25
 5a8:	48 f4       	brcc	.+18     	; 0x5bc <__vector_3+0x172>
			{
				 rf_decode.rf_data <<= 1; //  bit 0
 5aa:	81 81       	ldd	r24, Z+1	; 0x01
 5ac:	92 81       	ldd	r25, Z+2	; 0x02
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	92 83       	std	Z+2, r25	; 0x02
 5b4:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 5b6:	87 e0       	ldi	r24, 0x07	; 7
 5b8:	84 83       	std	Z+4, r24	; 0x04
 5ba:	4e c0       	rjmp	.+156    	; 0x658 <__vector_3+0x20e>
			}
			else if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide))
 5bc:	e0 e0       	ldi	r30, 0x00	; 0
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	25 81       	ldd	r18, Z+5	; 0x05
 5c2:	36 81       	ldd	r19, Z+6	; 0x06
 5c4:	87 85       	ldd	r24, Z+15	; 0x0f
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	28 17       	cp	r18, r24
 5ca:	39 07       	cpc	r19, r25
 5cc:	80 f0       	brcs	.+32     	; 0x5ee <__vector_3+0x1a4>
 5ce:	25 81       	ldd	r18, Z+5	; 0x05
 5d0:	36 81       	ldd	r19, Z+6	; 0x06
 5d2:	86 85       	ldd	r24, Z+14	; 0x0e
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	28 17       	cp	r18, r24
 5d8:	39 07       	cpc	r19, r25
 5da:	48 f4       	brcc	.+18     	; 0x5ee <__vector_3+0x1a4>
			{
				 rf_decode.rf_data<<=1;//bit float = bit 0
 5dc:	81 81       	ldd	r24, Z+1	; 0x01
 5de:	92 81       	ldd	r25, Z+2	; 0x02
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	92 83       	std	Z+2, r25	; 0x02
 5e6:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 5e8:	87 e0       	ldi	r24, 0x07	; 7
 5ea:	84 83       	std	Z+4, r24	; 0x04
 5ec:	35 c0       	rjmp	.+106    	; 0x658 <__vector_3+0x20e>
			}
			else rf_decode.rf_stage =0;
 5ee:	10 92 04 01 	sts	0x0104, r1
 5f2:	32 c0       	rjmp	.+100    	; 0x658 <__vector_3+0x20e>
			
				 
				
			
		}
		else rf_decode.rf_stage =0;
 5f4:	10 92 04 01 	sts	0x0104, r1
 5f8:	2f c0       	rjmp	.+94     	; 0x658 <__vector_3+0x20e>
		break;
		case 6:
		if (!(PIN_RF&(1<<IN_RF)))
 5fa:	18 99       	sbic	0x03, 0	; 3
 5fc:	21 c0       	rjmp	.+66     	; 0x640 <__vector_3+0x1f6>
		{
			if ((rf_decode.rf_timer>=rf_decode.rf_min_wide)&&(rf_decode.rf_timer<rf_decode.rf_max_wide)) 
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	25 81       	ldd	r18, Z+5	; 0x05
 604:	36 81       	ldd	r19, Z+6	; 0x06
 606:	87 85       	ldd	r24, Z+15	; 0x0f
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	28 17       	cp	r18, r24
 60c:	39 07       	cpc	r19, r25
 60e:	a8 f0       	brcs	.+42     	; 0x63a <__vector_3+0x1f0>
 610:	25 81       	ldd	r18, Z+5	; 0x05
 612:	36 81       	ldd	r19, Z+6	; 0x06
 614:	86 85       	ldd	r24, Z+14	; 0x0e
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	28 17       	cp	r18, r24
 61a:	39 07       	cpc	r19, r25
 61c:	70 f4       	brcc	.+28     	; 0x63a <__vector_3+0x1f0>
			{
				 rf_decode.rf_data <<= 1;
 61e:	81 81       	ldd	r24, Z+1	; 0x01
 620:	92 81       	ldd	r25, Z+2	; 0x02
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	92 83       	std	Z+2, r25	; 0x02
 628:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_data|=1;	//  bit 1
 62a:	81 81       	ldd	r24, Z+1	; 0x01
 62c:	92 81       	ldd	r25, Z+2	; 0x02
 62e:	81 60       	ori	r24, 0x01	; 1
 630:	92 83       	std	Z+2, r25	; 0x02
 632:	81 83       	std	Z+1, r24	; 0x01
				 rf_decode.rf_stage = 7;
 634:	87 e0       	ldi	r24, 0x07	; 7
 636:	84 83       	std	Z+4, r24	; 0x04
 638:	0f c0       	rjmp	.+30     	; 0x658 <__vector_3+0x20e>
			}
			else rf_decode.rf_stage =0;
 63a:	10 92 04 01 	sts	0x0104, r1
 63e:	0c c0       	rjmp	.+24     	; 0x658 <__vector_3+0x20e>
		}
		else rf_decode.rf_stage =0;
 640:	10 92 04 01 	sts	0x0104, r1
 644:	09 c0       	rjmp	.+18     	; 0x658 <__vector_3+0x20e>
		break;
		case 7:
				rf_decode.rf_count_bit++;
 646:	e0 e0       	ldi	r30, 0x00	; 0
 648:	f1 e0       	ldi	r31, 0x01	; 1
 64a:	87 81       	ldd	r24, Z+7	; 0x07
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	87 83       	std	Z+7, r24	; 0x07
				rf_decode.rf_stage = 2;  
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	84 83       	std	Z+4, r24	; 0x04
				rf_decode.rf_timer = 0;
 654:	16 82       	std	Z+6, r1	; 0x06
 656:	15 82       	std	Z+5, r1	; 0x05
		default:
		
		
		break;
	}
	if (rf_decode.rf_count_bit>=rf_data_len) 
 658:	80 91 07 01 	lds	r24, 0x0107
 65c:	8c 30       	cpi	r24, 0x0C	; 12
 65e:	c8 f0       	brcs	.+50     	; 0x692 <__vector_3+0x248>
	{
		if ((rf_decode.rf_data>>4)==(unsigned int)rf_decode.rf_id) rf_decode.rf_key=rf_decode.rf_data & 0x000f;
 660:	e0 e0       	ldi	r30, 0x00	; 0
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	21 81       	ldd	r18, Z+1	; 0x01
 666:	32 81       	ldd	r19, Z+2	; 0x02
 668:	83 81       	ldd	r24, Z+3	; 0x03
 66a:	32 95       	swap	r19
 66c:	22 95       	swap	r18
 66e:	2f 70       	andi	r18, 0x0F	; 15
 670:	23 27       	eor	r18, r19
 672:	3f 70       	andi	r19, 0x0F	; 15
 674:	23 27       	eor	r18, r19
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	28 17       	cp	r18, r24
 67a:	39 07       	cpc	r19, r25
 67c:	21 f4       	brne	.+8      	; 0x686 <__vector_3+0x23c>
 67e:	81 81       	ldd	r24, Z+1	; 0x01
 680:	92 81       	ldd	r25, Z+2	; 0x02
 682:	8f 70       	andi	r24, 0x0F	; 15
 684:	80 83       	st	Z, r24
		rf_decode.rf_count_bit=0;
 686:	e0 e0       	ldi	r30, 0x00	; 0
 688:	f1 e0       	ldi	r31, 0x01	; 1
 68a:	17 82       	std	Z+7, r1	; 0x07
		rf_decode.rf_stage =0;
 68c:	14 82       	std	Z+4, r1	; 0x04
		rf_decode.rf_check = 1;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	80 8b       	std	Z+16, r24	; 0x10
	}
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	bf 91       	pop	r27
 698:	af 91       	pop	r26
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	7f 91       	pop	r23
 6a0:	6f 91       	pop	r22
 6a2:	5f 91       	pop	r21
 6a4:	4f 91       	pop	r20
 6a6:	3f 91       	pop	r19
 6a8:	2f 91       	pop	r18
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
 6b0:	1f 90       	pop	r1
 6b2:	18 95       	reti

000006b4 <__tablejump2__>:
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	05 90       	lpm	r0, Z+
 6ba:	f4 91       	lpm	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	09 94       	ijmp

000006c0 <__umulhisi3>:
 6c0:	a2 9f       	mul	r26, r18
 6c2:	b0 01       	movw	r22, r0
 6c4:	b3 9f       	mul	r27, r19
 6c6:	c0 01       	movw	r24, r0
 6c8:	a3 9f       	mul	r26, r19
 6ca:	70 0d       	add	r23, r0
 6cc:	81 1d       	adc	r24, r1
 6ce:	11 24       	eor	r1, r1
 6d0:	91 1d       	adc	r25, r1
 6d2:	b2 9f       	mul	r27, r18
 6d4:	70 0d       	add	r23, r0
 6d6:	81 1d       	adc	r24, r1
 6d8:	11 24       	eor	r1, r1
 6da:	91 1d       	adc	r25, r1
 6dc:	08 95       	ret

000006de <_exit>:
 6de:	f8 94       	cli

000006e0 <__stop_program>:
 6e0:	ff cf       	rjmp	.-2      	; 0x6e0 <__stop_program>
