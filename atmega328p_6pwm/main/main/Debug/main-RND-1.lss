
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000b0  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000766  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000250  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000031f  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000134  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000035b  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000af  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000149a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include "pwm6ch.h"
int main(void)
{
	
	pwm_phasecorrect_timer0_initial(clk_timer0_div64);
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	0e 94 6d 00 	call	0xda	; 0xda <pwm_phasecorrect_timer0_initial>
//	pwm_phasecorrect_timer1_initial(clk_timer1_div64);
	pwm_phasecorrect_timer2_initial(clk_timer2_div64);
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	0e 94 91 00 	call	0x122	; 0x122 <pwm_phasecorrect_timer2_initial>
	
	pwm_servo_timer1_initial();
  8c:	0e 94 77 00 	call	0xee	; 0xee <pwm_servo_timer1_initial>
	pwm_servo_timer1_OCR1A_updata(1000);
  90:	88 ee       	ldi	r24, 0xE8	; 232
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	0e 94 87 00 	call	0x10e	; 0x10e <pwm_servo_timer1_OCR1A_updata>
	//pwm_servo_timer1_OCR1B_updata(1000);
	pwm_phasecorrect_4ch_updata(100,200,50,10);
  98:	2a e0       	ldi	r18, 0x0A	; 10
  9a:	42 e3       	ldi	r20, 0x32	; 50
  9c:	68 ec       	ldi	r22, 0xC8	; 200
  9e:	84 e6       	ldi	r24, 0x64	; 100
  a0:	0e 94 9f 00 	call	0x13e	; 0x13e <pwm_phasecorrect_4ch_updata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	87 ea       	ldi	r24, 0xA7	; 167
  a8:	91 e6       	ldi	r25, 0x61	; 97
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
	
    while(1)
    {
		
		_delay_ms(2000);
		pwm_servo_timer1_OCR1B_updata(700);
  b6:	8c eb       	ldi	r24, 0xBC	; 188
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	0e 94 8c 00 	call	0x118	; 0x118 <pwm_servo_timer1_OCR1B_updata>
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	87 ea       	ldi	r24, 0xA7	; 167
  c2:	91 e6       	ldi	r25, 0x61	; 97
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		_delay_ms(2000);
		pwm_servo_timer1_OCR1B_updata(2400);
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	99 e0       	ldi	r25, 0x09	; 9
  d4:	0e 94 8c 00 	call	0x118	; 0x118 <pwm_servo_timer1_OCR1B_updata>
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <main+0x24>

000000da <pwm_phasecorrect_timer0_initial>:

//timer 0 pwm_phasecorect

void pwm_phasecorrect_timer0_initial(unsigned char clk)
{
	DDRD |=(1<<PORTD5)|(1<<PORTD6); // OC0A,OC0B IS OUTPUT
  da:	9a b1       	in	r25, 0x0a	; 10
  dc:	90 66       	ori	r25, 0x60	; 96
  de:	9a b9       	out	0x0a, r25	; 10
	TCCR0A = (0<<COM0A0)| (1<<COM0A1)| (0<<COM0B0)| (1<<COM0B1)| (1<<WGM00);
  e0:	91 ea       	ldi	r25, 0xA1	; 161
  e2:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (0<<WGM02)|(clk<<CS00);
  e4:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
  e6:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0;
  e8:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
  ea:	18 bc       	out	0x28, r1	; 40
  ec:	08 95       	ret

000000ee <pwm_servo_timer1_initial>:
	OCR1B =val;
}

void pwm_servo_timer1_initial(void)
{
	DDRB |=(1<<PINB1)|(1<<PINB2);
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	86 60       	ori	r24, 0x06	; 6
  f2:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 1<<COM1A1|1<<COM1B1;// non invert
  f4:	80 ea       	ldi	r24, 0xA0	; 160
  f6:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 1<<WGM13|2<<CS10;	//clk/8
  fa:	82 e1       	ldi	r24, 0x12	; 18
  fc:	80 93 81 00 	sts	0x0081, r24
	ICR1 =20000; //20000 with xtal 16MHZ, 13824 if xtal 11.0592MHZ,10000 if xtal 8MHZ, 5000 if xtal 4Mhz
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	9e e4       	ldi	r25, 0x4E	; 78
 104:	90 93 87 00 	sts	0x0087, r25
 108:	80 93 86 00 	sts	0x0086, r24
 10c:	08 95       	ret

0000010e <pwm_servo_timer1_OCR1A_updata>:
}

void pwm_servo_timer1_OCR1A_updata(unsigned int val)
{
	OCR1A = val;
 10e:	90 93 89 00 	sts	0x0089, r25
 112:	80 93 88 00 	sts	0x0088, r24
 116:	08 95       	ret

00000118 <pwm_servo_timer1_OCR1B_updata>:
}

void pwm_servo_timer1_OCR1B_updata(unsigned int val)
{
	OCR1B = val;
 118:	90 93 8b 00 	sts	0x008B, r25
 11c:	80 93 8a 00 	sts	0x008A, r24
 120:	08 95       	ret

00000122 <pwm_phasecorrect_timer2_initial>:

//timer 2 pwm_phasecorect
void pwm_phasecorrect_timer2_initial(unsigned char clk)
{
	 // OC2A,OC2B IS OUTPUT
	DDRB |=(1<<PORTB3);
 122:	23 9a       	sbi	0x04, 3	; 4
	DDRD |=(1<<PORTD3);
 124:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR2A = (0<<COM2A0)| (1<<COM2A1)| (0<<COM2B0)| (1<<COM2B1)| (1<<WGM20);
 126:	91 ea       	ldi	r25, 0xA1	; 161
 128:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B =(clk<<CS00);
 12c:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0;
 130:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A = 0;
 134:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = 0;
 138:	10 92 b4 00 	sts	0x00B4, r1
 13c:	08 95       	ret

0000013e <pwm_phasecorrect_4ch_updata>:
}

void pwm_phasecorrect_timer2_OCR2A_updata(unsigned char	val)
{
	OCR2A = val;	
 13e:	80 93 b3 00 	sts	0x00B3, r24



void pwm_phasecorrect_timer0_OCR0A_updata(unsigned char	val)
{
	OCR0A = val;	
 142:	67 bd       	out	0x27, r22	; 39
}

void pwm_phasecorrect_timer0_OCR0B_updata(unsigned char val)
{
	
	OCR0B =val;
 144:	48 bd       	out	0x28, r20	; 40
	OCR2A = val;	
}

void pwm_phasecorrect_timer2_OCR2B_updata(unsigned char val)
{
	OCR2B =val;
 146:	20 93 b4 00 	sts	0x00B4, r18
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
