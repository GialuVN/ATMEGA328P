
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002f24  00002fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  00800074  00800074  00002fcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fcc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003eb9  00000000  00000000  0000323c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a84  00000000  00000000  000070f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e4f  00000000  00000000  00007b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000774  00000000  00000000  000089c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ab1  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002dc6  00000000  00000000  00009bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  0000c9b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 03 	jmp	0x68c	; 0x68c <__ctors_end>
       4:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
       8:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
       c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      10:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      14:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      18:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      1c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      20:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      24:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      28:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      2c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      30:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      34:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      38:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      3c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      40:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      44:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      48:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      4c:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      50:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__bad_interrupt>
      54:	6e 14       	cp	r6, r14
      56:	71 14       	cp	r7, r1
      58:	74 14       	cp	r7, r4
      5a:	77 14       	cp	r7, r7
      5c:	7a 14       	cp	r7, r10
      5e:	7d 14       	cp	r7, r13
      60:	80 14       	cp	r8, r0

00000062 <__trampolines_end>:
      62:	20 46       	sbci	r18, 0x60	; 96
      64:	72 65       	ori	r23, 0x52	; 82
      66:	65 20       	and	r6, r5
      68:	4d 65       	ori	r20, 0x5D	; 93
      6a:	6d 6f       	ori	r22, 0xFD	; 253
      6c:	72 79       	andi	r23, 0x92	; 146
      6e:	3a 20       	and	r3, r10
	...

00000071 <__c.2007>:
      71:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00000080 <__c.1980>:
      80:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
      90:	20 63 6c 75 73 74 65 72 00                           cluster.

00000099 <__c.1978>:
      99:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
      a9:	68 61 69 6e 00                                      hain.

000000ae <__c.1970>:
      ae:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 20 00      File Created! .

000000be <__c.1965>:
      be:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

000000ce <__c.1962>:
      ce:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
      de:	21 00                                               !.

000000e0 <__c.1953>:
      e0:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
      f0:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

000000fa <__c.1951>:
      fa:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
     10a:	21 00                                               !.

0000010c <__c.1949>:
     10c:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

0000011d <__c.1945>:
     11d:	20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65 78      File already ex
     12d:	69 73 74 73 2c 20 61 70 70 65 6e 64 69 6e 67 20     ists, appending 
     13d:	64 61 74 61 2e 2e 00                                data...

00000144 <__c.1904>:
     144:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
     154:	2e 2e 00                                            ...

00000157 <__c.1892>:
     157:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     167:	20 63 6c 75 73 74 65 72 00                           cluster.

00000170 <__c.1871>:
     170:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
     180:	20 63 6c 75 73 74 65 72 00                           cluster.

00000189 <__c.1863>:
     189:	52 4f 4f 54 00                                      ROOT.

0000018e <__c.1861>:
     18e:	44 49 52 00                                         DIR.

00000192 <__c.1859>:
     192:	20 20 20 00                                            .

00000196 <__c.1857>:
     196:	46 49 4c 45 00                                      FILE.

0000019b <__c.1855>:
     19b:	20 20 20 00                                            .

0000019f <__c.1849>:
     19f:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

000001ad <__c.1847>:
     1ad:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

000001b8 <__c.1842>:
     1b8:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
     1c8:	69 73 74 21 00                                      ist!.

000001cd <__c.2058>:
     1cd:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

000001de <__c.2047>:
     1de:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
     1ee:	6f 6e 67 2e 2e 00                                   ong...

000001f4 <__c.2040>:
     1f4:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
     204:	20 00                                                .

00000206 <__c.2034>:
     206:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00000217 <__c.2029>:
     217:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00000225 <__c.2026>:
     225:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
     235:	21 00                                               !.

00000237 <__c.2024>:
     237:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00000246 <__c.2020>:
     246:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
     256:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00000260 <__c.2016>:
     260:	45 72 61 73 65 64 21 00                             Erased!.

00000268 <__c.2014>:
     268:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

00000277 <__c.2011>:
     277:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
     287:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
     297:	39 29 3a 00                                         9):.

0000029b <__c.2008>:
     29b:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
     2ab:	73 61 62 6c 65 64 21 00                             sabled!.

000002b3 <__c.2006>:
     2b3:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     2c3:	28 30 2d 39 2f 61 2f 62 2f 63 29 3a 20 00           (0-9/a/b/c): .

000002d1 <__c.2004>:
     2d1:	3e 20 62 3a 20 55 70 64 61 74 65 20 44 61 74 65     > b: Update Date
     2e1:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2f1:	20 63 3a 20 55 70 64 61 74 65 20 54 69 6d 65 00      c: Update Time.

00000301 <__c.2002>:
     301:	3e 20 39 3a 20 52 65 61 64 20 53 44 20 4d 65 6d     > 9: Read SD Mem
     311:	6f 72 79 20 43 61 70 61 63 69 74 79 20 20 20 20     ory Capacity    
     321:	20 61 3a 20 53 68 6f 77 20 44 61 74 65 20 26 20      a: Show Date & 
     331:	54 69 6d 65 00                                      Time.

00000336 <__c.2000>:
     336:	3e 20 37 3a 20 57 72 69 74 65 20 46 69 6c 65 20     > 7: Write File 
     346:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     356:	20 38 3a 20 44 65 6c 65 74 65 20 46 69 6c 65 00      8: Delete File.

00000366 <__c.1998>:
     366:	3e 20 35 3a 20 47 65 74 20 66 69 6c 65 20 6c 69     > 5: Get file li
     376:	73 74 20 20 20 20 20 20 20 20 20 20 20 20 20 20     st              
     386:	20 36 3a 20 52 65 61 64 20 46 69 6c 65 00            6: Read File.

00000394 <__c.1996>:
     394:	3e 20 31 3a 20 57 72 69 74 65 20 73 69 6e 67 6c     > 1: Write singl
     3a4:	65 20 42 6c 6f 63 6b 20 20 20 20 20 20 20 20 20     e Block         
     3b4:	20 32 3a 20 52 65 61 64 20 73 69 6e 67 6c 65 20      2: Read single 
     3c4:	42 6c 6f 63 6b 00                                   Block.

000003ca <__c.1994>:
     3ca:	3e 20 30 3a 20 45 72 61 73 65 20 42 6c 6f 63 6b     > 0: Erase Block
     3da:	73 20 00                                            s .

000003dd <__c.1992>:
     3dd:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

000003ee <__c.1990>:
     3ee:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

000003ff <__c.1988>:
     3ff:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
     40f:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00000419 <__c.1985>:
     419:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     429:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
     439:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00000444 <__c.1982>:
     444:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
     454:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

00000461 <__c.1978>:
     461:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
     471:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
     481:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

0000048c <__c.1974>:
     48c:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
     49c:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

000004a9 <__c.1972>:
     4a9:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
     4b9:	63 74 65 64 2e 2e 00                                cted...

000004c0 <__c.1967>:
     4c0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4d0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4e0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     4f0:	2a 2a 2a 2a 00                                      ****.

000004f5 <__c.1965>:
     4f5:	20 20 20 20 44 68 61 72 6d 61 6e 69 27 73 20 6d         Dharmani's m
     505:	69 63 72 6f 53 44 20 43 61 72 64 20 54 65 73 74     icroSD Card Test
     515:	69 6e 67 2e 2e 20 20 00                             ing..  .

0000051d <__c.1963>:
     51d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     52d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     53d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     54d:	2a 2a 2a 2a 00                                      ****.

00000552 <__c.1793>:
     552:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000562 <__c.1791>:
     562:	44 61 74 65 20 55 70 64 61 74 65 20 46 61 69 6c     Date Update Fail
     572:	65 64 2e 2e 00                                      ed...

00000577 <__c.1789>:
     577:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     587:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000591 <__c.1787>:
     591:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     5a1:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     5b1:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

000005ba <__c.1784>:
     5ba:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     5ca:	6d 2f 79 79 29 3a 00                                m/yy):.

000005d1 <__c.1778>:
     5d1:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

000005e1 <__c.1776>:
     5e1:	54 69 6d 65 20 55 70 64 61 74 65 20 46 61 69 6c     Time Update Fail
     5f1:	65 64 2e 2e 00                                      ed...

000005f6 <__c.1774>:
     5f6:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     606:	65 73 73 66 75 6c 6c 79 21 00                       essfully!.

00000610 <__c.1771>:
     610:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     620:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     630:	73 29 3a 00                                         s):.

00000634 <__c.1746>:
     634:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

0000063c <__c.1743>:
     63c:	53 61 74 75 72 64 61 79 00                          Saturday.

00000645 <__c.1740>:
     645:	46 72 69 64 61 79 00                                Friday.

0000064c <__c.1737>:
     64c:	54 68 75 72 73 64 61 79 00                          Thursday.

00000655 <__c.1734>:
     655:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

0000065f <__c.1731>:
     65f:	54 75 65 73 64 61 79 00                             Tuesday.

00000667 <__c.1728>:
     667:	4d 6f 6e 64 61 79 00                                Monday.

0000066e <__c.1724>:
     66e:	53 75 6e 64 61 79 00                                Sunday.

00000675 <__c.1721>:
     675:	20 20 20 20 44 61 79 3a 20 00                           Day: .

0000067f <__c.1716>:
     67f:	44 61 74 65 3a 00                                   Date:.

00000685 <__c.1710>:
     685:	54 69 6d 65 3a 00 00                                Time:..

0000068c <__ctors_end>:
     68c:	11 24       	eor	r1, r1
     68e:	1f be       	out	0x3f, r1	; 63
     690:	cf e5       	ldi	r28, 0x5F	; 95
     692:	d8 e0       	ldi	r29, 0x08	; 8
     694:	de bf       	out	0x3e, r29	; 62
     696:	cd bf       	out	0x3d, r28	; 61

00000698 <__do_copy_data>:
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	a0 e6       	ldi	r26, 0x60	; 96
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e4 e2       	ldi	r30, 0x24	; 36
     6a0:	ff e2       	ldi	r31, 0x2F	; 47
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <__do_copy_data+0x10>
     6a4:	05 90       	lpm	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	a4 37       	cpi	r26, 0x74	; 116
     6aa:	b1 07       	cpc	r27, r17
     6ac:	d9 f7       	brne	.-10     	; 0x6a4 <__do_copy_data+0xc>

000006ae <__do_clear_bss>:
     6ae:	22 e0       	ldi	r18, 0x02	; 2
     6b0:	a4 e7       	ldi	r26, 0x74	; 116
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <.do_clear_bss_start>

000006b6 <.do_clear_bss_loop>:
     6b6:	1d 92       	st	X+, r1

000006b8 <.do_clear_bss_start>:
     6b8:	a7 3c       	cpi	r26, 0xC7	; 199
     6ba:	b2 07       	cpc	r27, r18
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <.do_clear_bss_loop>
     6be:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <main>
     6c2:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <_exit>

000006c6 <__bad_interrupt>:
     6c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006ca <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
     6ca:	cf 92       	push	r12
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
     6d6:	a0 91 99 02 	lds	r26, 0x0299
     6da:	b0 91 9a 02 	lds	r27, 0x029A
     6de:	c0 90 81 00 	lds	r12, 0x0081
     6e2:	d0 90 82 00 	lds	r13, 0x0082
     6e6:	e0 90 83 00 	lds	r14, 0x0083
     6ea:	f0 90 84 00 	lds	r15, 0x0084
     6ee:	22 50       	subi	r18, 0x02	; 2
     6f0:	31 09       	sbc	r19, r1
     6f2:	41 09       	sbc	r20, r1
     6f4:	51 09       	sbc	r21, r1
     6f6:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     6fa:	6c 0d       	add	r22, r12
     6fc:	7d 1d       	adc	r23, r13
     6fe:	8e 1d       	adc	r24, r14
     700:	9f 1d       	adc	r25, r15
}
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	08 95       	ret

0000070c <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
     70c:	4f 92       	push	r4
     70e:	5f 92       	push	r5
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	4b 01       	movw	r8, r22
     72e:	5c 01       	movw	r10, r24
     730:	c4 2f       	mov	r28, r20
     732:	28 01       	movw	r4, r16
     734:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
     736:	80 91 a4 02 	lds	r24, 0x02A4
     73a:	90 91 a5 02 	lds	r25, 0x02A5
     73e:	22 e0       	ldi	r18, 0x02	; 2
     740:	88 0c       	add	r8, r8
     742:	99 1c       	adc	r9, r9
     744:	aa 1c       	adc	r10, r10
     746:	bb 1c       	adc	r11, r11
     748:	2a 95       	dec	r18
     74a:	d1 f7       	brne	.-12     	; 0x740 <getSetNextCluster+0x34>
     74c:	20 91 89 00 	lds	r18, 0x0089
     750:	30 91 8a 00 	lds	r19, 0x008A
     754:	c0 90 9b 02 	lds	r12, 0x029B
     758:	d0 90 9c 02 	lds	r13, 0x029C
     75c:	e0 90 9d 02 	lds	r14, 0x029D
     760:	f0 90 9e 02 	lds	r15, 0x029E
     764:	c8 0e       	add	r12, r24
     766:	d9 1e       	adc	r13, r25
     768:	e1 1c       	adc	r14, r1
     76a:	f1 1c       	adc	r15, r1
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	c5 01       	movw	r24, r10
     772:	b4 01       	movw	r22, r8
     774:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     778:	c2 0e       	add	r12, r18
     77a:	d3 1e       	adc	r13, r19
     77c:	e4 1e       	adc	r14, r20
     77e:	f5 1e       	adc	r15, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
     780:	20 91 89 00 	lds	r18, 0x0089
     784:	30 91 8a 00 	lds	r19, 0x008A
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	c5 01       	movw	r24, r10
     78e:	b4 01       	movw	r22, r8
     790:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     794:	4b 01       	movw	r8, r22
     796:	5c 01       	movw	r10, r24
     798:	da e0       	ldi	r29, 0x0A	; 10

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
     7a2:	88 23       	and	r24, r24
     7a4:	11 f0       	breq	.+4      	; 0x7aa <getSetNextCluster+0x9e>
     7a6:	d1 50       	subi	r29, 0x01	; 1

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
     7a8:	c1 f7       	brne	.-16     	; 0x79a <getSetNextCluster+0x8e>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
     7aa:	f4 01       	movw	r30, r8
     7ac:	e7 56       	subi	r30, 0x67	; 103
     7ae:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
     7b0:	c1 11       	cpse	r28, r1
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <getSetNextCluster+0xb4>
  return ((*FATEntryValue) & 0x0fffffff);
     7b4:	60 81       	ld	r22, Z
     7b6:	71 81       	ldd	r23, Z+1	; 0x01
     7b8:	82 81       	ldd	r24, Z+2	; 0x02
     7ba:	93 81       	ldd	r25, Z+3	; 0x03
     7bc:	9f 70       	andi	r25, 0x0F	; 15
     7be:	0b c0       	rjmp	.+22     	; 0x7d6 <getSetNextCluster+0xca>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
     7c0:	40 82       	st	Z, r4
     7c2:	51 82       	std	Z+1, r5	; 0x01
     7c4:	62 82       	std	Z+2, r6	; 0x02
     7c6:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
     7c8:	c7 01       	movw	r24, r14
     7ca:	b6 01       	movw	r22, r12
     7cc:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>

return (0);
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	cb 01       	movw	r24, r22
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	9f 90       	pop	r9
     7ec:	8f 90       	pop	r8
     7ee:	7f 90       	pop	r7
     7f0:	6f 90       	pop	r6
     7f2:	5f 90       	pop	r5
     7f4:	4f 90       	pop	r4
     7f6:	08 95       	ret

000007f8 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
     7f8:	cf 92       	push	r12
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	00 d0       	rcall	.+0      	; 0x80a <getSetFreeCluster+0x12>
     80a:	00 d0       	rcall	.+0      	; 0x80c <getSetFreeCluster+0x14>
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	18 2f       	mov	r17, r24
     812:	06 2f       	mov	r16, r22
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
     814:	60 91 9b 02 	lds	r22, 0x029B
     818:	70 91 9c 02 	lds	r23, 0x029C
     81c:	80 91 9d 02 	lds	r24, 0x029D
     820:	90 91 9e 02 	lds	r25, 0x029E
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	8f 4f       	sbci	r24, 0xFF	; 255
     82a:	9f 4f       	sbci	r25, 0xFF	; 255
     82c:	29 83       	std	Y+1, r18	; 0x01
     82e:	3a 83       	std	Y+2, r19	; 0x02
     830:	4b 83       	std	Y+3, r20	; 0x03
     832:	5c 83       	std	Y+4, r21	; 0x04
     834:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
     838:	c0 90 99 00 	lds	r12, 0x0099
     83c:	d0 90 9a 00 	lds	r13, 0x009A
     840:	e0 90 9b 00 	lds	r14, 0x009B
     844:	f0 90 9c 00 	lds	r15, 0x009C
     848:	29 81       	ldd	r18, Y+1	; 0x01
     84a:	3a 81       	ldd	r19, Y+2	; 0x02
     84c:	4b 81       	ldd	r20, Y+3	; 0x03
     84e:	5c 81       	ldd	r21, Y+4	; 0x04
     850:	82 e5       	ldi	r24, 0x52	; 82
     852:	c8 16       	cp	r12, r24
     854:	d8 06       	cpc	r13, r24
     856:	81 e6       	ldi	r24, 0x61	; 97
     858:	e8 06       	cpc	r14, r24
     85a:	81 e4       	ldi	r24, 0x41	; 65
     85c:	f8 06       	cpc	r15, r24
     85e:	09 f0       	breq	.+2      	; 0x862 <__stack+0x3>
     860:	57 c0       	rjmp	.+174    	; 0x910 <__stack+0xb1>
     862:	c0 90 7d 02 	lds	r12, 0x027D
     866:	d0 90 7e 02 	lds	r13, 0x027E
     86a:	e0 90 7f 02 	lds	r14, 0x027F
     86e:	f0 90 80 02 	lds	r15, 0x0280
     872:	e2 e7       	ldi	r30, 0x72	; 114
     874:	ce 16       	cp	r12, r30
     876:	de 06       	cpc	r13, r30
     878:	e1 e4       	ldi	r30, 0x41	; 65
     87a:	ee 06       	cpc	r14, r30
     87c:	e1 e6       	ldi	r30, 0x61	; 97
     87e:	fe 06       	cpc	r15, r30
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	46 c0       	rjmp	.+140    	; 0x910 <__stack+0xb1>
     884:	c0 90 95 02 	lds	r12, 0x0295
     888:	d0 90 96 02 	lds	r13, 0x0296
     88c:	e0 90 97 02 	lds	r14, 0x0297
     890:	f0 90 98 02 	lds	r15, 0x0298
     894:	c1 14       	cp	r12, r1
     896:	d1 04       	cpc	r13, r1
     898:	f5 e5       	ldi	r31, 0x55	; 85
     89a:	ef 06       	cpc	r14, r31
     89c:	fa ea       	ldi	r31, 0xAA	; 170
     89e:	ff 06       	cpc	r15, r31
     8a0:	b9 f5       	brne	.+110    	; 0x910 <__stack+0xb1>
  return 0xffffffff;

 if(get_set == GET)
     8a2:	01 11       	cpse	r16, r1
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <__stack+0x6f>
 {
   if(totOrNext == TOTAL_FREE)
     8a6:	11 30       	cpi	r17, 0x01	; 1
     8a8:	49 f4       	brne	.+18     	; 0x8bc <__stack+0x5d>
      return(FS->freeClusterCount);
     8aa:	60 91 81 02 	lds	r22, 0x0281
     8ae:	70 91 82 02 	lds	r23, 0x0282
     8b2:	80 91 83 02 	lds	r24, 0x0283
     8b6:	90 91 84 02 	lds	r25, 0x0284
     8ba:	2d c0       	rjmp	.+90     	; 0x916 <__stack+0xb7>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
     8bc:	60 91 85 02 	lds	r22, 0x0285
     8c0:	70 91 86 02 	lds	r23, 0x0286
     8c4:	80 91 87 02 	lds	r24, 0x0287
     8c8:	90 91 88 02 	lds	r25, 0x0288
     8cc:	24 c0       	rjmp	.+72     	; 0x916 <__stack+0xb7>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
     8ce:	11 30       	cpi	r17, 0x01	; 1
     8d0:	49 f4       	brne	.+18     	; 0x8e4 <__stack+0x85>
      FS->freeClusterCount = FSEntry;
     8d2:	20 93 81 02 	sts	0x0281, r18
     8d6:	30 93 82 02 	sts	0x0282, r19
     8da:	40 93 83 02 	sts	0x0283, r20
     8de:	50 93 84 02 	sts	0x0284, r21
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <__stack+0x95>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
     8e4:	20 93 85 02 	sts	0x0285, r18
     8e8:	30 93 86 02 	sts	0x0286, r19
     8ec:	40 93 87 02 	sts	0x0287, r20
     8f0:	50 93 88 02 	sts	0x0288, r21
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
     8f4:	60 91 9b 02 	lds	r22, 0x029B
     8f8:	70 91 9c 02 	lds	r23, 0x029C
     8fc:	80 91 9d 02 	lds	r24, 0x029D
     900:	90 91 9e 02 	lds	r25, 0x029E
     904:	6f 5f       	subi	r22, 0xFF	; 255
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	8f 4f       	sbci	r24, 0xFF	; 255
     90a:	9f 4f       	sbci	r25, 0xFF	; 255
     90c:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
  return 0xffffffff;
     910:	6f ef       	ldi	r22, 0xFF	; 255
     912:	7f ef       	ldi	r23, 0xFF	; 255
     914:	cb 01       	movw	r24, r22
	  FS->nextFreeCluster = FSEntry;
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
 }
 return 0xffffffff;
}
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	df 90       	pop	r13
     92c:	cf 90       	pop	r12
     92e:	08 95       	ret

00000930 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
     938:	10 92 9b 02 	sts	0x029B, r1
     93c:	10 92 9c 02 	sts	0x029C, r1
     940:	10 92 9d 02 	sts	0x029D, r1
     944:	10 92 9e 02 	sts	0x029E, r1

SD_readSingleBlock(0);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	cb 01       	movw	r24, r22
     94e:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
     952:	80 91 99 00 	lds	r24, 0x0099
     956:	8d 7f       	andi	r24, 0xFD	; 253
     958:	89 3e       	cpi	r24, 0xE9	; 233
     95a:	09 f0       	breq	.+2      	; 0x95e <getBootSectorData+0x2e>
     95c:	8a c0       	rjmp	.+276    	; 0xa72 <getBootSectorData+0x142>
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
}

bytesPerSector = bpb->bytesPerSector;
     95e:	80 91 a4 00 	lds	r24, 0x00A4
     962:	90 91 a5 00 	lds	r25, 0x00A5
     966:	90 93 8a 00 	sts	0x008A, r25
     96a:	80 93 89 00 	sts	0x0089, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
     96e:	80 91 a6 00 	lds	r24, 0x00A6
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 9a 02 	sts	0x029A, r25
     978:	80 93 99 02 	sts	0x0299, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
     97c:	e0 91 a7 00 	lds	r30, 0x00A7
     980:	f0 91 a8 00 	lds	r31, 0x00A8
     984:	f0 93 a5 02 	sts	0x02A5, r31
     988:	e0 93 a4 02 	sts	0x02A4, r30
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
     98c:	80 91 c5 00 	lds	r24, 0x00C5
     990:	90 91 c6 00 	lds	r25, 0x00C6
     994:	a0 91 c7 00 	lds	r26, 0x00C7
     998:	b0 91 c8 00 	lds	r27, 0x00C8
     99c:	80 93 8f 00 	sts	0x008F, r24
     9a0:	90 93 90 00 	sts	0x0090, r25
     9a4:	a0 93 91 00 	sts	0x0091, r26
     9a8:	b0 93 92 00 	sts	0x0092, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
     9ac:	c0 91 a4 02 	lds	r28, 0x02A4
     9b0:	d0 91 a5 02 	lds	r29, 0x02A5
     9b4:	a0 91 a9 00 	lds	r26, 0x00A9
     9b8:	20 91 bd 00 	lds	r18, 0x00BD
     9bc:	30 91 be 00 	lds	r19, 0x00BE
     9c0:	40 91 bf 00 	lds	r20, 0x00BF
     9c4:	50 91 c0 00 	lds	r21, 0x00C0
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     9ce:	8b 01       	movw	r16, r22
     9d0:	9c 01       	movw	r18, r24
     9d2:	80 91 b5 00 	lds	r24, 0x00B5
     9d6:	90 91 b6 00 	lds	r25, 0x00B6
     9da:	a0 91 b7 00 	lds	r26, 0x00B7
     9de:	b0 91 b8 00 	lds	r27, 0x00B8
     9e2:	8c 0f       	add	r24, r28
     9e4:	9d 1f       	adc	r25, r29
     9e6:	a1 1d       	adc	r26, r1
     9e8:	b1 1d       	adc	r27, r1
     9ea:	80 0f       	add	r24, r16
     9ec:	91 1f       	adc	r25, r17
     9ee:	a2 1f       	adc	r26, r18
     9f0:	b3 1f       	adc	r27, r19
     9f2:	80 93 81 00 	sts	0x0081, r24
     9f6:	90 93 82 00 	sts	0x0082, r25
     9fa:	a0 93 83 00 	sts	0x0083, r26
     9fe:	b0 93 84 00 	sts	0x0084, r27

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a02:	40 91 99 02 	lds	r20, 0x0299
     a06:	50 91 9a 02 	lds	r21, 0x029A
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
     a0a:	60 91 b9 00 	lds	r22, 0x00B9
     a0e:	70 91 ba 00 	lds	r23, 0x00BA
     a12:	80 91 bb 00 	lds	r24, 0x00BB
     a16:	90 91 bc 00 	lds	r25, 0x00BC
     a1a:	6e 1b       	sub	r22, r30
     a1c:	7f 0b       	sbc	r23, r31
     a1e:	81 09       	sbc	r24, r1
     a20:	91 09       	sbc	r25, r1
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);

dataSectors = bpb->totalSectors_F32
     a22:	60 1b       	sub	r22, r16
     a24:	71 0b       	sbc	r23, r17
     a26:	82 0b       	sbc	r24, r18
     a28:	93 0b       	sbc	r25, r19
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
     a2a:	9a 01       	movw	r18, r20
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     a34:	20 93 8b 00 	sts	0x008B, r18
     a38:	30 93 8c 00 	sts	0x008C, r19
     a3c:	40 93 8d 00 	sts	0x008D, r20
     a40:	50 93 8e 00 	sts	0x008E, r21
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	a9 01       	movw	r20, r18
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
     a52:	00 91 8b 00 	lds	r16, 0x008B
     a56:	10 91 8c 00 	lds	r17, 0x008C
     a5a:	20 91 8d 00 	lds	r18, 0x008D
     a5e:	30 91 8e 00 	lds	r19, 0x008E
     a62:	06 17       	cp	r16, r22
     a64:	17 07       	cpc	r17, r23
     a66:	28 07       	cpc	r18, r24
     a68:	39 07       	cpc	r19, r25
     a6a:	20 f5       	brcc	.+72     	; 0xab4 <getBootSectorData+0x184>
     freeClusterCountUpdated = 0;
     a6c:	10 92 ab 02 	sts	0x02AB, r1
     a70:	24 c0       	rjmp	.+72     	; 0xaba <getBootSectorData+0x18a>

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
     a72:	80 91 97 02 	lds	r24, 0x0297
     a76:	90 91 98 02 	lds	r25, 0x0298
     a7a:	85 35       	cpi	r24, 0x55	; 85
     a7c:	9a 4a       	sbci	r25, 0xAA	; 170
     a7e:	11 f0       	breq	.+4      	; 0xa84 <getBootSectorData+0x154>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	1c c0       	rjmp	.+56     	; 0xabc <getBootSectorData+0x18c>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
     a84:	60 91 5f 02 	lds	r22, 0x025F
     a88:	70 91 60 02 	lds	r23, 0x0260
     a8c:	80 91 61 02 	lds	r24, 0x0261
     a90:	90 91 62 02 	lds	r25, 0x0262
     a94:	60 93 9b 02 	sts	0x029B, r22
     a98:	70 93 9c 02 	sts	0x029C, r23
     a9c:	80 93 9d 02 	sts	0x029D, r24
     aa0:	90 93 9e 02 	sts	0x029E, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
     aa4:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
     aa8:	80 91 99 00 	lds	r24, 0x0099
     aac:	8d 7f       	andi	r24, 0xFD	; 253
     aae:	89 3e       	cpi	r24, 0xE9	; 233
     ab0:	39 f7       	brne	.-50     	; 0xa80 <getBootSectorData+0x150>
     ab2:	55 cf       	rjmp	.-342    	; 0x95e <getBootSectorData+0x2e>
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
     freeClusterCountUpdated = 0;
else
	 freeClusterCountUpdated = 1;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 ab 02 	sts	0x02AB, r24
return 0;
     aba:	80 e0       	ldi	r24, 0x00	; 0
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
     ace:	2b 97       	sbiw	r28, 0x0b	; 11
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	fc 01       	movw	r30, r24
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     adc:	40 e0       	ldi	r20, 0x00	; 0
if(fileName[j] == '.') break;
     ade:	21 91       	ld	r18, Z+
     ae0:	2e 32       	cpi	r18, 0x2E	; 46
     ae2:	21 f0       	breq	.+8      	; 0xaec <convertFileName+0x26>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
     ae4:	4f 5f       	subi	r20, 0xFF	; 255
     ae6:	4c 30       	cpi	r20, 0x0C	; 12
     ae8:	d1 f7       	brne	.-12     	; 0xade <convertFileName+0x18>
     aea:	09 c0       	rjmp	.+18     	; 0xafe <convertFileName+0x38>
     aec:	54 2f       	mov	r21, r20
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
     aee:	49 30       	cpi	r20, 0x09	; 9
     af0:	30 f4       	brcc	.+12     	; 0xafe <convertFileName+0x38>
     af2:	9e 01       	movw	r18, r28
     af4:	2f 5f       	subi	r18, 0xFF	; 255
     af6:	3f 4f       	sbci	r19, 0xFF	; 255
     af8:	f9 01       	movw	r30, r18
     afa:	dc 01       	movw	r26, r24
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <convertFileName+0x44>
     afe:	84 e4       	ldi	r24, 0x44	; 68
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	40 c0       	rjmp	.+128    	; 0xb8a <convertFileName+0xc4>
     b0a:	6e 2f       	mov	r22, r30
     b0c:	62 1b       	sub	r22, r18

for(k=0; k<j; k++) //setting file name
     b0e:	64 17       	cp	r22, r20
     b10:	18 f4       	brcc	.+6      	; 0xb18 <convertFileName+0x52>
  fileNameFAT[k] = fileName[k];
     b12:	6d 91       	ld	r22, X+
     b14:	61 93       	st	Z+, r22
     b16:	f9 cf       	rjmp	.-14     	; 0xb0a <convertFileName+0x44>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
     b18:	60 e2       	ldi	r22, 0x20	; 32
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b1a:	48 30       	cpi	r20, 0x08	; 8
     b1c:	31 f0       	breq	.+12     	; 0xb2a <convertFileName+0x64>
  fileNameFAT[k] = ' ';
     b1e:	f9 01       	movw	r30, r18
     b20:	e4 0f       	add	r30, r20
     b22:	f1 1d       	adc	r31, r1
     b24:	60 83       	st	Z, r22
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
     b26:	4f 5f       	subi	r20, 0xFF	; 255
     b28:	f8 cf       	rjmp	.-16     	; 0xb1a <convertFileName+0x54>
  fileNameFAT[k] = ' ';

j++;
     b2a:	5f 5f       	subi	r21, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     b2c:	70 e2       	ldi	r23, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     b2e:	fc 01       	movw	r30, r24
     b30:	e5 0f       	add	r30, r21
     b32:	f1 1d       	adc	r31, r1
     b34:	60 81       	ld	r22, Z
     b36:	66 23       	and	r22, r22
     b38:	31 f0       	breq	.+12     	; 0xb46 <convertFileName+0x80>
    fileNameFAT[k] = fileName[j++];
     b3a:	5f 5f       	subi	r21, 0xFF	; 255
     b3c:	f9 01       	movw	r30, r18
     b3e:	e4 0f       	add	r30, r20
     b40:	f1 1d       	adc	r31, r1
     b42:	60 83       	st	Z, r22
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <convertFileName+0x90>
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
     b46:	64 2f       	mov	r22, r20
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
     b48:	4f 5f       	subi	r20, 0xFF	; 255
     b4a:	f9 01       	movw	r30, r18
     b4c:	e6 0f       	add	r30, r22
     b4e:	f1 1d       	adc	r31, r1
     b50:	70 83       	st	Z, r23
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
     b52:	4b 30       	cpi	r20, 0x0B	; 11
     b54:	c0 f3       	brcs	.-16     	; 0xb46 <convertFileName+0x80>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
     b56:	4f 5f       	subi	r20, 0xFF	; 255
     b58:	4b 30       	cpi	r20, 0x0B	; 11
     b5a:	48 f3       	brcs	.-46     	; 0xb2e <convertFileName+0x68>
     b5c:	ae 01       	movw	r20, r28
     b5e:	44 5f       	subi	r20, 0xF4	; 244
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	f9 01       	movw	r30, r18
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
     b64:	60 81       	ld	r22, Z
     b66:	7f e9       	ldi	r23, 0x9F	; 159
     b68:	76 0f       	add	r23, r22
     b6a:	7a 31       	cpi	r23, 0x1A	; 26
     b6c:	10 f4       	brcc	.+4      	; 0xb72 <convertFileName+0xac>
    fileNameFAT[j] -= 0x20;
     b6e:	60 52       	subi	r22, 0x20	; 32
     b70:	60 83       	st	Z, r22
     b72:	31 96       	adiw	r30, 0x01	; 1
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
     b74:	e4 17       	cp	r30, r20
     b76:	f5 07       	cpc	r31, r21
     b78:	a9 f7       	brne	.-22     	; 0xb64 <convertFileName+0x9e>
     b7a:	dc 01       	movw	r26, r24
     b7c:	f9 01       	movw	r30, r18
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
     b7e:	81 91       	ld	r24, Z+
     b80:	8d 93       	st	X+, r24

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
     b82:	e4 17       	cp	r30, r20
     b84:	f5 07       	cpc	r31, r21
     b86:	d9 f7       	brne	.-10     	; 0xb7e <convertFileName+0xb8>
  fileName[j] = fileNameFAT[j];

return 0;
     b88:	80 e0       	ldi	r24, 0x00	; 0
}
     b8a:	2b 96       	adiw	r28, 0x0b	; 11
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
     b9c:	4f 92       	push	r4
     b9e:	5f 92       	push	r5
     ba0:	6f 92       	push	r6
     ba2:	7f 92       	push	r7
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
     bb8:	80 e8       	ldi	r24, 0x80	; 128
     bba:	c8 22       	and	r12, r24
     bbc:	26 01       	movw	r4, r12
     bbe:	37 01       	movw	r6, r14
     bc0:	32 e0       	ldi	r19, 0x02	; 2
     bc2:	44 0c       	add	r4, r4
     bc4:	55 1c       	adc	r5, r5
     bc6:	66 1c       	adc	r6, r6
     bc8:	77 1c       	adc	r7, r7
     bca:	3a 95       	dec	r19
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <searchNextFreeCluster+0x26>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     bce:	80 91 8b 00 	lds	r24, 0x008B
     bd2:	90 91 8c 00 	lds	r25, 0x008C
     bd6:	a0 91 8d 00 	lds	r26, 0x008D
     bda:	b0 91 8e 00 	lds	r27, 0x008E
     bde:	c8 16       	cp	r12, r24
     be0:	d9 06       	cpc	r13, r25
     be2:	ea 06       	cpc	r14, r26
     be4:	fb 06       	cpc	r15, r27
     be6:	08 f0       	brcs	.+2      	; 0xbea <searchNextFreeCluster+0x4e>
     be8:	42 c0       	rjmp	.+132    	; 0xc6e <searchNextFreeCluster+0xd2>
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
     bea:	80 91 a4 02 	lds	r24, 0x02A4
     bee:	90 91 a5 02 	lds	r25, 0x02A5
     bf2:	20 91 89 00 	lds	r18, 0x0089
     bf6:	30 91 8a 00 	lds	r19, 0x008A
     bfa:	80 90 9b 02 	lds	r8, 0x029B
     bfe:	90 90 9c 02 	lds	r9, 0x029C
     c02:	a0 90 9d 02 	lds	r10, 0x029D
     c06:	b0 90 9e 02 	lds	r11, 0x029E
     c0a:	88 0e       	add	r8, r24
     c0c:	99 1e       	adc	r9, r25
     c0e:	a1 1c       	adc	r10, r1
     c10:	b1 1c       	adc	r11, r1
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	c3 01       	movw	r24, r6
     c18:	b2 01       	movw	r22, r4
     c1a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     c1e:	82 0e       	add	r8, r18
     c20:	93 1e       	adc	r9, r19
     c22:	a4 1e       	adc	r10, r20
     c24:	b5 1e       	adc	r11, r21
      SD_readSingleBlock(sector);
     c26:	c5 01       	movw	r24, r10
     c28:	b4 01       	movw	r22, r8
     c2a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
     c2e:	e9 e9       	ldi	r30, 0x99	; 153
     c30:	f0 e0       	ldi	r31, 0x00	; 0
      for(i=0; i<128; i++)
     c32:	20 e0       	ldi	r18, 0x00	; 0
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
     c34:	81 91       	ld	r24, Z+
     c36:	91 91       	ld	r25, Z+
     c38:	a1 91       	ld	r26, Z+
     c3a:	b1 91       	ld	r27, Z+
     c3c:	bf 70       	andi	r27, 0x0F	; 15
     c3e:	89 2b       	or	r24, r25
     c40:	8a 2b       	or	r24, r26
     c42:	8b 2b       	or	r24, r27
     c44:	39 f4       	brne	.+14     	; 0xc54 <searchNextFreeCluster+0xb8>
            return(cluster+i);
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	62 0f       	add	r22, r18
     c4c:	71 1d       	adc	r23, r1
     c4e:	81 1d       	adc	r24, r1
     c50:	91 1d       	adc	r25, r1
     c52:	10 c0       	rjmp	.+32     	; 0xc74 <searchNextFreeCluster+0xd8>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     c54:	2f 5f       	subi	r18, 0xFF	; 255
     c56:	20 38       	cpi	r18, 0x80	; 128
     c58:	69 f7       	brne	.-38     	; 0xc34 <searchNextFreeCluster+0x98>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
     c5a:	80 e8       	ldi	r24, 0x80	; 128
     c5c:	c8 0e       	add	r12, r24
     c5e:	d1 1c       	adc	r13, r1
     c60:	e1 1c       	adc	r14, r1
     c62:	f1 1c       	adc	r15, r1
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	58 0e       	add	r5, r24
     c68:	61 1c       	adc	r6, r1
     c6a:	71 1c       	adc	r7, r1
     c6c:	b0 cf       	rjmp	.-160    	; 0xbce <searchNextFreeCluster+0x32>
         if(((*value) & 0x0fffffff) == 0)
            return(cluster+i);
      }  
    } 

 return 0;
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	cb 01       	movw	r24, r22
}
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	bf 90       	pop	r11
     c7e:	af 90       	pop	r10
     c80:	9f 90       	pop	r9
     c82:	8f 90       	pop	r8
     c84:	7f 90       	pop	r7
     c86:	6f 90       	pop	r6
     c88:	5f 90       	pop	r5
     c8a:	4f 90       	pop	r4
     c8c:	08 95       	ret

00000c8e <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	64 97       	sbiw	r28, 0x14	; 20
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	a8 2e       	mov	r10, r24
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
     cb6:	94 e1       	ldi	r25, 0x14	; 20
     cb8:	e0 e6       	ldi	r30, 0x60	; 96
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	de 01       	movw	r26, r28
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	01 90       	ld	r0, Z+
     cc2:	0d 92       	st	X+, r0
     cc4:	9a 95       	dec	r25
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <displayMemory+0x32>
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     cc8:	ec e0       	ldi	r30, 0x0C	; 12
     cca:	be 2e       	mov	r11, r30
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
     ccc:	fc e2       	ldi	r31, 0x2C	; 44
     cce:	9f 2e       	mov	r9, r31
	   i--;
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     cd0:	aa e0       	ldi	r26, 0x0A	; 10
     cd2:	ca 2e       	mov	r12, r26
     cd4:	d1 2c       	mov	r13, r1
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	b8 16       	cp	r11, r24
     cde:	19 f0       	breq	.+6      	; 0xce6 <displayMemory+0x58>
     ce0:	e9 e0       	ldi	r30, 0x09	; 9
     ce2:	be 12       	cpse	r11, r30
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <displayMemory+0x62>
	{
	   memoryString[i-1] = ',';  
     ce6:	fe 01       	movw	r30, r28
     ce8:	eb 0d       	add	r30, r11
     cea:	f1 1d       	adc	r31, r1
     cec:	90 82       	st	Z, r9
	   i--;
     cee:	ba 94       	dec	r11
	}
    memoryString[i-1] = (memory % 10) | 0x30;
     cf0:	8e 01       	movw	r16, r28
     cf2:	0b 0d       	add	r16, r11
     cf4:	11 1d       	adc	r17, r1
     cf6:	cb 01       	movw	r24, r22
     cf8:	ba 01       	movw	r22, r20
     cfa:	a7 01       	movw	r20, r14
     cfc:	96 01       	movw	r18, r12
     cfe:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     d02:	ca 01       	movw	r24, r20
     d04:	60 63       	ori	r22, 0x30	; 48
     d06:	f8 01       	movw	r30, r16
     d08:	60 83       	st	Z, r22
    memory /= 10;
     d0a:	a9 01       	movw	r20, r18
     d0c:	bc 01       	movw	r22, r24
	if(memory == 0) break;
     d0e:	41 15       	cp	r20, r1
     d10:	51 05       	cpc	r21, r1
     d12:	61 05       	cpc	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	11 f0       	breq	.+4      	; 0xd1c <displayMemory+0x8e>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
     d18:	ba 94       	dec	r11
     d1a:	f9 f6       	brne	.-66     	; 0xcda <displayMemory+0x4c>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	af 12       	cpse	r10, r31
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <displayMemory+0x98>
     d22:	8b e4       	ldi	r24, 0x4B	; 75
     d24:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 94 13 	call	0x2728	; 0x2728 <transmitString>
}
     d2e:	64 96       	adiw	r28, 0x14	; 20
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	ff 90       	pop	r15
     d44:	ef 90       	pop	r14
     d46:	df 90       	pop	r13
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	9f 90       	pop	r9
     d50:	08 95       	ret

00000d52 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
     d52:	4f 92       	push	r4
     d54:	5f 92       	push	r5
     d56:	6f 92       	push	r6
     d58:	7f 92       	push	r7
     d5a:	8f 92       	push	r8
     d5c:	9f 92       	push	r9
     d5e:	af 92       	push	r10
     d60:	bf 92       	push	r11
     d62:	cf 92       	push	r12
     d64:	df 92       	push	r13
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	28 97       	sbiw	r28, 0x08	; 8
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
     d7e:	20 91 8b 00 	lds	r18, 0x008B
     d82:	30 91 8c 00 	lds	r19, 0x008C
     d86:	40 91 8d 00 	lds	r20, 0x008D
     d8a:	50 91 8e 00 	lds	r21, 0x008E
     d8e:	a0 91 99 02 	lds	r26, 0x0299
     d92:	b0 91 9a 02 	lds	r27, 0x029A
     d96:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     d9a:	9b 01       	movw	r18, r22
     d9c:	ac 01       	movw	r20, r24
     d9e:	9a e0       	ldi	r25, 0x0A	; 10
     da0:	56 95       	lsr	r21
     da2:	47 95       	ror	r20
     da4:	37 95       	ror	r19
     da6:	27 95       	ror	r18
     da8:	9a 95       	dec	r25
     daa:	d1 f7       	brne	.-12     	; 0xda0 <memoryStatistics+0x4e>
totalMemory *= bytesPerSector;
     dac:	a0 91 89 00 	lds	r26, 0x0089
     db0:	b0 91 8a 00 	lds	r27, 0x008A
     db4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     db8:	ab 01       	movw	r20, r22
     dba:	bc 01       	movw	r22, r24

TX_NEWLINE;
     dbc:	8d e0       	ldi	r24, 0x0D	; 13
     dbe:	4d 83       	std	Y+5, r20	; 0x05
     dc0:	5e 83       	std	Y+6, r21	; 0x06
     dc2:	6f 83       	std	Y+7, r22	; 0x07
     dc4:	78 87       	std	Y+8, r23	; 0x08
     dc6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
     dca:	8a e0       	ldi	r24, 0x0A	; 10
     dcc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
TX_NEWLINE;
     dd0:	8d e0       	ldi	r24, 0x0D	; 13
     dd2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
     dd6:	8a e0       	ldi	r24, 0x0A	; 10
     dd8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("Total Memory: "));
     ddc:	81 e7       	ldi	r24, 0x71	; 113
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>

displayMemory (HIGH, totalMemory);
     de4:	4d 81       	ldd	r20, Y+5	; 0x05
     de6:	5e 81       	ldd	r21, Y+6	; 0x06
     de8:	6f 81       	ldd	r22, Y+7	; 0x07
     dea:	78 85       	ldd	r23, Y+8	; 0x08
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 47 06 	call	0xc8e	; 0xc8e <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	a9 01       	movw	r20, r18
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
     e00:	6b 01       	movw	r12, r22
     e02:	7c 01       	movw	r14, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
     e04:	80 91 8b 00 	lds	r24, 0x008B
     e08:	90 91 8c 00 	lds	r25, 0x008C
     e0c:	a0 91 8d 00 	lds	r26, 0x008D
     e10:	b0 91 8e 00 	lds	r27, 0x008E
     e14:	8c 15       	cp	r24, r12
     e16:	9d 05       	cpc	r25, r13
     e18:	ae 05       	cpc	r26, r14
     e1a:	bf 05       	cpc	r27, r15
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <memoryStatistics+0xce>
     e1e:	71 c0       	rjmp	.+226    	; 0xf02 <memoryStatistics+0x1b0>
{
   freeClusterCountUpdated = 0;
     e20:	10 92 ab 02 	sts	0x02AB, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
     e24:	80 90 8f 00 	lds	r8, 0x008F
     e28:	90 90 90 00 	lds	r9, 0x0090
     e2c:	a0 90 91 00 	lds	r10, 0x0091
     e30:	b0 90 92 00 	lds	r11, 0x0092
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	88 0c       	add	r8, r8
     e38:	99 1c       	adc	r9, r9
     e3a:	aa 1c       	adc	r10, r10
     e3c:	bb 1c       	adc	r11, r11
     e3e:	8a 95       	dec	r24
     e40:	d1 f7       	brne	.-12     	; 0xe36 <memoryStatistics+0xe4>

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
   totalClusterCount = 0;
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	1a 82       	std	Y+2, r1	; 0x02
     e46:	1b 82       	std	Y+3, r1	; 0x03
     e48:	1c 82       	std	Y+4, r1	; 0x04
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
{
   freeClusterCountUpdated = 0;
   freeClusters = 0;
     e4a:	c1 2c       	mov	r12, r1
     e4c:	d1 2c       	mov	r13, r1
     e4e:	76 01       	movw	r14, r12
   totalClusterCount = 0;
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
     e50:	80 91 a4 02 	lds	r24, 0x02A4
     e54:	90 91 a5 02 	lds	r25, 0x02A5
     e58:	20 91 89 00 	lds	r18, 0x0089
     e5c:	30 91 8a 00 	lds	r19, 0x008A
     e60:	40 90 9b 02 	lds	r4, 0x029B
     e64:	50 90 9c 02 	lds	r5, 0x029C
     e68:	60 90 9d 02 	lds	r6, 0x029D
     e6c:	70 90 9e 02 	lds	r7, 0x029E
     e70:	48 0e       	add	r4, r24
     e72:	59 1e       	adc	r5, r25
     e74:	61 1c       	adc	r6, r1
     e76:	71 1c       	adc	r7, r1
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
     e84:	42 0e       	add	r4, r18
     e86:	53 1e       	adc	r5, r19
     e88:	64 1e       	adc	r6, r20
     e8a:	75 1e       	adc	r7, r21
      SD_readSingleBlock(sector);
     e8c:	c3 01       	movw	r24, r6
     e8e:	b2 01       	movw	r22, r4
     e90:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
     e94:	69 e9       	ldi	r22, 0x99	; 153
     e96:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
     e98:	fb 01       	movw	r30, r22
     e9a:	81 91       	ld	r24, Z+
     e9c:	91 91       	ld	r25, Z+
     e9e:	a1 91       	ld	r26, Z+
     ea0:	b1 91       	ld	r27, Z+
     ea2:	bf 01       	movw	r22, r30
     ea4:	bf 70       	andi	r27, 0x0F	; 15
     ea6:	89 2b       	or	r24, r25
     ea8:	8a 2b       	or	r24, r26
     eaa:	8b 2b       	or	r24, r27
     eac:	29 f4       	brne	.+10     	; 0xeb8 <memoryStatistics+0x166>
            freeClusters++;;
     eae:	ff ef       	ldi	r31, 0xFF	; 255
     eb0:	cf 1a       	sub	r12, r31
     eb2:	df 0a       	sbc	r13, r31
     eb4:	ef 0a       	sbc	r14, r31
     eb6:	ff 0a       	sbc	r15, r31
        
         totalClusterCount++;
     eb8:	29 81       	ldd	r18, Y+1	; 0x01
     eba:	3a 81       	ldd	r19, Y+2	; 0x02
     ebc:	4b 81       	ldd	r20, Y+3	; 0x03
     ebe:	5c 81       	ldd	r21, Y+4	; 0x04
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	4f 4f       	sbci	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	29 83       	std	Y+1, r18	; 0x01
     eca:	3a 83       	std	Y+2, r19	; 0x02
     ecc:	4b 83       	std	Y+3, r20	; 0x03
     ece:	5c 83       	std	Y+4, r21	; 0x04
         if(totalClusterCount == (totalClusters+2)) break;
     ed0:	80 91 8b 00 	lds	r24, 0x008B
     ed4:	90 91 8c 00 	lds	r25, 0x008C
     ed8:	a0 91 8d 00 	lds	r26, 0x008D
     edc:	b0 91 8e 00 	lds	r27, 0x008E
     ee0:	02 96       	adiw	r24, 0x02	; 2
     ee2:	a1 1d       	adc	r26, r1
     ee4:	b1 1d       	adc	r27, r1
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	4a 07       	cpc	r20, r26
     eec:	5b 07       	cpc	r21, r27
     eee:	49 f0       	breq	.+18     	; 0xf02 <memoryStatistics+0x1b0>
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
     ef0:	32 e0       	ldi	r19, 0x02	; 2
     ef2:	69 39       	cpi	r22, 0x99	; 153
     ef4:	73 07       	cpc	r23, r19
     ef6:	81 f6       	brne	.-96     	; 0xe98 <memoryStatistics+0x146>
     ef8:	42 e0       	ldi	r20, 0x02	; 2
     efa:	94 0e       	add	r9, r20
     efc:	a1 1c       	adc	r10, r1
     efe:	b1 1c       	adc	r11, r1
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
      cluster+=128;
    } 
     f00:	a7 cf       	rjmp	.-178    	; 0xe50 <memoryStatistics+0xfe>
}

if(!freeClusterCountUpdated)
     f02:	80 91 ab 02 	lds	r24, 0x02AB
     f06:	81 11       	cpse	r24, r1
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <memoryStatistics+0x1c4>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
     f0a:	a7 01       	movw	r20, r14
     f0c:	96 01       	movw	r18, r12
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 ab 02 	sts	0x02AB, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
     f1c:	a0 91 99 02 	lds	r26, 0x0299
     f20:	b0 91 9a 02 	lds	r27, 0x029A
     f24:	a7 01       	movw	r20, r14
     f26:	96 01       	movw	r18, r12
     f28:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	ba e0       	ldi	r27, 0x0A	; 10
     f32:	56 95       	lsr	r21
     f34:	47 95       	ror	r20
     f36:	37 95       	ror	r19
     f38:	27 95       	ror	r18
     f3a:	ba 95       	dec	r27
     f3c:	d1 f7       	brne	.-12     	; 0xf32 <memoryStatistics+0x1e0>
freeMemory *= bytesPerSector ;
     f3e:	a0 91 89 00 	lds	r26, 0x0089
     f42:	b0 91 8a 00 	lds	r27, 0x008A
     f46:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
     f4a:	ab 01       	movw	r20, r22
     f4c:	bc 01       	movw	r22, r24
TX_NEWLINE;
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	4d 83       	std	Y+5, r20	; 0x05
     f52:	5e 83       	std	Y+6, r21	; 0x06
     f54:	6f 83       	std	Y+7, r22	; 0x07
     f56:	78 87       	std	Y+8, r23	; 0x08
     f58:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
     f5c:	8a e0       	ldi	r24, 0x0A	; 10
     f5e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
     f62:	82 e6       	ldi	r24, 0x62	; 98
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
displayMemory (HIGH, freeMemory);
     f6a:	4d 81       	ldd	r20, Y+5	; 0x05
     f6c:	5e 81       	ldd	r21, Y+6	; 0x06
     f6e:	6f 81       	ldd	r22, Y+7	; 0x07
     f70:	78 85       	ldd	r23, Y+8	; 0x08
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 47 06 	call	0xc8e	; 0xc8e <displayMemory>
TX_NEWLINE; 
     f78:	8d e0       	ldi	r24, 0x0D	; 13
     f7a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
}
     f80:	28 96       	adiw	r28, 0x08	; 8
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	af 90       	pop	r10
     f9c:	9f 90       	pop	r9
     f9e:	8f 90       	pop	r8
     fa0:	7f 90       	pop	r7
     fa2:	6f 90       	pop	r6
     fa4:	5f 90       	pop	r5
     fa6:	4f 90       	pop	r4
freeMemory = freeClusters * sectorPerCluster / 1024;
freeMemory *= bytesPerSector ;
TX_NEWLINE;
transmitString_F(PSTR(" Free Memory: "));
displayMemory (HIGH, freeMemory);
TX_NEWLINE; 
     fa8:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <transmitByte>

00000fac <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	c8 2f       	mov	r28, r24
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
     fbc:	8a 01       	movw	r16, r20
     fbe:	9b 01       	movw	r18, r22
     fc0:	11 70       	andi	r17, 0x01	; 1
     fc2:	22 27       	eor	r18, r18
     fc4:	33 27       	eor	r19, r19
     fc6:	6a 01       	movw	r12, r20
     fc8:	7b 01       	movw	r14, r22
     fca:	49 e0       	ldi	r20, 0x09	; 9
     fcc:	f6 94       	lsr	r15
     fce:	e7 94       	ror	r14
     fd0:	d7 94       	ror	r13
     fd2:	c7 94       	ror	r12
     fd4:	4a 95       	dec	r20
     fd6:	d1 f7       	brne	.-12     	; 0xfcc <freeMemoryUpdate+0x20>
     fd8:	01 2b       	or	r16, r17
     fda:	02 2b       	or	r16, r18
     fdc:	03 2b       	or	r16, r19
     fde:	29 f0       	breq	.+10     	; 0xfea <freeMemoryUpdate+0x3e>
  else size = (size / 512) +1;
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	c8 1a       	sub	r12, r24
     fe4:	d8 0a       	sbc	r13, r24
     fe6:	e8 0a       	sbc	r14, r24
     fe8:	f8 0a       	sbc	r15, r24
  if((size % 8) == 0) size = size / 8;
     fea:	b7 01       	movw	r22, r14
     fec:	a6 01       	movw	r20, r12
     fee:	47 70       	andi	r20, 0x07	; 7
     ff0:	55 27       	eor	r21, r21
     ff2:	66 27       	eor	r22, r22
     ff4:	77 27       	eor	r23, r23
     ff6:	23 e0       	ldi	r18, 0x03	; 3
     ff8:	f6 94       	lsr	r15
     ffa:	e7 94       	ror	r14
     ffc:	d7 94       	ror	r13
     ffe:	c7 94       	ror	r12
    1000:	2a 95       	dec	r18
    1002:	d1 f7       	brne	.-12     	; 0xff8 <freeMemoryUpdate+0x4c>
    1004:	45 2b       	or	r20, r21
    1006:	46 2b       	or	r20, r22
    1008:	47 2b       	or	r20, r23
    100a:	29 f0       	breq	.+10     	; 0x1016 <freeMemoryUpdate+0x6a>
  else size = (size / 8) +1;
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	c8 1a       	sub	r12, r24
    1010:	d8 0a       	sbc	r13, r24
    1012:	e8 0a       	sbc	r14, r24
    1014:	f8 0a       	sbc	r15, r24

  if(freeClusterCountUpdated)
    1016:	80 91 ab 02 	lds	r24, 0x02AB
    101a:	88 23       	and	r24, r24
    101c:	f9 f0       	breq	.+62     	; 0x105c <freeMemoryUpdate+0xb0>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
  else size = (size / 8) +1;

  if(freeClusterCountUpdated)
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
    1030:	c1 11       	cpse	r28, r1
    1032:	05 c0       	rjmp	.+10     	; 0x103e <freeMemoryUpdate+0x92>
  	   freeClusters = freeClusters + size;
    1034:	2c 0d       	add	r18, r12
    1036:	3d 1d       	adc	r19, r13
    1038:	4e 1d       	adc	r20, r14
    103a:	5f 1d       	adc	r21, r15
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <freeMemoryUpdate+0x9a>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    103e:	2c 19       	sub	r18, r12
    1040:	3d 09       	sbc	r19, r13
    1042:	4e 09       	sbc	r20, r14
    1044:	5f 09       	sbc	r21, r15
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	81 e0       	ldi	r24, 0x01	; 1
  }
}
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
	if(flag == ADD)
  	   freeClusters = freeClusters + size;
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    1058:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <getSetFreeCluster>
  }
}
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	08 95       	ret

0000106c <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    106c:	2f 92       	push	r2
    106e:	3f 92       	push	r3
    1070:	4f 92       	push	r4
    1072:	5f 92       	push	r5
    1074:	6f 92       	push	r6
    1076:	7f 92       	push	r7
    1078:	8f 92       	push	r8
    107a:	9f 92       	push	r9
    107c:	af 92       	push	r10
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2b 97       	sbiw	r28, 0x0b	; 11
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	38 2e       	mov	r3, r24
    10a2:	68 87       	std	Y+8, r22	; 0x08
    10a4:	27 2e       	mov	r2, r23
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    10a6:	c0 90 8f 00 	lds	r12, 0x008F
    10aa:	d0 90 90 00 	lds	r13, 0x0090
    10ae:	e0 90 91 00 	lds	r14, 0x0091
    10b2:	f0 90 92 00 	lds	r15, 0x0092
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	83 0d       	add	r24, r3
    10ba:	8f 83       	std	Y+7, r24	; 0x07

cluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (cluster);
    10bc:	c7 01       	movw	r24, r14
    10be:	b6 01       	movw	r22, r12
    10c0:	0e 94 65 03 	call	0x6ca	; 0x6ca <getFirstSector>
    10c4:	6b 83       	std	Y+3, r22	; 0x03
    10c6:	7c 83       	std	Y+4, r23	; 0x04
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	9e 83       	std	Y+6, r25	; 0x06

   for(sector = 0; sector < sectorPerCluster; sector++)
    10cc:	41 2c       	mov	r4, r1
    10ce:	51 2c       	mov	r5, r1
    10d0:	32 01       	movw	r6, r4
    10d2:	80 91 99 02 	lds	r24, 0x0299
    10d6:	90 91 9a 02 	lds	r25, 0x029A
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	48 16       	cp	r4, r24
    10e0:	59 06       	cpc	r5, r25
    10e2:	6a 06       	cpc	r6, r26
    10e4:	7b 06       	cpc	r7, r27
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <findFiles+0x7e>
    10e8:	94 c0       	rjmp	.+296    	; 0x1212 <findFiles+0x1a6>
   {
     SD_readSingleBlock (firstSector + sector);
    10ea:	8b 80       	ldd	r8, Y+3	; 0x03
    10ec:	9c 80       	ldd	r9, Y+4	; 0x04
    10ee:	ad 80       	ldd	r10, Y+5	; 0x05
    10f0:	be 80       	ldd	r11, Y+6	; 0x06
    10f2:	84 0c       	add	r8, r4
    10f4:	95 1c       	adc	r9, r5
    10f6:	a6 1c       	adc	r10, r6
    10f8:	b7 1c       	adc	r11, r7
    10fa:	c5 01       	movw	r24, r10
    10fc:	b4 01       	movw	r22, r8
    10fe:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
    1102:	04 ea       	ldi	r16, 0xA4	; 164
    1104:	10 e0       	ldi	r17, 0x00	; 0
	

     for(i=0; i<bytesPerSector; i+=32)
    1106:	a9 e9       	ldi	r26, 0x99	; 153
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	bb 87       	std	Y+11, r27	; 0x0b
    110c:	aa 87       	std	Y+10, r26	; 0x0a
    110e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1110:	3b 85       	ldd	r19, Y+11	; 0x0b
    1112:	29 59       	subi	r18, 0x99	; 153
    1114:	30 40       	sbci	r19, 0x00	; 0
    1116:	80 91 89 00 	lds	r24, 0x0089
    111a:	90 91 8a 00 	lds	r25, 0x008A
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	08 f0       	brcs	.+2      	; 0x1126 <findFiles+0xba>
    1124:	70 c0       	rjmp	.+224    	; 0x1206 <findFiles+0x19a>
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    1126:	ea 85       	ldd	r30, Y+10	; 0x0a
    1128:	fb 85       	ldd	r31, Y+11	; 0x0b
    112a:	80 81       	ld	r24, Z
    112c:	81 11       	cpse	r24, r1
    112e:	08 c0       	rjmp	.+16     	; 0x1140 <findFiles+0xd4>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	83 0d       	add	r24, r3
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	08 f0       	brcs	.+2      	; 0x113a <findFiles+0xce>
    1138:	88 c0       	rjmp	.+272    	; 0x124a <findFiles+0x1de>
		      transmitString_F(PSTR("File does not exist!"));
    113a:	88 eb       	ldi	r24, 0xB8	; 184
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	83 c0       	rjmp	.+262    	; 0x1246 <findFiles+0x1da>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    1140:	85 3e       	cpi	r24, 0xE5	; 229
    1142:	09 f4       	brne	.+2      	; 0x1146 <findFiles+0xda>
    1144:	58 c0       	rjmp	.+176    	; 0x11f6 <findFiles+0x18a>
    1146:	d8 01       	movw	r26, r16
    1148:	8c 91       	ld	r24, X
    114a:	8f 30       	cpi	r24, 0x0F	; 15
    114c:	09 f4       	brne	.+2      	; 0x1150 <findFiles+0xe4>
    114e:	53 c0       	rjmp	.+166    	; 0x11f6 <findFiles+0x18a>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    1150:	bf 81       	ldd	r27, Y+7	; 0x07
    1152:	b2 30       	cpi	r27, 0x02	; 2
    1154:	60 f4       	brcc	.+24     	; 0x116e <findFiles+0x102>
    1156:	e8 85       	ldd	r30, Y+8	; 0x08
    1158:	f2 2d       	mov	r31, r2
    115a:	aa 85       	ldd	r26, Y+10	; 0x0a
    115c:	bb 85       	ldd	r27, Y+11	; 0x0b
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    115e:	9d 91       	ld	r25, X+
    1160:	81 91       	ld	r24, Z+
    1162:	98 13       	cpse	r25, r24
    1164:	48 c0       	rjmp	.+144    	; 0x11f6 <findFiles+0x18a>
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    1166:	a0 17       	cp	r26, r16
    1168:	b1 07       	cpc	r27, r17
    116a:	c9 f7       	brne	.-14     	; 0x115e <findFiles+0xf2>
    116c:	71 c0       	rjmp	.+226    	; 0x1250 <findFiles+0x1e4>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    116e:	8d e0       	ldi	r24, 0x0D	; 13
    1170:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    117a:	ea 85       	ldd	r30, Y+10	; 0x0a
    117c:	fb 85       	ldd	r31, Y+11	; 0x0b
    117e:	fa 83       	std	Y+2, r31	; 0x02
    1180:	e9 83       	std	Y+1, r30	; 0x01
			 for(j=0; j<11; j++)
    1182:	90 e0       	ldi	r25, 0x00	; 0
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
    1184:	a9 81       	ldd	r26, Y+1	; 0x01
    1186:	ba 81       	ldd	r27, Y+2	; 0x02
    1188:	8d 91       	ld	r24, X+
    118a:	ba 83       	std	Y+2, r27	; 0x02
    118c:	a9 83       	std	Y+1, r26	; 0x01
    118e:	99 87       	std	Y+9, r25	; 0x09
    1190:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    1194:	99 85       	ldd	r25, Y+9	; 0x09
    1196:	9f 5f       	subi	r25, 0xFF	; 255
    1198:	9b 30       	cpi	r25, 0x0B	; 11
    119a:	41 f0       	breq	.+16     	; 0x11ac <findFiles+0x140>
		     {
			   if(j == 8) transmitByte(' ');
    119c:	98 30       	cpi	r25, 0x08	; 8
    119e:	91 f7       	brne	.-28     	; 0x1184 <findFiles+0x118>
    11a0:	80 e2       	ldi	r24, 0x20	; 32
    11a2:	99 87       	std	Y+9, r25	; 0x09
    11a4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    11a8:	99 85       	ldd	r25, Y+9	; 0x09
    11aa:	ec cf       	rjmp	.-40     	; 0x1184 <findFiles+0x118>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    11ac:	8b e9       	ldi	r24, 0x9B	; 155
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    11b4:	f8 01       	movw	r30, r16
    11b6:	80 81       	ld	r24, Z
    11b8:	80 31       	cpi	r24, 0x10	; 16
    11ba:	b1 f0       	breq	.+44     	; 0x11e8 <findFiles+0x17c>
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	b9 f0       	breq	.+46     	; 0x11ee <findFiles+0x182>
			 {
			     transmitString_F (PSTR("FILE" ));
    11c0:	86 e9       	ldi	r24, 0x96	; 150
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
		         transmitString_F (PSTR("   "));
    11c8:	82 e9       	ldi	r24, 0x92	; 146
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    11d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    11d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    11d4:	5c 96       	adiw	r26, 0x1c	; 28
    11d6:	4d 91       	ld	r20, X+
    11d8:	5d 91       	ld	r21, X+
    11da:	6d 91       	ld	r22, X+
    11dc:	7c 91       	ld	r23, X
    11de:	5f 97       	sbiw	r26, 0x1f	; 31
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0e 94 47 06 	call	0xc8e	; 0xc8e <displayMemory>
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <findFiles+0x18a>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    11e8:	8e e8       	ldi	r24, 0x8E	; 142
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <findFiles+0x186>
    11ee:	89 e8       	ldi	r24, 0x89	; 137
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    11f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    11f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    11fa:	b0 96       	adiw	r30, 0x20	; 32
    11fc:	fb 87       	std	Y+11, r31	; 0x0b
    11fe:	ea 87       	std	Y+10, r30	; 0x0a
    1200:	00 5e       	subi	r16, 0xE0	; 224
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	84 cf       	rjmp	.-248    	; 0x110e <findFiles+0xa2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1206:	ff ef       	ldi	r31, 0xFF	; 255
    1208:	4f 1a       	sub	r4, r31
    120a:	5f 0a       	sbc	r5, r31
    120c:	6f 0a       	sbc	r6, r31
    120e:	7f 0a       	sbc	r7, r31
    1210:	60 cf       	rjmp	.-320    	; 0x10d2 <findFiles+0x66>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    1212:	00 e0       	ldi	r16, 0x00	; 0
    1214:	10 e0       	ldi	r17, 0x00	; 0
    1216:	98 01       	movw	r18, r16
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	c7 01       	movw	r24, r14
    121c:	b6 01       	movw	r22, r12
    121e:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    1222:	6b 01       	movw	r12, r22
    1224:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    1226:	87 ef       	ldi	r24, 0xF7	; 247
    1228:	c8 16       	cp	r12, r24
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	d8 06       	cpc	r13, r24
    122e:	e8 06       	cpc	r14, r24
    1230:	8f e0       	ldi	r24, 0x0F	; 15
    1232:	f8 06       	cpc	r15, r24
    1234:	50 f4       	brcc	.+20     	; 0x124a <findFiles+0x1de>
   	 return 0;
   if(cluster == 0) 
    1236:	c1 14       	cp	r12, r1
    1238:	d1 04       	cpc	r13, r1
    123a:	e1 04       	cpc	r14, r1
    123c:	f1 04       	cpc	r15, r1
    123e:	09 f0       	breq	.+2      	; 0x1242 <findFiles+0x1d6>
    1240:	3d cf       	rjmp	.-390    	; 0x10bc <findFiles+0x50>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    1242:	80 e7       	ldi	r24, 0x70	; 112
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	ae c0       	rjmp	.+348    	; 0x13ac <findFiles+0x340>
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
			{
			  if(flag == GET_FILE)
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	39 12       	cpse	r3, r25
    1254:	3b c0       	rjmp	.+118    	; 0x12cc <findFiles+0x260>
              {
			    appendFileSector = firstSector + sector;
    1256:	80 92 ac 02 	sts	0x02AC, r8
    125a:	90 92 ad 02 	sts	0x02AD, r9
    125e:	a0 92 ae 02 	sts	0x02AE, r10
    1262:	b0 92 af 02 	sts	0x02AF, r11
				appendFileLocation = i;
    1266:	c9 01       	movw	r24, r18
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	80 93 7b 00 	sts	0x007B, r24
    1270:	90 93 7c 00 	sts	0x007C, r25
    1274:	a0 93 7d 00 	sts	0x007D, r26
    1278:	b0 93 7e 00 	sts	0x007E, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    127c:	ea 85       	ldd	r30, Y+10	; 0x0a
    127e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1280:	84 89       	ldd	r24, Z+20	; 0x14
    1282:	95 89       	ldd	r25, Z+21	; 0x15
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	dc 01       	movw	r26, r24
    128a:	99 27       	eor	r25, r25
    128c:	88 27       	eor	r24, r24
    128e:	42 8d       	ldd	r20, Z+26	; 0x1a
    1290:	53 8d       	ldd	r21, Z+27	; 0x1b
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	84 2b       	or	r24, r20
    1298:	95 2b       	or	r25, r21
    129a:	a6 2b       	or	r26, r22
    129c:	b7 2b       	or	r27, r23
    129e:	80 93 a6 02 	sts	0x02A6, r24
    12a2:	90 93 a7 02 	sts	0x02A7, r25
    12a6:	a0 93 a8 02 	sts	0x02A8, r26
    12aa:	b0 93 a9 02 	sts	0x02A9, r27
				fileSize = dir->fileSize;
    12ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    12b0:	95 8d       	ldd	r25, Z+29	; 0x1d
    12b2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    12b4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    12b6:	80 93 85 00 	sts	0x0085, r24
    12ba:	90 93 86 00 	sts	0x0086, r25
    12be:	a0 93 87 00 	sts	0x0087, r26
    12c2:	b0 93 88 00 	sts	0x0088, r27
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
     {
	    dir = (struct dir_Structure *) &buffer[i];
    12c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c8:	9b 85       	ldd	r25, Y+11	; 0x0b
              {
			    appendFileSector = firstSector + sector;
				appendFileLocation = i;
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
				fileSize = dir->fileSize;
			    return (dir);
    12ca:	70 c0       	rjmp	.+224    	; 0x13ac <findFiles+0x340>
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    12cc:	8d e0       	ldi	r24, 0x0D	; 13
    12ce:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    12d8:	8d ea       	ldi	r24, 0xAD	; 173
    12da:	91 e0       	ldi	r25, 0x01	; 1
    12dc:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
				 TX_NEWLINE;
    12e0:	8d e0       	ldi	r24, 0x0D	; 13
    12e2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    12e6:	8a e0       	ldi	r24, 0x0A	; 10
    12e8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
				 TX_NEWLINE;
    12ec:	8d e0       	ldi	r24, 0x0D	; 13
    12ee:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    12f2:	8a e0       	ldi	r24, 0x0A	; 10
    12f4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    12f8:	aa 85       	ldd	r26, Y+10	; 0x0a
    12fa:	bb 85       	ldd	r27, Y+11	; 0x0b
    12fc:	54 96       	adiw	r26, 0x14	; 20
    12fe:	cd 90       	ld	r12, X+
    1300:	dc 90       	ld	r13, X
    1302:	55 97       	sbiw	r26, 0x15	; 21
    1304:	e1 2c       	mov	r14, r1
    1306:	f1 2c       	mov	r15, r1
    1308:	76 01       	movw	r14, r12
    130a:	dd 24       	eor	r13, r13
    130c:	cc 24       	eor	r12, r12
    130e:	5a 96       	adiw	r26, 0x1a	; 26
    1310:	8d 91       	ld	r24, X+
    1312:	9c 91       	ld	r25, X
    1314:	5b 97       	sbiw	r26, 0x1b	; 27
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	c8 2a       	or	r12, r24
    131c:	d9 2a       	or	r13, r25
    131e:	ea 2a       	or	r14, r26
    1320:	fb 2a       	or	r15, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    1322:	85 ee       	ldi	r24, 0xE5	; 229
    1324:	ea 85       	ldd	r30, Y+10	; 0x0a
    1326:	fb 85       	ldd	r31, Y+11	; 0x0b
    1328:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    132a:	c5 01       	movw	r24, r10
    132c:	b4 01       	movw	r22, r8
    132e:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    1332:	aa 85       	ldd	r26, Y+10	; 0x0a
    1334:	bb 85       	ldd	r27, Y+11	; 0x0b
    1336:	5c 96       	adiw	r26, 0x1c	; 28
    1338:	4d 91       	ld	r20, X+
    133a:	5d 91       	ld	r21, X+
    133c:	6d 91       	ld	r22, X+
    133e:	7c 91       	ld	r23, X
    1340:	5f 97       	sbiw	r26, 0x1f	; 31
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0e 94 d6 07 	call	0xfac	; 0xfac <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
				 if(firstCluster < cluster)
    1356:	c6 16       	cp	r12, r22
    1358:	d7 06       	cpc	r13, r23
    135a:	e8 06       	cpc	r14, r24
    135c:	f9 06       	cpc	r15, r25
    135e:	30 f4       	brcc	.+12     	; 0x136c <findFiles+0x300>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    1360:	a7 01       	movw	r20, r14
    1362:	96 01       	movw	r18, r12
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	98 01       	movw	r18, r16
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	c7 01       	movw	r24, r14
    1376:	b6 01       	movw	r22, r12
    1378:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    137c:	4b 01       	movw	r8, r22
    137e:	5c 01       	movw	r10, r24
					getSetNextCluster (firstCluster, SET, 0);
    1380:	00 e0       	ldi	r16, 0x00	; 0
    1382:	10 e0       	ldi	r17, 0x00	; 0
    1384:	98 01       	movw	r18, r16
    1386:	41 e0       	ldi	r20, 0x01	; 1
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
					if(nextCluster > 0x0ffffff6) 
    1390:	b7 ef       	ldi	r27, 0xF7	; 247
    1392:	8b 16       	cp	r8, r27
    1394:	bf ef       	ldi	r27, 0xFF	; 255
    1396:	9b 06       	cpc	r9, r27
    1398:	ab 06       	cpc	r10, r27
    139a:	bf e0       	ldi	r27, 0x0F	; 15
    139c:	bb 06       	cpc	r11, r27
    139e:	18 f4       	brcc	.+6      	; 0x13a6 <findFiles+0x33a>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
					firstCluster = nextCluster;
    13a0:	75 01       	movw	r14, r10
    13a2:	64 01       	movw	r12, r8
    13a4:	e3 cf       	rjmp	.-58     	; 0x136c <findFiles+0x300>
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
					getSetNextCluster (firstCluster, SET, 0);
					if(nextCluster > 0x0ffffff6) 
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    13a6:	8f e9       	ldi	r24, 0x9F	; 159
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	4d cf       	rjmp	.-358    	; 0x1246 <findFiles+0x1da>
   	 return 0;
   if(cluster == 0) 
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
 }
return 0;
}
    13ac:	2b 96       	adiw	r28, 0x0b	; 11
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	9f 90       	pop	r9
    13ce:	8f 90       	pop	r8
    13d0:	7f 90       	pop	r7
    13d2:	6f 90       	pop	r6
    13d4:	5f 90       	pop	r5
    13d6:	4f 90       	pop	r4
    13d8:	3f 90       	pop	r3
    13da:	2f 90       	pop	r2
    13dc:	08 95       	ret

000013de <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    13de:	2f 92       	push	r2
    13e0:	3f 92       	push	r3
    13e2:	4f 92       	push	r4
    13e4:	5f 92       	push	r5
    13e6:	6f 92       	push	r6
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	28 97       	sbiw	r28, 0x08	; 8
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	18 2f       	mov	r17, r24
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    1414:	cb 01       	movw	r24, r22
    1416:	6f 83       	std	Y+7, r22	; 0x07
    1418:	78 87       	std	Y+8, r23	; 0x08
    141a:	0e 94 63 05 	call	0xac6	; 0xac6 <convertFileName>
if(error) return 2;
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	78 85       	ldd	r23, Y+8	; 0x08
    1422:	81 11       	cpse	r24, r1
    1424:	86 c0       	rjmp	.+268    	; 0x1532 <readFile+0x154>

dir = findFiles (GET_FILE, fileName); //get the file location
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 36 08 	call	0x106c	; 0x106c <findFiles>
    142c:	fc 01       	movw	r30, r24
if(dir == 0) 
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	09 f4       	brne	.+2      	; 0x1434 <readFile+0x56>
    1432:	7d c0       	rjmp	.+250    	; 0x152e <readFile+0x150>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1434:	11 30       	cpi	r17, 0x01	; 1
    1436:	09 f4       	brne	.+2      	; 0x143a <readFile+0x5c>
    1438:	7e c0       	rjmp	.+252    	; 0x1536 <readFile+0x158>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    143a:	c4 88       	ldd	r12, Z+20	; 0x14
    143c:	d5 88       	ldd	r13, Z+21	; 0x15
    143e:	e1 2c       	mov	r14, r1
    1440:	f1 2c       	mov	r15, r1
    1442:	76 01       	movw	r14, r12
    1444:	dd 24       	eor	r13, r13
    1446:	cc 24       	eor	r12, r12
    1448:	42 8d       	ldd	r20, Z+26	; 0x1a
    144a:	53 8d       	ldd	r21, Z+27	; 0x1b
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	c4 2a       	or	r12, r20
    1452:	d5 2a       	or	r13, r21
    1454:	e6 2a       	or	r14, r22
    1456:	f7 2a       	or	r15, r23

fileSize = dir->fileSize;
    1458:	44 8c       	ldd	r4, Z+28	; 0x1c
    145a:	55 8c       	ldd	r5, Z+29	; 0x1d
    145c:	66 8c       	ldd	r6, Z+30	; 0x1e
    145e:	77 8c       	ldd	r7, Z+31	; 0x1f

TX_NEWLINE;
    1460:	8d e0       	ldi	r24, 0x0D	; 13
    1462:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1466:	8a e0       	ldi	r24, 0x0A	; 10
    1468:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
TX_NEWLINE;
    146c:	8d e0       	ldi	r24, 0x0D	; 13
    146e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1472:	8a e0       	ldi	r24, 0x0A	; 10
    1474:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
    1478:	81 2c       	mov	r8, r1
    147a:	91 2c       	mov	r9, r1
    147c:	54 01       	movw	r10, r8
TX_NEWLINE;
TX_NEWLINE;

while(1)
{
  firstSector = getFirstSector (cluster);
    147e:	c7 01       	movw	r24, r14
    1480:	b6 01       	movw	r22, r12
    1482:	0e 94 65 03 	call	0x6ca	; 0x6ca <getFirstSector>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04

  for(j=0; j<sectorPerCluster; j++)
    148e:	10 e0       	ldi	r17, 0x00	; 0
    1490:	80 91 99 02 	lds	r24, 0x0299
    1494:	90 91 9a 02 	lds	r25, 0x029A
    1498:	21 2f       	mov	r18, r17
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	28 17       	cp	r18, r24
    149e:	39 07       	cpc	r19, r25
    14a0:	90 f5       	brcc	.+100    	; 0x1506 <readFile+0x128>
  {
    SD_readSingleBlock(firstSector + j);
    14a2:	69 81       	ldd	r22, Y+1	; 0x01
    14a4:	7a 81       	ldd	r23, Y+2	; 0x02
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	61 0f       	add	r22, r17
    14ac:	71 1d       	adc	r23, r1
    14ae:	81 1d       	adc	r24, r1
    14b0:	91 1d       	adc	r25, r1
    14b2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
    14b6:	b5 01       	movw	r22, r10
    14b8:	a4 01       	movw	r20, r8
    
	for(k=0; k<512; k++)
    14ba:	21 2c       	mov	r2, r1
    14bc:	31 2c       	mov	r3, r1
    {
      transmitByte(buffer[k]);
    14be:	f1 01       	movw	r30, r2
    14c0:	e7 56       	subi	r30, 0x67	; 103
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	4d 83       	std	Y+5, r20	; 0x05
    14c8:	5e 83       	std	Y+6, r21	; 0x06
    14ca:	6f 83       	std	Y+7, r22	; 0x07
    14cc:	78 87       	std	Y+8, r23	; 0x08
    14ce:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
      if ((byteCounter++) >= fileSize ) return 0;
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	88 1a       	sub	r8, r24
    14d6:	98 0a       	sbc	r9, r24
    14d8:	a8 0a       	sbc	r10, r24
    14da:	b8 0a       	sbc	r11, r24
    14dc:	4d 81       	ldd	r20, Y+5	; 0x05
    14de:	5e 81       	ldd	r21, Y+6	; 0x06
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	44 15       	cp	r20, r4
    14e6:	55 05       	cpc	r21, r5
    14e8:	66 05       	cpc	r22, r6
    14ea:	77 05       	cpc	r23, r7
    14ec:	00 f5       	brcc	.+64     	; 0x152e <readFile+0x150>

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    14ee:	ef ef       	ldi	r30, 0xFF	; 255
    14f0:	2e 1a       	sub	r2, r30
    14f2:	3e 0a       	sbc	r3, r30
    14f4:	21 14       	cp	r2, r1
    14f6:	f2 e0       	ldi	r31, 0x02	; 2
    14f8:	3f 06       	cpc	r3, r31
    14fa:	19 f0       	breq	.+6      	; 0x1502 <readFile+0x124>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    14fc:	b5 01       	movw	r22, r10
    14fe:	a4 01       	movw	r20, r8
    1500:	de cf       	rjmp	.-68     	; 0x14be <readFile+0xe0>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    1502:	1f 5f       	subi	r17, 0xFF	; 255
    1504:	c5 cf       	rjmp	.-118    	; 0x1490 <readFile+0xb2>
    {
      transmitByte(buffer[k]);
      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	98 01       	movw	r18, r16
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    1516:	6b 01       	movw	r12, r22
    1518:	7c 01       	movw	r14, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    151a:	61 15       	cp	r22, r1
    151c:	71 05       	cpc	r23, r1
    151e:	81 05       	cpc	r24, r1
    1520:	91 05       	cpc	r25, r1
    1522:	09 f0       	breq	.+2      	; 0x1526 <readFile+0x148>
    1524:	ac cf       	rjmp	.-168    	; 0x147e <readFile+0xa0>
    1526:	87 e5       	ldi	r24, 0x57	; 87
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <readFile+0x15a>
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
if(error) return 2;
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <readFile+0x15a>

dir = findFiles (GET_FILE, fileName); //get the file location
if(dir == 0) 
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    1536:	81 e0       	ldi	r24, 0x01	; 1
  }
  cluster = getSetNextCluster (cluster, GET, 0);
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
}
return 0;
}
    1538:	28 96       	adiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	ff 90       	pop	r15
    154e:	ef 90       	pop	r14
    1550:	df 90       	pop	r13
    1552:	cf 90       	pop	r12
    1554:	bf 90       	pop	r11
    1556:	af 90       	pop	r10
    1558:	9f 90       	pop	r9
    155a:	8f 90       	pop	r8
    155c:	7f 90       	pop	r7
    155e:	6f 90       	pop	r6
    1560:	5f 90       	pop	r5
    1562:	4f 90       	pop	r4
    1564:	3f 90       	pop	r3
    1566:	2f 90       	pop	r2
    1568:	08 95       	ret

0000156a <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    1570:	0e 94 63 05 	call	0xac6	; 0xac6 <convertFileName>
  if(error) return;
    1574:	81 11       	cpse	r24, r1
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <deleteFile+0x1a>

  findFiles (DELETE, fileName);
    1578:	be 01       	movw	r22, r28
    157a:	82 e0       	ldi	r24, 0x02	; 2
}
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
  unsigned char error;

  error = convertFileName (fileName);
  if(error) return;

  findFiles (DELETE, fileName);
    1580:	0c 94 36 08 	jmp	0x106c	; 0x106c <findFiles>
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	28 97       	sbiw	r28, 0x08	; 8
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	9e 83       	std	Y+6, r25	; 0x06
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    15c2:	bc 01       	movw	r22, r24
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	0e 94 ef 09 	call	0x13de	; 0x13de <readFile>

if(j == 1) 
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <writeFile+0x46>
    15ce:	55 c0       	rjmp	.+170    	; 0x167a <writeFile+0xf0>
{
  transmitString_F(PSTR(" File already exists, appending data..")); 
    15d0:	8d e1       	ldi	r24, 0x1D	; 29
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    15d8:	c0 90 a6 02 	lds	r12, 0x02A6
    15dc:	d0 90 a7 02 	lds	r13, 0x02A7
    15e0:	e0 90 a8 02 	lds	r14, 0x02A8
    15e4:	f0 90 a9 02 	lds	r15, 0x02A9
  clusterCount=0;
    15e8:	81 2c       	mov	r8, r1
    15ea:	91 2c       	mov	r9, r1
    15ec:	54 01       	movw	r10, r8
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	98 01       	movw	r18, r16
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	c7 01       	movw	r24, r14
    15f8:	b6 01       	movw	r22, r12
    15fa:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    if(nextCluster == EOF) break;
    15fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1600:	2f ef       	ldi	r18, 0xFF	; 255
    1602:	72 07       	cpc	r23, r18
    1604:	82 07       	cpc	r24, r18
    1606:	2f e0       	ldi	r18, 0x0F	; 15
    1608:	92 07       	cpc	r25, r18
    160a:	41 f0       	breq	.+16     	; 0x161c <writeFile+0x92>
	cluster = nextCluster;
	clusterCount++;
    160c:	4f ef       	ldi	r20, 0xFF	; 255
    160e:	84 1a       	sub	r8, r20
    1610:	94 0a       	sbc	r9, r20
    1612:	a4 0a       	sbc	r10, r20
    1614:	b4 0a       	sbc	r11, r20
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    if(nextCluster == EOF) break;
	cluster = nextCluster;
    1616:	6b 01       	movw	r12, r22
    1618:	7c 01       	movw	r14, r24
	clusterCount++;
  }
    161a:	e9 cf       	rjmp	.-46     	; 0x15ee <writeFile+0x64>

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    161c:	a0 91 99 02 	lds	r26, 0x0299
    1620:	b0 91 9a 02 	lds	r27, 0x029A
    1624:	20 91 89 00 	lds	r18, 0x0089
    1628:	30 91 8a 00 	lds	r19, 0x008A
    162c:	e0 91 89 00 	lds	r30, 0x0089
    1630:	f0 91 8a 00 	lds	r31, 0x008A
    1634:	0e 94 76 17 	call	0x2eec	; 0x2eec <__umulhisi3>
    1638:	9b 01       	movw	r18, r22
    163a:	ac 01       	movw	r20, r24
    163c:	c5 01       	movw	r24, r10
    163e:	b4 01       	movw	r22, r8
    1640:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <__mulsi3>
    1644:	8b 01       	movw	r16, r22
    1646:	9c 01       	movw	r18, r24
    1648:	60 91 85 00 	lds	r22, 0x0085
    164c:	70 91 86 00 	lds	r23, 0x0086
    1650:	80 91 87 00 	lds	r24, 0x0087
    1654:	90 91 88 00 	lds	r25, 0x0088
    1658:	60 1b       	sub	r22, r16
    165a:	71 0b       	sbc	r23, r17
    165c:	82 0b       	sbc	r24, r18
    165e:	93 0b       	sbc	r25, r19
    1660:	9f 01       	movw	r18, r30
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
    166a:	a2 2e       	mov	r10, r18
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
unsigned int i, firstClusterHigh=0, firstClusterLow=0;  //value 0 is assigned just to avoid warning in compilation
    166c:	1c 82       	std	Y+4, r1	; 0x04
    166e:	1b 82       	std	Y+3, r1	; 0x03
    1670:	21 2c       	mov	r2, r1
    1672:	31 2c       	mov	r3, r1
	cluster = nextCluster;
	clusterCount++;
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
  start = 1;
    1674:	88 24       	eor	r8, r8
    1676:	83 94       	inc	r8
    1678:	4f c0       	rjmp	.+158    	; 0x1718 <writeFile+0x18e>
//  appendFile();
//  return;
}
else if(j == 2) 
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	09 f4       	brne	.+2      	; 0x1680 <writeFile+0xf6>
    167e:	2c c3       	rjmp	.+1624   	; 0x1cd8 <writeFile+0x74e>
{
   return; //invalid file name
}
else
{
  TX_NEWLINE;
    1680:	8d e0       	ldi	r24, 0x0D	; 13
    1682:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1686:	8a e0       	ldi	r24, 0x0A	; 10
    1688:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    168c:	8c e0       	ldi	r24, 0x0C	; 12
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	a9 01       	movw	r20, r18
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>
  if(cluster > totalClusters)
    16a2:	00 91 8b 00 	lds	r16, 0x008B
    16a6:	10 91 8c 00 	lds	r17, 0x008C
    16aa:	20 91 8d 00 	lds	r18, 0x008D
    16ae:	30 91 8e 00 	lds	r19, 0x008E
    16b2:	06 17       	cp	r16, r22
    16b4:	17 07       	cpc	r17, r23
    16b6:	28 07       	cpc	r18, r24
    16b8:	39 07       	cpc	r19, r25
    16ba:	40 f4       	brcc	.+16     	; 0x16cc <writeFile+0x142>
     cluster = rootCluster;
    16bc:	60 91 8f 00 	lds	r22, 0x008F
    16c0:	70 91 90 00 	lds	r23, 0x0090
    16c4:	80 91 91 00 	lds	r24, 0x0091
    16c8:	90 91 92 00 	lds	r25, 0x0092

  cluster = searchNextFreeCluster(cluster);
    16cc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <searchNextFreeCluster>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
   if(cluster == 0)
    16d4:	61 15       	cp	r22, r1
    16d6:	71 05       	cpc	r23, r1
    16d8:	81 05       	cpc	r24, r1
    16da:	91 05       	cpc	r25, r1
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <writeFile+0x166>
   {
      TX_NEWLINE;
    16de:	8d e0       	ldi	r24, 0x0D	; 13
    16e0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    16e4:	8a e0       	ldi	r24, 0x0A	; 10
    16e6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    16ea:	8a ef       	ldi	r24, 0xFA	; 250
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	d7 c2       	rjmp	.+1454   	; 0x1c9e <writeFile+0x714>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    16f0:	0f ef       	ldi	r16, 0xFF	; 255
    16f2:	1f ef       	ldi	r17, 0xFF	; 255
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	3f e0       	ldi	r19, 0x0F	; 15
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    16fe:	17 01       	movw	r2, r14
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    1700:	dc 82       	std	Y+4, r13	; 0x04
    1702:	cb 82       	std	Y+3, r12	; 0x03
  fileSize = 0;
    1704:	10 92 85 00 	sts	0x0085, r1
    1708:	10 92 86 00 	sts	0x0086, r1
    170c:	10 92 87 00 	sts	0x0087, r1
    1710:	10 92 88 00 	sts	0x0088, r1
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    1714:	a1 2c       	mov	r10, r1
    1716:	81 2c       	mov	r8, r1
    1718:	b1 2c       	mov	r11, r1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    171a:	4a 2c       	mov	r4, r10
    171c:	51 2c       	mov	r5, r1
    171e:	61 2c       	mov	r6, r1
    1720:	71 2c       	mov	r7, r1



while(1)
{
   if(start)
    1722:	88 20       	and	r8, r8
    1724:	f1 f1       	breq	.+124    	; 0x17a2 <writeFile+0x218>
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 65 03 	call	0x6ca	; 0x6ca <getFirstSector>
    172e:	64 0d       	add	r22, r4
    1730:	75 1d       	adc	r23, r5
    1732:	86 1d       	adc	r24, r6
    1734:	97 1d       	adc	r25, r7
    1736:	60 93 95 00 	sts	0x0095, r22
    173a:	70 93 96 00 	sts	0x0096, r23
    173e:	80 93 97 00 	sts	0x0097, r24
    1742:	90 93 98 00 	sts	0x0098, r25
	  SD_readSingleBlock (startBlock);
    1746:	60 91 95 00 	lds	r22, 0x0095
    174a:	70 91 96 00 	lds	r23, 0x0096
    174e:	80 91 97 00 	lds	r24, 0x0097
    1752:	90 91 98 00 	lds	r25, 0x0098
    1756:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    175a:	20 91 89 00 	lds	r18, 0x0089
    175e:	30 91 8a 00 	lds	r19, 0x008A
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	60 91 85 00 	lds	r22, 0x0085
    176a:	70 91 86 00 	lds	r23, 0x0086
    176e:	80 91 87 00 	lds	r24, 0x0087
    1772:	90 91 88 00 	lds	r25, 0x0088
    1776:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__udivmodsi4>
    177a:	3b 01       	movw	r6, r22
    177c:	21 c0       	rjmp	.+66     	; 0x17c0 <writeFile+0x236>
      TX_NEWLINE;
      transmitString_F(PSTR(" No free cluster!"));
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    177e:	8b 01       	movw	r16, r22
    1780:	9c 01       	movw	r18, r24
    1782:	41 e0       	ldi	r20, 0x01	; 1
    1784:	c7 01       	movw	r24, r14
    1786:	b6 01       	movw	r22, r12
    1788:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    178c:	0f ef       	ldi	r16, 0xFF	; 255
    178e:	1f ef       	ldi	r17, 0xFF	; 255
    1790:	2f ef       	ldi	r18, 0xFF	; 255
    1792:	3f e0       	ldi	r19, 0x0F	; 15
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	c3 01       	movw	r24, r6
    1798:	b2 01       	movw	r22, r4
    179a:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
}        
    179e:	73 01       	movw	r14, r6
    17a0:	62 01       	movw	r12, r4
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    17a2:	c7 01       	movw	r24, r14
    17a4:	b6 01       	movw	r22, r12
    17a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <getFirstSector>
    17aa:	60 93 95 00 	sts	0x0095, r22
    17ae:	70 93 96 00 	sts	0x0096, r23
    17b2:	80 93 97 00 	sts	0x0097, r24
    17b6:	90 93 98 00 	sts	0x0098, r25
	  i=0;
    17ba:	61 2c       	mov	r6, r1
    17bc:	71 2c       	mov	r7, r1
	  j=0;
    17be:	a1 2c       	mov	r10, r1
   }
   

   TX_NEWLINE;
    17c0:	8d e0       	ldi	r24, 0x0D	; 13
    17c2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    17c6:	8a e0       	ldi	r24, 0x0A	; 10
    17c8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    17cc:	80 ee       	ldi	r24, 0xE0	; 224
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	b8 12       	cpse	r11, r24
    17d8:	1e c0       	rjmp	.+60     	; 0x1816 <writeFile+0x28c>
	 {
	 	transmitByte ('\n');
    17da:	8a e0       	ldi	r24, 0x0A	; 10
    17dc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    17e0:	f3 01       	movw	r30, r6
    17e2:	e7 56       	subi	r30, 0x67	; 103
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	8a e0       	ldi	r24, 0x0A	; 10
    17e8:	80 83       	st	Z, r24
		fileSize++;
    17ea:	80 91 85 00 	lds	r24, 0x0085
    17ee:	90 91 86 00 	lds	r25, 0x0086
    17f2:	a0 91 87 00 	lds	r26, 0x0087
    17f6:	b0 91 88 00 	lds	r27, 0x0088
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	a1 1d       	adc	r26, r1
    17fe:	b1 1d       	adc	r27, r1
    1800:	80 93 85 00 	sts	0x0085, r24
    1804:	90 93 86 00 	sts	0x0086, r25
    1808:	a0 93 87 00 	sts	0x0087, r26
    180c:	b0 93 88 00 	sts	0x0088, r27
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
	 {
	 	transmitByte ('\n');
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    1810:	d3 01       	movw	r26, r6
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	3d 01       	movw	r6, r26
		fileSize++;
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    1816:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    181a:	98 2e       	mov	r9, r24
	 if(data == 0x08)	//'Back Space' key pressed
    181c:	b8 e0       	ldi	r27, 0x08	; 8
    181e:	8b 13       	cpse	r24, r27
    1820:	24 c0       	rjmp	.+72     	; 0x186a <writeFile+0x2e0>
	 { 
	   if(i != 0)
    1822:	61 14       	cp	r6, r1
    1824:	71 04       	cpc	r7, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <writeFile+0x2a0>
    1828:	54 c2       	rjmp	.+1192   	; 0x1cd2 <writeFile+0x748>
	   { 
	     transmitByte(data);
    182a:	88 e0       	ldi	r24, 0x08	; 8
    182c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
		 transmitByte(' '); 
    1830:	80 e2       	ldi	r24, 0x20	; 32
    1832:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	     transmitByte(data); 
    1836:	88 e0       	ldi	r24, 0x08	; 8
    1838:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	     i--; 
    183c:	e1 e0       	ldi	r30, 0x01	; 1
    183e:	6e 1a       	sub	r6, r30
    1840:	71 08       	sbc	r7, r1
		 fileSize--;
    1842:	80 91 85 00 	lds	r24, 0x0085
    1846:	90 91 86 00 	lds	r25, 0x0086
    184a:	a0 91 87 00 	lds	r26, 0x0087
    184e:	b0 91 88 00 	lds	r27, 0x0088
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	a1 09       	sbc	r26, r1
    1856:	b1 09       	sbc	r27, r1
    1858:	80 93 85 00 	sts	0x0085, r24
    185c:	90 93 86 00 	sts	0x0086, r25
    1860:	a0 93 87 00 	sts	0x0087, r26
    1864:	b0 93 88 00 	sts	0x0088, r27
    1868:	34 c2       	rjmp	.+1128   	; 0x1cd2 <writeFile+0x748>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    186a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
     buffer[i++] = data;
    186e:	83 01       	movw	r16, r6
    1870:	0f 5f       	subi	r16, 0xFF	; 255
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	f3 01       	movw	r30, r6
    1876:	e7 56       	subi	r30, 0x67	; 103
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	90 82       	st	Z, r9
	 fileSize++;
    187c:	80 91 85 00 	lds	r24, 0x0085
    1880:	90 91 86 00 	lds	r25, 0x0086
    1884:	a0 91 87 00 	lds	r26, 0x0087
    1888:	b0 91 88 00 	lds	r27, 0x0088
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	a1 1d       	adc	r26, r1
    1890:	b1 1d       	adc	r27, r1
    1892:	80 93 85 00 	sts	0x0085, r24
    1896:	90 93 86 00 	sts	0x0086, r25
    189a:	a0 93 87 00 	sts	0x0087, r26
    189e:	b0 93 88 00 	sts	0x0088, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    18a2:	fd e0       	ldi	r31, 0x0D	; 13
    18a4:	9f 12       	cpse	r9, r31
    18a6:	21 c0       	rjmp	.+66     	; 0x18ea <writeFile+0x360>
     {
        if(i == 512)
    18a8:	01 15       	cp	r16, r1
    18aa:	22 e0       	ldi	r18, 0x02	; 2
    18ac:	12 07       	cpc	r17, r18
    18ae:	19 f1       	breq	.+70     	; 0x18f6 <writeFile+0x36c>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    18b0:	8a e0       	ldi	r24, 0x0A	; 10
    18b2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    18b6:	f8 01       	movw	r30, r16
    18b8:	e7 56       	subi	r30, 0x67	; 103
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	8a e0       	ldi	r24, 0x0A	; 10
    18be:	80 83       	st	Z, r24
		   fileSize++;
    18c0:	80 91 85 00 	lds	r24, 0x0085
    18c4:	90 91 86 00 	lds	r25, 0x0086
    18c8:	a0 91 87 00 	lds	r26, 0x0087
    18cc:	b0 91 88 00 	lds	r27, 0x0088
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	a1 1d       	adc	r26, r1
    18d4:	b1 1d       	adc	r27, r1
    18d6:	80 93 85 00 	sts	0x0085, r24
    18da:	90 93 86 00 	sts	0x0086, r25
    18de:	a0 93 87 00 	sts	0x0087, r26
    18e2:	b0 93 88 00 	sts	0x0088, r27
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    18e6:	0f 5f       	subi	r16, 0xFF	; 255
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	b1 2c       	mov	r11, r1
		   fileSize++;
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    18ec:	01 15       	cp	r16, r1
    18ee:	42 e0       	ldi	r20, 0x02	; 2
    18f0:	14 07       	cpc	r17, r20
    18f2:	60 f1       	brcs	.+88     	; 0x194c <writeFile+0x3c2>
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <writeFile+0x370>
     buffer[i++] = data;
	 fileSize++;
     if(data == '\r')  //'Carriege Return (CR)' character
     {
        if(i == 512)
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
    18f6:	bb 24       	eor	r11, r11
    18f8:	b3 94       	inc	r11
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    18fa:	60 91 95 00 	lds	r22, 0x0095
    18fe:	70 91 96 00 	lds	r23, 0x0096
    1902:	80 91 97 00 	lds	r24, 0x0097
    1906:	90 91 98 00 	lds	r25, 0x0098
    190a:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
       j++;
    190e:	a3 94       	inc	r10
	   if(j == sectorPerCluster) {j = 0; break;}
    1910:	40 91 99 02 	lds	r20, 0x0299
    1914:	50 91 9a 02 	lds	r21, 0x029A
    1918:	2a 2d       	mov	r18, r10
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	24 17       	cp	r18, r20
    191e:	35 07       	cpc	r19, r21
    1920:	d1 f0       	breq	.+52     	; 0x1956 <writeFile+0x3cc>
	   startBlock++; 
    1922:	80 91 95 00 	lds	r24, 0x0095
    1926:	90 91 96 00 	lds	r25, 0x0096
    192a:	a0 91 97 00 	lds	r26, 0x0097
    192e:	b0 91 98 00 	lds	r27, 0x0098
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	a1 1d       	adc	r26, r1
    1936:	b1 1d       	adc	r27, r1
    1938:	80 93 95 00 	sts	0x0095, r24
    193c:	90 93 96 00 	sts	0x0096, r25
    1940:	a0 93 97 00 	sts	0x0097, r26
    1944:	b0 93 98 00 	sts	0x0098, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	10 e0       	ldi	r17, 0x00	; 0
	   error = SD_writeSingleBlock (startBlock);
       j++;
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');
    194c:	8e e7       	ldi	r24, 0x7E	; 126
    194e:	98 16       	cp	r9, r24
    1950:	39 f0       	breq	.+14     	; 0x1960 <writeFile+0x3d6>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1952:	38 01       	movw	r6, r16
    1954:	3f cf       	rjmp	.-386    	; 0x17d4 <writeFile+0x24a>
	   if(j == sectorPerCluster) {j = 0; break;}
	   startBlock++; 
     }
	}while (data != '~');

   if(data == '~') 
    1956:	9e e7       	ldi	r25, 0x7E	; 126
    1958:	99 12       	cpse	r9, r25
    195a:	3f c0       	rjmp	.+126    	; 0x19da <writeFile+0x450>
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
    1960:	80 91 85 00 	lds	r24, 0x0085
    1964:	90 91 86 00 	lds	r25, 0x0086
    1968:	a0 91 87 00 	lds	r26, 0x0087
    196c:	b0 91 88 00 	lds	r27, 0x0088
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	a1 09       	sbc	r26, r1
    1974:	b1 09       	sbc	r27, r1
    1976:	80 93 85 00 	sts	0x0085, r24
    197a:	90 93 86 00 	sts	0x0086, r25
    197e:	a0 93 87 00 	sts	0x0087, r26
    1982:	b0 93 88 00 	sts	0x0088, r27
	  i--;
    1986:	01 50       	subi	r16, 0x01	; 1
    1988:	11 09       	sbc	r17, r1
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    198a:	01 15       	cp	r16, r1
    198c:	a2 e0       	ldi	r26, 0x02	; 2
    198e:	1a 07       	cpc	r17, r26
    1990:	38 f4       	brcc	.+14     	; 0x19a0 <writeFile+0x416>
        buffer[i]= 0x00;
    1992:	f8 01       	movw	r30, r16
    1994:	e7 56       	subi	r30, 0x67	; 103
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    199a:	0f 5f       	subi	r16, 0xFF	; 255
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	f5 cf       	rjmp	.-22     	; 0x198a <writeFile+0x400>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    19a0:	60 91 95 00 	lds	r22, 0x0095
    19a4:	70 91 96 00 	lds	r23, 0x0096
    19a8:	80 91 97 00 	lds	r24, 0x0097
    19ac:	90 91 98 00 	lds	r25, 0x0098
    19b0:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <getSetFreeCluster>

error = getDateTime_FAT();    //get current date & time from the RTC
    19c0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <getDateTime_FAT>
if(error) { dateFAT = 0; timeFAT = 0;}
    19c4:	88 23       	and	r24, r24
    19c6:	f1 f0       	breq	.+60     	; 0x1a04 <writeFile+0x47a>
    19c8:	10 92 80 00 	sts	0x0080, r1
    19cc:	10 92 7f 00 	sts	0x007F, r1
    19d0:	10 92 94 00 	sts	0x0094, r1
    19d4:	10 92 93 00 	sts	0x0093, r1
    19d8:	15 c0       	rjmp	.+42     	; 0x1a04 <writeFile+0x47a>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    19da:	c7 01       	movw	r24, r14
    19dc:	b6 01       	movw	r22, r12
    19de:	0e 94 ce 05 	call	0xb9c	; 0xb9c <searchNextFreeCluster>
    19e2:	2b 01       	movw	r4, r22
    19e4:	3c 01       	movw	r6, r24

   if(cluster == 0)
    19e6:	61 15       	cp	r22, r1
    19e8:	71 05       	cpc	r23, r1
    19ea:	81 05       	cpc	r24, r1
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <writeFile+0x468>
    19f0:	c6 ce       	rjmp	.-628    	; 0x177e <writeFile+0x1f4>
   {
      TX_NEWLINE;
    19f2:	8d e0       	ldi	r24, 0x0D	; 13
    19f4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    19f8:	8a e0       	ldi	r24, 0x0A	; 10
    19fa:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    19fe:	8e ec       	ldi	r24, 0xCE	; 206
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	4d c1       	rjmp	.+666    	; 0x1c9e <writeFile+0x714>
getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

error = getDateTime_FAT();    //get current date & time from the RTC
if(error) { dateFAT = 0; timeFAT = 0;}

if(appendFile)  //executes this loop if file is to be appended
    1a04:	88 20       	and	r8, r8
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <writeFile+0x480>
    1a08:	6b c0       	rjmp	.+214    	; 0x1ae0 <writeFile+0x556>
{
  SD_readSingleBlock (appendFileSector);    
    1a0a:	60 91 ac 02 	lds	r22, 0x02AC
    1a0e:	70 91 ad 02 	lds	r23, 0x02AD
    1a12:	80 91 ae 02 	lds	r24, 0x02AE
    1a16:	90 91 af 02 	lds	r25, 0x02AF
    1a1a:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    1a1e:	e0 91 7b 00 	lds	r30, 0x007B
    1a22:	f0 91 7c 00 	lds	r31, 0x007C
    1a26:	e7 56       	subi	r30, 0x67	; 103
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255

  dir->lastAccessDate = 0;   //date of last access ignored
    1a2a:	13 8a       	std	Z+19, r1	; 0x13
    1a2c:	12 8a       	std	Z+18, r1	; 0x12
  dir->writeTime = timeFAT;  //setting new time of last write, obtained from RTC
    1a2e:	80 91 93 00 	lds	r24, 0x0093
    1a32:	90 91 94 00 	lds	r25, 0x0094
    1a36:	97 8b       	std	Z+23, r25	; 0x17
    1a38:	86 8b       	std	Z+22, r24	; 0x16
  dir->writeDate = dateFAT;  //setting new date of last write, obtained from RTC
    1a3a:	80 91 7f 00 	lds	r24, 0x007F
    1a3e:	90 91 80 00 	lds	r25, 0x0080
    1a42:	91 8f       	std	Z+25, r25	; 0x19
    1a44:	80 8f       	std	Z+24, r24	; 0x18
  extraMemory = fileSize - dir->fileSize;
    1a46:	80 91 85 00 	lds	r24, 0x0085
    1a4a:	90 91 86 00 	lds	r25, 0x0086
    1a4e:	a0 91 87 00 	lds	r26, 0x0087
    1a52:	b0 91 88 00 	lds	r27, 0x0088
    1a56:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a58:	55 8d       	ldd	r21, Z+29	; 0x1d
    1a5a:	66 8d       	ldd	r22, Z+30	; 0x1e
    1a5c:	77 8d       	ldd	r23, Z+31	; 0x1f
    1a5e:	6c 01       	movw	r12, r24
    1a60:	7d 01       	movw	r14, r26
    1a62:	c4 1a       	sub	r12, r20
    1a64:	d5 0a       	sbc	r13, r21
    1a66:	e6 0a       	sbc	r14, r22
    1a68:	f7 0a       	sbc	r15, r23
  dir->fileSize = fileSize;
    1a6a:	84 8f       	std	Z+28, r24	; 0x1c
    1a6c:	95 8f       	std	Z+29, r25	; 0x1d
    1a6e:	a6 8f       	std	Z+30, r26	; 0x1e
    1a70:	b7 8f       	std	Z+31, r27	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    1a72:	60 91 ac 02 	lds	r22, 0x02AC
    1a76:	70 91 ad 02 	lds	r23, 0x02AD
    1a7a:	80 91 ae 02 	lds	r24, 0x02AE
    1a7e:	90 91 af 02 	lds	r25, 0x02AF
    1a82:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    1a86:	b7 01       	movw	r22, r14
    1a88:	a6 01       	movw	r20, r12
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	0e 94 d6 07 	call	0xfac	; 0xfac <freeMemoryUpdate>

  
  TX_NEWLINE;
    1a90:	8d e0       	ldi	r24, 0x0D	; 13
    1a92:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1a96:	8a e0       	ldi	r24, 0x0A	; 10
    1a98:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    1a9c:	8e eb       	ldi	r24, 0xBE	; 190
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  TX_NEWLINE;
    1aa4:	8d e0       	ldi	r24, 0x0D	; 13
    1aa6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
   
   prevCluster = cluster;
 }
 
 return;
}
    1aac:	28 96       	adiw	r28, 0x08	; 8
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	9f 90       	pop	r9
    1ace:	8f 90       	pop	r8
    1ad0:	7f 90       	pop	r7
    1ad2:	6f 90       	pop	r6
    1ad4:	5f 90       	pop	r5
    1ad6:	4f 90       	pop	r4
    1ad8:	3f 90       	pop	r3
    1ada:	2f 90       	pop	r2
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;

  
  TX_NEWLINE;
  transmitString_F(PSTR(" File appended!"));
  TX_NEWLINE;
    1adc:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <transmitByte>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    1ae0:	c0 90 8f 00 	lds	r12, 0x008F
    1ae4:	d0 90 90 00 	lds	r13, 0x0090
    1ae8:	e0 90 91 00 	lds	r14, 0x0091
    1aec:	f0 90 92 00 	lds	r15, 0x0092
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector=0;
    1af0:	1a 82       	std	Y+2, r1	; 0x02

prevCluster = rootCluster; //root cluster

while(1)
{
   firstSector = getFirstSector (prevCluster);
    1af2:	c7 01       	movw	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	0e 94 65 03 	call	0x6ca	; 0x6ca <getFirstSector>
    1afa:	2b 01       	movw	r4, r22
    1afc:	3c 01       	movw	r6, r24

   for(sector = 0; sector < sectorPerCluster; sector++)
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	80 91 99 02 	lds	r24, 0x0299
    1b04:	90 91 9a 02 	lds	r25, 0x029A
    1b08:	49 81       	ldd	r20, Y+1	; 0x01
    1b0a:	24 2f       	mov	r18, r20
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	28 17       	cp	r18, r24
    1b10:	39 07       	cpc	r19, r25
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <writeFile+0x58c>
    1b14:	87 c0       	rjmp	.+270    	; 0x1c24 <writeFile+0x69a>
   {
     SD_readSingleBlock (firstSector + sector);
    1b16:	53 01       	movw	r10, r6
    1b18:	42 01       	movw	r8, r4
    1b1a:	29 81       	ldd	r18, Y+1	; 0x01
    1b1c:	82 0e       	add	r8, r18
    1b1e:	91 1c       	adc	r9, r1
    1b20:	a1 1c       	adc	r10, r1
    1b22:	b1 1c       	adc	r11, r1
    1b24:	c5 01       	movw	r24, r10
    1b26:	b4 01       	movw	r22, r8
    1b28:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
    1b2c:	89 e9       	ldi	r24, 0x99	; 153
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	98 87       	std	Y+8, r25	; 0x08
    1b32:	8f 83       	std	Y+7, r24	; 0x07
	

     for(i=0; i<bytesPerSector; i+=32)
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	80 91 89 00 	lds	r24, 0x0089
    1b3c:	90 91 8a 00 	lds	r25, 0x008A
    1b40:	08 17       	cp	r16, r24
    1b42:	19 07       	cpc	r17, r25
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <writeFile+0x5be>
    1b46:	6a c0       	rjmp	.+212    	; 0x1c1c <writeFile+0x692>
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	91 11       	cpse	r25, r1
    1b4c:	c5 c0       	rjmp	.+394    	; 0x1cd8 <writeFile+0x74e>
		   //dir->name[0] = EMPTY;
		   //SD_writeSingleBlock (firstSector + sector);
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    1b4e:	af 81       	ldd	r26, Y+7	; 0x07
    1b50:	b8 85       	ldd	r27, Y+8	; 0x08
    1b52:	8c 91       	ld	r24, X
    1b54:	88 23       	and	r24, r24
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <writeFile+0x5d4>
    1b58:	85 3e       	cpi	r24, 0xE5	; 229
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <writeFile+0x5d4>
    1b5c:	57 c0       	rjmp	.+174    	; 0x1c0c <writeFile+0x682>
    1b5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b60:	fe 81       	ldd	r31, Y+6	; 0x06
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
   
   prevCluster = cluster;
    1b62:	af 81       	ldd	r26, Y+7	; 0x07
    1b64:	b8 85       	ldd	r27, Y+8	; 0x08
    1b66:	8b e0       	ldi	r24, 0x0B	; 11
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    1b68:	91 91       	ld	r25, Z+
    1b6a:	9d 93       	st	X+, r25
    1b6c:	81 50       	subi	r24, 0x01	; 1
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <writeFile+0x5de>
    1b70:	f8 01       	movw	r30, r16
    1b72:	e7 56       	subi	r30, 0x67	; 103
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    1b76:	b0 e2       	ldi	r27, 0x20	; 32
    1b78:	b3 87       	std	Z+11, r27	; 0x0b
		  dir->NTreserved = 0;			//always set to 0
    1b7a:	14 86       	std	Z+12, r1	; 0x0c
		  dir->timeTenth = 0;			//always set to 0
    1b7c:	15 86       	std	Z+13, r1	; 0x0d
		  dir->createTime = timeFAT; 	//setting time of file creation, obtained from RTC
    1b7e:	80 91 93 00 	lds	r24, 0x0093
    1b82:	90 91 94 00 	lds	r25, 0x0094
    1b86:	ef 81       	ldd	r30, Y+7	; 0x07
    1b88:	f8 85       	ldd	r31, Y+8	; 0x08
    1b8a:	97 87       	std	Z+15, r25	; 0x0f
    1b8c:	86 87       	std	Z+14, r24	; 0x0e
		  dir->createDate = dateFAT; 	//setting date of file creation, obtained from RTC
    1b8e:	20 91 7f 00 	lds	r18, 0x007F
    1b92:	30 91 80 00 	lds	r19, 0x0080
    1b96:	31 8b       	std	Z+17, r19	; 0x11
    1b98:	20 8b       	std	Z+16, r18	; 0x10
		  dir->lastAccessDate = 0;   	//date of last access ignored
    1b9a:	13 8a       	std	Z+19, r1	; 0x13
    1b9c:	12 8a       	std	Z+18, r1	; 0x12
		  dir->writeTime = timeFAT;  	//setting new time of last write, obtained from RTC
    1b9e:	97 8b       	std	Z+23, r25	; 0x17
    1ba0:	86 8b       	std	Z+22, r24	; 0x16
		  dir->writeDate = dateFAT;  	//setting new date of last write, obtained from RTC
    1ba2:	31 8f       	std	Z+25, r19	; 0x19
    1ba4:	20 8f       	std	Z+24, r18	; 0x18
		  dir->firstClusterHI = firstClusterHigh;
    1ba6:	35 8a       	std	Z+21, r3	; 0x15
    1ba8:	24 8a       	std	Z+20, r2	; 0x14
		  dir->firstClusterLO = firstClusterLow;
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	93 8f       	std	Z+27, r25	; 0x1b
    1bb0:	82 8f       	std	Z+26, r24	; 0x1a
		  dir->fileSize = fileSize;
    1bb2:	80 91 85 00 	lds	r24, 0x0085
    1bb6:	90 91 86 00 	lds	r25, 0x0086
    1bba:	a0 91 87 00 	lds	r26, 0x0087
    1bbe:	b0 91 88 00 	lds	r27, 0x0088
    1bc2:	84 8f       	std	Z+28, r24	; 0x1c
    1bc4:	95 8f       	std	Z+29, r25	; 0x1d
    1bc6:	a6 8f       	std	Z+30, r26	; 0x1e
    1bc8:	b7 8f       	std	Z+31, r27	; 0x1f

		  SD_writeSingleBlock (firstSector + sector);
    1bca:	c5 01       	movw	r24, r10
    1bcc:	b4 01       	movw	r22, r8
    1bce:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    1bd2:	8d e0       	ldi	r24, 0x0D	; 13
    1bd4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1bd8:	8a e0       	ldi	r24, 0x0A	; 10
    1bda:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
		  TX_NEWLINE;
    1bde:	8d e0       	ldi	r24, 0x0D	; 13
    1be0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1be4:	8a e0       	ldi	r24, 0x0A	; 10
    1be6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
		  transmitString_F(PSTR(" File Created! "));
    1bea:	8e ea       	ldi	r24, 0xAE	; 174
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    1bf2:	40 91 85 00 	lds	r20, 0x0085
    1bf6:	50 91 86 00 	lds	r21, 0x0086
    1bfa:	60 91 87 00 	lds	r22, 0x0087
    1bfe:	70 91 88 00 	lds	r23, 0x0088
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 d6 07 	call	0xfac	; 0xfac <freeMemoryUpdate>
		  dir->firstClusterHI = firstClusterHigh;
		  dir->firstClusterLO = firstClusterLow;
		  dir->fileSize = fileSize;

		  SD_writeSingleBlock (firstSector + sector);
		  fileCreatedFlag = 1;
    1c08:	f1 e0       	ldi	r31, 0x01	; 1
    1c0a:	fa 83       	std	Y+2, r31	; 0x02
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    1c0c:	00 5e       	subi	r16, 0xE0	; 224
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	8f 81       	ldd	r24, Y+7	; 0x07
    1c12:	98 85       	ldd	r25, Y+8	; 0x08
    1c14:	80 96       	adiw	r24, 0x20	; 32
    1c16:	98 87       	std	Y+8, r25	; 0x08
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	8e cf       	rjmp	.-228    	; 0x1b38 <writeFile+0x5ae>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    1c1c:	29 81       	ldd	r18, Y+1	; 0x01
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	29 83       	std	Y+1, r18	; 0x01
    1c22:	6e cf       	rjmp	.-292    	; 0x1b00 <writeFile+0x576>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    1c24:	00 e0       	ldi	r16, 0x00	; 0
    1c26:	10 e0       	ldi	r17, 0x00	; 0
    1c28:	98 01       	movw	r18, r16
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	c7 01       	movw	r24, r14
    1c2e:	b6 01       	movw	r22, r12
    1c30:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    1c34:	4b 01       	movw	r8, r22
    1c36:	5c 01       	movw	r10, r24

   if(cluster > 0x0ffffff6)
    1c38:	87 ef       	ldi	r24, 0xF7	; 247
    1c3a:	88 16       	cp	r8, r24
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	98 06       	cpc	r9, r24
    1c40:	a8 06       	cpc	r10, r24
    1c42:	8f e0       	ldi	r24, 0x0F	; 15
    1c44:	b8 06       	cpc	r11, r24
    1c46:	08 f1       	brcs	.+66     	; 0x1c8a <writeFile+0x700>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    1c48:	9f ef       	ldi	r25, 0xFF	; 255
    1c4a:	89 16       	cp	r8, r25
    1c4c:	99 06       	cpc	r9, r25
    1c4e:	a9 06       	cpc	r10, r25
    1c50:	9f e0       	ldi	r25, 0x0F	; 15
    1c52:	b9 06       	cpc	r11, r25
    1c54:	b9 f4       	brne	.+46     	; 0x1c84 <writeFile+0x6fa>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    1c56:	c7 01       	movw	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <searchNextFreeCluster>
    1c5e:	4b 01       	movw	r8, r22
    1c60:	5c 01       	movw	r10, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    1c62:	8b 01       	movw	r16, r22
    1c64:	9c 01       	movw	r18, r24
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	c7 01       	movw	r24, r14
    1c6a:	b6 01       	movw	r22, r12
    1c6c:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    1c70:	0f ef       	ldi	r16, 0xFF	; 255
    1c72:	1f ef       	ldi	r17, 0xFF	; 255
    1c74:	2f ef       	ldi	r18, 0xFF	; 255
    1c76:	3f e0       	ldi	r19, 0x0F	; 15
    1c78:	41 e0       	ldi	r20, 0x01	; 1
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	b4 01       	movw	r22, r8
    1c7e:	0e 94 86 03 	call	0x70c	; 0x70c <getSetNextCluster>
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <writeFile+0x700>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    1c84:	89 e9       	ldi	r24, 0x99	; 153
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0a c0       	rjmp	.+20     	; 0x1c9e <writeFile+0x714>
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1c8a:	81 14       	cp	r8, r1
    1c8c:	91 04       	cpc	r9, r1
    1c8e:	a1 04       	cpc	r10, r1
    1c90:	b1 04       	cpc	r11, r1
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <writeFile+0x710>
   
   prevCluster = cluster;
    1c94:	75 01       	movw	r14, r10
    1c96:	64 01       	movw	r12, r8
    1c98:	2c cf       	rjmp	.-424    	; 0x1af2 <writeFile+0x568>
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1c9a:	80 e8       	ldi	r24, 0x80	; 128
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
   
   prevCluster = cluster;
 }
 
 return;
}
    1c9e:	28 96       	adiw	r28, 0x08	; 8
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	7f 90       	pop	r7
    1cc4:	6f 90       	pop	r6
    1cc6:	5f 90       	pop	r5
    1cc8:	4f 90       	pop	r4
    1cca:	3f 90       	pop	r3
    1ccc:	2f 90       	pop	r2
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
	    return;
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    1cce:	0c 94 83 13 	jmp	0x2706	; 0x2706 <transmitString_F>
   }
   else
   {
      startBlock = getFirstSector (cluster);
	  i=0;
	  j=0;
    1cd2:	83 01       	movw	r16, r6
    1cd4:	b1 2c       	mov	r11, r1
    1cd6:	3d ce       	rjmp	.-902    	; 0x1952 <writeFile+0x3c8>
   
   prevCluster = cluster;
 }
 
 return;
}
    1cd8:	28 96       	adiw	r28, 0x08	; 8
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	3f 90       	pop	r3
    1d06:	2f 90       	pop	r2
    1d08:	08 95       	ret

00001d0a <port_init>:
#include "FAT32.h"


void port_init(void)
{
PORTA = 0x00;
    1d0a:	1b ba       	out	0x1b, r1	; 27
DDRA  = 0x00;
    1d0c:	1a ba       	out	0x1a, r1	; 26
PORTB = 0xEF;
    1d0e:	8f ee       	ldi	r24, 0xEF	; 239
    1d10:	88 bb       	out	0x18, r24	; 24
DDRB  = 0xBF; //MISO line i/p, rest o/p
    1d12:	8f eb       	ldi	r24, 0xBF	; 191
    1d14:	87 bb       	out	0x17, r24	; 23
PORTC = 0x00;
    1d16:	15 ba       	out	0x15, r1	; 21
DDRC  = 0x00;
    1d18:	14 ba       	out	0x14, r1	; 20
PORTD = 0x00;
    1d1a:	12 ba       	out	0x12, r1	; 18
DDRD  = 0xFE;
    1d1c:	8e ef       	ldi	r24, 0xFE	; 254
    1d1e:	81 bb       	out	0x11, r24	; 17
    1d20:	08 95       	ret

00001d22 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    1d22:	f8 94       	cli
 port_init();
    1d24:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <port_init>
 spi_init();
    1d28:	0e 94 61 13 	call	0x26c2	; 0x26c2 <spi_init>
 twi_init();
    1d2c:	0e 94 e5 16 	call	0x2dca	; 0x2dca <twi_init>
 uart0_init();
    1d30:	0e 94 70 13 	call	0x26e0	; 0x26e0 <uart0_init>

 MCUCR = 0x00;
    1d34:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    1d36:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    1d38:	19 be       	out	0x39, r1	; 57
    1d3a:	08 95       	ret

00001d3c <main>:
 //all peripherals are now initialized
}

//*************************** MAIN *******************************//
int main(void)
{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	2d 97       	sbiw	r28, 0x0d	; 13
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d50:	2f ef       	ldi	r18, 0xFF	; 255
    1d52:	80 e7       	ldi	r24, 0x70	; 112
    1d54:	92 e0       	ldi	r25, 0x02	; 2
    1d56:	21 50       	subi	r18, 0x01	; 1
    1d58:	80 40       	sbci	r24, 0x00	; 0
    1d5a:	90 40       	sbci	r25, 0x00	; 0
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <main+0x1a>
    1d5e:	00 c0       	rjmp	.+0      	; 0x1d60 <main+0x24>
    1d60:	00 00       	nop
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    1d62:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    1d66:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    1d68:	8d e0       	ldi	r24, 0x0D	; 13
    1d6a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1d6e:	8a e0       	ldi	r24, 0x0A	; 10
    1d70:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
TX_NEWLINE;
    1d74:	8d e0       	ldi	r24, 0x0D	; 13
    1d76:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1d7a:	8a e0       	ldi	r24, 0x0A	; 10
    1d7c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1d80:	8d e1       	ldi	r24, 0x1D	; 29
    1d82:	95 e0       	ldi	r25, 0x05	; 5
    1d84:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1d88:	8d e0       	ldi	r24, 0x0D	; 13
    1d8a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1d8e:	8a e0       	ldi	r24, 0x0A	; 10
    1d90:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F (PSTR("    Dharmani's microSD Card Testing..  "));
    1d94:	85 ef       	ldi	r24, 0xF5	; 245
    1d96:	94 e0       	ldi	r25, 0x04	; 4
    1d98:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1d9c:	8d e0       	ldi	r24, 0x0D	; 13
    1d9e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1da2:	8a e0       	ldi	r24, 0x0A	; 10
    1da4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F (PSTR("****************************************************"));
    1da8:	80 ec       	ldi	r24, 0xC0	; 192
    1daa:	94 e0       	ldi	r25, 0x04	; 4
    1dac:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1db0:	8d e0       	ldi	r24, 0x0D	; 13
    1db2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1db6:	8a e0       	ldi	r24, 0x0A	; 10
    1db8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>

cardType = 0;
    1dbc:	10 92 aa 02 	sts	0x02AA, r1
    1dc0:	0a e0       	ldi	r16, 0x0A	; 10
    1dc2:	10 e0       	ldi	r17, 0x00	; 0

for (i=0; i<10; i++)
{
  error = SD_init();
    1dc4:	0e 94 31 12 	call	0x2462	; 0x2462 <SD_init>
  if(!error) break;
    1dc8:	88 23       	and	r24, r24
    1dca:	a1 f0       	breq	.+40     	; 0x1df4 <main+0xb8>
    1dcc:	01 50       	subi	r16, 0x01	; 1
    1dce:	11 09       	sbc	r17, r1
transmitString_F (PSTR("****************************************************"));
TX_NEWLINE;

cardType = 0;

for (i=0; i<10; i++)
    1dd0:	01 15       	cp	r16, r1
    1dd2:	11 05       	cpc	r17, r1
    1dd4:	b9 f7       	brne	.-18     	; 0x1dc4 <main+0x88>
  if(!error) break;
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <main+0xa8>
    1dda:	89 ea       	ldi	r24, 0xA9	; 169
    1ddc:	94 e0       	ldi	r25, 0x04	; 4
    1dde:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <main+0xac>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	09 f0       	breq	.+2      	; 0x1dea <main+0xae>
    1de8:	ff cf       	rjmp	.-2      	; 0x1de8 <main+0xac>
    1dea:	8c e8       	ldi	r24, 0x8C	; 140
    1dec:	94 e0       	ldi	r25, 0x04	; 4
    1dee:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    1df2:	fa cf       	rjmp	.-12     	; 0x1de8 <main+0xac>

  while(1);  //wait here forever if error in SD init 
}

switch (cardType)
    1df4:	80 91 aa 02 	lds	r24, 0x02AA
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	39 f0       	breq	.+14     	; 0x1e0a <main+0xce>
    1dfc:	83 30       	cpi	r24, 0x03	; 3
    1dfe:	41 f0       	breq	.+16     	; 0x1e10 <main+0xd4>
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	49 f4       	brne	.+18     	; 0x1e16 <main+0xda>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    1e04:	81 e6       	ldi	r24, 0x61	; 97
    1e06:	94 e0       	ldi	r25, 0x04	; 4
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <main+0xde>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    1e0a:	84 e4       	ldi	r24, 0x44	; 68
    1e0c:	94 e0       	ldi	r25, 0x04	; 4
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <main+0xde>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    1e10:	89 e1       	ldi	r24, 0x19	; 25
    1e12:	94 e0       	ldi	r25, 0x04	; 4
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <main+0xde>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    1e1e:	80 e5       	ldi	r24, 0x50	; 80
    1e20:	8d b9       	out	0x0d, r24	; 13
    1e22:	70 9a       	sbi	0x0e, 0	; 14
    1e24:	8f ec       	ldi	r24, 0xCF	; 207
    1e26:	97 e0       	ldi	r25, 0x07	; 7
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <main+0xec>
    1e2c:	00 c0       	rjmp	.+0      	; 0x1e2e <main+0xf2>
    1e2e:	00 00       	nop
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    1e30:	0e 94 98 04 	call	0x930	; 0x930 <getBootSectorData>
if(error) 	
    1e34:	88 23       	and	r24, r24
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <main+0x114>
{
  TX_NEWLINE;
    1e38:	8d e0       	ldi	r24, 0x0D	; 13
    1e3a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1e3e:	8a e0       	ldi	r24, 0x0A	; 10
    1e40:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    1e44:	8e ee       	ldi	r24, 0xEE	; 238
    1e46:	93 e0       	ldi	r25, 0x03	; 3
    1e48:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  FAT32_active = 0;
    1e4c:	d1 2c       	mov	r13, r1
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <main+0x118>

SPI_HIGH_SPEED;	//SCK - 4 MHz
_delay_ms(1);   //some delay


FAT32_active = 1;
    1e50:	dd 24       	eor	r13, r13
    1e52:	d3 94       	inc	r13
data = receiveByte(); transmitByte(data);
startBlock += (data & 0x0f);
TX_NEWLINE;
}

totalBlocks = 1;
    1e54:	81 2c       	mov	r8, r1
    1e56:	91 2c       	mov	r9, r1
    1e58:	54 01       	movw	r10, r8
    1e5a:	83 94       	inc	r8
    1e5c:	1e 01       	movw	r2, r28
    1e5e:	9e e0       	ldi	r25, 0x0E	; 14
    1e60:	29 0e       	add	r2, r25
    1e62:	31 1c       	adc	r3, r1
{
TX_NEWLINE;
TX_NEWLINE;
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
data = receiveByte(); transmitByte(data);
startBlock = (data & 0x0f) * 1000;
    1e64:	98 ee       	ldi	r25, 0xE8	; 232
    1e66:	e9 2e       	mov	r14, r25
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	f9 2e       	mov	r15, r25
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    1e6c:	8d e0       	ldi	r24, 0x0D	; 13
    1e6e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1e72:	8a e0       	ldi	r24, 0x0A	; 10
    1e74:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("Press any key..."));
    1e78:	8d ed       	ldi	r24, 0xDD	; 221
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1e80:	8d e0       	ldi	r24, 0x0D	; 13
    1e82:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1e86:	8a e0       	ldi	r24, 0x0A	; 10
    1e88:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
option = receiveByte();
    1e8c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
TX_NEWLINE;
    1e90:	8d e0       	ldi	r24, 0x0D	; 13
    1e92:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1e96:	8a e0       	ldi	r24, 0x0A	; 10
    1e98:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> 0: Erase Blocks "));
    1e9c:	8a ec       	ldi	r24, 0xCA	; 202
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1ea4:	8d e0       	ldi	r24, 0x0D	; 13
    1ea6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1eaa:	8a e0       	ldi	r24, 0x0A	; 10
    1eac:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> 1: Write single Block          2: Read single Block"));
    1eb0:	84 e9       	ldi	r24, 0x94	; 148
    1eb2:	93 e0       	ldi	r25, 0x03	; 3
    1eb4:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
#ifndef FAT_TESTING_ONLY
TX_NEWLINE;
transmitString_F(PSTR("> 3: Write multiple Blocks       4: Read multiple Blocks"));
#endif

TX_NEWLINE;
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1ebe:	8a e0       	ldi	r24, 0x0A	; 10
    1ec0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> 5: Get file list               6: Read File"));
    1ec4:	86 e6       	ldi	r24, 0x66	; 102
    1ec6:	93 e0       	ldi	r25, 0x03	; 3
    1ec8:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1ecc:	8d e0       	ldi	r24, 0x0D	; 13
    1ece:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1ed2:	8a e0       	ldi	r24, 0x0A	; 10
    1ed4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> 7: Write File                  8: Delete File"));
    1ed8:	86 e3       	ldi	r24, 0x36	; 54
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1ee0:	8d e0       	ldi	r24, 0x0D	; 13
    1ee2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1ee6:	8a e0       	ldi	r24, 0x0A	; 10
    1ee8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> 9: Read SD Memory Capacity     a: Show Date & Time"));
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>

TX_NEWLINE;
    1ef4:	8d e0       	ldi	r24, 0x0D	; 13
    1ef6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1efa:	8a e0       	ldi	r24, 0x0A	; 10
    1efc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> b: Update Date                 c: Update Time"));
    1f00:	81 ed       	ldi	r24, 0xD1	; 209
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
TX_NEWLINE;
    1f08:	8d e0       	ldi	r24, 0x0D	; 13
    1f0a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f0e:	8a e0       	ldi	r24, 0x0A	; 10
    1f10:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>

TX_NEWLINE;
    1f14:	8d e0       	ldi	r24, 0x0D	; 13
    1f16:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f1a:	8a e0       	ldi	r24, 0x0A	; 10
    1f1c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
TX_NEWLINE;
    1f20:	8d e0       	ldi	r24, 0x0D	; 13
    1f22:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("> Select Option (0-9/a/b/c): "));
    1f2c:	83 eb       	ldi	r24, 0xB3	; 179
    1f2e:	92 e0       	ldi	r25, 0x02	; 2
    1f30:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card data may not be detected by PC/Laptop again,
as it may disturb the FAT format. In such a case you will need to format the card again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    1f34:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    1f38:	18 2f       	mov	r17, r24
transmitByte(option);
    1f3a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    1f3e:	8b ec       	ldi	r24, 0xCB	; 203
    1f40:	81 0f       	add	r24, r17
    1f42:	85 30       	cpi	r24, 0x05	; 5
    1f44:	98 f4       	brcc	.+38     	; 0x1f6c <main+0x230>
{
  if(!FAT32_active) 
    1f46:	d1 10       	cpse	r13, r1
    1f48:	11 c0       	rjmp	.+34     	; 0x1f6c <main+0x230>
  {
    TX_NEWLINE;
    1f4a:	8d e0       	ldi	r24, 0x0D	; 13
    1f4c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f50:	8a e0       	ldi	r24, 0x0A	; 10
    1f52:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    TX_NEWLINE;
    1f56:	8d e0       	ldi	r24, 0x0D	; 13
    1f58:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f5c:	8a e0       	ldi	r24, 0x0A	; 10
    1f5e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    1f62:	8b e9       	ldi	r24, 0x9B	; 155
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
	continue;
    1f6a:	80 cf       	rjmp	.-256    	; 0x1e6c <main+0x130>
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    1f6c:	80 ed       	ldi	r24, 0xD0	; 208
    1f6e:	81 0f       	add	r24, r17
    1f70:	85 30       	cpi	r24, 0x05	; 5
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <main+0x23a>
    1f74:	8f c0       	rjmp	.+286    	; 0x2094 <main+0x358>
{
TX_NEWLINE;
    1f76:	8d e0       	ldi	r24, 0x0D	; 13
    1f78:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
TX_NEWLINE;
    1f82:	8d e0       	ldi	r24, 0x0D	; 13
    1f84:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    1f88:	8a e0       	ldi	r24, 0x0A	; 10
    1f8a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    1f8e:	87 e7       	ldi	r24, 0x77	; 119
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
data = receiveByte(); transmitByte(data);
    1f96:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    1f9a:	08 2f       	mov	r16, r24
    1f9c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
startBlock = (data & 0x0f) * 1000;
    1fa0:	30 2f       	mov	r19, r16
    1fa2:	3f 70       	andi	r19, 0x0F	; 15
    1fa4:	3e 9d       	mul	r19, r14
    1fa6:	c0 01       	movw	r24, r0
    1fa8:	3f 9d       	mul	r19, r15
    1faa:	90 0d       	add	r25, r0
    1fac:	11 24       	eor	r1, r1
    1fae:	aa 27       	eor	r26, r26
    1fb0:	97 fd       	sbrc	r25, 7
    1fb2:	a0 95       	com	r26
    1fb4:	ba 2f       	mov	r27, r26
    1fb6:	80 93 95 00 	sts	0x0095, r24
    1fba:	90 93 96 00 	sts	0x0096, r25
    1fbe:	a0 93 97 00 	sts	0x0097, r26
    1fc2:	b0 93 98 00 	sts	0x0098, r27
data = receiveByte(); transmitByte(data);
    1fc6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    1fca:	08 2f       	mov	r16, r24
    1fcc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
startBlock += (data & 0x0f) * 100;
    1fd0:	40 90 95 00 	lds	r4, 0x0095
    1fd4:	50 90 96 00 	lds	r5, 0x0096
    1fd8:	60 90 97 00 	lds	r6, 0x0097
    1fdc:	70 90 98 00 	lds	r7, 0x0098
    1fe0:	40 2f       	mov	r20, r16
    1fe2:	4f 70       	andi	r20, 0x0F	; 15
    1fe4:	24 e6       	ldi	r18, 0x64	; 100
    1fe6:	42 9f       	mul	r20, r18
    1fe8:	a0 01       	movw	r20, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	66 27       	eor	r22, r22
    1fee:	57 fd       	sbrc	r21, 7
    1ff0:	60 95       	com	r22
    1ff2:	76 2f       	mov	r23, r22
    1ff4:	44 0d       	add	r20, r4
    1ff6:	55 1d       	adc	r21, r5
    1ff8:	66 1d       	adc	r22, r6
    1ffa:	77 1d       	adc	r23, r7
    1ffc:	40 93 95 00 	sts	0x0095, r20
    2000:	50 93 96 00 	sts	0x0096, r21
    2004:	60 93 97 00 	sts	0x0097, r22
    2008:	70 93 98 00 	sts	0x0098, r23
data = receiveByte(); transmitByte(data);
    200c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2010:	08 2f       	mov	r16, r24
    2012:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
startBlock += (data & 0x0f) * 10;
    2016:	40 90 95 00 	lds	r4, 0x0095
    201a:	50 90 96 00 	lds	r5, 0x0096
    201e:	60 90 97 00 	lds	r6, 0x0097
    2022:	70 90 98 00 	lds	r7, 0x0098
    2026:	40 2f       	mov	r20, r16
    2028:	4f 70       	andi	r20, 0x0F	; 15
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	48 9f       	mul	r20, r24
    202e:	a0 01       	movw	r20, r0
    2030:	11 24       	eor	r1, r1
    2032:	66 27       	eor	r22, r22
    2034:	57 fd       	sbrc	r21, 7
    2036:	60 95       	com	r22
    2038:	76 2f       	mov	r23, r22
    203a:	44 0d       	add	r20, r4
    203c:	55 1d       	adc	r21, r5
    203e:	66 1d       	adc	r22, r6
    2040:	77 1d       	adc	r23, r7
    2042:	40 93 95 00 	sts	0x0095, r20
    2046:	50 93 96 00 	sts	0x0096, r21
    204a:	60 93 97 00 	sts	0x0097, r22
    204e:	70 93 98 00 	sts	0x0098, r23
data = receiveByte(); transmitByte(data);
    2052:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2056:	08 2f       	mov	r16, r24
    2058:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
startBlock += (data & 0x0f);
    205c:	40 91 95 00 	lds	r20, 0x0095
    2060:	50 91 96 00 	lds	r21, 0x0096
    2064:	60 91 97 00 	lds	r22, 0x0097
    2068:	70 91 98 00 	lds	r23, 0x0098
    206c:	80 2f       	mov	r24, r16
    206e:	8f 70       	andi	r24, 0x0F	; 15
    2070:	48 0f       	add	r20, r24
    2072:	51 1d       	adc	r21, r1
    2074:	61 1d       	adc	r22, r1
    2076:	71 1d       	adc	r23, r1
    2078:	40 93 95 00 	sts	0x0095, r20
    207c:	50 93 96 00 	sts	0x0096, r21
    2080:	60 93 97 00 	sts	0x0097, r22
    2084:	70 93 98 00 	sts	0x0098, r23
TX_NEWLINE;
    2088:	8d e0       	ldi	r24, 0x0D	; 13
    208a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    208e:	8a e0       	ldi	r24, 0x0A	; 10
    2090:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
}

totalBlocks = 1;
    2094:	80 92 a0 02 	sts	0x02A0, r8
    2098:	90 92 a1 02 	sts	0x02A1, r9
    209c:	a0 92 a2 02 	sts	0x02A2, r10
    20a0:	b0 92 a3 02 	sts	0x02A3, r11
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    20a4:	19 33       	cpi	r17, 0x39	; 57
    20a6:	09 f4       	brne	.+2      	; 0x20aa <main+0x36e>
    20a8:	43 c1       	rjmp	.+646    	; 0x2330 <main+0x5f4>
    20aa:	70 f5       	brcc	.+92     	; 0x2108 <main+0x3cc>
    20ac:	12 33       	cpi	r17, 0x32	; 50
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <main+0x376>
    20b0:	a9 c0       	rjmp	.+338    	; 0x2204 <main+0x4c8>
    20b2:	90 f4       	brcc	.+36     	; 0x20d8 <main+0x39c>
    20b4:	10 33       	cpi	r17, 0x30	; 48
    20b6:	e9 f1       	breq	.+122    	; 0x2132 <main+0x3f6>
    20b8:	11 33       	cpi	r17, 0x31	; 49
    20ba:	09 f0       	breq	.+2      	; 0x20be <main+0x382>
    20bc:	47 c1       	rjmp	.+654    	; 0x234c <main+0x610>
              transmitString_F(PSTR("Erase failed.."));
          else
              transmitString_F(PSTR("Erased!"));
          break;

case '1': TX_NEWLINE;
    20be:	8d e0       	ldi	r24, 0x0D	; 13
    20c0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    20c4:	8a e0       	ldi	r24, 0x0A	; 10
    20c6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    20ca:	86 e4       	ldi	r24, 0x46	; 70
    20cc:	92 e0       	ldi	r25, 0x02	; 2
    20ce:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
          i=0;
    20d2:	61 2c       	mov	r6, r1
    20d4:	71 2c       	mov	r7, r1
    20d6:	5f c0       	rjmp	.+190    	; 0x2196 <main+0x45a>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    20d8:	15 33       	cpi	r17, 0x35	; 53
    20da:	09 f4       	brne	.+2      	; 0x20de <main+0x3a2>
    20dc:	ca c0       	rjmp	.+404    	; 0x2272 <main+0x536>
    20de:	08 f4       	brcc	.+2      	; 0x20e2 <main+0x3a6>
    20e0:	35 c1       	rjmp	.+618    	; 0x234c <main+0x610>
  		  findFiles(GET_LIST,0);
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    20e2:	8d e0       	ldi	r24, 0x0D	; 13
    20e4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    20e8:	8a e0       	ldi	r24, 0x0A	; 10
    20ea:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
		  TX_NEWLINE;
    20ee:	8d e0       	ldi	r24, 0x0D	; 13
    20f0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    20f4:	8a e0       	ldi	r24, 0x0A	; 10
    20f6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    20fa:	84 ef       	ldi	r24, 0xF4	; 244
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    2102:	fe 01       	movw	r30, r28
    2104:	31 96       	adiw	r30, 0x01	; 1
    2106:	c1 c0       	rjmp	.+386    	; 0x228a <main+0x54e>
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    2108:	13 34       	cpi	r17, 0x43	; 67
    210a:	09 f4       	brne	.+2      	; 0x210e <main+0x3d2>
    210c:	1c c1       	rjmp	.+568    	; 0x2346 <main+0x60a>
    210e:	38 f4       	brcc	.+14     	; 0x211e <main+0x3e2>
    2110:	11 34       	cpi	r17, 0x41	; 65
    2112:	09 f4       	brne	.+2      	; 0x2116 <main+0x3da>
    2114:	10 c1       	rjmp	.+544    	; 0x2336 <main+0x5fa>
    2116:	12 34       	cpi	r17, 0x42	; 66
    2118:	09 f4       	brne	.+2      	; 0x211c <main+0x3e0>
    211a:	12 c1       	rjmp	.+548    	; 0x2340 <main+0x604>
    211c:	17 c1       	rjmp	.+558    	; 0x234c <main+0x610>
    211e:	12 36       	cpi	r17, 0x62	; 98
    2120:	09 f4       	brne	.+2      	; 0x2124 <main+0x3e8>
    2122:	0e c1       	rjmp	.+540    	; 0x2340 <main+0x604>
    2124:	13 36       	cpi	r17, 0x63	; 99
    2126:	09 f4       	brne	.+2      	; 0x212a <main+0x3ee>
    2128:	0e c1       	rjmp	.+540    	; 0x2346 <main+0x60a>
    212a:	11 36       	cpi	r17, 0x61	; 97
    212c:	09 f0       	breq	.+2      	; 0x2130 <main+0x3f4>
    212e:	0e c1       	rjmp	.+540    	; 0x234c <main+0x610>
    2130:	02 c1       	rjmp	.+516    	; 0x2336 <main+0x5fa>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    2132:	20 91 a0 02 	lds	r18, 0x02A0
    2136:	30 91 a1 02 	lds	r19, 0x02A1
    213a:	40 91 a2 02 	lds	r20, 0x02A2
    213e:	50 91 a3 02 	lds	r21, 0x02A3
    2142:	60 91 95 00 	lds	r22, 0x0095
    2146:	70 91 96 00 	lds	r23, 0x0096
    214a:	80 91 97 00 	lds	r24, 0x0097
    214e:	90 91 98 00 	lds	r25, 0x0098
    2152:	0e 94 b2 12 	call	0x2564	; 0x2564 <SD_erase>
    2156:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    2158:	8d e0       	ldi	r24, 0x0D	; 13
    215a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    215e:	8a e0       	ldi	r24, 0x0A	; 10
    2160:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
          if(error)
    2164:	cc 20       	and	r12, r12
    2166:	19 f0       	breq	.+6      	; 0x216e <main+0x432>
              transmitString_F(PSTR("Erase failed.."));
    2168:	88 e6       	ldi	r24, 0x68	; 104
    216a:	92 e0       	ldi	r25, 0x02	; 2
    216c:	48 c0       	rjmp	.+144    	; 0x21fe <main+0x4c2>
          else
              transmitString_F(PSTR("Erased!"));
    216e:	80 e6       	ldi	r24, 0x60	; 96
    2170:	92 e0       	ldi	r25, 0x02	; 2
    2172:	45 c0       	rjmp	.+138    	; 0x21fe <main+0x4c2>
                data = receiveByte();
                transmitByte(data);
                buffer[i++] = data;
                if(data == 0x0d)
                {
                    transmitByte(0x0a);
    2174:	8a e0       	ldi	r24, 0x0A	; 10
    2176:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
                    buffer[i++] = 0x0a;
    217a:	22 e0       	ldi	r18, 0x02	; 2
    217c:	62 0e       	add	r6, r18
    217e:	71 1c       	adc	r7, r1
    2180:	f2 01       	movw	r30, r4
    2182:	e7 56       	subi	r30, 0x67	; 103
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	80 83       	st	Z, r24
                }
                if(i == 512) break;
    218a:	61 14       	cp	r6, r1
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	78 06       	cpc	r7, r24
    2190:	a9 f0       	breq	.+42     	; 0x21bc <main+0x480>
    2192:	23 01       	movw	r4, r6
    2194:	32 01       	movw	r6, r4
case '1': TX_NEWLINE;
          transmitString_F(PSTR(" Enter text (End with ~):"));
          i=0;
            do
            {
                data = receiveByte();
    2196:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    219a:	18 2f       	mov	r17, r24
                transmitByte(data);
    219c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
                buffer[i++] = data;
    21a0:	23 01       	movw	r4, r6
    21a2:	9f ef       	ldi	r25, 0xFF	; 255
    21a4:	49 1a       	sub	r4, r25
    21a6:	59 0a       	sbc	r5, r25
    21a8:	f3 01       	movw	r30, r6
    21aa:	e7 56       	subi	r30, 0x67	; 103
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	10 83       	st	Z, r17
                if(data == 0x0d)
    21b0:	1d 30       	cpi	r17, 0x0D	; 13
    21b2:	01 f3       	breq	.-64     	; 0x2174 <main+0x438>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
    21b4:	41 14       	cp	r4, r1
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	59 06       	cpc	r5, r25
    21ba:	e1 f4       	brne	.+56     	; 0x21f4 <main+0x4b8>
            }while (data != '~');

            error = SD_writeSingleBlock (startBlock);
    21bc:	60 91 95 00 	lds	r22, 0x0095
    21c0:	70 91 96 00 	lds	r23, 0x0096
    21c4:	80 91 97 00 	lds	r24, 0x0097
    21c8:	90 91 98 00 	lds	r25, 0x0098
    21cc:	0e 94 19 13 	call	0x2632	; 0x2632 <SD_writeSingleBlock>
    21d0:	c8 2e       	mov	r12, r24
            TX_NEWLINE;
    21d2:	8d e0       	ldi	r24, 0x0D	; 13
    21d4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    21d8:	8a e0       	ldi	r24, 0x0A	; 10
    21da:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            TX_NEWLINE;
    21de:	8d e0       	ldi	r24, 0x0D	; 13
    21e0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    21e4:	8a e0       	ldi	r24, 0x0A	; 10
    21e6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            if(error)
    21ea:	cc 20       	and	r12, r12
    21ec:	31 f0       	breq	.+12     	; 0x21fa <main+0x4be>
                transmitString_F(PSTR("Write failed.."));
    21ee:	87 e3       	ldi	r24, 0x37	; 55
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	05 c0       	rjmp	.+10     	; 0x21fe <main+0x4c2>
                {
                    transmitByte(0x0a);
                    buffer[i++] = 0x0a;
                }
                if(i == 512) break;
            }while (data != '~');
    21f4:	1e 37       	cpi	r17, 0x7E	; 126
    21f6:	71 f6       	brne	.-100    	; 0x2194 <main+0x458>
    21f8:	e1 cf       	rjmp	.-62     	; 0x21bc <main+0x480>
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
            else
                transmitString_F(PSTR("Write successful!"));
    21fa:	85 e2       	ldi	r24, 0x25	; 37
    21fc:	92 e0       	ldi	r25, 0x02	; 2

            error = SD_writeSingleBlock (startBlock);
            TX_NEWLINE;
            TX_NEWLINE;
            if(error)
                transmitString_F(PSTR("Write failed.."));
    21fe:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
    2202:	ba c0       	rjmp	.+372    	; 0x2378 <main+0x63c>
            else
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
    2204:	60 91 95 00 	lds	r22, 0x0095
    2208:	70 91 96 00 	lds	r23, 0x0096
    220c:	80 91 97 00 	lds	r24, 0x0097
    2210:	90 91 98 00 	lds	r25, 0x0098
    2214:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SD_readSingleBlock>
    2218:	c8 2e       	mov	r12, r24
          TX_NEWLINE;
    221a:	8d e0       	ldi	r24, 0x0D	; 13
    221c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2220:	8a e0       	ldi	r24, 0x0A	; 10
    2222:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
          if(error)
    2226:	cc 20       	and	r12, r12
    2228:	19 f0       	breq	.+6      	; 0x2230 <main+0x4f4>
            transmitString_F(PSTR("Read failed.."));
    222a:	87 e1       	ldi	r24, 0x17	; 23
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	e7 cf       	rjmp	.-50     	; 0x21fe <main+0x4c2>
                transmitString_F(PSTR("Write successful!"));
            break;

case '2': error = SD_readSingleBlock (startBlock);
          TX_NEWLINE;
          if(error)
    2230:	00 e0       	ldi	r16, 0x00	; 0
    2232:	10 e0       	ldi	r17, 0x00	; 0
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    2234:	f8 01       	movw	r30, r16
    2236:	e7 56       	subi	r30, 0x67	; 103
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	8e 37       	cpi	r24, 0x7E	; 126
    223e:	79 f4       	brne	.+30     	; 0x225e <main+0x522>
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    2240:	8d e0       	ldi	r24, 0x0D	; 13
    2242:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2246:	8a e0       	ldi	r24, 0x0A	; 10
    2248:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            TX_NEWLINE;
    224c:	8d e0       	ldi	r24, 0x0D	; 13
    224e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2252:	8a e0       	ldi	r24, 0x0A	; 10
    2254:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    2258:	86 e0       	ldi	r24, 0x06	; 6
    225a:	92 e0       	ldi	r25, 0x02	; 2
    225c:	d0 cf       	rjmp	.-96     	; 0x21fe <main+0x4c2>
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
    225e:	80 81       	ld	r24, Z
    2260:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    2264:	0f 5f       	subi	r16, 0xFF	; 255
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
    2268:	01 15       	cp	r16, r1
    226a:	22 e0       	ldi	r18, 0x02	; 2
    226c:	12 07       	cpc	r17, r18
    226e:	11 f7       	brne	.-60     	; 0x2234 <main+0x4f8>
    2270:	e7 cf       	rjmp	.-50     	; 0x2240 <main+0x504>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    2272:	8d e0       	ldi	r24, 0x0D	; 13
    2274:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2278:	8a e0       	ldi	r24, 0x0A	; 10
    227a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  		  findFiles(GET_LIST,0);
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 36 08 	call	0x106c	; 0x106c <findFiles>
          break;
    2288:	77 c0       	rjmp	.+238    	; 0x2378 <main+0x63c>
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    228a:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    228c:	e2 15       	cp	r30, r2
    228e:	f3 05       	cpc	r31, r3
    2290:	e1 f7       	brne	.-8      	; 0x228a <main+0x54e>
    2292:	61 2c       	mov	r6, r1
    2294:	71 2c       	mov	r7, r1
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    2296:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    229a:	08 2f       	mov	r16, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    229c:	8d 30       	cpi	r24, 0x0D	; 13
    229e:	59 f1       	breq	.+86     	; 0x22f6 <main+0x5ba>
			if(data == 0x08)	//'Back Space' key pressed
    22a0:	88 30       	cpi	r24, 0x08	; 8
    22a2:	81 f4       	brne	.+32     	; 0x22c4 <main+0x588>
	 		{ 
	   			if(i != 0)
    22a4:	61 14       	cp	r6, r1
    22a6:	71 04       	cpc	r7, r1
    22a8:	b1 f3       	breq	.-20     	; 0x2296 <main+0x55a>
	   			{ 
	     			transmitByte(data);
    22aa:	88 e0       	ldi	r24, 0x08	; 8
    22ac:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
					transmitByte(' '); 
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	     			transmitByte(data); 
    22b6:	88 e0       	ldi	r24, 0x08	; 8
    22b8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	     			i--; 
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	68 1a       	sub	r6, r24
    22c0:	71 08       	sbc	r7, r1
    22c2:	e9 cf       	rjmp	.-46     	; 0x2296 <main+0x55a>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    22c4:	80 ee       	ldi	r24, 0xE0	; 224
    22c6:	80 0f       	add	r24, r16
    22c8:	8f 35       	cpi	r24, 0x5F	; 95
    22ca:	28 f7       	brcc	.-54     	; 0x2296 <main+0x55a>
			transmitByte(data);
    22cc:	80 2f       	mov	r24, r16
    22ce:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
            fileName[i++] = data;
    22d2:	a3 01       	movw	r20, r6
    22d4:	4f 5f       	subi	r20, 0xFF	; 255
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    22d8:	e1 e0       	ldi	r30, 0x01	; 1
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ec 0f       	add	r30, r28
    22de:	fd 1f       	adc	r31, r29
    22e0:	e6 0d       	add	r30, r6
    22e2:	f7 1d       	adc	r31, r7
    22e4:	00 83       	st	Z, r16
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    22e6:	4d 30       	cpi	r20, 0x0D	; 13
    22e8:	51 05       	cpc	r21, r1
    22ea:	11 f0       	breq	.+4      	; 0x22f0 <main+0x5b4>
    22ec:	3a 01       	movw	r6, r20
    22ee:	d3 cf       	rjmp	.-90     	; 0x2296 <main+0x55a>
    22f0:	8e ed       	ldi	r24, 0xDE	; 222
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	84 cf       	rjmp	.-248    	; 0x21fe <main+0x4c2>
          }
          if(i>12) break;
    22f6:	9d e0       	ldi	r25, 0x0D	; 13
    22f8:	69 16       	cp	r6, r25
    22fa:	71 04       	cpc	r7, r1
    22fc:	e8 f5       	brcc	.+122    	; 0x2378 <main+0x63c>
       
	      TX_NEWLINE;
    22fe:	8d e0       	ldi	r24, 0x0D	; 13
    2300:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2304:	8a e0       	ldi	r24, 0x0A	; 10
    2306:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
		  if(option == '6')
    230a:	16 33       	cpi	r17, 0x36	; 54
    230c:	39 f4       	brne	.+14     	; 0x231c <main+0x5e0>
		     readFile( READ, fileName);
    230e:	be 01       	movw	r22, r28
    2310:	6f 5f       	subi	r22, 0xFF	; 255
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	0e 94 ef 09 	call	0x13de	; 0x13de <readFile>
    231a:	2e c0       	rjmp	.+92     	; 0x2378 <main+0x63c>
		  if(option == '7')
		  	 writeFile(fileName);
    231c:	ce 01       	movw	r24, r28
    231e:	01 96       	adiw	r24, 0x01	; 1
          if(i>12) break;
       
	      TX_NEWLINE;
		  if(option == '6')
		     readFile( READ, fileName);
		  if(option == '7')
    2320:	17 33       	cpi	r17, 0x37	; 55
    2322:	19 f4       	brne	.+6      	; 0x232a <main+0x5ee>
		  	 writeFile(fileName);
    2324:	0e 94 c5 0a 	call	0x158a	; 0x158a <writeFile>
    2328:	27 c0       	rjmp	.+78     	; 0x2378 <main+0x63c>
 		  if(option == '8')
		     deleteFile(fileName);
    232a:	0e 94 b5 0a 	call	0x156a	; 0x156a <deleteFile>
    232e:	24 c0       	rjmp	.+72     	; 0x2378 <main+0x63c>
          break;

case '9': memoryStatistics();
    2330:	0e 94 a9 06 	call	0xd52	; 0xd52 <memoryStatistics>
          break;
    2334:	21 c0       	rjmp	.+66     	; 0x2378 <main+0x63c>

case 'a': 
case 'A': RTC_displayDate();
    2336:	0e 94 87 14 	call	0x290e	; 0x290e <RTC_displayDate>
		  RTC_displayTime();
    233a:	0e 94 49 14 	call	0x2892	; 0x2892 <RTC_displayTime>
		  break;
    233e:	1c c0       	rjmp	.+56     	; 0x2378 <main+0x63c>
case 'b': 
case 'B': RTC_updateDate();
    2340:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <RTC_updateDate>
		  break;
    2344:	19 c0       	rjmp	.+50     	; 0x2378 <main+0x63c>
case 'c': 
case 'C': RTC_updateTime();
    2346:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <RTC_updateTime>
	      break;
    234a:	16 c0       	rjmp	.+44     	; 0x2378 <main+0x63c>

default: TX_NEWLINE;
    234c:	8d e0       	ldi	r24, 0x0D	; 13
    234e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2352:	8a e0       	ldi	r24, 0x0A	; 10
    2354:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
         TX_NEWLINE;
    2358:	8d e0       	ldi	r24, 0x0D	; 13
    235a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    235e:	8a e0       	ldi	r24, 0x0A	; 10
    2360:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    2364:	8d ec       	ldi	r24, 0xCD	; 205
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
         TX_NEWLINE;
    236c:	8d e0       	ldi	r24, 0x0D	; 13
    236e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2372:	8a e0       	ldi	r24, 0x0A	; 10
    2374:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
}

TX_NEWLINE;
    2378:	8d e0       	ldi	r24, 0x0D	; 13
    237a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    237e:	8a e0       	ldi	r24, 0x0A	; 10
    2380:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2384:	73 cd       	rjmp	.-1306   	; 0x1e6c <main+0x130>

00002386 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	00 d0       	rcall	.+0      	; 0x2392 <SD_sendCommand+0xc>
    2392:	00 d0       	rcall	.+0      	; 0x2394 <SD_sendCommand+0xe>
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	08 2f       	mov	r16, r24
//SD card accepts byte address while SDHC accepts block address in multiples of 512
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that

if(SDHC_flag == 0)		
    239a:	80 91 9f 02 	lds	r24, 0x029F
    239e:	81 11       	cpse	r24, r1
    23a0:	13 c0       	rjmp	.+38     	; 0x23c8 <SD_sendCommand+0x42>
if(cmd == READ_SINGLE_BLOCK     ||
    23a2:	8f ee       	ldi	r24, 0xEF	; 239
    23a4:	80 0f       	add	r24, r16
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	40 f0       	brcs	.+16     	; 0x23ba <SD_sendCommand+0x34>
   cmd == READ_MULTIPLE_BLOCKS  ||
    23aa:	88 ee       	ldi	r24, 0xE8	; 232
    23ac:	80 0f       	add	r24, r16
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	20 f0       	brcs	.+8      	; 0x23ba <SD_sendCommand+0x34>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
    23b2:	80 ee       	ldi	r24, 0xE0	; 224
    23b4:	80 0f       	add	r24, r16
    23b6:	82 30       	cpi	r24, 0x02	; 2
    23b8:	38 f4       	brcc	.+14     	; 0x23c8 <SD_sendCommand+0x42>
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    23ba:	89 e0       	ldi	r24, 0x09	; 9
    23bc:	44 0f       	add	r20, r20
    23be:	55 1f       	adc	r21, r21
    23c0:	66 1f       	adc	r22, r22
    23c2:	77 1f       	adc	r23, r23
    23c4:	8a 95       	dec	r24
    23c6:	d1 f7       	brne	.-12     	; 0x23bc <SD_sendCommand+0x36>
   }	   

SD_CS_ASSERT;
    23c8:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    23ca:	80 2f       	mov	r24, r16
    23cc:	80 64       	ori	r24, 0x40	; 64
    23ce:	49 83       	std	Y+1, r20	; 0x01
    23d0:	5a 83       	std	Y+2, r21	; 0x02
    23d2:	6b 83       	std	Y+3, r22	; 0x03
    23d4:	7c 83       	std	Y+4, r23	; 0x04
    23d6:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit(arg>>24);
    23da:	7c 81       	ldd	r23, Y+4	; 0x04
    23dc:	87 2f       	mov	r24, r23
    23de:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit(arg>>16);
    23e2:	6b 81       	ldd	r22, Y+3	; 0x03
    23e4:	86 2f       	mov	r24, r22
    23e6:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit(arg>>8);
    23ea:	5a 81       	ldd	r21, Y+2	; 0x02
    23ec:	85 2f       	mov	r24, r21
    23ee:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit(arg);
    23f2:	49 81       	ldd	r20, Y+1	; 0x01
    23f4:	84 2f       	mov	r24, r20
    23f6:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    23fa:	08 30       	cpi	r16, 0x08	; 8
    23fc:	11 f4       	brne	.+4      	; 0x2402 <SD_sendCommand+0x7c>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    23fe:	87 e8       	ldi	r24, 0x87	; 135
    2400:	01 c0       	rjmp	.+2      	; 0x2404 <SD_sendCommand+0x7e>
else 
  SPI_transmit(0x95); 
    2402:	85 e9       	ldi	r24, 0x95	; 149
    2404:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    2408:	10 e0       	ldi	r17, 0x00	; 0
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    240a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    240e:	f8 2e       	mov	r15, r24
    2410:	8f ef       	ldi	r24, 0xFF	; 255
    2412:	f8 12       	cpse	r15, r24
    2414:	03 c0       	rjmp	.+6      	; 0x241c <SD_sendCommand+0x96>
    2416:	11 50       	subi	r17, 0x01	; 1
   if(retry++ > 0xfe) break; //time out error
    2418:	c1 f7       	brne	.-16     	; 0x240a <SD_sendCommand+0x84>
    241a:	15 c0       	rjmp	.+42     	; 0x2446 <SD_sendCommand+0xc0>

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    241c:	f1 10       	cpse	r15, r1
    241e:	13 c0       	rjmp	.+38     	; 0x2446 <SD_sendCommand+0xc0>
    2420:	0a 33       	cpi	r16, 0x3A	; 58
    2422:	89 f4       	brne	.+34     	; 0x2446 <SD_sendCommand+0xc0>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    2424:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    2428:	86 ff       	sbrs	r24, 6
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <SD_sendCommand+0xae>
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	80 93 9f 02 	sts	0x029F, r24
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <SD_sendCommand+0xb2>
  else SDHC_flag = 0;
    2434:	10 92 9f 02 	sts	0x029F, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    2438:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    243c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
  SPI_receive(); 
    2440:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    2444:	f1 2c       	mov	r15, r1
}

SPI_receive(); //extra 8 CLK
    2446:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SD_CS_DEASSERT;
    244a:	c4 9a       	sbi	0x18, 4	; 24

return response; //return state
}
    244c:	8f 2d       	mov	r24, r15
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	08 95       	ret

00002462 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	1a e0       	ldi	r17, 0x0A	; 10
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    246c:	8f ef       	ldi	r24, 0xFF	; 255
    246e:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
    2472:	11 50       	subi	r17, 0x01	; 1
unsigned char SD_init(void)
{
unsigned char i, response, SD_version;
unsigned int retry=0 ;

 for(i=0;i<10;i++)
    2474:	d9 f7       	brne	.-10     	; 0x246c <SD_init+0xa>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    2476:	c4 98       	cbi	0x18, 4	; 24
    2478:	c1 e2       	ldi	r28, 0x21	; 33
    247a:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	ba 01       	movw	r22, r20
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2488:	21 97       	sbiw	r28, 0x01	; 1
   retry++;
   if(retry>0x20) 
    248a:	20 97       	sbiw	r28, 0x00	; 0
    248c:	09 f4       	brne	.+2      	; 0x2490 <SD_init+0x2e>
    248e:	63 c0       	rjmp	.+198    	; 0x2556 <SD_init+0xf4>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    2490:	81 30       	cpi	r24, 0x01	; 1
    2492:	a1 f7       	brne	.-24     	; 0x247c <SD_init+0x1a>

SD_CS_DEASSERT;
    2494:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit (0xff);
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit (0xff);
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
    24a2:	cf ef       	ldi	r28, 0xFF	; 255
    24a4:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    24a6:	4a ea       	ldi	r20, 0xAA	; 170
    24a8:	51 e0       	ldi	r21, 0x01	; 1
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	88 e0       	ldi	r24, 0x08	; 8
    24b0:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    24b4:	21 97       	sbiw	r28, 0x01	; 1
retry++;
if(retry>0xfe) 
    24b6:	20 97       	sbiw	r28, 0x00	; 0
    24b8:	59 f4       	brne	.+22     	; 0x24d0 <SD_init+0x6e>
   {
	  TX_NEWLINE;
    24ba:	8d e0       	ldi	r24, 0x0D	; 13
    24bc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    24c0:	8a e0       	ldi	r24, 0x0A	; 10
    24c2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	80 93 aa 02 	sts	0x02AA, r24
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
retry++;
if(retry>0xfe) 
   {
	  TX_NEWLINE;
	  SD_version = 1;
    24cc:	01 e0       	ldi	r16, 0x01	; 1
	  cardType = 1;
	  break;
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <SD_init+0x74>
   } //time out

}while(response != 0x01);
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	49 f7       	brne	.-46     	; 0x24a6 <SD_init+0x44>
SPI_transmit (0xff);
SPI_transmit (0xff);

retry = 0;

SD_version = 2; //default set to SD compliance with ver2.x; 
    24d4:	02 e0       	ldi	r16, 0x02	; 2
    24d6:	cf ef       	ldi	r28, 0xFF	; 255
    24d8:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	ba 01       	movw	r22, r20
    24e0:	87 e3       	ldi	r24, 0x37	; 55
    24e2:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e4       	ldi	r23, 0x40	; 64
    24ee:	89 e2       	ldi	r24, 0x29	; 41
    24f0:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    24f4:	21 97       	sbiw	r28, 0x01	; 1

retry++;
if(retry>0xfe) 
    24f6:	20 97       	sbiw	r28, 0x00	; 0
    24f8:	41 f4       	brne	.+16     	; 0x250a <SD_init+0xa8>
   {
      TX_NEWLINE;
    24fa:	8d e0       	ldi	r24, 0x0D	; 13
    24fc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2500:	8a e0       	ldi	r24, 0x0A	; 10
    2502:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	  return 2;  //time out, card initialization failed
    2506:	12 e0       	ldi	r17, 0x02	; 2
    2508:	27 c0       	rjmp	.+78     	; 0x2558 <SD_init+0xf6>
   } 

}while(response != 0x00);
    250a:	81 11       	cpse	r24, r1
    250c:	e6 cf       	rjmp	.-52     	; 0x24da <SD_init+0x78>


retry = 0;
SDHC_flag = 0;
    250e:	10 92 9f 02 	sts	0x029F, r1

if (SD_version == 2)
    2512:	02 30       	cpi	r16, 0x02	; 2
    2514:	09 f5       	brne	.+66     	; 0x2558 <SD_init+0xf6>
    2516:	cf ef       	ldi	r28, 0xFF	; 255
    2518:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	ba 01       	movw	r22, r20
    2520:	8a e3       	ldi	r24, 0x3A	; 58
    2522:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
    2526:	21 97       	sbiw	r28, 0x01	; 1
	 retry++;
	 if(retry>0xfe) 
    2528:	20 97       	sbiw	r28, 0x00	; 0
    252a:	49 f4       	brne	.+18     	; 0x253e <SD_init+0xdc>
     {
       TX_NEWLINE;
    252c:	8d e0       	ldi	r24, 0x0D	; 13
    252e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2532:	8a e0       	ldi	r24, 0x0A	; 10
    2534:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	   cardType = 0;
    2538:	10 92 aa 02 	sts	0x02AA, r1
	   break;
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <SD_init+0xe0>
     } //time out

   }while(response != 0x00);
    253e:	81 11       	cpse	r24, r1
    2540:	ec cf       	rjmp	.-40     	; 0x251a <SD_init+0xb8>

   if(SDHC_flag == 1) cardType = 2;
    2542:	80 91 9f 02 	lds	r24, 0x029F
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	11 f4       	brne	.+4      	; 0x254e <SD_init+0xec>
    254a:	82 e0       	ldi	r24, 0x02	; 2
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <SD_init+0xee>
   else cardType = 3;
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	80 93 aa 02 	sts	0x02AA, r24
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <SD_init+0xf6>
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
   retry++;
   if(retry>0x20) 
   	  return 1;   //time out, card not detected
    2556:	11 e0       	ldi	r17, 0x01	; 1
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    2558:	81 2f       	mov	r24, r17
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	08 95       	ret

00002564 <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	cf 92       	push	r12
    256e:	df 92       	push	r13
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	6b 01       	movw	r12, r22
    2576:	7c 01       	movw	r14, r24
    2578:	49 01       	movw	r8, r18
    257a:	5a 01       	movw	r10, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    257c:	ab 01       	movw	r20, r22
    257e:	bc 01       	movw	r22, r24
    2580:	80 e2       	ldi	r24, 0x20	; 32
    2582:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    2586:	81 11       	cpse	r24, r1
    2588:	1d c0       	rjmp	.+58     	; 0x25c4 <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    258a:	b5 01       	movw	r22, r10
    258c:	a4 01       	movw	r20, r8
    258e:	41 50       	subi	r20, 0x01	; 1
    2590:	51 09       	sbc	r21, r1
    2592:	61 09       	sbc	r22, r1
    2594:	71 09       	sbc	r23, r1
    2596:	4c 0d       	add	r20, r12
    2598:	5d 1d       	adc	r21, r13
    259a:	6e 1d       	adc	r22, r14
    259c:	7f 1d       	adc	r23, r15
    259e:	81 e2       	ldi	r24, 0x21	; 33
    25a0:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00)
    25a4:	81 11       	cpse	r24, r1
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <SD_erase+0x60>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	50 e0       	ldi	r21, 0x00	; 0
    25ac:	ba 01       	movw	r22, r20
    25ae:	86 e2       	ldi	r24, 0x26	; 38
if(response != 0x00)
  return response;

return 0; //normal return
}
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
    25b8:	bf 90       	pop	r11
    25ba:	af 90       	pop	r10
    25bc:	9f 90       	pop	r9
    25be:	8f 90       	pop	r8

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
if(response != 0x00)
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    25c0:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	af 90       	pop	r10
    25d0:	9f 90       	pop	r9
    25d2:	8f 90       	pop	r8
    25d4:	08 95       	ret

000025d6 <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	ab 01       	movw	r20, r22
    25dc:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    25de:	81 e1       	ldi	r24, 0x11	; 17
    25e0:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    25e4:	81 11       	cpse	r24, r1
    25e6:	22 c0       	rjmp	.+68     	; 0x262c <SD_readSingleBlock+0x56>

SD_CS_ASSERT;
    25e8:	c4 98       	cbi	0x18, 4	; 24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    25ea:	c0 e0       	ldi	r28, 0x00	; 0
    25ec:	d0 e0       	ldi	r29, 0x00	; 0
    25ee:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    25f2:	8e 3f       	cpi	r24, 0xFE	; 254
    25f4:	31 f0       	breq	.+12     	; 0x2602 <SD_readSingleBlock+0x2c>
    25f6:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    25f8:	20 97       	sbiw	r28, 0x00	; 0
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <SD_readSingleBlock+0x18>
    25fc:	c4 9a       	sbi	0x18, 4	; 24
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	15 c0       	rjmp	.+42     	; 0x262c <SD_readSingleBlock+0x56>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    2602:	c0 e0       	ldi	r28, 0x00	; 0
    2604:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    2606:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    260a:	fe 01       	movw	r30, r28
    260c:	e7 56       	subi	r30, 0x67	; 103
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    2612:	21 96       	adiw	r28, 0x01	; 1
    2614:	c1 15       	cp	r28, r1
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	d8 07       	cpc	r29, r24
    261a:	a9 f7       	brne	.-22     	; 0x2606 <SD_readSingleBlock+0x30>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    261c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SPI_receive();
    2620:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    2624:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
SD_CS_DEASSERT;
    2628:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    262a:	80 e0       	ldi	r24, 0x00	; 0
}
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	08 95       	ret

00002632 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	ab 01       	movw	r20, r22
    2638:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    263a:	88 e1       	ldi	r24, 0x18	; 24
    263c:	0e 94 c3 11 	call	0x2386	; 0x2386 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    2640:	81 11       	cpse	r24, r1
    2642:	3c c0       	rjmp	.+120    	; 0x26bc <SD_writeSingleBlock+0x8a>

SD_CS_ASSERT;
    2644:	c4 98       	cbi	0x18, 4	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    2646:	8e ef       	ldi	r24, 0xFE	; 254
    2648:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>

for(i=0; i<512; i++)    //send 512 bytes data
    264c:	c0 e0       	ldi	r28, 0x00	; 0
    264e:	d0 e0       	ldi	r29, 0x00	; 0
  SPI_transmit(buffer[i]);
    2650:	fe 01       	movw	r30, r28
    2652:	e7 56       	subi	r30, 0x67	; 103
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    265c:	21 96       	adiw	r28, 0x01	; 1
    265e:	c1 15       	cp	r28, r1
    2660:	22 e0       	ldi	r18, 0x02	; 2
    2662:	d2 07       	cpc	r29, r18
    2664:	a9 f7       	brne	.-22     	; 0x2650 <SD_writeSingleBlock+0x1e>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SPI_transmit(0xff);
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>

response = SPI_receive();
    2672:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2676:	98 2f       	mov	r25, r24
    2678:	9f 71       	andi	r25, 0x1F	; 31
    267a:	95 30       	cpi	r25, 0x05	; 5
    267c:	11 f0       	breq	.+4      	; 0x2682 <SD_writeSingleBlock+0x50>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    267e:	c4 9a       	sbi	0x18, 4	; 24
  return response;
    2680:	1d c0       	rjmp	.+58     	; 0x26bc <SD_writeSingleBlock+0x8a>
SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
SPI_transmit(0xff);

response = SPI_receive();

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    2682:	c0 e0       	ldi	r28, 0x00	; 0
    2684:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    2686:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    268a:	81 11       	cpse	r24, r1
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <SD_writeSingleBlock+0x62>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    268e:	21 96       	adiw	r28, 0x01	; 1
    2690:	d1 f7       	brne	.-12     	; 0x2686 <SD_writeSingleBlock+0x54>
    2692:	06 c0       	rjmp	.+12     	; 0x26a0 <SD_writeSingleBlock+0x6e>

SD_CS_DEASSERT;
    2694:	c4 9a       	sbi	0x18, 4	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    2696:	8f ef       	ldi	r24, 0xFF	; 255
    2698:	0e 94 65 13 	call	0x26ca	; 0x26ca <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    269c:	c4 98       	cbi	0x18, 4	; 24

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    269e:	08 c0       	rjmp	.+16     	; 0x26b0 <SD_writeSingleBlock+0x7e>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    26a0:	c4 9a       	sbi	0x18, 4	; 24
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	0b c0       	rjmp	.+22     	; 0x26bc <SD_writeSingleBlock+0x8a>
    26a6:	ce 01       	movw	r24, r28
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	21 96       	adiw	r28, 0x01	; 1
    26ac:	c9 f3       	breq	.-14     	; 0x26a0 <SD_writeSingleBlock+0x6e>
    26ae:	ec 01       	movw	r28, r24

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    26b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <SPI_receive>
    26b4:	88 23       	and	r24, r24
    26b6:	b9 f3       	breq	.-18     	; 0x26a6 <SD_writeSingleBlock+0x74>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    26b8:	c4 9a       	sbi	0x18, 4	; 24

return 0;
    26ba:	80 e0       	ldi	r24, 0x00	; 0
}
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	08 95       	ret

000026c2 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    26c2:	82 e5       	ldi	r24, 0x52	; 82
    26c4:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    26c6:	1e b8       	out	0x0e, r1	; 14
    26c8:	08 95       	ret

000026ca <SPI_transmit>:
}

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    26ca:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    26cc:	77 9b       	sbis	0x0e, 7	; 14
    26ce:	fe cf       	rjmp	.-4      	; 0x26cc <SPI_transmit+0x2>
data = SPDR;
    26d0:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    26d2:	08 95       	ret

000026d4 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    26d8:	77 9b       	sbis	0x0e, 7	; 14
    26da:	fe cf       	rjmp	.-4      	; 0x26d8 <SPI_receive+0x4>
data = SPDR;
    26dc:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    26de:	08 95       	ret

000026e0 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    26e0:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    26e2:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    26e4:	86 e8       	ldi	r24, 0x86	; 134
    26e6:	80 bd       	out	0x20, r24	; 32
 UBRRL = 0x19; //set baud rate lo
    26e8:	89 e1       	ldi	r24, 0x19	; 25
    26ea:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    26ec:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    26ee:	88 e1       	ldi	r24, 0x18	; 24
    26f0:	8a b9       	out	0x0a, r24	; 10
    26f2:	08 95       	ret

000026f4 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    26f4:	5f 9b       	sbis	0x0b, 7	; 11
    26f6:	fe cf       	rjmp	.-4      	; 0x26f4 <receiveByte>
	
	status = UCSRA;
    26f8:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    26fa:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    26fc:	08 95       	ret

000026fe <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    26fe:	5d 9b       	sbis	0x0b, 5	; 11
    2700:	fe cf       	rjmp	.-4      	; 0x26fe <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    2702:	8c b9       	out	0x0c, r24	; 12
    2704:	08 95       	ret

00002706 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F( const char* string)
{
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    270c:	ce 01       	movw	r24, r28
    270e:	fe 01       	movw	r30, r28
    2710:	24 91       	lpm	r18, Z
    2712:	22 23       	and	r18, r18
    2714:	31 f0       	breq	.+12     	; 0x2722 <transmitString_F+0x1c>
   transmitByte(pgm_read_byte(&(*string++)));
    2716:	21 96       	adiw	r28, 0x01	; 1
    2718:	fc 01       	movw	r30, r24
    271a:	84 91       	lpm	r24, Z
    271c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2720:	f5 cf       	rjmp	.-22     	; 0x270c <transmitString_F+0x6>
}
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
    272c:	ec 01       	movw	r28, r24
  while (*string)
    272e:	89 91       	ld	r24, Y+
    2730:	88 23       	and	r24, r24
    2732:	19 f0       	breq	.+6      	; 0x273a <transmitString+0x12>
   transmitByte(*string++);
    2734:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2738:	fa cf       	rjmp	.-12     	; 0x272e <transmitString+0x6>
}
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
    273e:	08 95       	ret

00002740 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
unsigned char RTC_read(void)
{
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
    2746:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <i2c_start>
   if(errorStatus == 1)
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	f9 f0       	breq	.+62     	; 0x278c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    274e:	80 ed       	ldi	r24, 0xD0	; 208
    2750:	0e 94 02 17 	call	0x2e04	; 0x2e04 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2754:	81 30       	cpi	r24, 0x01	; 1
    2756:	d1 f0       	breq	.+52     	; 0x278c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return 1;
   } 
   
   errorStatus = i2c_sendData(0x00);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <i2c_sendData>
   if(errorStatus == 1)
    275e:	81 30       	cpi	r24, 0x01	; 1
    2760:	a9 f0       	breq	.+42     	; 0x278c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return 1;
   } 

    errorStatus = i2c_repeatStart();
    2762:	0e 94 f6 16 	call	0x2dec	; 0x2dec <i2c_repeatStart>
   if(errorStatus == 1)
    2766:	81 30       	cpi	r24, 0x01	; 1
    2768:	89 f0       	breq	.+34     	; 0x278c <RTC_read+0x4c>
     //transmitString_F(PSTR("RTC repeat start failed.."));
   	 i2c_stop();
	 return 1;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
    276a:	81 ed       	ldi	r24, 0xD1	; 209
    276c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	61 f0       	breq	.+24     	; 0x278c <RTC_read+0x4c>
    2774:	c4 e7       	ldi	r28, 0x74	; 116
    2776:	d0 e0       	ldi	r29, 0x00	; 0
    2778:	10 e0       	ldi	r17, 0x00	; 0
	 return 1;
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
    277a:	16 30       	cpi	r17, 0x06	; 6
    277c:	19 f4       	brne	.+6      	; 0x2784 <RTC_read+0x44>
	   	  data = i2c_receiveData_NACK();
    277e:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <i2c_receiveData_NACK>
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <RTC_read+0x48>
	  else
	  	  data = i2c_receiveData_ACK();
    2784:	0e 94 21 17 	call	0x2e42	; 0x2e42 <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
    2788:	8e 37       	cpi	r24, 0x7E	; 126
    278a:	21 f4       	brne	.+8      	; 0x2794 <RTC_read+0x54>
   	  {
       		//transmitString_F(PSTR("RTC receive failed.."));
			i2c_stop();
    278c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	   		return 1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	07 c0       	rjmp	.+14     	; 0x27a2 <RTC_read+0x62>
   	  }
	  
	  rtc_register[i] = data;
    2794:	89 93       	st	Y+, r24
     //transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return 1;
   } 
 
    for(i=0;i<7;i++)
    2796:	1f 5f       	subi	r17, 0xFF	; 255
    2798:	17 30       	cpi	r17, 0x07	; 7
    279a:	79 f7       	brne	.-34     	; 0x277a <RTC_read+0x3a>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
    279c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	return 0;
    27a0:	80 e0       	ldi	r24, 0x00	; 0
}	  
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
    27a8:	08 95       	ret

000027aa <RTC_getTime>:
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
    27aa:	0e 94 a0 13 	call	0x2740	; 0x2740 <RTC_read>
   if(error) return 1;
    27ae:	81 11       	cpse	r24, r1
    27b0:	32 c0       	rjmp	.+100    	; 0x2816 <RTC_getTime+0x6c>

   RTC_read();
    27b2:	0e 94 a0 13 	call	0x2740	; 0x2740 <RTC_read>
   time[8] = 0x00;	  //NIL
    27b6:	10 92 b8 02 	sts	0x02B8, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		 //seconds(1's)
    27ba:	80 91 74 00 	lds	r24, 0x0074
    27be:	98 2f       	mov	r25, r24
    27c0:	9f 70       	andi	r25, 0x0F	; 15
    27c2:	90 63       	ori	r25, 0x30	; 48
    27c4:	90 93 b7 02 	sts	0x02B7, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30; //seconds(10's)
    27c8:	80 77       	andi	r24, 0x70	; 112
    27ca:	82 95       	swap	r24
    27cc:	8f 70       	andi	r24, 0x0F	; 15
    27ce:	80 63       	ori	r24, 0x30	; 48
    27d0:	80 93 b6 02 	sts	0x02B6, r24
   time[5] = ':';
    27d4:	2a e3       	ldi	r18, 0x3A	; 58
    27d6:	20 93 b5 02 	sts	0x02B5, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
    27da:	80 91 75 00 	lds	r24, 0x0075
    27de:	98 2f       	mov	r25, r24
    27e0:	9f 70       	andi	r25, 0x0F	; 15
    27e2:	90 63       	ori	r25, 0x30	; 48
    27e4:	90 93 b4 02 	sts	0x02B4, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
    27e8:	80 77       	andi	r24, 0x70	; 112
    27ea:	82 95       	swap	r24
    27ec:	8f 70       	andi	r24, 0x0F	; 15
    27ee:	80 63       	ori	r24, 0x30	; 48
    27f0:	80 93 b3 02 	sts	0x02B3, r24
   time[2] = ':'; 
    27f4:	20 93 b2 02 	sts	0x02B2, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
    27f8:	80 91 76 00 	lds	r24, 0x0076
    27fc:	98 2f       	mov	r25, r24
    27fe:	9f 70       	andi	r25, 0x0F	; 15
    2800:	90 63       	ori	r25, 0x30	; 48
    2802:	90 93 b1 02 	sts	0x02B1, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
    2806:	80 73       	andi	r24, 0x30	; 48
    2808:	82 95       	swap	r24
    280a:	8f 70       	andi	r24, 0x0F	; 15
    280c:	80 63       	ori	r24, 0x30	; 48
    280e:	80 93 b0 02 	sts	0x02B0, r24

   return 0;
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getTime(void)
{
   unsigned char error;
   error = RTC_read();
   if(error) return 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
   
   time[1] = (HOURS & 0x0f) | 0x30;	
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;

   return 0;
}
    2818:	08 95       	ret

0000281a <RTC_getDate>:
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
    281a:	0e 94 a0 13 	call	0x2740	; 0x2740 <RTC_read>
  if(error) return 1;
    281e:	81 11       	cpse	r24, r1
    2820:	36 c0       	rjmp	.+108    	; 0x288e <RTC_getDate+0x74>

  date[11] = 0x00;
    2822:	10 92 c6 02 	sts	0x02C6, r1
  date[10] = 0x00;
    2826:	10 92 c5 02 	sts	0x02C5, r1
  date[9] = (YEAR & 0x0f) | 0x30;
    282a:	80 91 7a 00 	lds	r24, 0x007A
    282e:	98 2f       	mov	r25, r24
    2830:	9f 70       	andi	r25, 0x0F	; 15
    2832:	90 63       	ori	r25, 0x30	; 48
    2834:	90 93 c4 02 	sts	0x02C4, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
    2838:	82 95       	swap	r24
    283a:	8f 70       	andi	r24, 0x0F	; 15
    283c:	80 63       	ori	r24, 0x30	; 48
    283e:	80 93 c3 02 	sts	0x02C3, r24
  date[7] = '0';
    2842:	80 e3       	ldi	r24, 0x30	; 48
    2844:	80 93 c2 02 	sts	0x02C2, r24
  date[6] = '2';
    2848:	82 e3       	ldi	r24, 0x32	; 50
    284a:	80 93 c1 02 	sts	0x02C1, r24
  date[5] = '/';
    284e:	9f e2       	ldi	r25, 0x2F	; 47
    2850:	90 93 c0 02 	sts	0x02C0, r25
  date[4] = (MONTH & 0x0f) | 0x30;
    2854:	20 91 79 00 	lds	r18, 0x0079
    2858:	82 2f       	mov	r24, r18
    285a:	8f 70       	andi	r24, 0x0F	; 15
    285c:	80 63       	ori	r24, 0x30	; 48
    285e:	80 93 bf 02 	sts	0x02BF, r24
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    2862:	22 95       	swap	r18
    2864:	21 70       	andi	r18, 0x01	; 1
    2866:	20 63       	ori	r18, 0x30	; 48
    2868:	20 93 be 02 	sts	0x02BE, r18
  date[2] = '/';
    286c:	90 93 bd 02 	sts	0x02BD, r25
  date[1] = (DATE & 0x0f) | 0x30;
    2870:	80 91 78 00 	lds	r24, 0x0078
    2874:	98 2f       	mov	r25, r24
    2876:	9f 70       	andi	r25, 0x0F	; 15
    2878:	90 63       	ori	r25, 0x30	; 48
    287a:	90 93 bc 02 	sts	0x02BC, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    287e:	80 73       	andi	r24, 0x30	; 48
    2880:	82 95       	swap	r24
    2882:	8f 70       	andi	r24, 0x0F	; 15
    2884:	80 63       	ori	r24, 0x30	; 48
    2886:	80 93 bb 02 	sts	0x02BB, r24
  return 0;
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	08 95       	ret
//****************************************************************** 
unsigned char RTC_getDate(void)
{
  unsigned char error;
  error = RTC_read();
  if(error) return 1;
    288e:	81 e0       	ldi	r24, 0x01	; 1
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
  date[2] = '/';
  date[1] = (DATE & 0x0f) | 0x30;
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
  return 0;
}  
    2890:	08 95       	ret

00002892 <RTC_displayTime>:
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
    2892:	0e 94 d5 13 	call	0x27aa	; 0x27aa <RTC_getTime>
  if(error) return 1;
    2896:	81 11       	cpse	r24, r1
    2898:	10 c0       	rjmp	.+32     	; 0x28ba <RTC_displayTime+0x28>
  
  TX_NEWLINE;
    289a:	8d e0       	ldi	r24, 0x0D	; 13
    289c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    28a0:	8a e0       	ldi	r24, 0x0A	; 10
    28a2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Time:"));
    28a6:	85 e8       	ldi	r24, 0x85	; 133
    28a8:	96 e0       	ldi	r25, 0x06	; 6
    28aa:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  transmitString(time);
    28ae:	80 eb       	ldi	r24, 0xB0	; 176
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	0e 94 94 13 	call	0x2728	; 0x2728 <transmitString>

  return 0;
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayTime(void)
{
  unsigned char error;
  error = RTC_getTime();
  if(error) return 1;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
  TX_NEWLINE;
  transmitString_F(PSTR("Time:"));
  transmitString(time);

  return 0;
}
    28bc:	08 95       	ret

000028be <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    28be:	85 e7       	ldi	r24, 0x75	; 117
    28c0:	96 e0       	ldi	r25, 0x06	; 6
    28c2:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  
  switch(DAY)
    28c6:	80 91 77 00 	lds	r24, 0x0077
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	87 30       	cpi	r24, 0x07	; 7
    28ce:	91 05       	cpc	r25, r1
    28d0:	d0 f4       	brcc	.+52     	; 0x2906 <RTC_displayDay+0x48>
    28d2:	fc 01       	movw	r30, r24
    28d4:	e6 5d       	subi	r30, 0xD6	; 214
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__tablejump2__>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    28dc:	8e e6       	ldi	r24, 0x6E	; 110
    28de:	96 e0       	ldi	r25, 0x06	; 6
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <RTC_displayDay+0x4c>
          break; 
   case 1:transmitString_F(PSTR("Monday"));
    28e2:	87 e6       	ldi	r24, 0x67	; 103
    28e4:	96 e0       	ldi	r25, 0x06	; 6
    28e6:	11 c0       	rjmp	.+34     	; 0x290a <RTC_displayDay+0x4c>
          break; 
   case 2:transmitString_F(PSTR("Tuesday"));
    28e8:	8f e5       	ldi	r24, 0x5F	; 95
    28ea:	96 e0       	ldi	r25, 0x06	; 6
    28ec:	0e c0       	rjmp	.+28     	; 0x290a <RTC_displayDay+0x4c>
          break; 
   case 3:transmitString_F(PSTR("Wednesday"));
    28ee:	85 e5       	ldi	r24, 0x55	; 85
    28f0:	96 e0       	ldi	r25, 0x06	; 6
    28f2:	0b c0       	rjmp	.+22     	; 0x290a <RTC_displayDay+0x4c>
          break; 
   case 4:transmitString_F(PSTR("Thursday"));
    28f4:	8c e4       	ldi	r24, 0x4C	; 76
    28f6:	96 e0       	ldi	r25, 0x06	; 6
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <RTC_displayDay+0x4c>
          break; 		  
   case 5:transmitString_F(PSTR("Friday"));
    28fa:	85 e4       	ldi	r24, 0x45	; 69
    28fc:	96 e0       	ldi	r25, 0x06	; 6
    28fe:	05 c0       	rjmp	.+10     	; 0x290a <RTC_displayDay+0x4c>
          break; 		  
   case 6:transmitString_F(PSTR("Saturday"));
    2900:	8c e3       	ldi	r24, 0x3C	; 60
    2902:	96 e0       	ldi	r25, 0x06	; 6
    2904:	02 c0       	rjmp	.+4      	; 0x290a <RTC_displayDay+0x4c>
          break; 
   default:	transmitString_F(PSTR("Unknown"));  
    2906:	84 e3       	ldi	r24, 0x34	; 52
    2908:	96 e0       	ldi	r25, 0x06	; 6
    290a:	0c 94 83 13 	jmp	0x2706	; 0x2706 <transmitString_F>

0000290e <RTC_displayDate>:
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
    290e:	0e 94 0d 14 	call	0x281a	; 0x281a <RTC_getDate>
  if(error) return 1;
    2912:	81 11       	cpse	r24, r1
    2914:	12 c0       	rjmp	.+36     	; 0x293a <RTC_displayDate+0x2c>
  
  TX_NEWLINE;
    2916:	8d e0       	ldi	r24, 0x0D	; 13
    2918:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    291c:	8a e0       	ldi	r24, 0x0A	; 10
    291e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Date:")); 
    2922:	8f e7       	ldi	r24, 0x7F	; 127
    2924:	96 e0       	ldi	r25, 0x06	; 6
    2926:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  transmitString(date);  
    292a:	8b eb       	ldi	r24, 0xBB	; 187
    292c:	92 e0       	ldi	r25, 0x02	; 2
    292e:	0e 94 94 13 	call	0x2728	; 0x2728 <transmitString>
  RTC_displayDay();  
    2932:	0e 94 5f 14 	call	0x28be	; 0x28be <RTC_displayDay>
  
  return 0; 
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	08 95       	ret
//****************************************************************** 
unsigned char RTC_displayDate(void)
{
  unsigned char error;
  error = RTC_getDate();
  if(error) return 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
  transmitString_F(PSTR("Date:")); 
  transmitString(date);  
  RTC_displayDay();  
  
  return 0; 
}
    293c:	08 95       	ret

0000293e <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    293e:	20 91 b6 02 	lds	r18, 0x02B6
    2942:	27 70       	andi	r18, 0x07	; 7
    2944:	80 e1       	ldi	r24, 0x10	; 16
    2946:	28 9f       	mul	r18, r24
    2948:	90 01       	movw	r18, r0
    294a:	11 24       	eor	r1, r1
    294c:	30 91 b7 02 	lds	r19, 0x02B7
    2950:	3f 70       	andi	r19, 0x0F	; 15
    2952:	32 2b       	or	r19, r18
    2954:	30 93 74 00 	sts	0x0074, r19
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    2958:	20 91 b3 02 	lds	r18, 0x02B3
    295c:	27 70       	andi	r18, 0x07	; 7
    295e:	80 e1       	ldi	r24, 0x10	; 16
    2960:	28 9f       	mul	r18, r24
    2962:	90 01       	movw	r18, r0
    2964:	11 24       	eor	r1, r1
    2966:	30 91 b4 02 	lds	r19, 0x02B4
    296a:	3f 70       	andi	r19, 0x0F	; 15
    296c:	32 2b       	or	r19, r18
    296e:	30 93 75 00 	sts	0x0075, r19
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    2972:	20 91 b0 02 	lds	r18, 0x02B0
    2976:	23 70       	andi	r18, 0x03	; 3
    2978:	80 e1       	ldi	r24, 0x10	; 16
    297a:	28 9f       	mul	r18, r24
    297c:	90 01       	movw	r18, r0
    297e:	11 24       	eor	r1, r1
    2980:	30 91 b1 02 	lds	r19, 0x02B1
    2984:	3f 70       	andi	r19, 0x0F	; 15
    2986:	32 2b       	or	r19, r18
    2988:	30 93 76 00 	sts	0x0076, r19
  DAY = date[10];
    298c:	20 91 c5 02 	lds	r18, 0x02C5
    2990:	20 93 77 00 	sts	0x0077, r18
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    2994:	20 91 bb 02 	lds	r18, 0x02BB
    2998:	23 70       	andi	r18, 0x03	; 3
    299a:	80 e1       	ldi	r24, 0x10	; 16
    299c:	28 9f       	mul	r18, r24
    299e:	90 01       	movw	r18, r0
    29a0:	11 24       	eor	r1, r1
    29a2:	30 91 bc 02 	lds	r19, 0x02BC
    29a6:	3f 70       	andi	r19, 0x0F	; 15
    29a8:	32 2b       	or	r19, r18
    29aa:	30 93 78 00 	sts	0x0078, r19
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    29ae:	20 91 be 02 	lds	r18, 0x02BE
    29b2:	82 2f       	mov	r24, r18
    29b4:	81 70       	andi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	24 e0       	ldi	r18, 0x04	; 4
    29ba:	88 0f       	add	r24, r24
    29bc:	99 1f       	adc	r25, r25
    29be:	2a 95       	dec	r18
    29c0:	e1 f7       	brne	.-8      	; 0x29ba <RTC_updateRegisters+0x7c>
    29c2:	90 91 bf 02 	lds	r25, 0x02BF
    29c6:	9f 70       	andi	r25, 0x0F	; 15
    29c8:	98 2b       	or	r25, r24
    29ca:	90 93 79 00 	sts	0x0079, r25
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    29ce:	80 91 c3 02 	lds	r24, 0x02C3
    29d2:	20 e1       	ldi	r18, 0x10	; 16
    29d4:	82 9f       	mul	r24, r18
    29d6:	c0 01       	movw	r24, r0
    29d8:	11 24       	eor	r1, r1
    29da:	90 91 c4 02 	lds	r25, 0x02C4
    29de:	9f 70       	andi	r25, 0x0F	; 15
    29e0:	98 2b       	or	r25, r24
    29e2:	90 93 7a 00 	sts	0x007A, r25
    29e6:	08 95       	ret

000029e8 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    29e8:	cf 93       	push	r28
    29ea:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    29ec:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <i2c_start>
   if(errorStatus == 1)
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	21 f4       	brne	.+8      	; 0x29fc <RTC_writeTime+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    29f4:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	 return(1);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	18 c0       	rjmp	.+48     	; 0x2a2c <RTC_writeTime+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    29fc:	80 ed       	ldi	r24, 0xD0	; 208
    29fe:	0e 94 02 17 	call	0x2e04	; 0x2e04 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	b9 f3       	breq	.-18     	; 0x29f4 <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x00);
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	0e 94 14 17 	call	0x2e28	; 0x2e28 <i2c_sendData>
   if(errorStatus == 1)
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	91 f3       	breq	.-28     	; 0x29f4 <RTC_writeTime+0xc>
    2a10:	c4 e7       	ldi	r28, 0x74	; 116
    2a12:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a14:	89 91       	ld	r24, Y+
    2a16:	0e 94 14 17 	call	0x2e28	; 0x2e28 <i2c_sendData>
   	  if(errorStatus == 1)
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	59 f3       	breq	.-42     	; 0x29f4 <RTC_writeTime+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	c7 37       	cpi	r28, 0x77	; 119
    2a22:	d8 07       	cpc	r29, r24
    2a24:	b9 f7       	brne	.-18     	; 0x2a14 <RTC_writeTime+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2a26:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	return(0);
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
}
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    2a36:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <i2c_start>
   if(errorStatus == 1)
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	21 f4       	brne	.+8      	; 0x2a46 <RTC_writeDate+0x14>
   {
     //transmitString_F(PSTR("RTC start1 failed.."));
   	 i2c_stop();
    2a3e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	 return(1);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	18 c0       	rjmp	.+48     	; 0x2a76 <RTC_writeDate+0x44>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    2a46:	80 ed       	ldi	r24, 0xD0	; 208
    2a48:	0e 94 02 17 	call	0x2e04	; 0x2e04 <i2c_sendAddress>
   
   if(errorStatus == 1)
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	b9 f3       	breq	.-18     	; 0x2a3e <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC sendAddress1 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   errorStatus = i2c_sendData(0x03);
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	0e 94 14 17 	call	0x2e28	; 0x2e28 <i2c_sendData>
   if(errorStatus == 1)
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 f3       	breq	.-28     	; 0x2a3e <RTC_writeDate+0xc>
    2a5a:	c7 e7       	ldi	r28, 0x77	; 119
    2a5c:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    2a5e:	89 91       	ld	r24, Y+
    2a60:	0e 94 14 17 	call	0x2e28	; 0x2e28 <i2c_sendData>
   	  if(errorStatus == 1)
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	59 f3       	breq	.-42     	; 0x2a3e <RTC_writeDate+0xc>
     //transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	cb 37       	cpi	r28, 0x7B	; 123
    2a6c:	d8 07       	cpc	r29, r24
    2a6e:	b9 f7       	brne	.-18     	; 0x2a5e <RTC_writeDate+0x2c>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    2a70:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <i2c_stop>
	return(0);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
}
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	08 95       	ret

00002a7c <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateTime(void)
{
    2a7c:	cf 93       	push	r28
  unsigned char data;
  TX_NEWLINE;
    2a7e:	8d e0       	ldi	r24, 0x0D	; 13
    2a80:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2a84:	8a e0       	ldi	r24, 0x0A	; 10
    2a86:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    2a8a:	80 e1       	ldi	r24, 0x10	; 16
    2a8c:	96 e0       	ldi	r25, 0x06	; 6
    2a8e:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    2a92:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2a96:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2a98:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x32)
    2a9c:	80 ed       	ldi	r24, 0xD0	; 208
    2a9e:	8c 0f       	add	r24, r28
    2aa0:	83 30       	cpi	r24, 0x03	; 3
    2aa2:	08 f0       	brcs	.+2      	; 0x2aa6 <RTC_updateTime+0x2a>
    2aa4:	65 c0       	rjmp	.+202    	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[0]= data;
    2aa6:	c0 93 b0 02 	sts	0x02B0, r28
	 
	data = receiveByte();
    2aaa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2aae:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2ab0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2ab4:	80 ed       	ldi	r24, 0xD0	; 208
    2ab6:	8c 0f       	add	r24, r28
    2ab8:	8a 30       	cpi	r24, 0x0A	; 10
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <RTC_updateTime+0x42>
    2abc:	59 c0       	rjmp	.+178    	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	time[1]= data;
    2abe:	c0 93 b1 02 	sts	0x02B1, r28
	
	transmitByte(':');
    2ac2:	8a e3       	ldi	r24, 0x3A	; 58
    2ac4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    2ac8:	80 91 b0 02 	lds	r24, 0x02B0
    2acc:	83 70       	andi	r24, 0x03	; 3
    2ace:	20 91 b1 02 	lds	r18, 0x02B1
    2ad2:	2f 70       	andi	r18, 0x0F	; 15
    2ad4:	3a e0       	ldi	r19, 0x0A	; 10
    2ad6:	83 9f       	mul	r24, r19
    2ad8:	c0 01       	movw	r24, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	82 0f       	add	r24, r18
    2ade:	91 1d       	adc	r25, r1
    2ae0:	48 97       	sbiw	r24, 0x18	; 24
    2ae2:	0c f0       	brlt	.+2      	; 0x2ae6 <RTC_updateTime+0x6a>
    2ae4:	45 c0       	rjmp	.+138    	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    2ae6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2aea:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2aec:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x35)
    2af0:	80 ed       	ldi	r24, 0xD0	; 208
    2af2:	8c 0f       	add	r24, r28
    2af4:	86 30       	cpi	r24, 0x06	; 6
    2af6:	e0 f5       	brcc	.+120    	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    2af8:	c0 93 b3 02 	sts	0x02B3, r28
	
	data = receiveByte();
    2afc:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2b00:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2b02:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2b06:	80 ed       	ldi	r24, 0xD0	; 208
    2b08:	8c 0f       	add	r24, r28
    2b0a:	8a 30       	cpi	r24, 0x0A	; 10
    2b0c:	88 f5       	brcc	.+98     	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    2b0e:	c0 93 b4 02 	sts	0x02B4, r28
	
	transmitByte(':');
    2b12:	8a e3       	ldi	r24, 0x3A	; 58
    2b14:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    2b18:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2b1c:	c8 2f       	mov	r28, r24
	 transmitByte(data);
    2b1e:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x35)
    2b22:	80 ed       	ldi	r24, 0xD0	; 208
    2b24:	8c 0f       	add	r24, r28
    2b26:	86 30       	cpi	r24, 0x06	; 6
    2b28:	18 f5       	brcc	.+70     	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    2b2a:	c0 93 b6 02 	sts	0x02B6, r28
	
	data = receiveByte();
    2b2e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2b32:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2b34:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2b38:	80 ed       	ldi	r24, 0xD0	; 208
    2b3a:	8c 0f       	add	r24, r28
    2b3c:	8a 30       	cpi	r24, 0x0A	; 10
    2b3e:	c0 f4       	brcc	.+48     	; 0x2b70 <RTC_updateTime+0xf4>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    2b40:	c0 93 b7 02 	sts	0x02B7, r28
	
	 	  
  RTC_updateRegisters(); 
    2b44:	0e 94 9f 14 	call	0x293e	; 0x293e <RTC_updateRegisters>
  data = RTC_writeTime();
    2b48:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <RTC_writeTime>
    2b4c:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    2b4e:	8d e0       	ldi	r24, 0x0D	; 13
    2b50:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2b54:	8a e0       	ldi	r24, 0x0A	; 10
    2b56:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  if(data == 0)
    2b5a:	c1 11       	cpse	r28, r1
    2b5c:	06 c0       	rjmp	.+12     	; 0x2b6a <RTC_updateTime+0xee>
  {     
  	 transmitString_F(PSTR("Time Updated sucessfully!")); 
    2b5e:	86 ef       	ldi	r24, 0xF6	; 246
    2b60:	95 e0       	ldi	r25, 0x05	; 5
    2b62:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
	 return 0;
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	0e c0       	rjmp	.+28     	; 0x2b86 <RTC_updateTime+0x10a>
  }	
  else 
  { 
     transmitString_F(PSTR("Time Update Failed.."));
    2b6a:	81 ee       	ldi	r24, 0xE1	; 225
    2b6c:	95 e0       	ldi	r25, 0x05	; 5
    2b6e:	08 c0       	rjmp	.+16     	; 0x2b80 <RTC_updateTime+0x104>
	 return 1;
  }
TIME_ERROR:

  TX_NEWLINE;
    2b70:	8d e0       	ldi	r24, 0x0D	; 13
    2b72:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2b76:	8a e0       	ldi	r24, 0x0A	; 10
    2b78:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2b7c:	81 ed       	ldi	r24, 0xD1	; 209
    2b7e:	95 e0       	ldi	r25, 0x05	; 5
    2b80:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  return 1;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
}  
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
unsigned char RTC_updateDate(void)
{
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
  unsigned char data;
  TX_NEWLINE;
    2b8e:	8d e0       	ldi	r24, 0x0D	; 13
    2b90:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2b94:	8a e0       	ldi	r24, 0x0A	; 10
    2b96:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    2b9a:	8a eb       	ldi	r24, 0xBA	; 186
    2b9c:	95 e0       	ldi	r25, 0x05	; 5
    2b9e:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    2ba2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2ba6:	c8 2f       	mov	r28, r24
	transmitByte(data); 	   	  	  				
    2ba8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x33)
    2bac:	80 ed       	ldi	r24, 0xD0	; 208
    2bae:	8c 0f       	add	r24, r28
    2bb0:	84 30       	cpi	r24, 0x04	; 4
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <RTC_updateDate+0x2c>
    2bb4:	95 c0       	rjmp	.+298    	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[0]= data;
    2bb6:	c0 93 bb 02 	sts	0x02BB, r28
	 
	data = receiveByte();
    2bba:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2bbe:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2bc0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2bc4:	80 ed       	ldi	r24, 0xD0	; 208
    2bc6:	8c 0f       	add	r24, r28
    2bc8:	8a 30       	cpi	r24, 0x0A	; 10
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <RTC_updateDate+0x44>
    2bcc:	89 c0       	rjmp	.+274    	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[1]= data;
    2bce:	c0 93 bc 02 	sts	0x02BC, r28
	
	if(((date[1] & 0x0f) + ((date[0] & 0x03)*10)) > 31)
    2bd2:	20 91 bb 02 	lds	r18, 0x02BB
    2bd6:	23 70       	andi	r18, 0x03	; 3
    2bd8:	cf 70       	andi	r28, 0x0F	; 15
    2bda:	8a e0       	ldi	r24, 0x0A	; 10
    2bdc:	28 9f       	mul	r18, r24
    2bde:	90 01       	movw	r18, r0
    2be0:	11 24       	eor	r1, r1
    2be2:	2c 0f       	add	r18, r28
    2be4:	31 1d       	adc	r19, r1
    2be6:	20 32       	cpi	r18, 0x20	; 32
    2be8:	31 05       	cpc	r19, r1
    2bea:	0c f0       	brlt	.+2      	; 0x2bee <RTC_updateDate+0x64>
    2bec:	79 c0       	rjmp	.+242    	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
    transmitByte('/');
    2bee:	8f e2       	ldi	r24, 0x2F	; 47
    2bf0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	
	date[2] = '/';
    2bf4:	df e2       	ldi	r29, 0x2F	; 47
    2bf6:	d0 93 bd 02 	sts	0x02BD, r29
	   
	
	data = receiveByte();			   			  //receive month
    2bfa:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2bfe:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2c00:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x31)
    2c04:	80 ed       	ldi	r24, 0xD0	; 208
    2c06:	8c 0f       	add	r24, r28
    2c08:	82 30       	cpi	r24, 0x02	; 2
    2c0a:	08 f0       	brcs	.+2      	; 0x2c0e <RTC_updateDate+0x84>
    2c0c:	69 c0       	rjmp	.+210    	; 0x2ce0 <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    2c0e:	c0 93 be 02 	sts	0x02BE, r28
	
	data = receiveByte();
    2c12:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2c16:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2c18:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2c1c:	80 ed       	ldi	r24, 0xD0	; 208
    2c1e:	8c 0f       	add	r24, r28
    2c20:	8a 30       	cpi	r24, 0x0A	; 10
    2c22:	08 f0       	brcs	.+2      	; 0x2c26 <RTC_updateDate+0x9c>
    2c24:	5d c0       	rjmp	.+186    	; 0x2ce0 <RTC_updateDate+0x156>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    2c26:	c0 93 bf 02 	sts	0x02BF, r28
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    2c2a:	20 91 be 02 	lds	r18, 0x02BE
    2c2e:	23 70       	andi	r18, 0x03	; 3
    2c30:	cf 70       	andi	r28, 0x0F	; 15
    2c32:	8a e0       	ldi	r24, 0x0A	; 10
    2c34:	28 9f       	mul	r18, r24
    2c36:	90 01       	movw	r18, r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	2c 0f       	add	r18, r28
    2c3c:	31 1d       	adc	r19, r1
    2c3e:	2d 30       	cpi	r18, 0x0D	; 13
    2c40:	31 05       	cpc	r19, r1
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <RTC_updateDate+0xbc>
    2c44:	4d c0       	rjmp	.+154    	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	transmitByte('/');
    2c46:	8f e2       	ldi	r24, 0x2F	; 47
    2c48:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	   
	
	date[5] = '/';
    2c4c:	d0 93 c0 02 	sts	0x02C0, r29
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    2c50:	82 e3       	ldi	r24, 0x32	; 50
    2c52:	80 93 c1 02 	sts	0x02C1, r24
	date[7] = '0';
    2c56:	80 e3       	ldi	r24, 0x30	; 48
    2c58:	80 93 c2 02 	sts	0x02C2, r24
	
	data = receiveByte();			   			 
    2c5c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2c60:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2c62:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2c66:	80 ed       	ldi	r24, 0xD0	; 208
    2c68:	8c 0f       	add	r24, r28
    2c6a:	8a 30       	cpi	r24, 0x0A	; 10
    2c6c:	c8 f5       	brcc	.+114    	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    2c6e:	c0 93 c3 02 	sts	0x02C3, r28
	
	data = receiveByte();
    2c72:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2c76:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2c78:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x39)
    2c7c:	80 ed       	ldi	r24, 0xD0	; 208
    2c7e:	8c 0f       	add	r24, r28
    2c80:	8a 30       	cpi	r24, 0x0A	; 10
    2c82:	70 f5       	brcc	.+92     	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    2c84:	c0 93 c4 02 	sts	0x02C4, r28
	
	TX_NEWLINE;
    2c88:	8d e0       	ldi	r24, 0x0D	; 13
    2c8a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2c8e:	8a e0       	ldi	r24, 0x0A	; 10
    2c90:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    2c94:	81 e9       	ldi	r24, 0x91	; 145
    2c96:	95 e0       	ldi	r25, 0x05	; 5
    2c98:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    2c9c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <receiveByte>
    2ca0:	c8 2f       	mov	r28, r24
	transmitByte(data);
    2ca2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
	if(data < 0x30 || data > 0x36)
    2ca6:	80 ed       	ldi	r24, 0xD0	; 208
    2ca8:	8c 0f       	add	r24, r28
    2caa:	87 30       	cpi	r24, 0x07	; 7
    2cac:	c8 f4       	brcc	.+50     	; 0x2ce0 <RTC_updateDate+0x156>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    2cae:	cf 70       	andi	r28, 0x0F	; 15
    2cb0:	c0 93 c5 02 	sts	0x02C5, r28
		 	  
  RTC_updateRegisters(); 
    2cb4:	0e 94 9f 14 	call	0x293e	; 0x293e <RTC_updateRegisters>
  data = RTC_writeDate();
    2cb8:	0e 94 19 15 	call	0x2a32	; 0x2a32 <RTC_writeDate>
    2cbc:	c8 2f       	mov	r28, r24

  TX_NEWLINE;
    2cbe:	8d e0       	ldi	r24, 0x0D	; 13
    2cc0:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2cc4:	8a e0       	ldi	r24, 0x0A	; 10
    2cc6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  if(data == 0)
    2cca:	c1 11       	cpse	r28, r1
    2ccc:	06 c0       	rjmp	.+12     	; 0x2cda <RTC_updateDate+0x150>
  {
     
  	 transmitString_F(PSTR("Date Updated sucessfully!")); 
    2cce:	87 e7       	ldi	r24, 0x77	; 119
    2cd0:	95 e0       	ldi	r25, 0x05	; 5
    2cd2:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
	 return 0;
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <RTC_updateDate+0x16c>
  }	  
  else
  {
     transmitString_F(PSTR("Date Update Failed.."));
    2cda:	82 e6       	ldi	r24, 0x62	; 98
    2cdc:	95 e0       	ldi	r25, 0x05	; 5
    2cde:	08 c0       	rjmp	.+16     	; 0x2cf0 <RTC_updateDate+0x166>
     return 1;
  }

  DATE_ERROR:

  TX_NEWLINE;
    2ce0:	8d e0       	ldi	r24, 0x0D	; 13
    2ce2:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
    2ce6:	8a e0       	ldi	r24, 0x0A	; 10
    2ce8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    2cec:	82 e5       	ldi	r24, 0x52	; 82
    2cee:	95 e0       	ldi	r25, 0x05	; 5
    2cf0:	0e 94 83 13 	call	0x2706	; 0x2706 <transmitString_F>
  return 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
}  
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret

00002cfc <getDateTime_FAT>:
{
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
    2cfc:	0e 94 a0 13 	call	0x2740	; 0x2740 <RTC_read>
   if(error) return 1;
    2d00:	81 11       	cpse	r24, r1
    2d02:	61 c0       	rjmp	.+194    	; 0x2dc6 <getDateTime_FAT+0xca>

   yr = (YEAR & 0xf0) >> 4;
    2d04:	80 91 7a 00 	lds	r24, 0x007A
    2d08:	68 2f       	mov	r22, r24
    2d0a:	62 95       	swap	r22
    2d0c:	6f 70       	andi	r22, 0x0F	; 15
   yr = (yr * 10)+(YEAR & 0x0f);
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	44 96       	adiw	r24, 0x14	; 20
   yr = yr+2000;
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
    2d14:	30 91 79 00 	lds	r19, 0x0079
    2d18:	53 2f       	mov	r21, r19
    2d1a:	52 95       	swap	r21
    2d1c:	5f 70       	andi	r21, 0x0F	; 15
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
    2d1e:	20 91 78 00 	lds	r18, 0x0078
    2d22:	42 2f       	mov	r20, r18
    2d24:	42 95       	swap	r20
    2d26:	4f 70       	andi	r20, 0x0F	; 15
   if(error) return 1;

   yr = (YEAR & 0xf0) >> 4;
   yr = (yr * 10)+(YEAR & 0x0f);
   yr = yr+2000;
   yr = yr - 1980;
    2d28:	7a e0       	ldi	r23, 0x0A	; 10
    2d2a:	67 9f       	mul	r22, r23
    2d2c:	80 0d       	add	r24, r0
    2d2e:	91 1d       	adc	r25, r1
    2d30:	11 24       	eor	r1, r1
   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	6a 95       	dec	r22
    2d3a:	e1 f7       	brne	.-8      	; 0x2d34 <getDateTime_FAT+0x38>
   yr = yr - 1980;

   dateFAT = yr;

   mth = (MONTH & 0xf0) >> 4;
   mth = (mth * 10)+(MONTH & 0x0f);
    2d3c:	3f 70       	andi	r19, 0x0F	; 15
    2d3e:	6a e0       	ldi	r22, 0x0A	; 10
    2d40:	56 9f       	mul	r21, r22
    2d42:	30 0d       	add	r19, r0
    2d44:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 4) | mth;
    2d46:	83 2b       	or	r24, r19

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);

   dateFAT = (dateFAT << 5) | dt;
    2d48:	75 e0       	ldi	r23, 0x05	; 5
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	7a 95       	dec	r23
    2d50:	e1 f7       	brne	.-8      	; 0x2d4a <getDateTime_FAT+0x4e>
   mth = (mth * 10)+(MONTH & 0x0f);

   dateFAT = (dateFAT << 4) | mth;

   dt = (DATE & 0xf0) >> 4;
   dt = (dt * 10)+(DATE & 0x0f);
    2d52:	2f 70       	andi	r18, 0x0F	; 15
    2d54:	7a e0       	ldi	r23, 0x0A	; 10
    2d56:	47 9f       	mul	r20, r23
    2d58:	20 0d       	add	r18, r0
    2d5a:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;
    2d5c:	82 2b       	or	r24, r18
    2d5e:	90 93 80 00 	sts	0x0080, r25
    2d62:	80 93 7f 00 	sts	0x007F, r24


   hr = (HOURS & 0xf0) >> 4;
    2d66:	80 91 76 00 	lds	r24, 0x0076
    2d6a:	98 2f       	mov	r25, r24
    2d6c:	92 95       	swap	r25
    2d6e:	9f 70       	andi	r25, 0x0F	; 15
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
    2d70:	30 91 75 00 	lds	r19, 0x0075
    2d74:	43 2f       	mov	r20, r19
    2d76:	42 95       	swap	r20
    2d78:	4f 70       	andi	r20, 0x0F	; 15
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
    2d7a:	20 91 74 00 	lds	r18, 0x0074
    2d7e:	52 2f       	mov	r21, r18
    2d80:	52 95       	swap	r21
    2d82:	5f 70       	andi	r21, 0x0F	; 15
   sec = (sec * 10)+(SECONDS & 0x0f);
    2d84:	2f 70       	andi	r18, 0x0F	; 15
    2d86:	6a e0       	ldi	r22, 0x0A	; 10
    2d88:	56 9f       	mul	r21, r22
    2d8a:	20 0d       	add	r18, r0
    2d8c:	11 24       	eor	r1, r1

   dateFAT = (dateFAT << 5) | dt;


   hr = (HOURS & 0xf0) >> 4;
   hr = (hr * 10)+(HOURS & 0x0f);
    2d8e:	8f 70       	andi	r24, 0x0F	; 15
    2d90:	7a e0       	ldi	r23, 0x0A	; 10
    2d92:	97 9f       	mul	r25, r23
    2d94:	80 0d       	add	r24, r0
    2d96:	11 24       	eor	r1, r1
   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);

   timeFAT = (timeFAT << 6) | min;
    2d98:	50 e4       	ldi	r21, 0x40	; 64
    2d9a:	85 9f       	mul	r24, r21
    2d9c:	c0 01       	movw	r24, r0
    2d9e:	11 24       	eor	r1, r1
   hr = (hr * 10)+(HOURS & 0x0f);

   timeFAT = hr;

   min = (MINUTES & 0xf0) >> 4;
   min = (min * 10)+(MINUTES & 0x0f);
    2da0:	3f 70       	andi	r19, 0x0F	; 15
    2da2:	6a e0       	ldi	r22, 0x0A	; 10
    2da4:	46 9f       	mul	r20, r22
    2da6:	30 0d       	add	r19, r0
    2da8:	11 24       	eor	r1, r1

   timeFAT = (timeFAT << 6) | min;
    2daa:	83 2b       	or	r24, r19

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)

   timeFAT = (timeFAT << 5) | sec;
    2dac:	e5 e0       	ldi	r30, 0x05	; 5
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	ea 95       	dec	r30
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <getDateTime_FAT+0xb2>

   timeFAT = (timeFAT << 6) | min;

   sec = (SECONDS & 0xf0) >> 4;
   sec = (sec * 10)+(SECONDS & 0x0f);
   sec = sec / 2;    //FAT32 fromat accepts dates with 2sec resolution (e.g. value 5 => 10sec)
    2db6:	26 95       	lsr	r18

   timeFAT = (timeFAT << 5) | sec;
    2db8:	82 2b       	or	r24, r18
    2dba:	90 93 94 00 	sts	0x0094, r25
    2dbe:	80 93 93 00 	sts	0x0093, r24

   
   return 0;
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	08 95       	ret
  
   unsigned char mth, dt, hr, min, sec, error; 
   unsigned int yr;

   error = RTC_read();
   if(error) return 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1

   timeFAT = (timeFAT << 5) | sec;

   
   return 0;
}
    2dc8:	08 95       	ret

00002dca <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz @16MHz)
//************************************************
void twi_init(void)
{
 TWCR= 0x00; //disable twi
    2dca:	16 be       	out	0x36, r1	; 54
 TWBR= 0x12; //set bit rate
    2dcc:	82 e1       	ldi	r24, 0x12	; 18
    2dce:	80 b9       	out	0x00, r24	; 0
 TWSR= 0x00; //set prescale
    2dd0:	11 b8       	out	0x01, r1	; 1
    2dd2:	08 95       	ret

00002dd4 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    2dd4:	84 ea       	ldi	r24, 0xA4	; 164
    2dd6:	86 bf       	out	0x36, r24	; 54
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    2dd8:	06 b6       	in	r0, 0x36	; 54
    2dda:	07 fe       	sbrs	r0, 7
    2ddc:	fd cf       	rjmp	.-6      	; 0x2dd8 <i2c_start+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    2dde:	91 b1       	in	r25, 0x01	; 1
    2de0:	98 7f       	andi	r25, 0xF8	; 248
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	98 30       	cpi	r25, 0x08	; 8
    2de6:	09 f4       	brne	.+2      	; 0x2dea <i2c_start+0x16>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    2dea:	08 95       	ret

00002dec <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    2dec:	84 ea       	ldi	r24, 0xA4	; 164
    2dee:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    2df0:	06 b6       	in	r0, 0x36	; 54
    2df2:	07 fe       	sbrs	r0, 7
    2df4:	fd cf       	rjmp	.-6      	; 0x2df0 <i2c_repeatStart+0x4>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    2df6:	91 b1       	in	r25, 0x01	; 1
    2df8:	98 7f       	andi	r25, 0xF8	; 248
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 31       	cpi	r25, 0x10	; 16
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <i2c_repeatStart+0x16>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
 	   return(0);
	else
	   return(1);
}
    2e02:	08 95       	ret

00002e04 <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    2e04:	80 fd       	sbrc	r24, 0
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
    2e08:	28 e1       	ldi	r18, 0x18	; 24
    2e0a:	01 c0       	rjmp	.+2      	; 0x2e0e <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
    2e0c:	20 e4       	ldi	r18, 0x40	; 64
   
   TWDR = address; 
    2e0e:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    2e10:	84 e8       	ldi	r24, 0x84	; 132
    2e12:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    2e14:	06 b6       	in	r0, 0x36	; 54
    2e16:	07 fe       	sbrs	r0, 7
    2e18:	fd cf       	rjmp	.-6      	; 0x2e14 <i2c_sendAddress+0x10>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    2e1a:	91 b1       	in	r25, 0x01	; 1
    2e1c:	98 7f       	andi	r25, 0xF8	; 248
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	92 13       	cpse	r25, r18
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <i2c_sendAddress+0x22>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
   	  return(0);
   else 
      return(1);
}
    2e26:	08 95       	ret

00002e28 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
    2e28:	83 b9       	out	0x03, r24	; 3
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    2e2a:	84 e8       	ldi	r24, 0x84	; 132
    2e2c:	86 bf       	out	0x36, r24	; 54
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    2e2e:	06 b6       	in	r0, 0x36	; 54
    2e30:	07 fe       	sbrs	r0, 7
    2e32:	fd cf       	rjmp	.-6      	; 0x2e2e <i2c_sendData+0x6>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    2e34:	91 b1       	in	r25, 0x01	; 1
    2e36:	98 7f       	andi	r25, 0xF8	; 248
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	98 32       	cpi	r25, 0x28	; 40
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <i2c_sendData+0x18>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
   	  return(1);
   else
      return(0);
}
    2e40:	08 95       	ret

00002e42 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    2e42:	84 ec       	ldi	r24, 0xC4	; 196
    2e44:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    2e46:	06 b6       	in	r0, 0x36	; 54
    2e48:	07 fe       	sbrs	r0, 7
    2e4a:	fd cf       	rjmp	.-6      	; 0x2e46 <i2c_receiveData_ACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    2e4c:	81 b1       	in	r24, 0x01	; 1
    2e4e:	88 7f       	andi	r24, 0xF8	; 248
    2e50:	80 35       	cpi	r24, 0x50	; 80
    2e52:	11 f4       	brne	.+4      	; 0x2e58 <i2c_receiveData_ACK+0x16>
   	  return(ERROR_CODE);
  
  data = TWDR;
    2e54:	83 b1       	in	r24, 0x03	; 3
  return(data);
    2e56:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    2e58:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    2e5a:	08 95       	ret

00002e5c <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    2e5c:	84 e8       	ldi	r24, 0x84	; 132
    2e5e:	86 bf       	out	0x36, r24	; 54
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    2e60:	06 b6       	in	r0, 0x36	; 54
    2e62:	07 fe       	sbrs	r0, 7
    2e64:	fd cf       	rjmp	.-6      	; 0x2e60 <i2c_receiveData_NACK+0x4>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    2e66:	81 b1       	in	r24, 0x01	; 1
    2e68:	88 7f       	andi	r24, 0xF8	; 248
    2e6a:	88 35       	cpi	r24, 0x58	; 88
    2e6c:	11 f4       	brne	.+4      	; 0x2e72 <i2c_receiveData_NACK+0x16>
   	  return(ERROR_CODE);
  
  data = TWDR;
    2e6e:	83 b1       	in	r24, 0x03	; 3
  return(data);
    2e70:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    2e72:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    2e74:	08 95       	ret

00002e76 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    2e76:	84 e9       	ldi	r24, 0x94	; 148
    2e78:	86 bf       	out	0x36, r24	; 54
    2e7a:	08 95       	ret

00002e7c <__mulsi3>:
    2e7c:	db 01       	movw	r26, r22
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__muluhisi3>
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	a2 9f       	mul	r26, r18
    2e8c:	80 0d       	add	r24, r0
    2e8e:	91 1d       	adc	r25, r1
    2e90:	a3 9f       	mul	r26, r19
    2e92:	90 0d       	add	r25, r0
    2e94:	b2 9f       	mul	r27, r18
    2e96:	90 0d       	add	r25, r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	08 95       	ret

00002e9c <__udivmodsi4>:
    2e9c:	a1 e2       	ldi	r26, 0x21	; 33
    2e9e:	1a 2e       	mov	r1, r26
    2ea0:	aa 1b       	sub	r26, r26
    2ea2:	bb 1b       	sub	r27, r27
    2ea4:	fd 01       	movw	r30, r26
    2ea6:	0d c0       	rjmp	.+26     	; 0x2ec2 <__udivmodsi4_ep>

00002ea8 <__udivmodsi4_loop>:
    2ea8:	aa 1f       	adc	r26, r26
    2eaa:	bb 1f       	adc	r27, r27
    2eac:	ee 1f       	adc	r30, r30
    2eae:	ff 1f       	adc	r31, r31
    2eb0:	a2 17       	cp	r26, r18
    2eb2:	b3 07       	cpc	r27, r19
    2eb4:	e4 07       	cpc	r30, r20
    2eb6:	f5 07       	cpc	r31, r21
    2eb8:	20 f0       	brcs	.+8      	; 0x2ec2 <__udivmodsi4_ep>
    2eba:	a2 1b       	sub	r26, r18
    2ebc:	b3 0b       	sbc	r27, r19
    2ebe:	e4 0b       	sbc	r30, r20
    2ec0:	f5 0b       	sbc	r31, r21

00002ec2 <__udivmodsi4_ep>:
    2ec2:	66 1f       	adc	r22, r22
    2ec4:	77 1f       	adc	r23, r23
    2ec6:	88 1f       	adc	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	1a 94       	dec	r1
    2ecc:	69 f7       	brne	.-38     	; 0x2ea8 <__udivmodsi4_loop>
    2ece:	60 95       	com	r22
    2ed0:	70 95       	com	r23
    2ed2:	80 95       	com	r24
    2ed4:	90 95       	com	r25
    2ed6:	9b 01       	movw	r18, r22
    2ed8:	ac 01       	movw	r20, r24
    2eda:	bd 01       	movw	r22, r26
    2edc:	cf 01       	movw	r24, r30
    2ede:	08 95       	ret

00002ee0 <__tablejump2__>:
    2ee0:	ee 0f       	add	r30, r30
    2ee2:	ff 1f       	adc	r31, r31

00002ee4 <__tablejump__>:
    2ee4:	05 90       	lpm	r0, Z+
    2ee6:	f4 91       	lpm	r31, Z
    2ee8:	e0 2d       	mov	r30, r0
    2eea:	09 94       	ijmp

00002eec <__umulhisi3>:
    2eec:	a2 9f       	mul	r26, r18
    2eee:	b0 01       	movw	r22, r0
    2ef0:	b3 9f       	mul	r27, r19
    2ef2:	c0 01       	movw	r24, r0
    2ef4:	a3 9f       	mul	r26, r19
    2ef6:	70 0d       	add	r23, r0
    2ef8:	81 1d       	adc	r24, r1
    2efa:	11 24       	eor	r1, r1
    2efc:	91 1d       	adc	r25, r1
    2efe:	b2 9f       	mul	r27, r18
    2f00:	70 0d       	add	r23, r0
    2f02:	81 1d       	adc	r24, r1
    2f04:	11 24       	eor	r1, r1
    2f06:	91 1d       	adc	r25, r1
    2f08:	08 95       	ret

00002f0a <__muluhisi3>:
    2f0a:	0e 94 76 17 	call	0x2eec	; 0x2eec <__umulhisi3>
    2f0e:	a5 9f       	mul	r26, r21
    2f10:	90 0d       	add	r25, r0
    2f12:	b4 9f       	mul	r27, r20
    2f14:	90 0d       	add	r25, r0
    2f16:	a4 9f       	mul	r26, r20
    2f18:	80 0d       	add	r24, r0
    2f1a:	91 1d       	adc	r25, r1
    2f1c:	11 24       	eor	r1, r1
    2f1e:	08 95       	ret

00002f20 <_exit>:
    2f20:	f8 94       	cli

00002f22 <__stop_program>:
    2f22:	ff cf       	rjmp	.-2      	; 0x2f22 <__stop_program>
