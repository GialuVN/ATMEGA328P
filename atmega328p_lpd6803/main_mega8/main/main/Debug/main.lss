
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000015d4  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000258  00800064  00800064  0000166c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002992  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000637  00000000  00000000  00004142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f8  00000000  00000000  00004779  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00005974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  00005d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ed4  00000000  00000000  00006139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000900d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
       4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
       6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
       8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
       a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
       c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
       e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
      10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
      12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
      14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
      16:	2a c0       	rjmp	.+84     	; 0x6c <__bad_interrupt>
      18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
      1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
      1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
      1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
      20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
      22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
      24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
      26:	ce c0       	rjmp	.+412    	; 0x1c4 <base_convert+0x12>
      28:	d1 c0       	rjmp	.+418    	; 0x1cc <base_convert+0x1a>
      2a:	d4 c0       	rjmp	.+424    	; 0x1d4 <base_convert+0x22>
      2c:	d7 c0       	rjmp	.+430    	; 0x1dc <base_convert+0x2a>
      2e:	da c0       	rjmp	.+436    	; 0x1e4 <base_convert+0x32>
      30:	e4 c0       	rjmp	.+456    	; 0x1fa <base_convert+0x48>
      32:	dc c0       	rjmp	.+440    	; 0x1ec <base_convert+0x3a>
      34:	df c0       	rjmp	.+446    	; 0x1f4 <base_convert+0x42>

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf e5       	ldi	r28, 0x5F	; 95
      3c:	d4 e0       	ldi	r29, 0x04	; 4
      3e:	de bf       	out	0x3e, r29	; 62
      40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_clear_bss>:
      42:	22 e0       	ldi	r18, 0x02	; 2
      44:	a4 e6       	ldi	r26, 0x64	; 100
      46:	b0 e0       	ldi	r27, 0x00	; 0
      48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
      4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
      4c:	ac 3b       	cpi	r26, 0xBC	; 188
      4e:	b2 07       	cpc	r27, r18
      50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>

00000052 <__do_copy_data>:
      52:	10 e0       	ldi	r17, 0x00	; 0
      54:	a0 e6       	ldi	r26, 0x60	; 96
      56:	b0 e0       	ldi	r27, 0x00	; 0
      58:	e4 ed       	ldi	r30, 0xD4	; 212
      5a:	f5 e1       	ldi	r31, 0x15	; 21
      5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
      5e:	05 90       	lpm	r0, Z+
      60:	0d 92       	st	X+, r0
      62:	a4 36       	cpi	r26, 0x64	; 100
      64:	b1 07       	cpc	r27, r17
      66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>
      68:	c6 d8       	rcall	.-3700   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
      6a:	b2 ca       	rjmp	.-2716   	; 0xfffff5d0 <__eeprom_end+0xff7ef5d0>

0000006c <__bad_interrupt>:
      6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <lpd6803_config_pin>:


void lpd6803_config_pin()
{
	//ck,da,la ouput pin
	CK_DDR |=1<<CK_PIN;
      6e:	a2 9a       	sbi	0x14, 2	; 20
	DT_DDR |=1<<DT_PIN;
      70:	a3 9a       	sbi	0x14, 3	; 20
	//da, out level 0
	DT_POR &=~(1<<DT_PIN);
      72:	ab 98       	cbi	0x15, 3	; 21
	CK_POR  &=~(1<<CK_PIN);
      74:	aa 98       	cbi	0x15, 2	; 21
      76:	08 95       	ret

00000078 <lpd6803_start_farme>:
}

void lpd6803_start_farme()
{
	CK_POR &=~(1<<CK_PIN);
      78:	aa 98       	cbi	0x15, 2	; 21
	DT_POR &=~(1<<DT_PIN);
      7a:	ab 98       	cbi	0x15, 3	; 21
      7c:	80 e2       	ldi	r24, 0x20	; 32
	
	for (uint8_t i=0;i<32;i++)
	{
		CK_POR |=1<<CK_PIN;
      7e:	aa 9a       	sbi	0x15, 2	; 21
		CK_POR &=~(1<<CK_PIN);
      80:	aa 98       	cbi	0x15, 2	; 21
      82:	81 50       	subi	r24, 0x01	; 1
void lpd6803_start_farme()
{
	CK_POR &=~(1<<CK_PIN);
	DT_POR &=~(1<<DT_PIN);
	
	for (uint8_t i=0;i<32;i++)
      84:	e1 f7       	brne	.-8      	; 0x7e <lpd6803_start_farme+0x6>
	{
		CK_POR |=1<<CK_PIN;
		CK_POR &=~(1<<CK_PIN);
	}
}
      86:	08 95       	ret

00000088 <lpd_6803_npulse>:

void lpd_6803_npulse(uint16_t npulse)
{
	CK_POR &=~(1<<CK_PIN);
      88:	aa 98       	cbi	0x15, 2	; 21
	DT_POR &=~(1<<DT_PIN);
      8a:	ab 98       	cbi	0x15, 3	; 21
	for (uint16_t i=0;i<npulse;i++)
      8c:	00 97       	sbiw	r24, 0x00	; 0
      8e:	49 f0       	breq	.+18     	; 0xa2 <lpd_6803_npulse+0x1a>
      90:	20 e0       	ldi	r18, 0x00	; 0
      92:	30 e0       	ldi	r19, 0x00	; 0
	{
		CK_POR |=1<<CK_PIN;
      94:	aa 9a       	sbi	0x15, 2	; 21
		CK_POR &=~(1<<CK_PIN);
      96:	aa 98       	cbi	0x15, 2	; 21

void lpd_6803_npulse(uint16_t npulse)
{
	CK_POR &=~(1<<CK_PIN);
	DT_POR &=~(1<<DT_PIN);
	for (uint16_t i=0;i<npulse;i++)
      98:	2f 5f       	subi	r18, 0xFF	; 255
      9a:	3f 4f       	sbci	r19, 0xFF	; 255
      9c:	28 17       	cp	r18, r24
      9e:	39 07       	cpc	r19, r25
      a0:	c9 f7       	brne	.-14     	; 0x94 <lpd_6803_npulse+0xc>
      a2:	08 95       	ret

000000a4 <lpd6803_rgb>:

void lpd6803_rgb(uint8_t red,uint8_t green,uint8_t blue)
{
	uint8_t mask;
	//out 1 = start
	DT_POR |=1<<DT_PIN;
      a4:	ab 9a       	sbi	0x15, 3	; 21
	CK_POR |=1<<CK_PIN;
      a6:	aa 9a       	sbi	0x15, 2	; 21
	CK_POR &=~(1<<CK_PIN);
      a8:	aa 98       	cbi	0x15, 2	; 21
      aa:	25 e0       	ldi	r18, 0x05	; 5
	mask = 0x10;
      ac:	90 e1       	ldi	r25, 0x10	; 16
	for (uint8_t i = 0;i<5;i++)
	{
		if(mask &red) DT_POR |=1<<DT_PIN;
      ae:	39 2f       	mov	r19, r25
      b0:	38 23       	and	r19, r24
      b2:	11 f0       	breq	.+4      	; 0xb8 <lpd6803_rgb+0x14>
      b4:	ab 9a       	sbi	0x15, 3	; 21
      b6:	01 c0       	rjmp	.+2      	; 0xba <lpd6803_rgb+0x16>
		else DT_POR &=~(1<<DT_PIN);
      b8:	ab 98       	cbi	0x15, 3	; 21
		CK_POR |=1<<CK_PIN;
      ba:	aa 9a       	sbi	0x15, 2	; 21
		CK_POR &=~(1<<CK_PIN);
      bc:	aa 98       	cbi	0x15, 2	; 21
		mask>>=1; 
      be:	96 95       	lsr	r25
      c0:	21 50       	subi	r18, 0x01	; 1
	//out 1 = start
	DT_POR |=1<<DT_PIN;
	CK_POR |=1<<CK_PIN;
	CK_POR &=~(1<<CK_PIN);
	mask = 0x10;
	for (uint8_t i = 0;i<5;i++)
      c2:	a9 f7       	brne	.-22     	; 0xae <lpd6803_rgb+0xa>
      c4:	95 e0       	ldi	r25, 0x05	; 5
      c6:	80 e1       	ldi	r24, 0x10	; 16
		mask>>=1; 
	}
	mask = 0x10;
	for (uint8_t i = 0;i<5;i++)
	{
		if(mask &green) DT_POR |=1<<DT_PIN;
      c8:	28 2f       	mov	r18, r24
      ca:	26 23       	and	r18, r22
      cc:	11 f0       	breq	.+4      	; 0xd2 <lpd6803_rgb+0x2e>
      ce:	ab 9a       	sbi	0x15, 3	; 21
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <lpd6803_rgb+0x30>
		else DT_POR &=~(1<<DT_PIN);
      d2:	ab 98       	cbi	0x15, 3	; 21
		CK_POR |=1<<CK_PIN;
      d4:	aa 9a       	sbi	0x15, 2	; 21
		CK_POR &=~(1<<CK_PIN);
      d6:	aa 98       	cbi	0x15, 2	; 21
		mask>>=1; 
      d8:	86 95       	lsr	r24
      da:	91 50       	subi	r25, 0x01	; 1
		CK_POR |=1<<CK_PIN;
		CK_POR &=~(1<<CK_PIN);
		mask>>=1; 
	}
	mask = 0x10;
	for (uint8_t i = 0;i<5;i++)
      dc:	a9 f7       	brne	.-22     	; 0xc8 <lpd6803_rgb+0x24>
      de:	95 e0       	ldi	r25, 0x05	; 5
      e0:	80 e1       	ldi	r24, 0x10	; 16
		mask>>=1; 
	}
	mask = 0x10;
	for (uint8_t i = 0;i<5;i++)
	{
		if(mask &blue) DT_POR |=1<<DT_PIN;
      e2:	28 2f       	mov	r18, r24
      e4:	24 23       	and	r18, r20
      e6:	11 f0       	breq	.+4      	; 0xec <lpd6803_rgb+0x48>
      e8:	ab 9a       	sbi	0x15, 3	; 21
      ea:	01 c0       	rjmp	.+2      	; 0xee <lpd6803_rgb+0x4a>
		else DT_POR &=~(1<<DT_PIN);
      ec:	ab 98       	cbi	0x15, 3	; 21
		CK_POR |=1<<CK_PIN;
      ee:	aa 9a       	sbi	0x15, 2	; 21
		CK_POR &=~(1<<CK_PIN);
      f0:	aa 98       	cbi	0x15, 2	; 21
		mask>>=1;
      f2:	86 95       	lsr	r24
      f4:	91 50       	subi	r25, 0x01	; 1
		CK_POR |=1<<CK_PIN;
		CK_POR &=~(1<<CK_PIN);
		mask>>=1; 
	}
	mask = 0x10;
	for (uint8_t i = 0;i<5;i++)
      f6:	a9 f7       	brne	.-22     	; 0xe2 <lpd6803_rgb+0x3e>
		else DT_POR &=~(1<<DT_PIN);
		CK_POR |=1<<CK_PIN;
		CK_POR &=~(1<<CK_PIN);
		mask>>=1;
	}
}
      f8:	08 95       	ret

000000fa <out_to_lpd>:
	Color_pack tem_color;
	tem_color.Color.Red = R;
	tem_color.Color.Green = G;
	tem_color.Color.Blue = B;
	return tem_color;
}
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	e8 2e       	mov	r14, r24
     108:	f9 2e       	mov	r15, r25
     10a:	8b 01       	movw	r16, r22
     10c:	b5 df       	rcall	.-150    	; 0x78 <lpd6803_start_farme>
     10e:	01 15       	cp	r16, r1
     110:	11 05       	cpc	r17, r1
     112:	e1 f0       	breq	.+56     	; 0x14c <out_to_lpd+0x52>
     114:	ce 2d       	mov	r28, r14
     116:	df 2d       	mov	r29, r15
     118:	e1 2c       	mov	r14, r1
     11a:	f1 2c       	mov	r15, r1
     11c:	99 81       	ldd	r25, Y+1	; 0x01
     11e:	49 2f       	mov	r20, r25
     120:	46 95       	lsr	r20
     122:	46 95       	lsr	r20
     124:	4f 71       	andi	r20, 0x1F	; 31
     126:	88 81       	ld	r24, Y
     128:	68 2f       	mov	r22, r24
     12a:	62 95       	swap	r22
     12c:	66 95       	lsr	r22
     12e:	67 70       	andi	r22, 0x07	; 7
     130:	93 70       	andi	r25, 0x03	; 3
     132:	99 0f       	add	r25, r25
     134:	99 0f       	add	r25, r25
     136:	99 0f       	add	r25, r25
     138:	69 2b       	or	r22, r25
     13a:	8f 71       	andi	r24, 0x1F	; 31
     13c:	b3 df       	rcall	.-154    	; 0xa4 <lpd6803_rgb>
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	e8 1a       	sub	r14, r24
     142:	f8 0a       	sbc	r15, r24
     144:	22 96       	adiw	r28, 0x02	; 2
     146:	e0 16       	cp	r14, r16
     148:	f1 06       	cpc	r15, r17
     14a:	41 f7       	brne	.-48     	; 0x11c <out_to_lpd+0x22>
     14c:	c8 01       	movw	r24, r16
     14e:	9c df       	rcall	.-200    	; 0x88 <lpd_6803_npulse>
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	1f 91       	pop	r17
     156:	0f 91       	pop	r16
     158:	ff 90       	pop	r15
     15a:	ef 90       	pop	r14
     15c:	08 95       	ret

0000015e <set_base_color>:
     15e:	ef 92       	push	r14
     160:	0f 93       	push	r16
     162:	2f 71       	andi	r18, 0x1F	; 31
     164:	0f 71       	andi	r16, 0x1F	; 31
     166:	ae 2d       	mov	r26, r14
     168:	af 71       	andi	r26, 0x1F	; 31
     16a:	46 17       	cp	r20, r22
     16c:	57 07       	cpc	r21, r23
     16e:	f0 f0       	brcs	.+60     	; 0x1ac <set_base_color+0x4e>
     170:	fb 01       	movw	r30, r22
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	e8 0f       	add	r30, r24
     178:	f9 1f       	adc	r31, r25
     17a:	2f 71       	andi	r18, 0x1F	; 31
     17c:	30 2f       	mov	r19, r16
     17e:	32 95       	swap	r19
     180:	33 0f       	add	r19, r19
     182:	30 7e       	andi	r19, 0xE0	; 224
     184:	06 95       	lsr	r16
     186:	06 95       	lsr	r16
     188:	06 95       	lsr	r16
     18a:	ea 2e       	mov	r14, r26
     18c:	ee 0c       	add	r14, r14
     18e:	ee 0c       	add	r14, r14
     190:	82 2f       	mov	r24, r18
     192:	83 2b       	or	r24, r19
     194:	80 83       	st	Z, r24
     196:	91 81       	ldd	r25, Z+1	; 0x01
     198:	90 78       	andi	r25, 0x80	; 128
     19a:	90 2b       	or	r25, r16
     19c:	9e 29       	or	r25, r14
     19e:	91 83       	std	Z+1, r25	; 0x01
     1a0:	6f 5f       	subi	r22, 0xFF	; 255
     1a2:	7f 4f       	sbci	r23, 0xFF	; 255
     1a4:	32 96       	adiw	r30, 0x02	; 2
     1a6:	46 17       	cp	r20, r22
     1a8:	57 07       	cpc	r21, r23
     1aa:	90 f7       	brcc	.-28     	; 0x190 <set_base_color+0x32>
     1ac:	0f 91       	pop	r16
     1ae:	ef 90       	pop	r14
     1b0:	08 95       	ret

000001b2 <base_convert>:
     1b2:	48 2f       	mov	r20, r24
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	48 30       	cpi	r20, 0x08	; 8
     1b8:	51 05       	cpc	r21, r1
     1ba:	f8 f4       	brcc	.+62     	; 0x1fa <base_convert+0x48>
     1bc:	fa 01       	movw	r30, r20
     1be:	ed 5e       	subi	r30, 0xED	; 237
     1c0:	ff 4f       	sbci	r31, 0xFF	; 255
     1c2:	09 94       	ijmp
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	17 c0       	rjmp	.+46     	; 0x1fa <base_convert+0x48>
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	3f e1       	ldi	r19, 0x1F	; 31
     1d2:	13 c0       	rjmp	.+38     	; 0x1fa <base_convert+0x48>
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	9f e1       	ldi	r25, 0x1F	; 31
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	0f c0       	rjmp	.+30     	; 0x1fa <base_convert+0x48>
     1dc:	2f e1       	ldi	r18, 0x1F	; 31
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	0b c0       	rjmp	.+22     	; 0x1fa <base_convert+0x48>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	9f e1       	ldi	r25, 0x1F	; 31
     1e8:	3f e1       	ldi	r19, 0x1F	; 31
     1ea:	07 c0       	rjmp	.+14     	; 0x1fa <base_convert+0x48>
     1ec:	2f e1       	ldi	r18, 0x1F	; 31
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	3f e1       	ldi	r19, 0x1F	; 31
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <base_convert+0x48>
     1f4:	2f e1       	ldi	r18, 0x1F	; 31
     1f6:	9f e1       	ldi	r25, 0x1F	; 31
     1f8:	3f e1       	ldi	r19, 0x1F	; 31
     1fa:	49 2f       	mov	r20, r25
     1fc:	42 95       	swap	r20
     1fe:	44 0f       	add	r20, r20
     200:	40 7e       	andi	r20, 0xE0	; 224
     202:	83 2f       	mov	r24, r19
     204:	8f 71       	andi	r24, 0x1F	; 31
     206:	96 95       	lsr	r25
     208:	96 95       	lsr	r25
     20a:	96 95       	lsr	r25
     20c:	2f 71       	andi	r18, 0x1F	; 31
     20e:	22 0f       	add	r18, r18
     210:	22 0f       	add	r18, r18
     212:	93 70       	andi	r25, 0x03	; 3
     214:	84 2b       	or	r24, r20
     216:	92 2b       	or	r25, r18
     218:	08 95       	ret

0000021a <rotatal>:

void rotatal(Color_pack *rgb,uint16_t first_point,uint16_t last_point,uint8_t direct)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
	Color_pack _buff;
	uint16_t _num = last_point - first_point;
     21e:	ea 01       	movw	r28, r20
     220:	c6 1b       	sub	r28, r22
     222:	d7 0b       	sbc	r29, r23
	
	if (direct==0)
     224:	21 11       	cpse	r18, r1
     226:	1d c0       	rjmp	.+58     	; 0x262 <rotatal+0x48>
	{
		
		_buff=rgb[first_point];
     228:	fb 01       	movw	r30, r22
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e8 0f       	add	r30, r24
     230:	f9 1f       	adc	r31, r25
     232:	a0 81       	ld	r26, Z
     234:	b1 81       	ldd	r27, Z+1	; 0x01
		for (uint16_t i = 0;i<_num;i++)
     236:	cd 2b       	or	r28, r29
     238:	61 f0       	breq	.+24     	; 0x252 <rotatal+0x38>
     23a:	ba 01       	movw	r22, r20
     23c:	66 0f       	add	r22, r22
     23e:	77 1f       	adc	r23, r23
     240:	68 0f       	add	r22, r24
     242:	79 1f       	adc	r23, r25
			{
				rgb[first_point]= rgb[first_point+1];
     244:	22 81       	ldd	r18, Z+2	; 0x02
     246:	33 81       	ldd	r19, Z+3	; 0x03
     248:	21 93       	st	Z+, r18
     24a:	31 93       	st	Z+, r19
	
	if (direct==0)
	{
		
		_buff=rgb[first_point];
		for (uint16_t i = 0;i<_num;i++)
     24c:	e6 17       	cp	r30, r22
     24e:	f7 07       	cpc	r31, r23
     250:	c9 f7       	brne	.-14     	; 0x244 <rotatal+0x2a>
			{
				rgb[first_point]= rgb[first_point+1];
				first_point++;
			}
				rgb[last_point] = _buff;
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	fc 01       	movw	r30, r24
     258:	e4 0f       	add	r30, r20
     25a:	f5 1f       	adc	r31, r21
     25c:	b1 83       	std	Z+1, r27	; 0x01
     25e:	a0 83       	st	Z, r26
     260:	1c c0       	rjmp	.+56     	; 0x29a <rotatal+0x80>
	}
	
	else
	{
		_buff=rgb[last_point];
     262:	fa 01       	movw	r30, r20
     264:	ee 0f       	add	r30, r30
     266:	ff 1f       	adc	r31, r31
     268:	e8 0f       	add	r30, r24
     26a:	f9 1f       	adc	r31, r25
     26c:	a0 81       	ld	r26, Z
     26e:	b1 81       	ldd	r27, Z+1	; 0x01
		
		for (uint16_t i = 0;i<_num;i++)
     270:	cd 2b       	or	r28, r29
     272:	61 f0       	breq	.+24     	; 0x28c <rotatal+0x72>
     274:	ab 01       	movw	r20, r22
     276:	44 0f       	add	r20, r20
     278:	55 1f       	adc	r21, r21
     27a:	48 0f       	add	r20, r24
     27c:	59 1f       	adc	r21, r25
			{
				rgb[last_point]= rgb[last_point-1];
     27e:	32 91       	ld	r19, -Z
     280:	22 91       	ld	r18, -Z
     282:	33 83       	std	Z+3, r19	; 0x03
     284:	22 83       	std	Z+2, r18	; 0x02
	
	else
	{
		_buff=rgb[last_point];
		
		for (uint16_t i = 0;i<_num;i++)
     286:	e4 17       	cp	r30, r20
     288:	f5 07       	cpc	r31, r21
     28a:	c9 f7       	brne	.-14     	; 0x27e <rotatal+0x64>
			{
				rgb[last_point]= rgb[last_point-1];
				last_point--;
			}
				rgb[first_point] = _buff;
     28c:	66 0f       	add	r22, r22
     28e:	77 1f       	adc	r23, r23
     290:	fc 01       	movw	r30, r24
     292:	e6 0f       	add	r30, r22
     294:	f7 1f       	adc	r31, r23
     296:	b1 83       	std	Z+1, r27	; 0x01
     298:	a0 83       	st	Z, r26
	}
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <gen_two_color>:
}



void gen_two_color(Color_pack *rgb,uint16_t first_point,uint16_t last_point,Color_pack cl1,Color_pack cl2,uint8_t speed, uint8_t len,uint16_t loop,uint8_t style)
{
     2a0:	2f 92       	push	r2
     2a2:	3f 92       	push	r3
     2a4:	4f 92       	push	r4
     2a6:	5f 92       	push	r5
     2a8:	6f 92       	push	r6
     2aa:	7f 92       	push	r7
     2ac:	8f 92       	push	r8
     2ae:	9f 92       	push	r9
     2b0:	af 92       	push	r10
     2b2:	bf 92       	push	r11
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	2c 97       	sbiw	r28, 0x0c	; 12
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
		uint16_t _num = last_point - first_point;
     2d4:	fa 01       	movw	r30, r20
     2d6:	e6 1b       	sub	r30, r22
     2d8:	f7 0b       	sbc	r31, r23
		
		if ((cl1.Color.Blue==cl2.Color.Blue)&&(cl1.Color.Red==cl2.Color.Red)&&(cl1.Color.Green==cl2.Color.Green)) return;
     2da:	b1 2f       	mov	r27, r17
     2dc:	b3 27       	eor	r27, r19
     2de:	bc 77       	andi	r27, 0x7C	; 124
     2e0:	e1 f4       	brne	.+56     	; 0x31a <gen_two_color+0x7a>
     2e2:	a0 2f       	mov	r26, r16
     2e4:	a2 27       	eor	r26, r18
     2e6:	af 71       	andi	r26, 0x1F	; 31
     2e8:	c1 f4       	brne	.+48     	; 0x31a <gen_two_color+0x7a>
     2ea:	b3 2f       	mov	r27, r19
     2ec:	b3 70       	andi	r27, 0x03	; 3
     2ee:	bb 0f       	add	r27, r27
     2f0:	bb 0f       	add	r27, r27
     2f2:	bb 0f       	add	r27, r27
     2f4:	a2 2f       	mov	r26, r18
     2f6:	a2 95       	swap	r26
     2f8:	a6 95       	lsr	r26
     2fa:	a7 70       	andi	r26, 0x07	; 7
     2fc:	ba 2b       	or	r27, r26
     2fe:	a1 2f       	mov	r26, r17
     300:	a3 70       	andi	r26, 0x03	; 3
     302:	fa 2e       	mov	r15, r26
     304:	ff 0c       	add	r15, r15
     306:	ff 0c       	add	r15, r15
     308:	ff 0c       	add	r15, r15
     30a:	a0 2f       	mov	r26, r16
     30c:	a2 95       	swap	r26
     30e:	a6 95       	lsr	r26
     310:	a7 70       	andi	r26, 0x07	; 7
     312:	af 29       	or	r26, r15
     314:	ba 17       	cp	r27, r26
     316:	09 f4       	brne	.+2      	; 0x31a <gen_two_color+0x7a>
     318:	cf c1       	rjmp	.+926    	; 0x6b8 <__stack+0x259>
     31a:	a8 2d       	mov	r26, r8
     31c:	bc 86       	std	Y+12, r11	; 0x0c
     31e:	ab 86       	std	Y+11, r10	; 0x0b
     320:	f3 2e       	mov	r15, r19
     322:	d2 2e       	mov	r13, r18
     324:	5e 83       	std	Y+6, r21	; 0x06
     326:	4d 83       	std	Y+5, r20	; 0x05
     328:	7a 83       	std	Y+2, r23	; 0x02
     32a:	69 83       	std	Y+1, r22	; 0x01
     32c:	1c 01       	movw	r2, r24
		
		switch (style)
     32e:	a1 30       	cpi	r26, 0x01	; 1
     330:	19 f1       	breq	.+70     	; 0x378 <gen_two_color+0xd8>
     332:	e8 f1       	brcs	.+122    	; 0x3ae <gen_two_color+0x10e>
     334:	a2 30       	cpi	r26, 0x02	; 2
     336:	09 f0       	breq	.+2      	; 0x33a <gen_two_color+0x9a>
     338:	55 c0       	rjmp	.+170    	; 0x3e4 <gen_two_color+0x144>
					}
				}
			break;
			case 2:
			
				for (uint16_t j = 0; j <loop; j++)
     33a:	ab 28       	or	r10, r11
     33c:	09 f4       	brne	.+2      	; 0x340 <gen_two_color+0xa0>
     33e:	bc c1       	rjmp	.+888    	; 0x6b8 <__stack+0x259>
				{
					for (uint8_t k = 0; k < len; k++)
					{
						rgb[last_point] = cl1;
     340:	3a 01       	movw	r6, r20
     342:	66 0c       	add	r6, r6
     344:	77 1c       	adc	r7, r7
     346:	68 0e       	add	r6, r24
     348:	79 1e       	adc	r7, r25
						rgb[first_point] = cl1;
     34a:	2b 01       	movw	r4, r22
     34c:	44 0c       	add	r4, r4
     34e:	55 1c       	adc	r5, r5
     350:	48 0e       	add	r4, r24
     352:	59 1e       	adc	r5, r25
						rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     354:	4f 01       	movw	r8, r30
     356:	96 94       	lsr	r9
     358:	87 94       	ror	r8
     35a:	86 0e       	add	r8, r22
     35c:	97 1e       	adc	r9, r23
						rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     35e:	c4 01       	movw	r24, r8
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	9c 83       	std	Y+4, r25	; 0x04
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	1a 86       	std	Y+10, r1	; 0x0a
     368:	19 86       	std	Y+9, r1	; 0x09
			break;
			case 2:
			
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     36a:	b1 2c       	mov	r11, r1
					{
						rgb[last_point] = cl1;
						rgb[first_point] = cl1;
						rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
						rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
						out_to_lpd(rgb,_num+1);
     36c:	9f 01       	movw	r18, r30
     36e:	2f 5f       	subi	r18, 0xFF	; 255
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	38 87       	std	Y+8, r19	; 0x08
     374:	2f 83       	std	Y+7, r18	; 0x07
     376:	41 c1       	rjmp	.+642    	; 0x5fa <__stack+0x19b>
				}
			}
			break;
			
			case 1:
				for (uint16_t j = 0; j <loop; j++)
     378:	8b 85       	ldd	r24, Y+11	; 0x0b
     37a:	9c 85       	ldd	r25, Y+12	; 0x0c
     37c:	89 2b       	or	r24, r25
     37e:	09 f4       	brne	.+2      	; 0x382 <gen_two_color+0xe2>
     380:	9b c1       	rjmp	.+822    	; 0x6b8 <__stack+0x259>
				{
					for (uint8_t k = 0; k < len; k++)
					{
						rgb[last_point] = cl1;
     382:	8d 80       	ldd	r8, Y+5	; 0x05
     384:	9e 80       	ldd	r9, Y+6	; 0x06
     386:	88 0c       	add	r8, r8
     388:	99 1c       	adc	r9, r9
     38a:	82 0c       	add	r8, r2
     38c:	93 1c       	adc	r9, r3
     38e:	61 2c       	mov	r6, r1
     390:	71 2c       	mov	r7, r1
			break;
			
			case 1:
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     392:	51 2c       	mov	r5, r1
					{
						rgb[last_point] = cl1;
						rotatal(rgb,first_point,last_point,0);
						out_to_lpd(rgb,_num+1);
     394:	5f 01       	movw	r10, r30
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	a9 1a       	sub	r10, r25
     39a:	b9 0a       	sbc	r11, r25
     39c:	7c 82       	std	Y+4, r7	; 0x04
     39e:	6b 82       	std	Y+3, r6	; 0x03
     3a0:	6d 80       	ldd	r6, Y+5	; 0x05
     3a2:	7e 80       	ldd	r7, Y+6	; 0x06
     3a4:	41 2e       	mov	r4, r17
     3a6:	c5 01       	movw	r24, r10
     3a8:	a0 2e       	mov	r10, r16
     3aa:	8c 01       	movw	r16, r24
     3ac:	c9 c0       	rjmp	.+402    	; 0x540 <__stack+0xe1>
		if ((cl1.Color.Blue==cl2.Color.Blue)&&(cl1.Color.Red==cl2.Color.Red)&&(cl1.Color.Green==cl2.Color.Green)) return;
		
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
     3ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     3b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     3b2:	23 2b       	or	r18, r19
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <gen_two_color+0x118>
     3b6:	80 c1       	rjmp	.+768    	; 0x6b8 <__stack+0x259>
			{
				for (uint8_t k = 0; k < len; k++)
				{
					rgb[first_point] = cl1;
     3b8:	a9 80       	ldd	r10, Y+1	; 0x01
     3ba:	ba 80       	ldd	r11, Y+2	; 0x02
     3bc:	aa 0c       	add	r10, r10
     3be:	bb 1c       	adc	r11, r11
     3c0:	a8 0e       	add	r10, r24
     3c2:	b9 1e       	adc	r11, r25
     3c4:	61 2c       	mov	r6, r1
     3c6:	71 2c       	mov	r7, r1
					rotatal(rgb,first_point,last_point,1);
					out_to_lpd(rgb,_num+1);
     3c8:	4f 01       	movw	r8, r30
     3ca:	3f ef       	ldi	r19, 0xFF	; 255
     3cc:	83 1a       	sub	r8, r19
     3ce:	93 0a       	sbc	r9, r19
				for (uint8_t k = 0; k < len; k++)
				{
					rgb[first_point] = cl2;
					rotatal(rgb,first_point,last_point,1);
					out_to_lpd(rgb,_num+1);
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     3d0:	41 2c       	mov	r4, r1
     3d2:	7c 82       	std	Y+4, r7	; 0x04
     3d4:	6b 82       	std	Y+3, r6	; 0x03
     3d6:	6d 80       	ldd	r6, Y+5	; 0x05
     3d8:	7e 80       	ldd	r7, Y+6	; 0x06
     3da:	51 2e       	mov	r5, r17
     3dc:	c4 01       	movw	r24, r8
     3de:	80 2e       	mov	r8, r16
     3e0:	8c 01       	movw	r16, r24
     3e2:	67 c0       	rjmp	.+206    	; 0x4b2 <__stack+0x53>
				}
			
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
     3e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     3e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     3e8:	89 2b       	or	r24, r25
     3ea:	09 f4       	brne	.+2      	; 0x3ee <gen_two_color+0x14e>
     3ec:	65 c1       	rjmp	.+714    	; 0x6b8 <__stack+0x259>
			{
				for (uint8_t k = 0; k < len; k++)
				{
					rgb[((last_point-first_point)/2)+first_point] = cl1;
     3ee:	4f 01       	movw	r8, r30
     3f0:	96 94       	lsr	r9
     3f2:	87 94       	ror	r8
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	3a 81       	ldd	r19, Y+2	; 0x02
     3f8:	82 0e       	add	r8, r18
     3fa:	93 1e       	adc	r9, r19
     3fc:	c4 01       	movw	r24, r8
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	31 01       	movw	r6, r2
     404:	68 0e       	add	r6, r24
     406:	79 1e       	adc	r7, r25
					rgb[((last_point-first_point)/2)+first_point+1] = cl1;
     408:	94 01       	movw	r18, r8
     40a:	2f 5f       	subi	r18, 0xFF	; 255
     40c:	3f 4f       	sbci	r19, 0xFF	; 255
     40e:	3c 83       	std	Y+4, r19	; 0x04
     410:	2b 83       	std	Y+3, r18	; 0x03
     412:	02 96       	adiw	r24, 0x02	; 2
     414:	21 01       	movw	r4, r2
     416:	48 0e       	add	r4, r24
     418:	59 1e       	adc	r5, r25
     41a:	1a 86       	std	Y+10, r1	; 0x0a
     41c:	19 86       	std	Y+9, r1	; 0x09
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
			{
				for (uint8_t k = 0; k < len; k++)
     41e:	b1 2c       	mov	r11, r1
				{
					rgb[((last_point-first_point)/2)+first_point] = cl1;
					rgb[((last_point-first_point)/2)+first_point+1] = cl1;
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
					out_to_lpd(rgb,_num+1);
     420:	cf 01       	movw	r24, r30
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	98 87       	std	Y+8, r25	; 0x08
     426:	8f 83       	std	Y+7, r24	; 0x07
     428:	44 c1       	rjmp	.+648    	; 0x6b2 <__stack+0x253>
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
			{
				for (uint8_t k = 0; k < len; k++)
     42a:	91 2c       	mov	r9, r1
				{
					rgb[first_point] = cl1;
     42c:	f5 01       	movw	r30, r10
     42e:	d0 82       	st	Z, r13
     430:	f1 82       	std	Z+1, r15	; 0x01
					rotatal(rgb,first_point,last_point,1);
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	a3 01       	movw	r20, r6
     436:	69 81       	ldd	r22, Y+1	; 0x01
     438:	7a 81       	ldd	r23, Y+2	; 0x02
     43a:	c1 01       	movw	r24, r2
     43c:	ee de       	rcall	.-548    	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     43e:	b8 01       	movw	r22, r16
     440:	c1 01       	movw	r24, r2
     442:	5b de       	rcall	.-842    	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     444:	ee 20       	and	r14, r14
     446:	51 f0       	breq	.+20     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     448:	84 2d       	mov	r24, r4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	ef e9       	ldi	r30, 0x9F	; 159
     44c:	ff e0       	ldi	r31, 0x0F	; 15
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
     454:	00 00       	nop
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	8e 11       	cpse	r24, r14
     45a:	f7 cf       	rjmp	.-18     	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
			{
				for (uint8_t k = 0; k < len; k++)
     45c:	93 94       	inc	r9
     45e:	9c 10       	cpse	r9, r12
     460:	e5 cf       	rjmp	.-54     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     462:	91 2c       	mov	r9, r1
					out_to_lpd(rgb,_num+1);
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
				}
				for (uint8_t k = 0; k < len; k++)
				{
					rgb[first_point] = cl2;
     464:	f5 01       	movw	r30, r10
     466:	80 82       	st	Z, r8
     468:	51 82       	std	Z+1, r5	; 0x01
					rotatal(rgb,first_point,last_point,1);
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	a3 01       	movw	r20, r6
     46e:	69 81       	ldd	r22, Y+1	; 0x01
     470:	7a 81       	ldd	r23, Y+2	; 0x02
     472:	c1 01       	movw	r24, r2
     474:	d2 de       	rcall	.-604    	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     476:	b8 01       	movw	r22, r16
     478:	c1 01       	movw	r24, r2
     47a:	3f de       	rcall	.-898    	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     47c:	ee 20       	and	r14, r14
     47e:	51 f0       	breq	.+20     	; 0x494 <__stack+0x35>
     480:	84 2d       	mov	r24, r4
     482:	ef e9       	ldi	r30, 0x9F	; 159
     484:	ff e0       	ldi	r31, 0x0F	; 15
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <__stack+0x27>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <__stack+0x2d>
     48c:	00 00       	nop
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	8e 11       	cpse	r24, r14
     492:	f7 cf       	rjmp	.-18     	; 0x482 <__stack+0x23>
					rgb[first_point] = cl1;
					rotatal(rgb,first_point,last_point,1);
					out_to_lpd(rgb,_num+1);
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
				}
				for (uint8_t k = 0; k < len; k++)
     494:	93 94       	inc	r9
     496:	9c 10       	cpse	r9, r12
     498:	e5 cf       	rjmp	.-54     	; 0x464 <__stack+0x5>
		if ((cl1.Color.Blue==cl2.Color.Blue)&&(cl1.Color.Red==cl2.Color.Red)&&(cl1.Color.Green==cl2.Color.Green)) return;
		
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
     49a:	2b 81       	ldd	r18, Y+3	; 0x03
     49c:	3c 81       	ldd	r19, Y+4	; 0x04
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	3c 83       	std	Y+4, r19	; 0x04
     4a4:	2b 83       	std	Y+3, r18	; 0x03
     4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4aa:	28 17       	cp	r18, r24
     4ac:	39 07       	cpc	r19, r25
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__stack+0x53>
     4b0:	03 c1       	rjmp	.+518    	; 0x6b8 <__stack+0x259>
			{
				for (uint8_t k = 0; k < len; k++)
     4b2:	c1 10       	cpse	r12, r1
     4b4:	ba cf       	rjmp	.-140    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     4b6:	f1 cf       	rjmp	.-30     	; 0x49a <__stack+0x3b>
			break;
			
			case 1:
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     4b8:	b5 2c       	mov	r11, r5
					{
						rgb[last_point] = cl1;
     4ba:	f4 01       	movw	r30, r8
     4bc:	d0 82       	st	Z, r13
     4be:	f1 82       	std	Z+1, r15	; 0x01
						rotatal(rgb,first_point,last_point,0);
     4c0:	25 2d       	mov	r18, r5
     4c2:	a3 01       	movw	r20, r6
     4c4:	69 81       	ldd	r22, Y+1	; 0x01
     4c6:	7a 81       	ldd	r23, Y+2	; 0x02
     4c8:	c1 01       	movw	r24, r2
     4ca:	a7 de       	rcall	.-690    	; 0x21a <rotatal>
						out_to_lpd(rgb,_num+1);
     4cc:	b8 01       	movw	r22, r16
     4ce:	c1 01       	movw	r24, r2
     4d0:	14 de       	rcall	.-984    	; 0xfa <out_to_lpd>
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     4d2:	ee 20       	and	r14, r14
     4d4:	51 f0       	breq	.+20     	; 0x4ea <__stack+0x8b>
     4d6:	85 2d       	mov	r24, r5
     4d8:	ef e9       	ldi	r30, 0x9F	; 159
     4da:	ff e0       	ldi	r31, 0x0F	; 15
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <__stack+0x7d>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__stack+0x83>
     4e2:	00 00       	nop
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	8e 11       	cpse	r24, r14
     4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <__stack+0x79>
			break;
			
			case 1:
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     4ea:	b3 94       	inc	r11
     4ec:	bc 10       	cpse	r11, r12
     4ee:	e5 cf       	rjmp	.-54     	; 0x4ba <__stack+0x5b>
     4f0:	b5 2c       	mov	r11, r5
						out_to_lpd(rgb,_num+1);
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
					}
					for (uint8_t k = 0; k < len; k++)
					{
						rgb[last_point] = cl2;
     4f2:	f4 01       	movw	r30, r8
     4f4:	a0 82       	st	Z, r10
     4f6:	41 82       	std	Z+1, r4	; 0x01
						rotatal(rgb,first_point,last_point,0);
     4f8:	25 2d       	mov	r18, r5
     4fa:	a3 01       	movw	r20, r6
     4fc:	69 81       	ldd	r22, Y+1	; 0x01
     4fe:	7a 81       	ldd	r23, Y+2	; 0x02
     500:	c1 01       	movw	r24, r2
     502:	8b de       	rcall	.-746    	; 0x21a <rotatal>
						out_to_lpd(rgb,_num+1);
     504:	b8 01       	movw	r22, r16
     506:	c1 01       	movw	r24, r2
     508:	f8 dd       	rcall	.-1040   	; 0xfa <out_to_lpd>
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     50a:	ee 20       	and	r14, r14
     50c:	51 f0       	breq	.+20     	; 0x522 <__stack+0xc3>
     50e:	85 2d       	mov	r24, r5
     510:	ef e9       	ldi	r30, 0x9F	; 159
     512:	ff e0       	ldi	r31, 0x0F	; 15
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <__stack+0xb5>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__stack+0xbb>
     51a:	00 00       	nop
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	8e 11       	cpse	r24, r14
     520:	f7 cf       	rjmp	.-18     	; 0x510 <__stack+0xb1>
						rgb[last_point] = cl1;
						rotatal(rgb,first_point,last_point,0);
						out_to_lpd(rgb,_num+1);
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
					}
					for (uint8_t k = 0; k < len; k++)
     522:	b3 94       	inc	r11
     524:	bc 10       	cpse	r11, r12
     526:	e5 cf       	rjmp	.-54     	; 0x4f2 <__stack+0x93>
				}
			}
			break;
			
			case 1:
				for (uint16_t j = 0; j <loop; j++)
     528:	2b 81       	ldd	r18, Y+3	; 0x03
     52a:	3c 81       	ldd	r19, Y+4	; 0x04
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	3c 83       	std	Y+4, r19	; 0x04
     532:	2b 83       	std	Y+3, r18	; 0x03
     534:	8b 85       	ldd	r24, Y+11	; 0x0b
     536:	9c 85       	ldd	r25, Y+12	; 0x0c
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	09 f4       	brne	.+2      	; 0x540 <__stack+0xe1>
     53e:	bc c0       	rjmp	.+376    	; 0x6b8 <__stack+0x259>
				{
					for (uint8_t k = 0; k < len; k++)
     540:	c1 10       	cpse	r12, r1
     542:	ba cf       	rjmp	.-140    	; 0x4b8 <__stack+0x59>
     544:	f1 cf       	rjmp	.-30     	; 0x528 <__stack+0xc9>
			break;
			case 2:
			
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     546:	ab 2c       	mov	r10, r11
					{
						rgb[last_point] = cl1;
     548:	f3 01       	movw	r30, r6
     54a:	d0 82       	st	Z, r13
     54c:	f1 82       	std	Z+1, r15	; 0x01
						rgb[first_point] = cl1;
     54e:	f2 01       	movw	r30, r4
     550:	d0 82       	st	Z, r13
     552:	f1 82       	std	Z+1, r15	; 0x01
						rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     554:	2b 2d       	mov	r18, r11
     556:	a4 01       	movw	r20, r8
     558:	69 81       	ldd	r22, Y+1	; 0x01
     55a:	7a 81       	ldd	r23, Y+2	; 0x02
     55c:	c1 01       	movw	r24, r2
     55e:	5d de       	rcall	.-838    	; 0x21a <rotatal>
						rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	4d 81       	ldd	r20, Y+5	; 0x05
     564:	5e 81       	ldd	r21, Y+6	; 0x06
     566:	6b 81       	ldd	r22, Y+3	; 0x03
     568:	7c 81       	ldd	r23, Y+4	; 0x04
     56a:	c1 01       	movw	r24, r2
     56c:	56 de       	rcall	.-852    	; 0x21a <rotatal>
						out_to_lpd(rgb,_num+1);
     56e:	6f 81       	ldd	r22, Y+7	; 0x07
     570:	78 85       	ldd	r23, Y+8	; 0x08
     572:	c1 01       	movw	r24, r2
     574:	c2 dd       	rcall	.-1148   	; 0xfa <out_to_lpd>
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     576:	ee 20       	and	r14, r14
     578:	51 f0       	breq	.+20     	; 0x58e <__stack+0x12f>
     57a:	8b 2d       	mov	r24, r11
     57c:	ef e9       	ldi	r30, 0x9F	; 159
     57e:	ff e0       	ldi	r31, 0x0F	; 15
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <__stack+0x121>
     584:	00 c0       	rjmp	.+0      	; 0x586 <__stack+0x127>
     586:	00 00       	nop
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	8e 11       	cpse	r24, r14
     58c:	f7 cf       	rjmp	.-18     	; 0x57c <__stack+0x11d>
			break;
			case 2:
			
				for (uint16_t j = 0; j <loop; j++)
				{
					for (uint8_t k = 0; k < len; k++)
     58e:	a3 94       	inc	r10
     590:	ac 10       	cpse	r10, r12
     592:	da cf       	rjmp	.-76     	; 0x548 <__stack+0xe9>
     594:	ab 2c       	mov	r10, r11
						out_to_lpd(rgb,_num+1);
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
					}
					for (uint8_t k = 0; k < len; k++)
					{
						rgb[last_point] =cl2;
     596:	f3 01       	movw	r30, r6
     598:	00 83       	st	Z, r16
     59a:	11 83       	std	Z+1, r17	; 0x01
						rgb[first_point] = cl2;
     59c:	f2 01       	movw	r30, r4
     59e:	00 83       	st	Z, r16
     5a0:	11 83       	std	Z+1, r17	; 0x01
						rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     5a2:	2b 2d       	mov	r18, r11
     5a4:	a4 01       	movw	r20, r8
     5a6:	69 81       	ldd	r22, Y+1	; 0x01
     5a8:	7a 81       	ldd	r23, Y+2	; 0x02
     5aa:	c1 01       	movw	r24, r2
     5ac:	36 de       	rcall	.-916    	; 0x21a <rotatal>
						rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	4d 81       	ldd	r20, Y+5	; 0x05
     5b2:	5e 81       	ldd	r21, Y+6	; 0x06
     5b4:	6b 81       	ldd	r22, Y+3	; 0x03
     5b6:	7c 81       	ldd	r23, Y+4	; 0x04
     5b8:	c1 01       	movw	r24, r2
     5ba:	2f de       	rcall	.-930    	; 0x21a <rotatal>
						out_to_lpd(rgb,_num+1);
     5bc:	6f 81       	ldd	r22, Y+7	; 0x07
     5be:	78 85       	ldd	r23, Y+8	; 0x08
     5c0:	c1 01       	movw	r24, r2
     5c2:	9b dd       	rcall	.-1226   	; 0xfa <out_to_lpd>
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     5c4:	ee 20       	and	r14, r14
     5c6:	51 f0       	breq	.+20     	; 0x5dc <__stack+0x17d>
     5c8:	8b 2d       	mov	r24, r11
     5ca:	ef e9       	ldi	r30, 0x9F	; 159
     5cc:	ff e0       	ldi	r31, 0x0F	; 15
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <__stack+0x16f>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__stack+0x175>
     5d4:	00 00       	nop
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	8e 11       	cpse	r24, r14
     5da:	f7 cf       	rjmp	.-18     	; 0x5ca <__stack+0x16b>
						rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
						rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
						out_to_lpd(rgb,_num+1);
						for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
					}
					for (uint8_t k = 0; k < len; k++)
     5dc:	a3 94       	inc	r10
     5de:	ac 10       	cpse	r10, r12
     5e0:	da cf       	rjmp	.-76     	; 0x596 <__stack+0x137>
					}
				}
			break;
			case 2:
			
				for (uint16_t j = 0; j <loop; j++)
     5e2:	29 85       	ldd	r18, Y+9	; 0x09
     5e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e6:	2f 5f       	subi	r18, 0xFF	; 255
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ea:	3a 87       	std	Y+10, r19	; 0x0a
     5ec:	29 87       	std	Y+9, r18	; 0x09
     5ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f2:	28 17       	cp	r18, r24
     5f4:	39 07       	cpc	r19, r25
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__stack+0x19b>
     5f8:	5f c0       	rjmp	.+190    	; 0x6b8 <__stack+0x259>
				{
					for (uint8_t k = 0; k < len; k++)
     5fa:	c1 10       	cpse	r12, r1
     5fc:	a4 cf       	rjmp	.-184    	; 0x546 <__stack+0xe7>
     5fe:	f1 cf       	rjmp	.-30     	; 0x5e2 <__stack+0x183>
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
			{
				for (uint8_t k = 0; k < len; k++)
     600:	ab 2c       	mov	r10, r11
				{
					rgb[((last_point-first_point)/2)+first_point] = cl1;
     602:	f3 01       	movw	r30, r6
     604:	d0 82       	st	Z, r13
     606:	f1 82       	std	Z+1, r15	; 0x01
					rgb[((last_point-first_point)/2)+first_point+1] = cl1;
     608:	f2 01       	movw	r30, r4
     60a:	d0 82       	st	Z, r13
     60c:	f1 82       	std	Z+1, r15	; 0x01
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	a4 01       	movw	r20, r8
     612:	69 81       	ldd	r22, Y+1	; 0x01
     614:	7a 81       	ldd	r23, Y+2	; 0x02
     616:	c1 01       	movw	r24, r2
     618:	00 de       	rcall	.-1024   	; 0x21a <rotatal>
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
     61a:	2b 2d       	mov	r18, r11
     61c:	4d 81       	ldd	r20, Y+5	; 0x05
     61e:	5e 81       	ldd	r21, Y+6	; 0x06
     620:	6b 81       	ldd	r22, Y+3	; 0x03
     622:	7c 81       	ldd	r23, Y+4	; 0x04
     624:	c1 01       	movw	r24, r2
     626:	f9 dd       	rcall	.-1038   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     628:	6f 81       	ldd	r22, Y+7	; 0x07
     62a:	78 85       	ldd	r23, Y+8	; 0x08
     62c:	c1 01       	movw	r24, r2
     62e:	65 dd       	rcall	.-1334   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     630:	ee 20       	and	r14, r14
     632:	51 f0       	breq	.+20     	; 0x648 <__stack+0x1e9>
     634:	8b 2d       	mov	r24, r11
     636:	ef e9       	ldi	r30, 0x9F	; 159
     638:	ff e0       	ldi	r31, 0x0F	; 15
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <__stack+0x1db>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <__stack+0x1e1>
     640:	00 00       	nop
     642:	8f 5f       	subi	r24, 0xFF	; 255
     644:	8e 11       	cpse	r24, r14
     646:	f7 cf       	rjmp	.-18     	; 0x636 <__stack+0x1d7>
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
			{
				for (uint8_t k = 0; k < len; k++)
     648:	a3 94       	inc	r10
     64a:	ac 10       	cpse	r10, r12
     64c:	da cf       	rjmp	.-76     	; 0x602 <__stack+0x1a3>
     64e:	ab 2c       	mov	r10, r11
					out_to_lpd(rgb,_num+1);
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
				}
				for (uint8_t k = 0; k < len; k++)
				{
					rgb[((last_point-first_point)/2)+first_point] = cl2;
     650:	f3 01       	movw	r30, r6
     652:	00 83       	st	Z, r16
     654:	11 83       	std	Z+1, r17	; 0x01
					rgb[((last_point-first_point)/2)+first_point+1] = cl2;
     656:	f2 01       	movw	r30, r4
     658:	00 83       	st	Z, r16
     65a:	11 83       	std	Z+1, r17	; 0x01
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	a4 01       	movw	r20, r8
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	c1 01       	movw	r24, r2
     666:	d9 dd       	rcall	.-1102   	; 0x21a <rotatal>
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
     668:	2b 2d       	mov	r18, r11
     66a:	4d 81       	ldd	r20, Y+5	; 0x05
     66c:	5e 81       	ldd	r21, Y+6	; 0x06
     66e:	6b 81       	ldd	r22, Y+3	; 0x03
     670:	7c 81       	ldd	r23, Y+4	; 0x04
     672:	c1 01       	movw	r24, r2
     674:	d2 dd       	rcall	.-1116   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     676:	6f 81       	ldd	r22, Y+7	; 0x07
     678:	78 85       	ldd	r23, Y+8	; 0x08
     67a:	c1 01       	movw	r24, r2
     67c:	3e dd       	rcall	.-1412   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     67e:	ee 20       	and	r14, r14
     680:	51 f0       	breq	.+20     	; 0x696 <__stack+0x237>
     682:	8b 2d       	mov	r24, r11
     684:	ef e9       	ldi	r30, 0x9F	; 159
     686:	ff e0       	ldi	r31, 0x0F	; 15
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <__stack+0x229>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <__stack+0x22f>
     68e:	00 00       	nop
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	8e 11       	cpse	r24, r14
     694:	f7 cf       	rjmp	.-18     	; 0x684 <__stack+0x225>
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
					out_to_lpd(rgb,_num+1);
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
				}
				for (uint8_t k = 0; k < len; k++)
     696:	a3 94       	inc	r10
     698:	ac 10       	cpse	r10, r12
     69a:	da cf       	rjmp	.-76     	; 0x650 <__stack+0x1f1>
				}
			
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
     69c:	29 85       	ldd	r18, Y+9	; 0x09
     69e:	3a 85       	ldd	r19, Y+10	; 0x0a
     6a0:	2f 5f       	subi	r18, 0xFF	; 255
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	3a 87       	std	Y+10, r19	; 0x0a
     6a6:	29 87       	std	Y+9, r18	; 0x09
     6a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ac:	28 17       	cp	r18, r24
     6ae:	39 07       	cpc	r19, r25
     6b0:	19 f0       	breq	.+6      	; 0x6b8 <__stack+0x259>
			{
				for (uint8_t k = 0; k < len; k++)
     6b2:	c1 10       	cpse	r12, r1
     6b4:	a5 cf       	rjmp	.-182    	; 0x600 <__stack+0x1a1>
     6b6:	f2 cf       	rjmp	.-28     	; 0x69c <__stack+0x23d>
				}
			}
		
			break;
		}
}
     6b8:	2c 96       	adiw	r28, 0x0c	; 12
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	8f 90       	pop	r8
     6dc:	7f 90       	pop	r7
     6de:	6f 90       	pop	r6
     6e0:	5f 90       	pop	r5
     6e2:	4f 90       	pop	r4
     6e4:	3f 90       	pop	r3
     6e6:	2f 90       	pop	r2
     6e8:	08 95       	ret

000006ea <color_change>:
}



uint8_t color_change(Color_pack *color1,Color_pack *color2,uint8_t ratio)
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	fc 01       	movw	r30, r24
     6f0:	db 01       	movw	r26, r22
	
	if ((color1->Color.Blue==color2->Color.Blue) &&(color1->Color.Green==color2->Color.Green) &&(color1->Color.Red ==color2->Color.Red)) return 1;
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	9c 91       	ld	r25, X
     6f6:	11 97       	sbiw	r26, 0x01	; 1
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	89 27       	eor	r24, r25
     6fc:	8c 77       	andi	r24, 0x7C	; 124
     6fe:	01 f5       	brne	.+64     	; 0x740 <color_change+0x56>
     700:	20 81       	ld	r18, Z
     702:	82 2f       	mov	r24, r18
     704:	82 95       	swap	r24
     706:	86 95       	lsr	r24
     708:	87 70       	andi	r24, 0x07	; 7
     70a:	21 81       	ldd	r18, Z+1	; 0x01
     70c:	23 70       	andi	r18, 0x03	; 3
     70e:	22 0f       	add	r18, r18
     710:	22 0f       	add	r18, r18
     712:	22 0f       	add	r18, r18
     714:	28 2b       	or	r18, r24
     716:	8c 91       	ld	r24, X
     718:	98 2f       	mov	r25, r24
     71a:	92 95       	swap	r25
     71c:	96 95       	lsr	r25
     71e:	97 70       	andi	r25, 0x07	; 7
     720:	11 96       	adiw	r26, 0x01	; 1
     722:	8c 91       	ld	r24, X
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	83 70       	andi	r24, 0x03	; 3
     728:	88 0f       	add	r24, r24
     72a:	88 0f       	add	r24, r24
     72c:	88 0f       	add	r24, r24
     72e:	89 2b       	or	r24, r25
     730:	28 13       	cpse	r18, r24
     732:	06 c0       	rjmp	.+12     	; 0x740 <color_change+0x56>
     734:	9c 91       	ld	r25, X
     736:	80 81       	ld	r24, Z
     738:	89 27       	eor	r24, r25
     73a:	8f 71       	andi	r24, 0x1F	; 31
     73c:	09 f4       	brne	.+2      	; 0x740 <color_change+0x56>
     73e:	8f c0       	rjmp	.+286    	; 0x85e <color_change+0x174>
	for (uint8_t i =0;i<ratio;i++)
     740:	44 23       	and	r20, r20
     742:	09 f4       	brne	.+2      	; 0x746 <color_change+0x5c>
     744:	8e c0       	rjmp	.+284    	; 0x862 <color_change+0x178>
     746:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		if (color1->Color.Red>color2->Color.Red)  color1->Color.Red-=1;
     748:	80 81       	ld	r24, Z
     74a:	8f 71       	andi	r24, 0x1F	; 31
     74c:	c8 2f       	mov	r28, r24
     74e:	d0 e0       	ldi	r29, 0x00	; 0
     750:	6c 91       	ld	r22, X
     752:	6f 71       	andi	r22, 0x1F	; 31
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	6c 17       	cp	r22, r28
     758:	7d 07       	cpc	r23, r29
     75a:	44 f4       	brge	.+16     	; 0x76c <color_change+0x82>
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	98 2f       	mov	r25, r24
     760:	9f 71       	andi	r25, 0x1F	; 31
     762:	80 81       	ld	r24, Z
     764:	80 7e       	andi	r24, 0xE0	; 224
     766:	89 2b       	or	r24, r25
     768:	80 83       	st	Z, r24
     76a:	0a c0       	rjmp	.+20     	; 0x780 <color_change+0x96>
		else if (color1->Color.Red<color2->Color.Red)  color1->Color.Red+= 1;
     76c:	c6 17       	cp	r28, r22
     76e:	d7 07       	cpc	r29, r23
     770:	3c f4       	brge	.+14     	; 0x780 <color_change+0x96>
     772:	8f 5f       	subi	r24, 0xFF	; 255
     774:	98 2f       	mov	r25, r24
     776:	9f 71       	andi	r25, 0x1F	; 31
     778:	80 81       	ld	r24, Z
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	89 2b       	or	r24, r25
     77e:	80 83       	st	Z, r24
		
		if (color1->Color.Green>color2->Color.Green) color1->Color.Green -=1;
     780:	90 81       	ld	r25, Z
     782:	29 2f       	mov	r18, r25
     784:	22 95       	swap	r18
     786:	26 95       	lsr	r18
     788:	27 70       	andi	r18, 0x07	; 7
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	93 70       	andi	r25, 0x03	; 3
     78e:	99 0f       	add	r25, r25
     790:	99 0f       	add	r25, r25
     792:	99 0f       	add	r25, r25
     794:	92 2b       	or	r25, r18
     796:	c9 2f       	mov	r28, r25
     798:	d0 e0       	ldi	r29, 0x00	; 0
     79a:	6c 91       	ld	r22, X
     79c:	86 2f       	mov	r24, r22
     79e:	82 95       	swap	r24
     7a0:	86 95       	lsr	r24
     7a2:	87 70       	andi	r24, 0x07	; 7
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	6c 91       	ld	r22, X
     7a8:	11 97       	sbiw	r26, 0x01	; 1
     7aa:	63 70       	andi	r22, 0x03	; 3
     7ac:	66 0f       	add	r22, r22
     7ae:	66 0f       	add	r22, r22
     7b0:	66 0f       	add	r22, r22
     7b2:	68 2b       	or	r22, r24
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	6c 17       	cp	r22, r28
     7b8:	7d 07       	cpc	r23, r29
     7ba:	94 f4       	brge	.+36     	; 0x7e0 <color_change+0xf6>
     7bc:	91 50       	subi	r25, 0x01	; 1
     7be:	29 2f       	mov	r18, r25
     7c0:	22 95       	swap	r18
     7c2:	22 0f       	add	r18, r18
     7c4:	20 7e       	andi	r18, 0xE0	; 224
     7c6:	80 81       	ld	r24, Z
     7c8:	8f 71       	andi	r24, 0x1F	; 31
     7ca:	82 2b       	or	r24, r18
     7cc:	80 83       	st	Z, r24
     7ce:	96 95       	lsr	r25
     7d0:	96 95       	lsr	r25
     7d2:	96 95       	lsr	r25
     7d4:	93 70       	andi	r25, 0x03	; 3
     7d6:	81 81       	ldd	r24, Z+1	; 0x01
     7d8:	8c 7f       	andi	r24, 0xFC	; 252
     7da:	98 2b       	or	r25, r24
     7dc:	91 83       	std	Z+1, r25	; 0x01
     7de:	14 c0       	rjmp	.+40     	; 0x808 <color_change+0x11e>
		else if (color1->Color.Green<color2->Color.Green) color1->Color.Green  += 1;
     7e0:	c6 17       	cp	r28, r22
     7e2:	d7 07       	cpc	r29, r23
     7e4:	8c f4       	brge	.+34     	; 0x808 <color_change+0x11e>
     7e6:	9f 5f       	subi	r25, 0xFF	; 255
     7e8:	29 2f       	mov	r18, r25
     7ea:	22 95       	swap	r18
     7ec:	22 0f       	add	r18, r18
     7ee:	20 7e       	andi	r18, 0xE0	; 224
     7f0:	80 81       	ld	r24, Z
     7f2:	8f 71       	andi	r24, 0x1F	; 31
     7f4:	82 2b       	or	r24, r18
     7f6:	80 83       	st	Z, r24
     7f8:	96 95       	lsr	r25
     7fa:	96 95       	lsr	r25
     7fc:	96 95       	lsr	r25
     7fe:	93 70       	andi	r25, 0x03	; 3
     800:	81 81       	ldd	r24, Z+1	; 0x01
     802:	8c 7f       	andi	r24, 0xFC	; 252
     804:	98 2b       	or	r25, r24
     806:	91 83       	std	Z+1, r25	; 0x01
		
		if (color1->Color.Blue>color2->Color.Blue) color1->Color.Blue -=1;
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	96 95       	lsr	r25
     80c:	96 95       	lsr	r25
     80e:	9f 71       	andi	r25, 0x1F	; 31
     810:	c9 2f       	mov	r28, r25
     812:	d0 e0       	ldi	r29, 0x00	; 0
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	6c 91       	ld	r22, X
     818:	11 97       	sbiw	r26, 0x01	; 1
     81a:	66 95       	lsr	r22
     81c:	66 95       	lsr	r22
     81e:	6f 71       	andi	r22, 0x1F	; 31
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	6c 17       	cp	r22, r28
     824:	7d 07       	cpc	r23, r29
     826:	54 f4       	brge	.+20     	; 0x83c <color_change+0x152>
     828:	91 50       	subi	r25, 0x01	; 1
     82a:	9f 71       	andi	r25, 0x1F	; 31
     82c:	89 2f       	mov	r24, r25
     82e:	88 0f       	add	r24, r24
     830:	88 0f       	add	r24, r24
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	93 78       	andi	r25, 0x83	; 131
     836:	98 2b       	or	r25, r24
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	0c c0       	rjmp	.+24     	; 0x854 <color_change+0x16a>
		else if (color1->Color.Blue<color2->Color.Blue) color1->Color.Blue  += 1;
     83c:	c6 17       	cp	r28, r22
     83e:	d7 07       	cpc	r29, r23
     840:	4c f4       	brge	.+18     	; 0x854 <color_change+0x16a>
     842:	9f 5f       	subi	r25, 0xFF	; 255
     844:	9f 71       	andi	r25, 0x1F	; 31
     846:	89 2f       	mov	r24, r25
     848:	88 0f       	add	r24, r24
     84a:	88 0f       	add	r24, r24
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	93 78       	andi	r25, 0x83	; 131
     850:	98 2b       	or	r25, r24
     852:	91 83       	std	Z+1, r25	; 0x01

uint8_t color_change(Color_pack *color1,Color_pack *color2,uint8_t ratio)
{
	
	if ((color1->Color.Blue==color2->Color.Blue) &&(color1->Color.Green==color2->Color.Green) &&(color1->Color.Red ==color2->Color.Red)) return 1;
	for (uint8_t i =0;i<ratio;i++)
     854:	3f 5f       	subi	r19, 0xFF	; 255
     856:	34 13       	cpse	r19, r20
     858:	77 cf       	rjmp	.-274    	; 0x748 <color_change+0x5e>
		
		if (color1->Color.Blue>color2->Color.Blue) color1->Color.Blue -=1;
		else if (color1->Color.Blue<color2->Color.Blue) color1->Color.Blue  += 1;
		
	}
	return 0;
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	03 c0       	rjmp	.+6      	; 0x864 <color_change+0x17a>


uint8_t color_change(Color_pack *color1,Color_pack *color2,uint8_t ratio)
{
	
	if ((color1->Color.Blue==color2->Color.Blue) &&(color1->Color.Green==color2->Color.Green) &&(color1->Color.Red ==color2->Color.Red)) return 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	01 c0       	rjmp	.+2      	; 0x864 <color_change+0x17a>
		
		if (color1->Color.Blue>color2->Color.Blue) color1->Color.Blue -=1;
		else if (color1->Color.Blue<color2->Color.Blue) color1->Color.Blue  += 1;
		
	}
	return 0;
     862:	80 e0       	ldi	r24, 0x00	; 0
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <gen_soft_two_color>:
}



void gen_soft_two_color(Color_pack *rgb,uint16_t first_point,uint16_t last_point,Color_pack cl1,Color_pack cl2,uint8_t speed, uint8_t div,uint16_t loop,uint8_t style)
{
     86a:	2f 92       	push	r2
     86c:	3f 92       	push	r3
     86e:	4f 92       	push	r4
     870:	5f 92       	push	r5
     872:	6f 92       	push	r6
     874:	7f 92       	push	r7
     876:	8f 92       	push	r8
     878:	9f 92       	push	r9
     87a:	af 92       	push	r10
     87c:	bf 92       	push	r11
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	60 97       	sbiw	r28, 0x10	; 16
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
	uint16_t _num = last_point - first_point;
     89e:	fa 01       	movw	r30, r20
     8a0:	e6 1b       	sub	r30, r22
     8a2:	f7 0b       	sbc	r31, r23
	
	if ((cl1.Color.Blue==cl2.Color.Blue)&&(cl1.Color.Red==cl2.Color.Red)&&(cl1.Color.Green==cl2.Color.Green)) return;
     8a4:	b1 2f       	mov	r27, r17
     8a6:	b3 27       	eor	r27, r19
     8a8:	bc 77       	andi	r27, 0x7C	; 124
     8aa:	e1 f4       	brne	.+56     	; 0x8e4 <gen_soft_two_color+0x7a>
     8ac:	a0 2f       	mov	r26, r16
     8ae:	a2 27       	eor	r26, r18
     8b0:	af 71       	andi	r26, 0x1F	; 31
     8b2:	c1 f4       	brne	.+48     	; 0x8e4 <gen_soft_two_color+0x7a>
     8b4:	b3 2f       	mov	r27, r19
     8b6:	b3 70       	andi	r27, 0x03	; 3
     8b8:	bb 0f       	add	r27, r27
     8ba:	bb 0f       	add	r27, r27
     8bc:	bb 0f       	add	r27, r27
     8be:	a2 2f       	mov	r26, r18
     8c0:	a2 95       	swap	r26
     8c2:	a6 95       	lsr	r26
     8c4:	a7 70       	andi	r26, 0x07	; 7
     8c6:	ba 2b       	or	r27, r26
     8c8:	a1 2f       	mov	r26, r17
     8ca:	a3 70       	andi	r26, 0x03	; 3
     8cc:	fa 2e       	mov	r15, r26
     8ce:	ff 0c       	add	r15, r15
     8d0:	ff 0c       	add	r15, r15
     8d2:	ff 0c       	add	r15, r15
     8d4:	a0 2f       	mov	r26, r16
     8d6:	a2 95       	swap	r26
     8d8:	a6 95       	lsr	r26
     8da:	a7 70       	andi	r26, 0x07	; 7
     8dc:	af 29       	or	r26, r15
     8de:	ba 17       	cp	r27, r26
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <gen_soft_two_color+0x7a>
     8e2:	14 c2       	rjmp	.+1064   	; 0xd0c <gen_soft_two_color+0x4a2>
     8e4:	a8 2d       	mov	r26, r8
     8e6:	bd 86       	std	Y+13, r11	; 0x0d
     8e8:	ac 86       	std	Y+12, r10	; 0x0c
     8ea:	f1 2e       	mov	r15, r17
     8ec:	09 87       	std	Y+9, r16	; 0x09
     8ee:	38 87       	std	Y+8, r19	; 0x08
     8f0:	2f 83       	std	Y+7, r18	; 0x07
     8f2:	1a 01       	movw	r2, r20
     8f4:	2b 01       	movw	r4, r22
     8f6:	8c 01       	movw	r16, r24
	
	Color_pack cur_color =cl1;
     8f8:	29 83       	std	Y+1, r18	; 0x01
     8fa:	3a 83       	std	Y+2, r19	; 0x02
	Color_pack to_color = cl2;
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	2b 83       	std	Y+3, r18	; 0x03
     900:	fc 82       	std	Y+4, r15	; 0x04
	switch (style)
     902:	a1 30       	cpi	r26, 0x01	; 1
     904:	41 f0       	breq	.+16     	; 0x916 <gen_soft_two_color+0xac>
     906:	68 f0       	brcs	.+26     	; 0x922 <gen_soft_two_color+0xb8>
     908:	a2 30       	cpi	r26, 0x02	; 2
     90a:	81 f4       	brne	.+32     	; 0x92c <gen_soft_two_color+0xc2>
			
		}
		break;
		case 2:
		
		for (uint16_t j = 0; j <loop; j++)
     90c:	c5 01       	movw	r24, r10
     90e:	89 2b       	or	r24, r25
     910:	09 f0       	breq	.+2      	; 0x914 <gen_soft_two_color+0xaa>
     912:	df c0       	rjmp	.+446    	; 0xad2 <gen_soft_two_color+0x268>
     914:	fb c1       	rjmp	.+1014   	; 0xd0c <gen_soft_two_color+0x4a2>
			
			
		}
		break;
		case 1:
		for (uint16_t j = 0; j <loop; j++)
     916:	2c 85       	ldd	r18, Y+12	; 0x0c
     918:	3d 85       	ldd	r19, Y+13	; 0x0d
     91a:	23 2b       	or	r18, r19
     91c:	09 f0       	breq	.+2      	; 0x920 <gen_soft_two_color+0xb6>
     91e:	73 c0       	rjmp	.+230    	; 0xa06 <gen_soft_two_color+0x19c>
     920:	f5 c1       	rjmp	.+1002   	; 0xd0c <gen_soft_two_color+0x4a2>
	Color_pack cur_color =cl1;
	Color_pack to_color = cl2;
	switch (style)
	{
		case 0:
		for (uint16_t j = 0; j <loop; j++)
     922:	8c 85       	ldd	r24, Y+12	; 0x0c
     924:	9d 85       	ldd	r25, Y+13	; 0x0d
     926:	89 2b       	or	r24, r25
     928:	39 f4       	brne	.+14     	; 0x938 <gen_soft_two_color+0xce>
     92a:	f0 c1       	rjmp	.+992    	; 0xd0c <gen_soft_two_color+0x4a2>
		}
		
		break;
		
		default:
		for (uint16_t j = 0; j <loop; j++)
     92c:	2c 85       	ldd	r18, Y+12	; 0x0c
     92e:	3d 85       	ldd	r19, Y+13	; 0x0d
     930:	23 2b       	or	r18, r19
     932:	09 f0       	breq	.+2      	; 0x936 <gen_soft_two_color+0xcc>
     934:	5d c1       	rjmp	.+698    	; 0xbf0 <gen_soft_two_color+0x386>
     936:	ea c1       	rjmp	.+980    	; 0xd0c <gen_soft_two_color+0x4a2>
		case 0:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[first_point] = cur_color;
     938:	4b 01       	movw	r8, r22
     93a:	88 0c       	add	r8, r8
     93c:	99 1c       	adc	r9, r9
     93e:	80 0e       	add	r8, r16
     940:	91 1e       	adc	r9, r17
     942:	61 2c       	mov	r6, r1
     944:	71 2c       	mov	r7, r1
				rotatal(rgb,first_point,last_point,1);
				out_to_lpd(rgb,_num+1);
     946:	cf 01       	movw	r24, r30
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	5c 01       	movw	r10, r24
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     94c:	d1 2c       	mov	r13, r1
		case 0:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[first_point] = cur_color;
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	f4 01       	movw	r30, r8
     954:	91 83       	std	Z+1, r25	; 0x01
     956:	80 83       	st	Z, r24
				rotatal(rgb,first_point,last_point,1);
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	a1 01       	movw	r20, r2
     95c:	b2 01       	movw	r22, r4
     95e:	c8 01       	movw	r24, r16
     960:	5c dc       	rcall	.-1864   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     962:	b5 01       	movw	r22, r10
     964:	c8 01       	movw	r24, r16
     966:	c9 db       	rcall	.-2158   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     968:	ee 20       	and	r14, r14
     96a:	51 f0       	breq	.+20     	; 0x980 <gen_soft_two_color+0x116>
     96c:	8d 2d       	mov	r24, r13
     96e:	ef e9       	ldi	r30, 0x9F	; 159
     970:	ff e0       	ldi	r31, 0x0F	; 15
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <gen_soft_two_color+0x108>
     976:	00 c0       	rjmp	.+0      	; 0x978 <gen_soft_two_color+0x10e>
     978:	00 00       	nop
     97a:	8f 5f       	subi	r24, 0xFF	; 255
     97c:	8e 11       	cpse	r24, r14
     97e:	f7 cf       	rjmp	.-18     	; 0x96e <gen_soft_two_color+0x104>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     980:	4c 2d       	mov	r20, r12
     982:	be 01       	movw	r22, r28
     984:	6d 5f       	subi	r22, 0xFD	; 253
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	ae de       	rcall	.-676    	; 0x6ea <color_change>
     98e:	88 23       	and	r24, r24
     990:	f1 f2       	breq	.-68     	; 0x94e <gen_soft_two_color+0xe4>
			cur_color = cl2;
     992:	f9 85       	ldd	r31, Y+9	; 0x09
     994:	f9 83       	std	Y+1, r31	; 0x01
     996:	fa 82       	std	Y+2, r15	; 0x02
			to_color =  cl1;
     998:	2f 81       	ldd	r18, Y+7	; 0x07
     99a:	2b 83       	std	Y+3, r18	; 0x03
     99c:	38 85       	ldd	r19, Y+8	; 0x08
     99e:	3c 83       	std	Y+4, r19	; 0x04
			
			do
			{
				rgb[first_point] = cur_color;
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	f4 01       	movw	r30, r8
     9a6:	91 83       	std	Z+1, r25	; 0x01
     9a8:	80 83       	st	Z, r24
				rotatal(rgb,first_point,last_point,1);
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	a1 01       	movw	r20, r2
     9ae:	b2 01       	movw	r22, r4
     9b0:	c8 01       	movw	r24, r16
     9b2:	33 dc       	rcall	.-1946   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     9b4:	b5 01       	movw	r22, r10
     9b6:	c8 01       	movw	r24, r16
     9b8:	a0 db       	rcall	.-2240   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     9ba:	ee 20       	and	r14, r14
     9bc:	51 f0       	breq	.+20     	; 0x9d2 <gen_soft_two_color+0x168>
     9be:	8d 2d       	mov	r24, r13
     9c0:	ef e9       	ldi	r30, 0x9F	; 159
     9c2:	ff e0       	ldi	r31, 0x0F	; 15
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <gen_soft_two_color+0x15a>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <gen_soft_two_color+0x160>
     9ca:	00 00       	nop
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	8e 11       	cpse	r24, r14
     9d0:	f7 cf       	rjmp	.-18     	; 0x9c0 <gen_soft_two_color+0x156>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     9d2:	4c 2d       	mov	r20, r12
     9d4:	be 01       	movw	r22, r28
     9d6:	6d 5f       	subi	r22, 0xFD	; 253
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	85 de       	rcall	.-758    	; 0x6ea <color_change>
     9e0:	88 23       	and	r24, r24
     9e2:	f1 f2       	breq	.-68     	; 0x9a0 <gen_soft_two_color+0x136>
			cur_color = cl1;
     9e4:	ff 81       	ldd	r31, Y+7	; 0x07
     9e6:	f9 83       	std	Y+1, r31	; 0x01
     9e8:	28 85       	ldd	r18, Y+8	; 0x08
     9ea:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl2;
     9ec:	39 85       	ldd	r19, Y+9	; 0x09
     9ee:	3b 83       	std	Y+3, r19	; 0x03
     9f0:	fc 82       	std	Y+4, r15	; 0x04
	Color_pack cur_color =cl1;
	Color_pack to_color = cl2;
	switch (style)
	{
		case 0:
		for (uint16_t j = 0; j <loop; j++)
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	68 1a       	sub	r6, r24
     9f6:	78 0a       	sbc	r7, r24
     9f8:	ec 85       	ldd	r30, Y+12	; 0x0c
     9fa:	fd 85       	ldd	r31, Y+13	; 0x0d
     9fc:	6e 16       	cp	r6, r30
     9fe:	7f 06       	cpc	r7, r31
     a00:	09 f0       	breq	.+2      	; 0xa04 <gen_soft_two_color+0x19a>
     a02:	a5 cf       	rjmp	.-182    	; 0x94e <gen_soft_two_color+0xe4>
     a04:	83 c1       	rjmp	.+774    	; 0xd0c <gen_soft_two_color+0x4a2>
		case 1:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[last_point] = cur_color;
     a06:	4a 01       	movw	r8, r20
     a08:	88 0c       	add	r8, r8
     a0a:	99 1c       	adc	r9, r9
     a0c:	88 0e       	add	r8, r24
     a0e:	99 1e       	adc	r9, r25
     a10:	61 2c       	mov	r6, r1
     a12:	71 2c       	mov	r7, r1
				rotatal(rgb,first_point,last_point,0);
				out_to_lpd(rgb,_num+1);
     a14:	9f 01       	movw	r18, r30
     a16:	2f 5f       	subi	r18, 0xFF	; 255
     a18:	3f 4f       	sbci	r19, 0xFF	; 255
     a1a:	59 01       	movw	r10, r18
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
			}
			while (color_change(&cur_color,&to_color,div)==0);
     a1c:	d9 84       	ldd	r13, Y+9	; 0x09
		case 1:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[last_point] = cur_color;
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	9a 81       	ldd	r25, Y+2	; 0x02
     a22:	f4 01       	movw	r30, r8
     a24:	91 83       	std	Z+1, r25	; 0x01
     a26:	80 83       	st	Z, r24
				rotatal(rgb,first_point,last_point,0);
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	a1 01       	movw	r20, r2
     a2c:	b2 01       	movw	r22, r4
     a2e:	c8 01       	movw	r24, r16
     a30:	f4 db       	rcall	.-2072   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     a32:	b5 01       	movw	r22, r10
     a34:	c8 01       	movw	r24, r16
     a36:	61 db       	rcall	.-2366   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     a38:	ee 20       	and	r14, r14
     a3a:	51 f0       	breq	.+20     	; 0xa50 <gen_soft_two_color+0x1e6>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	ef e9       	ldi	r30, 0x9F	; 159
     a40:	ff e0       	ldi	r31, 0x0F	; 15
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <gen_soft_two_color+0x1d8>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <gen_soft_two_color+0x1de>
     a48:	00 00       	nop
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	8e 11       	cpse	r24, r14
     a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <gen_soft_two_color+0x1d4>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     a50:	4c 2d       	mov	r20, r12
     a52:	be 01       	movw	r22, r28
     a54:	6d 5f       	subi	r22, 0xFD	; 253
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	46 de       	rcall	.-884    	; 0x6ea <color_change>
     a5e:	88 23       	and	r24, r24
     a60:	f1 f2       	breq	.-68     	; 0xa1e <gen_soft_two_color+0x1b4>
			cur_color = cl2;
     a62:	d9 82       	std	Y+1, r13	; 0x01
     a64:	fa 82       	std	Y+2, r15	; 0x02
			to_color =  cl1;
     a66:	ff 81       	ldd	r31, Y+7	; 0x07
     a68:	fb 83       	std	Y+3, r31	; 0x03
     a6a:	28 85       	ldd	r18, Y+8	; 0x08
     a6c:	2c 83       	std	Y+4, r18	; 0x04
			
			do
			{
				rgb[last_point] = cur_color;
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	9a 81       	ldd	r25, Y+2	; 0x02
     a72:	f4 01       	movw	r30, r8
     a74:	91 83       	std	Z+1, r25	; 0x01
     a76:	80 83       	st	Z, r24
				rotatal(rgb,first_point,last_point,0);
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	a1 01       	movw	r20, r2
     a7c:	b2 01       	movw	r22, r4
     a7e:	c8 01       	movw	r24, r16
     a80:	cc db       	rcall	.-2152   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     a82:	b5 01       	movw	r22, r10
     a84:	c8 01       	movw	r24, r16
     a86:	39 db       	rcall	.-2446   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     a88:	ee 20       	and	r14, r14
     a8a:	51 f0       	breq	.+20     	; 0xaa0 <gen_soft_two_color+0x236>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	ef e9       	ldi	r30, 0x9F	; 159
     a90:	ff e0       	ldi	r31, 0x0F	; 15
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <gen_soft_two_color+0x228>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <gen_soft_two_color+0x22e>
     a98:	00 00       	nop
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	8e 11       	cpse	r24, r14
     a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <gen_soft_two_color+0x224>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     aa0:	4c 2d       	mov	r20, r12
     aa2:	be 01       	movw	r22, r28
     aa4:	6d 5f       	subi	r22, 0xFD	; 253
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	1e de       	rcall	.-964    	; 0x6ea <color_change>
     aae:	88 23       	and	r24, r24
     ab0:	f1 f2       	breq	.-68     	; 0xa6e <gen_soft_two_color+0x204>
			cur_color = cl1;
     ab2:	ff 81       	ldd	r31, Y+7	; 0x07
     ab4:	f9 83       	std	Y+1, r31	; 0x01
     ab6:	28 85       	ldd	r18, Y+8	; 0x08
     ab8:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl2;
     aba:	db 82       	std	Y+3, r13	; 0x03
     abc:	fc 82       	std	Y+4, r15	; 0x04
			
			
		}
		break;
		case 1:
		for (uint16_t j = 0; j <loop; j++)
     abe:	3f ef       	ldi	r19, 0xFF	; 255
     ac0:	63 1a       	sub	r6, r19
     ac2:	73 0a       	sbc	r7, r19
     ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ac8:	68 16       	cp	r6, r24
     aca:	79 06       	cpc	r7, r25
     acc:	09 f0       	breq	.+2      	; 0xad0 <gen_soft_two_color+0x266>
     ace:	a7 cf       	rjmp	.-178    	; 0xa1e <gen_soft_two_color+0x1b4>
     ad0:	1d c1       	rjmp	.+570    	; 0xd0c <gen_soft_two_color+0x4a2>
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				
				rgb[last_point] = cur_color;
     ad2:	4a 01       	movw	r8, r20
     ad4:	88 0c       	add	r8, r8
     ad6:	99 1c       	adc	r9, r9
     ad8:	80 0e       	add	r8, r16
     ada:	91 1e       	adc	r9, r17
				rgb[first_point] = cur_color;
     adc:	3b 01       	movw	r6, r22
     ade:	66 0c       	add	r6, r6
     ae0:	77 1c       	adc	r7, r7
     ae2:	60 0e       	add	r6, r16
     ae4:	71 1e       	adc	r7, r17
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     ae6:	5f 01       	movw	r10, r30
     ae8:	b6 94       	lsr	r11
     aea:	a7 94       	ror	r10
     aec:	a6 0e       	add	r10, r22
     aee:	b7 1e       	adc	r11, r23
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     af0:	95 01       	movw	r18, r10
     af2:	2f 5f       	subi	r18, 0xFF	; 255
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	3e 83       	std	Y+6, r19	; 0x06
     af8:	2d 83       	std	Y+5, r18	; 0x05
     afa:	1b 86       	std	Y+11, r1	; 0x0b
     afc:	1a 86       	std	Y+10, r1	; 0x0a
				out_to_lpd(rgb,_num+1);
     afe:	cf 01       	movw	r24, r30
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	98 8b       	std	Y+16, r25	; 0x10
     b04:	8f 87       	std	Y+15, r24	; 0x0f
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
			}
			while (color_change(&cur_color,&to_color,div)==0);
     b06:	fe 86       	std	Y+14, r15	; 0x0e
     b08:	de 2c       	mov	r13, r14
     b0a:	7c 01       	movw	r14, r24
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				
				rgb[last_point] = cur_color;
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	f4 01       	movw	r30, r8
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24
				rgb[first_point] = cur_color;
     b16:	f3 01       	movw	r30, r6
     b18:	91 83       	std	Z+1, r25	; 0x01
     b1a:	80 83       	st	Z, r24
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	a5 01       	movw	r20, r10
     b20:	b2 01       	movw	r22, r4
     b22:	c8 01       	movw	r24, r16
     b24:	7a db       	rcall	.-2316   	; 0x21a <rotatal>
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	a1 01       	movw	r20, r2
     b2a:	6d 81       	ldd	r22, Y+5	; 0x05
     b2c:	7e 81       	ldd	r23, Y+6	; 0x06
     b2e:	c8 01       	movw	r24, r16
     b30:	74 db       	rcall	.-2328   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     b32:	b7 01       	movw	r22, r14
     b34:	c8 01       	movw	r24, r16
     b36:	e1 da       	rcall	.-2622   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     b38:	dd 20       	and	r13, r13
     b3a:	51 f0       	breq	.+20     	; 0xb50 <gen_soft_two_color+0x2e6>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	ef e9       	ldi	r30, 0x9F	; 159
     b40:	ff e0       	ldi	r31, 0x0F	; 15
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <gen_soft_two_color+0x2d8>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <gen_soft_two_color+0x2de>
     b48:	00 00       	nop
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	8d 11       	cpse	r24, r13
     b4e:	f7 cf       	rjmp	.-18     	; 0xb3e <gen_soft_two_color+0x2d4>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     b50:	4c 2d       	mov	r20, r12
     b52:	be 01       	movw	r22, r28
     b54:	6d 5f       	subi	r22, 0xFD	; 253
     b56:	7f 4f       	sbci	r23, 0xFF	; 255
     b58:	ce 01       	movw	r24, r28
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	c6 dd       	rcall	.-1140   	; 0x6ea <color_change>
     b5e:	88 23       	and	r24, r24
     b60:	a9 f2       	breq	.-86     	; 0xb0c <gen_soft_two_color+0x2a2>
			cur_color = cl2;
     b62:	f9 85       	ldd	r31, Y+9	; 0x09
     b64:	f9 83       	std	Y+1, r31	; 0x01
     b66:	2e 85       	ldd	r18, Y+14	; 0x0e
     b68:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl1;
     b6a:	3f 81       	ldd	r19, Y+7	; 0x07
     b6c:	3b 83       	std	Y+3, r19	; 0x03
     b6e:	88 85       	ldd	r24, Y+8	; 0x08
     b70:	8c 83       	std	Y+4, r24	; 0x04
			
			do
			{
				rgb[last_point] = cur_color;
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	f4 01       	movw	r30, r8
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	80 83       	st	Z, r24
				rgb[first_point] = cur_color;
     b7c:	f3 01       	movw	r30, r6
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	80 83       	st	Z, r24
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	a5 01       	movw	r20, r10
     b86:	b2 01       	movw	r22, r4
     b88:	c8 01       	movw	r24, r16
     b8a:	47 db       	rcall	.-2418   	; 0x21a <rotatal>
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	a1 01       	movw	r20, r2
     b90:	6d 81       	ldd	r22, Y+5	; 0x05
     b92:	7e 81       	ldd	r23, Y+6	; 0x06
     b94:	c8 01       	movw	r24, r16
     b96:	41 db       	rcall	.-2430   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     b98:	b7 01       	movw	r22, r14
     b9a:	c8 01       	movw	r24, r16
     b9c:	ae da       	rcall	.-2724   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     b9e:	dd 20       	and	r13, r13
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <gen_soft_two_color+0x34c>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	ef e9       	ldi	r30, 0x9F	; 159
     ba6:	ff e0       	ldi	r31, 0x0F	; 15
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <gen_soft_two_color+0x33e>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <gen_soft_two_color+0x344>
     bae:	00 00       	nop
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	8d 11       	cpse	r24, r13
     bb4:	f7 cf       	rjmp	.-18     	; 0xba4 <gen_soft_two_color+0x33a>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     bb6:	4c 2d       	mov	r20, r12
     bb8:	be 01       	movw	r22, r28
     bba:	6d 5f       	subi	r22, 0xFD	; 253
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	93 dd       	rcall	.-1242   	; 0x6ea <color_change>
     bc4:	88 23       	and	r24, r24
     bc6:	a9 f2       	breq	.-86     	; 0xb72 <gen_soft_two_color+0x308>
			
			cur_color = cl1;
     bc8:	ff 81       	ldd	r31, Y+7	; 0x07
     bca:	f9 83       	std	Y+1, r31	; 0x01
     bcc:	28 85       	ldd	r18, Y+8	; 0x08
     bce:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl2;
     bd0:	39 85       	ldd	r19, Y+9	; 0x09
     bd2:	3b 83       	std	Y+3, r19	; 0x03
     bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     bd6:	8c 83       	std	Y+4, r24	; 0x04
			
		}
		break;
		case 2:
		
		for (uint16_t j = 0; j <loop; j++)
     bd8:	ea 85       	ldd	r30, Y+10	; 0x0a
     bda:	fb 85       	ldd	r31, Y+11	; 0x0b
     bdc:	31 96       	adiw	r30, 0x01	; 1
     bde:	fb 87       	std	Y+11, r31	; 0x0b
     be0:	ea 87       	std	Y+10, r30	; 0x0a
     be2:	2c 85       	ldd	r18, Y+12	; 0x0c
     be4:	3d 85       	ldd	r19, Y+13	; 0x0d
     be6:	e2 17       	cp	r30, r18
     be8:	f3 07       	cpc	r31, r19
     bea:	09 f0       	breq	.+2      	; 0xbee <gen_soft_two_color+0x384>
     bec:	8f cf       	rjmp	.-226    	; 0xb0c <gen_soft_two_color+0x2a2>
     bee:	8e c0       	rjmp	.+284    	; 0xd0c <gen_soft_two_color+0x4a2>
		default:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[((last_point-first_point)/2)+first_point] = cur_color;
     bf0:	5f 01       	movw	r10, r30
     bf2:	b6 94       	lsr	r11
     bf4:	a7 94       	ror	r10
     bf6:	a6 0e       	add	r10, r22
     bf8:	b7 1e       	adc	r11, r23
     bfa:	c5 01       	movw	r24, r10
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	48 01       	movw	r8, r16
     c02:	88 0e       	add	r8, r24
     c04:	99 1e       	adc	r9, r25
				rgb[((last_point-first_point)/2)+first_point+1] = cur_color;
     c06:	95 01       	movw	r18, r10
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	3e 83       	std	Y+6, r19	; 0x06
     c0e:	2d 83       	std	Y+5, r18	; 0x05
     c10:	02 96       	adiw	r24, 0x02	; 2
     c12:	38 01       	movw	r6, r16
     c14:	68 0e       	add	r6, r24
     c16:	79 1e       	adc	r7, r25
     c18:	1b 86       	std	Y+11, r1	; 0x0b
     c1a:	1a 86       	std	Y+10, r1	; 0x0a
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
				out_to_lpd(rgb,_num+1);
     c1c:	cf 01       	movw	r24, r30
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	98 8b       	std	Y+16, r25	; 0x10
     c22:	8f 87       	std	Y+15, r24	; 0x0f
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
			}
			while (color_change(&cur_color,&to_color,div)==0);
     c24:	fe 86       	std	Y+14, r15	; 0x0e
     c26:	de 2c       	mov	r13, r14
     c28:	7c 01       	movw	r14, r24
		default:
		for (uint16_t j = 0; j <loop; j++)
		{
			do
			{
				rgb[((last_point-first_point)/2)+first_point] = cur_color;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	f4 01       	movw	r30, r8
     c30:	91 83       	std	Z+1, r25	; 0x01
     c32:	80 83       	st	Z, r24
				rgb[((last_point-first_point)/2)+first_point+1] = cur_color;
     c34:	f3 01       	movw	r30, r6
     c36:	91 83       	std	Z+1, r25	; 0x01
     c38:	80 83       	st	Z, r24
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	a5 01       	movw	r20, r10
     c3e:	b2 01       	movw	r22, r4
     c40:	c8 01       	movw	r24, r16
     c42:	eb da       	rcall	.-2602   	; 0x21a <rotatal>
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	a1 01       	movw	r20, r2
     c48:	6d 81       	ldd	r22, Y+5	; 0x05
     c4a:	7e 81       	ldd	r23, Y+6	; 0x06
     c4c:	c8 01       	movw	r24, r16
     c4e:	e5 da       	rcall	.-2614   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     c50:	b7 01       	movw	r22, r14
     c52:	c8 01       	movw	r24, r16
     c54:	52 da       	rcall	.-2908   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     c56:	dd 20       	and	r13, r13
     c58:	51 f0       	breq	.+20     	; 0xc6e <gen_soft_two_color+0x404>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	ef e9       	ldi	r30, 0x9F	; 159
     c5e:	ff e0       	ldi	r31, 0x0F	; 15
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <gen_soft_two_color+0x3f6>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <gen_soft_two_color+0x3fc>
     c66:	00 00       	nop
     c68:	8f 5f       	subi	r24, 0xFF	; 255
     c6a:	8d 11       	cpse	r24, r13
     c6c:	f7 cf       	rjmp	.-18     	; 0xc5c <gen_soft_two_color+0x3f2>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     c6e:	4c 2d       	mov	r20, r12
     c70:	be 01       	movw	r22, r28
     c72:	6d 5f       	subi	r22, 0xFD	; 253
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	37 dd       	rcall	.-1426   	; 0x6ea <color_change>
     c7c:	88 23       	and	r24, r24
     c7e:	a9 f2       	breq	.-86     	; 0xc2a <gen_soft_two_color+0x3c0>
			
			cur_color = cl2;
     c80:	f9 85       	ldd	r31, Y+9	; 0x09
     c82:	f9 83       	std	Y+1, r31	; 0x01
     c84:	2e 85       	ldd	r18, Y+14	; 0x0e
     c86:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl1;
     c88:	3f 81       	ldd	r19, Y+7	; 0x07
     c8a:	3b 83       	std	Y+3, r19	; 0x03
     c8c:	88 85       	ldd	r24, Y+8	; 0x08
     c8e:	8c 83       	std	Y+4, r24	; 0x04
			
			do
			{
				rgb[((last_point-first_point)/2)+first_point] = cur_color;
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	9a 81       	ldd	r25, Y+2	; 0x02
     c94:	f4 01       	movw	r30, r8
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
				rgb[((last_point-first_point)/2)+first_point+1] = cur_color;
     c9a:	f3 01       	movw	r30, r6
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
				rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	a5 01       	movw	r20, r10
     ca4:	b2 01       	movw	r22, r4
     ca6:	c8 01       	movw	r24, r16
     ca8:	b8 da       	rcall	.-2704   	; 0x21a <rotatal>
				rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	a1 01       	movw	r20, r2
     cae:	6d 81       	ldd	r22, Y+5	; 0x05
     cb0:	7e 81       	ldd	r23, Y+6	; 0x06
     cb2:	c8 01       	movw	r24, r16
     cb4:	b2 da       	rcall	.-2716   	; 0x21a <rotatal>
				out_to_lpd(rgb,_num+1);
     cb6:	b7 01       	movw	r22, r14
     cb8:	c8 01       	movw	r24, r16
     cba:	1f da       	rcall	.-3010   	; 0xfa <out_to_lpd>
				for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     cbc:	dd 20       	and	r13, r13
     cbe:	51 f0       	breq	.+20     	; 0xcd4 <gen_soft_two_color+0x46a>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	ef e9       	ldi	r30, 0x9F	; 159
     cc4:	ff e0       	ldi	r31, 0x0F	; 15
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <gen_soft_two_color+0x45c>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <gen_soft_two_color+0x462>
     ccc:	00 00       	nop
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	8d 11       	cpse	r24, r13
     cd2:	f7 cf       	rjmp	.-18     	; 0xcc2 <gen_soft_two_color+0x458>
			}
			while (color_change(&cur_color,&to_color,div)==0);
     cd4:	4c 2d       	mov	r20, r12
     cd6:	be 01       	movw	r22, r28
     cd8:	6d 5f       	subi	r22, 0xFD	; 253
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	04 dd       	rcall	.-1528   	; 0x6ea <color_change>
     ce2:	88 23       	and	r24, r24
     ce4:	a9 f2       	breq	.-86     	; 0xc90 <gen_soft_two_color+0x426>
			cur_color = cl1;
     ce6:	ff 81       	ldd	r31, Y+7	; 0x07
     ce8:	f9 83       	std	Y+1, r31	; 0x01
     cea:	28 85       	ldd	r18, Y+8	; 0x08
     cec:	2a 83       	std	Y+2, r18	; 0x02
			to_color =  cl2;
     cee:	39 85       	ldd	r19, Y+9	; 0x09
     cf0:	3b 83       	std	Y+3, r19	; 0x03
     cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
     cf4:	8c 83       	std	Y+4, r24	; 0x04
		}
		
		break;
		
		default:
		for (uint16_t j = 0; j <loop; j++)
     cf6:	ea 85       	ldd	r30, Y+10	; 0x0a
     cf8:	fb 85       	ldd	r31, Y+11	; 0x0b
     cfa:	31 96       	adiw	r30, 0x01	; 1
     cfc:	fb 87       	std	Y+11, r31	; 0x0b
     cfe:	ea 87       	std	Y+10, r30	; 0x0a
     d00:	2c 85       	ldd	r18, Y+12	; 0x0c
     d02:	3d 85       	ldd	r19, Y+13	; 0x0d
     d04:	e2 17       	cp	r30, r18
     d06:	f3 07       	cpc	r31, r19
     d08:	09 f0       	breq	.+2      	; 0xd0c <gen_soft_two_color+0x4a2>
     d0a:	8f cf       	rjmp	.-226    	; 0xc2a <gen_soft_two_color+0x3c0>
			to_color =  cl2;
			
		}
		break;
	}
}
     d0c:	60 96       	adiw	r28, 0x10	; 16
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	9f 90       	pop	r9
     d2e:	8f 90       	pop	r8
     d30:	7f 90       	pop	r7
     d32:	6f 90       	pop	r6
     d34:	5f 90       	pop	r5
     d36:	4f 90       	pop	r4
     d38:	3f 90       	pop	r3
     d3a:	2f 90       	pop	r2
     d3c:	08 95       	ret

00000d3e <gen_color_linear>:
}



void gen_color_linear(Color_pack *rgb,uint16_t first_point,uint16_t last_point,uint8_t speed, uint8_t div,uint16_t loop,uint8_t style)
{
     d3e:	2f 92       	push	r2
     d40:	3f 92       	push	r3
     d42:	4f 92       	push	r4
     d44:	5f 92       	push	r5
     d46:	6f 92       	push	r6
     d48:	7f 92       	push	r7
     d4a:	8f 92       	push	r8
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	2a 97       	sbiw	r28, 0x0a	; 10
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	5c 01       	movw	r10, r24
     d74:	3b 01       	movw	r6, r22
     d76:	2a 01       	movw	r4, r20
     d78:	12 2f       	mov	r17, r18
     d7a:	fa 86       	std	Y+10, r15	; 0x0a
     d7c:	e9 86       	std	Y+9, r14	; 0x09
		uint16_t _num = last_point - first_point;
     d7e:	7a 01       	movw	r14, r20
     d80:	e6 1a       	sub	r14, r22
     d82:	f7 0a       	sbc	r15, r23
		Color_pack cur_color =base_convert((random()%7));
     d84:	fc d3       	rcall	.+2040   	; 0x157e <random>
     d86:	27 e0       	ldi	r18, 0x07	; 7
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	6f d3       	rcall	.+1758   	; 0x146e <__divmodsi4>
     d90:	86 2f       	mov	r24, r22
     d92:	0f da       	rcall	.-3042   	; 0x1b2 <base_convert>
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
		Color_pack to_color = base_convert((random()%7));
     d98:	f2 d3       	rcall	.+2020   	; 0x157e <random>
     d9a:	27 e0       	ldi	r18, 0x07	; 7
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	65 d3       	rcall	.+1738   	; 0x146e <__divmodsi4>
     da4:	86 2f       	mov	r24, r22
     da6:	05 da       	rcall	.-3062   	; 0x1b2 <base_convert>
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
		switch (style)
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	c2 16       	cp	r12, r18
     db0:	59 f0       	breq	.+22     	; 0xdc8 <gen_color_linear+0x8a>
     db2:	c2 16       	cp	r12, r18
     db4:	78 f0       	brcs	.+30     	; 0xdd4 <gen_color_linear+0x96>
     db6:	32 e0       	ldi	r19, 0x02	; 2
     db8:	c3 12       	cpse	r12, r19
     dba:	11 c0       	rjmp	.+34     	; 0xdde <gen_color_linear+0xa0>
				to_color = base_convert((random()%7));
			}
			break;
			case 2:
			
			for (uint16_t j = 0; j <loop; j++)
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	89 2b       	or	r24, r25
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <gen_color_linear+0x88>
     dc4:	99 c0       	rjmp	.+306    	; 0xef8 <gen_color_linear+0x1ba>
     dc6:	55 c1       	rjmp	.+682    	; 0x1072 <gen_color_linear+0x334>
				to_color = base_convert((random()%7));
			}
			break;
			
			case 1:
			for (uint16_t j = 0; j <loop; j++)
     dc8:	e9 85       	ldd	r30, Y+9	; 0x09
     dca:	fa 85       	ldd	r31, Y+10	; 0x0a
     dcc:	ef 2b       	or	r30, r31
     dce:	09 f0       	breq	.+2      	; 0xdd2 <gen_color_linear+0x94>
     dd0:	50 c0       	rjmp	.+160    	; 0xe72 <gen_color_linear+0x134>
     dd2:	4f c1       	rjmp	.+670    	; 0x1072 <gen_color_linear+0x334>
		Color_pack cur_color =base_convert((random()%7));
		Color_pack to_color = base_convert((random()%7));
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
     dd4:	29 85       	ldd	r18, Y+9	; 0x09
     dd6:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd8:	23 2b       	or	r18, r19
     dda:	39 f4       	brne	.+14     	; 0xdea <gen_color_linear+0xac>
     ddc:	4a c1       	rjmp	.+660    	; 0x1072 <gen_color_linear+0x334>
			}
			
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	89 2b       	or	r24, r25
     de4:	09 f0       	breq	.+2      	; 0xde8 <gen_color_linear+0xaa>
     de6:	e7 c0       	rjmp	.+462    	; 0xfb6 <gen_color_linear+0x278>
     de8:	44 c1       	rjmp	.+648    	; 0x1072 <gen_color_linear+0x334>
			case 0:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[first_point] = cur_color;
     dea:	63 01       	movw	r12, r6
     dec:	cc 0c       	add	r12, r12
     dee:	dd 1c       	adc	r13, r13
     df0:	ca 0c       	add	r12, r10
     df2:	db 1c       	adc	r13, r11
     df4:	81 2c       	mov	r8, r1
     df6:	91 2c       	mov	r9, r1
					rotatal(rgb,first_point,last_point,1);
					out_to_lpd(rgb,_num+1);
     df8:	f7 01       	movw	r30, r14
     dfa:	31 96       	adiw	r30, 0x01	; 1
     dfc:	7f 01       	movw	r14, r30
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     dfe:	31 2c       	mov	r3, r1
			case 0:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[first_point] = cur_color;
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	f6 01       	movw	r30, r12
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
					rotatal(rgb,first_point,last_point,1);
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	a2 01       	movw	r20, r4
     e0e:	b3 01       	movw	r22, r6
     e10:	c5 01       	movw	r24, r10
     e12:	03 da       	rcall	.-3066   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     e14:	b7 01       	movw	r22, r14
     e16:	c5 01       	movw	r24, r10
     e18:	70 d9       	rcall	.-3360   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     e1a:	11 23       	and	r17, r17
     e1c:	51 f0       	breq	.+20     	; 0xe32 <gen_color_linear+0xf4>
     e1e:	83 2d       	mov	r24, r3
     e20:	ef e9       	ldi	r30, 0x9F	; 159
     e22:	ff e0       	ldi	r31, 0x0F	; 15
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <gen_color_linear+0xe6>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <gen_color_linear+0xec>
     e2a:	00 00       	nop
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	81 13       	cpse	r24, r17
     e30:	f7 cf       	rjmp	.-18     	; 0xe20 <gen_color_linear+0xe2>
				}
				while (color_change(&cur_color,&to_color,div)==0);
     e32:	40 2f       	mov	r20, r16
     e34:	be 01       	movw	r22, r28
     e36:	6d 5f       	subi	r22, 0xFD	; 253
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	55 dc       	rcall	.-1878   	; 0x6ea <color_change>
     e40:	88 23       	and	r24, r24
     e42:	f1 f2       	breq	.-68     	; 0xe00 <gen_color_linear+0xc2>
				cur_color = to_color;
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
				to_color = base_convert((random()%7));
     e4c:	98 d3       	rcall	.+1840   	; 0x157e <random>
     e4e:	27 e0       	ldi	r18, 0x07	; 7
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	0b d3       	rcall	.+1558   	; 0x146e <__divmodsi4>
     e58:	86 2f       	mov	r24, r22
     e5a:	ab d9       	rcall	.-3242   	; 0x1b2 <base_convert>
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
		Color_pack cur_color =base_convert((random()%7));
		Color_pack to_color = base_convert((random()%7));
		switch (style)
		{
			case 0:
			for (uint16_t j = 0; j <loop; j++)
     e60:	ff ef       	ldi	r31, 0xFF	; 255
     e62:	8f 1a       	sub	r8, r31
     e64:	9f 0a       	sbc	r9, r31
     e66:	29 85       	ldd	r18, Y+9	; 0x09
     e68:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6a:	82 16       	cp	r8, r18
     e6c:	93 06       	cpc	r9, r19
     e6e:	41 f6       	brne	.-112    	; 0xe00 <gen_color_linear+0xc2>
     e70:	00 c1       	rjmp	.+512    	; 0x1072 <gen_color_linear+0x334>
			case 1:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[last_point] = cur_color;
     e72:	62 01       	movw	r12, r4
     e74:	cc 0c       	add	r12, r12
     e76:	dd 1c       	adc	r13, r13
     e78:	ca 0c       	add	r12, r10
     e7a:	db 1c       	adc	r13, r11
     e7c:	81 2c       	mov	r8, r1
     e7e:	91 2c       	mov	r9, r1
					rotatal(rgb,first_point,last_point,0);
					out_to_lpd(rgb,_num+1);
     e80:	c7 01       	movw	r24, r14
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	7c 01       	movw	r14, r24
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
				}
				while (color_change(&cur_color,&to_color,div)==0);
				cur_color = to_color;
				to_color = base_convert((random()%7));
     e86:	29 84       	ldd	r2, Y+9	; 0x09
     e88:	3a 84       	ldd	r3, Y+10	; 0x0a
			case 1:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[last_point] = cur_color;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	f6 01       	movw	r30, r12
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
					rotatal(rgb,first_point,last_point,0);
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	a2 01       	movw	r20, r4
     e98:	b3 01       	movw	r22, r6
     e9a:	c5 01       	movw	r24, r10
     e9c:	be d9       	rcall	.-3204   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     e9e:	b7 01       	movw	r22, r14
     ea0:	c5 01       	movw	r24, r10
     ea2:	2b d9       	rcall	.-3498   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     ea4:	11 23       	and	r17, r17
     ea6:	51 f0       	breq	.+20     	; 0xebc <gen_color_linear+0x17e>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	ef e9       	ldi	r30, 0x9F	; 159
     eac:	ff e0       	ldi	r31, 0x0F	; 15
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <gen_color_linear+0x170>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <gen_color_linear+0x176>
     eb4:	00 00       	nop
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	81 13       	cpse	r24, r17
     eba:	f7 cf       	rjmp	.-18     	; 0xeaa <gen_color_linear+0x16c>
				}
				while (color_change(&cur_color,&to_color,div)==0);
     ebc:	40 2f       	mov	r20, r16
     ebe:	be 01       	movw	r22, r28
     ec0:	6d 5f       	subi	r22, 0xFD	; 253
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	10 dc       	rcall	.-2016   	; 0x6ea <color_change>
     eca:	88 23       	and	r24, r24
     ecc:	f1 f2       	breq	.-68     	; 0xe8a <gen_color_linear+0x14c>
				cur_color = to_color;
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	9c 81       	ldd	r25, Y+4	; 0x04
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01
				to_color = base_convert((random()%7));
     ed6:	53 d3       	rcall	.+1702   	; 0x157e <random>
     ed8:	27 e0       	ldi	r18, 0x07	; 7
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	c6 d2       	rcall	.+1420   	; 0x146e <__divmodsi4>
     ee2:	86 2f       	mov	r24, r22
     ee4:	66 d9       	rcall	.-3380   	; 0x1b2 <base_convert>
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
				to_color = base_convert((random()%7));
			}
			break;
			
			case 1:
			for (uint16_t j = 0; j <loop; j++)
     eea:	ff ef       	ldi	r31, 0xFF	; 255
     eec:	8f 1a       	sub	r8, r31
     eee:	9f 0a       	sbc	r9, r31
     ef0:	82 14       	cp	r8, r2
     ef2:	93 04       	cpc	r9, r3
     ef4:	51 f6       	brne	.-108    	; 0xe8a <gen_color_linear+0x14c>
     ef6:	bd c0       	rjmp	.+378    	; 0x1072 <gen_color_linear+0x334>
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					
					rgb[last_point] = cur_color;
     ef8:	62 01       	movw	r12, r4
     efa:	cc 0c       	add	r12, r12
     efc:	dd 1c       	adc	r13, r13
     efe:	ca 0c       	add	r12, r10
     f00:	db 1c       	adc	r13, r11
					rgb[first_point] = cur_color;
     f02:	43 01       	movw	r8, r6
     f04:	88 0c       	add	r8, r8
     f06:	99 1c       	adc	r9, r9
     f08:	8a 0c       	add	r8, r10
     f0a:	9b 1c       	adc	r9, r11
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     f0c:	17 01       	movw	r2, r14
     f0e:	36 94       	lsr	r3
     f10:	27 94       	ror	r2
     f12:	26 0c       	add	r2, r6
     f14:	37 1c       	adc	r3, r7
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     f16:	91 01       	movw	r18, r2
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	3e 83       	std	Y+6, r19	; 0x06
     f1e:	2d 83       	std	Y+5, r18	; 0x05
     f20:	18 86       	std	Y+8, r1	; 0x08
     f22:	1f 82       	std	Y+7, r1	; 0x07
					out_to_lpd(rgb,_num+1);
     f24:	c7 01       	movw	r24, r14
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	7c 01       	movw	r14, r24
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					
					rgb[last_point] = cur_color;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	f6 01       	movw	r30, r12
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
					rgb[first_point] = cur_color;
     f34:	f4 01       	movw	r30, r8
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,0);
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	a1 01       	movw	r20, r2
     f3e:	b3 01       	movw	r22, r6
     f40:	c5 01       	movw	r24, r10
     f42:	6b d9       	rcall	.-3370   	; 0x21a <rotatal>
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,1);
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	a2 01       	movw	r20, r4
     f48:	6d 81       	ldd	r22, Y+5	; 0x05
     f4a:	7e 81       	ldd	r23, Y+6	; 0x06
     f4c:	c5 01       	movw	r24, r10
     f4e:	65 d9       	rcall	.-3382   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
     f50:	b7 01       	movw	r22, r14
     f52:	c5 01       	movw	r24, r10
     f54:	d2 d8       	rcall	.-3676   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
     f56:	11 23       	and	r17, r17
     f58:	51 f0       	breq	.+20     	; 0xf6e <gen_color_linear+0x230>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	ef e9       	ldi	r30, 0x9F	; 159
     f5e:	ff e0       	ldi	r31, 0x0F	; 15
     f60:	31 97       	sbiw	r30, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <gen_color_linear+0x222>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <gen_color_linear+0x228>
     f66:	00 00       	nop
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	81 13       	cpse	r24, r17
     f6c:	f7 cf       	rjmp	.-18     	; 0xf5c <gen_color_linear+0x21e>
				}
				while (color_change(&cur_color,&to_color,div)==0);
     f6e:	40 2f       	mov	r20, r16
     f70:	be 01       	movw	r22, r28
     f72:	6d 5f       	subi	r22, 0xFD	; 253
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	b7 db       	rcall	.-2194   	; 0x6ea <color_change>
     f7c:	88 23       	and	r24, r24
     f7e:	a9 f2       	breq	.-86     	; 0xf2a <gen_color_linear+0x1ec>
				cur_color = to_color;
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
				to_color = base_convert((random()%7));
     f88:	fa d2       	rcall	.+1524   	; 0x157e <random>
     f8a:	27 e0       	ldi	r18, 0x07	; 7
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	6d d2       	rcall	.+1242   	; 0x146e <__divmodsi4>
     f94:	86 2f       	mov	r24, r22
     f96:	0d d9       	rcall	.-3558   	; 0x1b2 <base_convert>
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
				to_color = base_convert((random()%7));
			}
			break;
			case 2:
			
			for (uint16_t j = 0; j <loop; j++)
     f9c:	2f 81       	ldd	r18, Y+7	; 0x07
     f9e:	38 85       	ldd	r19, Y+8	; 0x08
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	38 87       	std	Y+8, r19	; 0x08
     fa6:	2f 83       	std	Y+7, r18	; 0x07
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <gen_color_linear+0x276>
     fb2:	bb cf       	rjmp	.-138    	; 0xf2a <gen_color_linear+0x1ec>
     fb4:	5e c0       	rjmp	.+188    	; 0x1072 <gen_color_linear+0x334>
			default:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[((last_point-first_point)/2)+first_point] = cur_color;
     fb6:	17 01       	movw	r2, r14
     fb8:	36 94       	lsr	r3
     fba:	27 94       	ror	r2
     fbc:	26 0c       	add	r2, r6
     fbe:	37 1c       	adc	r3, r7
     fc0:	c1 01       	movw	r24, r2
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	65 01       	movw	r12, r10
     fc8:	c8 0e       	add	r12, r24
     fca:	d9 1e       	adc	r13, r25
					rgb[((last_point-first_point)/2)+first_point+1] = cur_color;
     fcc:	f1 01       	movw	r30, r2
     fce:	31 96       	adiw	r30, 0x01	; 1
     fd0:	fe 83       	std	Y+6, r31	; 0x06
     fd2:	ed 83       	std	Y+5, r30	; 0x05
     fd4:	02 96       	adiw	r24, 0x02	; 2
     fd6:	45 01       	movw	r8, r10
     fd8:	88 0e       	add	r8, r24
     fda:	99 1e       	adc	r9, r25
     fdc:	18 86       	std	Y+8, r1	; 0x08
     fde:	1f 82       	std	Y+7, r1	; 0x07
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
					out_to_lpd(rgb,_num+1);
     fe0:	97 01       	movw	r18, r14
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	79 01       	movw	r14, r18
			default:
			for (uint16_t j = 0; j <loop; j++)
			{
				do
				{
					rgb[((last_point-first_point)/2)+first_point] = cur_color;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	f6 01       	movw	r30, r12
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
					rgb[((last_point-first_point)/2)+first_point+1] = cur_color;
     ff2:	f4 01       	movw	r30, r8
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	80 83       	st	Z, r24
					rotatal(rgb,first_point,((last_point-first_point)/2)+first_point,1);
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	a1 01       	movw	r20, r2
     ffc:	b3 01       	movw	r22, r6
     ffe:	c5 01       	movw	r24, r10
    1000:	0c d9       	rcall	.-3560   	; 0x21a <rotatal>
					rotatal(rgb,((last_point-first_point)/2)+first_point+1,last_point,0);
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	a2 01       	movw	r20, r4
    1006:	6d 81       	ldd	r22, Y+5	; 0x05
    1008:	7e 81       	ldd	r23, Y+6	; 0x06
    100a:	c5 01       	movw	r24, r10
    100c:	06 d9       	rcall	.-3572   	; 0x21a <rotatal>
					out_to_lpd(rgb,_num+1);
    100e:	b7 01       	movw	r22, r14
    1010:	c5 01       	movw	r24, r10
    1012:	73 d8       	rcall	.-3866   	; 0xfa <out_to_lpd>
					for (uint8_t i = 0; i<speed;i++) _delay_ms(1);
    1014:	11 23       	and	r17, r17
    1016:	51 f0       	breq	.+20     	; 0x102c <gen_color_linear+0x2ee>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	ef e9       	ldi	r30, 0x9F	; 159
    101c:	ff e0       	ldi	r31, 0x0F	; 15
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <gen_color_linear+0x2e0>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <gen_color_linear+0x2e6>
    1024:	00 00       	nop
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	81 13       	cpse	r24, r17
    102a:	f7 cf       	rjmp	.-18     	; 0x101a <gen_color_linear+0x2dc>
				}
				while (color_change(&cur_color,&to_color,div)==0);
    102c:	40 2f       	mov	r20, r16
    102e:	be 01       	movw	r22, r28
    1030:	6d 5f       	subi	r22, 0xFD	; 253
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	58 db       	rcall	.-2384   	; 0x6ea <color_change>
    103a:	88 23       	and	r24, r24
    103c:	a9 f2       	breq	.-86     	; 0xfe8 <gen_color_linear+0x2aa>
				cur_color = to_color;
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
				to_color = base_convert((random()%7));
    1046:	9b d2       	rcall	.+1334   	; 0x157e <random>
    1048:	27 e0       	ldi	r18, 0x07	; 7
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	0e d2       	rcall	.+1052   	; 0x146e <__divmodsi4>
    1052:	86 2f       	mov	r24, r22
    1054:	ae d8       	rcall	.-3748   	; 0x1b2 <base_convert>
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
			}
			
			break;
			
			default:
			for (uint16_t j = 0; j <loop; j++)
    105a:	2f 81       	ldd	r18, Y+7	; 0x07
    105c:	38 85       	ldd	r19, Y+8	; 0x08
    105e:	2f 5f       	subi	r18, 0xFF	; 255
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	38 87       	std	Y+8, r19	; 0x08
    1064:	2f 83       	std	Y+7, r18	; 0x07
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	28 17       	cp	r18, r24
    106c:	39 07       	cpc	r19, r25
    106e:	09 f0       	breq	.+2      	; 0x1072 <gen_color_linear+0x334>
    1070:	bb cf       	rjmp	.-138    	; 0xfe8 <gen_color_linear+0x2aa>
				cur_color = to_color;
				to_color = base_convert((random()%7));
			}
			break;
		}
}
    1072:	2a 96       	adiw	r28, 0x0a	; 10
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	7f 90       	pop	r7
    1098:	6f 90       	pop	r6
    109a:	5f 90       	pop	r5
    109c:	4f 90       	pop	r4
    109e:	3f 90       	pop	r3
    10a0:	2f 90       	pop	r2
    10a2:	08 95       	ret

000010a4 <color_change_sys>:
}



void color_change_sys(Color_pack *rgb,uint16_t first_point,uint16_t last_point,Color_pack to_color,uint8_t speed,uint8_t ratio,uint16_t wait)
{
    10a4:	2f 92       	push	r2
    10a6:	3f 92       	push	r3
    10a8:	4f 92       	push	r4
    10aa:	5f 92       	push	r5
    10ac:	6f 92       	push	r6
    10ae:	7f 92       	push	r7
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <color_change_sys+0x26>
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <color_change_sys+0x28>
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	4c 01       	movw	r8, r24
    10d2:	3c 83       	std	Y+4, r19	; 0x04
    10d4:	2b 83       	std	Y+3, r18	; 0x03
	Color_pack _cur_color=rgb[first_point];
    10d6:	fb 01       	movw	r30, r22
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	e8 0f       	add	r30, r24
    10de:	f9 1f       	adc	r31, r25
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
	
	if ((_cur_color.Color.Blue==to_color.Color.Blue)&&(_cur_color.Color.Red==to_color.Color.Red)&&(_cur_color.Color.Green==to_color.Color.Green)) return;
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	98 27       	eor	r25, r24
    10ee:	9c 77       	andi	r25, 0x7C	; 124
    10f0:	a9 f0       	breq	.+42     	; 0x111c <color_change_sys+0x78>
	do 
	{
		for (uint16_t i=0;i<(last_point-first_point)+1;i++) rgb[first_point+i]=_cur_color;
    10f2:	46 1b       	sub	r20, r22
    10f4:	57 0b       	sbc	r21, r23
    10f6:	3a 01       	movw	r6, r20
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	68 1a       	sub	r6, r24
    10fc:	78 0a       	sbc	r7, r24
    10fe:	19 f0       	breq	.+6      	; 0x1106 <color_change_sys+0x62>
    1100:	56 2c       	mov	r5, r6
    1102:	f7 2c       	mov	r15, r7
    1104:	02 c0       	rjmp	.+4      	; 0x110a <color_change_sys+0x66>
    1106:	51 2c       	mov	r5, r1
    1108:	f1 2c       	mov	r15, r1
    110a:	5a 01       	movw	r10, r20
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	a8 0e       	add	r10, r24
    1110:	b1 1c       	adc	r11, r1
    1112:	2e 2e       	mov	r2, r30
    1114:	3f 2e       	mov	r3, r31
		out_to_lpd(rgb,(last_point-first_point)+1);
		for (uint16_t i = 0;i<speed;i++) _delay_ms(1);
    1116:	10 e0       	ldi	r17, 0x00	; 0
    1118:	41 2c       	mov	r4, r1
    111a:	1c c0       	rjmp	.+56     	; 0x1154 <color_change_sys+0xb0>

void color_change_sys(Color_pack *rgb,uint16_t first_point,uint16_t last_point,Color_pack to_color,uint8_t speed,uint8_t ratio,uint16_t wait)
{
	Color_pack _cur_color=rgb[first_point];
	
	if ((_cur_color.Color.Blue==to_color.Color.Blue)&&(_cur_color.Color.Red==to_color.Color.Red)&&(_cur_color.Color.Green==to_color.Color.Green)) return;
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	89 27       	eor	r24, r25
    1122:	8f 71       	andi	r24, 0x1F	; 31
    1124:	31 f7       	brne	.-52     	; 0x10f2 <color_change_sys+0x4e>
    1126:	29 81       	ldd	r18, Y+1	; 0x01
    1128:	82 2f       	mov	r24, r18
    112a:	82 95       	swap	r24
    112c:	86 95       	lsr	r24
    112e:	87 70       	andi	r24, 0x07	; 7
    1130:	2a 81       	ldd	r18, Y+2	; 0x02
    1132:	23 70       	andi	r18, 0x03	; 3
    1134:	22 0f       	add	r18, r18
    1136:	22 0f       	add	r18, r18
    1138:	22 0f       	add	r18, r18
    113a:	28 2b       	or	r18, r24
    113c:	92 95       	swap	r25
    113e:	96 95       	lsr	r25
    1140:	97 70       	andi	r25, 0x07	; 7
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	83 70       	andi	r24, 0x03	; 3
    1146:	88 0f       	add	r24, r24
    1148:	88 0f       	add	r24, r24
    114a:	88 0f       	add	r24, r24
    114c:	89 2b       	or	r24, r25
    114e:	28 13       	cpse	r18, r24
    1150:	d0 cf       	rjmp	.-96     	; 0x10f2 <color_change_sys+0x4e>
    1152:	3a c0       	rjmp	.+116    	; 0x11c8 <color_change_sys+0x124>
	do 
	{
		for (uint16_t i=0;i<(last_point-first_point)+1;i++) rgb[first_point+i]=_cur_color;
    1154:	61 14       	cp	r6, r1
    1156:	71 04       	cpc	r7, r1
    1158:	61 f0       	breq	.+24     	; 0x1172 <color_change_sys+0xce>
    115a:	e2 2d       	mov	r30, r2
    115c:	f3 2d       	mov	r31, r3
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	29 81       	ldd	r18, Y+1	; 0x01
    1164:	3a 81       	ldd	r19, Y+2	; 0x02
    1166:	21 93       	st	Z+, r18
    1168:	31 93       	st	Z+, r19
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	8a 15       	cp	r24, r10
    116e:	9b 05       	cpc	r25, r11
    1170:	c1 f7       	brne	.-16     	; 0x1162 <color_change_sys+0xbe>
		out_to_lpd(rgb,(last_point-first_point)+1);
    1172:	65 2d       	mov	r22, r5
    1174:	7f 2d       	mov	r23, r15
    1176:	c4 01       	movw	r24, r8
    1178:	c0 d7       	rcall	.+3968   	; 0x20fa <__TEXT_REGION_LENGTH__+0xfa>
		for (uint16_t i = 0;i<speed;i++) _delay_ms(1);
    117a:	01 15       	cp	r16, r1
    117c:	11 05       	cpc	r17, r1
    117e:	61 f0       	breq	.+24     	; 0x1198 <color_change_sys+0xf4>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	94 2d       	mov	r25, r4
    1184:	ef e9       	ldi	r30, 0x9F	; 159
    1186:	ff e0       	ldi	r31, 0x0F	; 15
    1188:	31 97       	sbiw	r30, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <color_change_sys+0xe4>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <color_change_sys+0xea>
    118e:	00 00       	nop
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	80 17       	cp	r24, r16
    1194:	91 07       	cpc	r25, r17
    1196:	b1 f7       	brne	.-20     	; 0x1184 <color_change_sys+0xe0>
	} while (color_change(&_cur_color,&to_color,ratio)==0);
    1198:	4e 2d       	mov	r20, r14
    119a:	be 01       	movw	r22, r28
    119c:	6d 5f       	subi	r22, 0xFD	; 253
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	a2 da       	rcall	.-2748   	; 0x6ea <color_change>
    11a6:	88 23       	and	r24, r24
    11a8:	a9 f2       	breq	.-86     	; 0x1154 <color_change_sys+0xb0>
	for (uint16_t i = 0;i<wait;i++)
    11aa:	c1 14       	cp	r12, r1
    11ac:	d1 04       	cpc	r13, r1
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <color_change_sys+0x124>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	ef e9       	ldi	r30, 0x9F	; 159
    11b6:	ff e0       	ldi	r31, 0x0F	; 15
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <color_change_sys+0x114>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <color_change_sys+0x11a>
    11be:	00 00       	nop
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	8c 15       	cp	r24, r12
    11c4:	9d 05       	cpc	r25, r13
    11c6:	b1 f7       	brne	.-20     	; 0x11b4 <color_change_sys+0x110>
	_delay_ms(1);
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	7f 90       	pop	r7
    11ea:	6f 90       	pop	r6
    11ec:	5f 90       	pop	r5
    11ee:	4f 90       	pop	r4
    11f0:	3f 90       	pop	r3
    11f2:	2f 90       	pop	r2
    11f4:	08 95       	ret

000011f6 <main>:
#include "lpd6803.h"
Color_pack RGB[max_led];

int main(void)
{
	lpd6803_config_pin();
    11f6:	3b d7       	rcall	.+3702   	; 0x206e <__TEXT_REGION_LENGTH__+0x6e>
	set_base_color(RGB,_BOT,_TOP,0,0,0);
    11f8:	e1 2c       	mov	r14, r1
    11fa:	00 e0       	ldi	r16, 0x00	; 0
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	4b e2       	ldi	r20, 0x2B	; 43
    1200:	51 e0       	ldi	r21, 0x01	; 1
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	84 e6       	ldi	r24, 0x64	; 100
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a9 d7       	rcall	.+3922   	; 0x215e <__TEXT_REGION_LENGTH__+0x15e>
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,0);
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,2);
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,1);
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,3);
		
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,0);
    120c:	0f 2e       	mov	r0, r31
    120e:	f6 e0       	ldi	r31, 0x06	; 6
    1210:	4f 2e       	mov	r4, r31
    1212:	51 2c       	mov	r5, r1
    1214:	61 2c       	mov	r6, r1
    1216:	71 2c       	mov	r7, r1
    1218:	f0 2d       	mov	r31, r0
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,1);
		
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,0);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,3);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,1);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,2);
    121a:	de e0       	ldi	r29, 0x0E	; 14
	
    while(1)
    {
		
	
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,0);
    121c:	c1 2c       	mov	r12, r1
    121e:	0f 2e       	mov	r0, r31
    1220:	f8 ec       	ldi	r31, 0xC8	; 200
    1222:	ef 2e       	mov	r14, r31
    1224:	f1 2c       	mov	r15, r1
    1226:	f0 2d       	mov	r31, r0
    1228:	05 e0       	ldi	r16, 0x05	; 5
    122a:	2f e0       	ldi	r18, 0x0F	; 15
    122c:	4b e2       	ldi	r20, 0x2B	; 43
    122e:	51 e0       	ldi	r21, 0x01	; 1
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	84 e6       	ldi	r24, 0x64	; 100
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	82 dd       	rcall	.-1276   	; 0xd3e <gen_color_linear>
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,2);
    123a:	68 94       	set
    123c:	cc 24       	eor	r12, r12
    123e:	c1 f8       	bld	r12, 1
    1240:	2f e0       	ldi	r18, 0x0F	; 15
    1242:	4b e2       	ldi	r20, 0x2B	; 43
    1244:	51 e0       	ldi	r21, 0x01	; 1
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	84 e6       	ldi	r24, 0x64	; 100
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	77 dd       	rcall	.-1298   	; 0xd3e <gen_color_linear>
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,1);
    1250:	cc 24       	eor	r12, r12
    1252:	c3 94       	inc	r12
    1254:	2f e0       	ldi	r18, 0x0F	; 15
    1256:	4b e2       	ldi	r20, 0x2B	; 43
    1258:	51 e0       	ldi	r21, 0x01	; 1
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	84 e6       	ldi	r24, 0x64	; 100
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	6d dd       	rcall	.-1318   	; 0xd3e <gen_color_linear>
		gen_color_linear(RGB,_BOT,_TOP,15,5,200,3);
    1264:	0f 2e       	mov	r0, r31
    1266:	f3 e0       	ldi	r31, 0x03	; 3
    1268:	cf 2e       	mov	r12, r31
    126a:	f0 2d       	mov	r31, r0
    126c:	2f e0       	ldi	r18, 0x0F	; 15
    126e:	4b e2       	ldi	r20, 0x2B	; 43
    1270:	51 e0       	ldi	r21, 0x01	; 1
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	84 e6       	ldi	r24, 0x64	; 100
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	61 dd       	rcall	.-1342   	; 0xd3e <gen_color_linear>
		
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,0);
    127c:	80 d1       	rcall	.+768    	; 0x157e <random>
    127e:	a3 01       	movw	r20, r6
    1280:	92 01       	movw	r18, r4
    1282:	f5 d0       	rcall	.+490    	; 0x146e <__divmodsi4>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	86 0f       	add	r24, r22
    1288:	94 d7       	rcall	.+3880   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    128a:	8c 01       	movw	r16, r24
    128c:	78 d1       	rcall	.+752    	; 0x157e <random>
    128e:	a3 01       	movw	r20, r6
    1290:	92 01       	movw	r18, r4
    1292:	ed d0       	rcall	.+474    	; 0x146e <__divmodsi4>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	86 0f       	add	r24, r22
    1298:	8c d7       	rcall	.+3864   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    129a:	81 2c       	mov	r8, r1
    129c:	0f 2e       	mov	r0, r31
    129e:	fc e2       	ldi	r31, 0x2C	; 44
    12a0:	af 2e       	mov	r10, r31
    12a2:	bb 24       	eor	r11, r11
    12a4:	b3 94       	inc	r11
    12a6:	f0 2d       	mov	r31, r0
    12a8:	0f 2e       	mov	r0, r31
    12aa:	f5 e0       	ldi	r31, 0x05	; 5
    12ac:	cf 2e       	mov	r12, r31
    12ae:	f0 2d       	mov	r31, r0
    12b0:	0f 2e       	mov	r0, r31
    12b2:	ff e0       	ldi	r31, 0x0F	; 15
    12b4:	ef 2e       	mov	r14, r31
    12b6:	f0 2d       	mov	r31, r0
    12b8:	9c 01       	movw	r18, r24
    12ba:	4b e2       	ldi	r20, 0x2B	; 43
    12bc:	51 e0       	ldi	r21, 0x01	; 1
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	84 e6       	ldi	r24, 0x64	; 100
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	ec d7       	rcall	.+4056   	; 0x22a0 <__TEXT_REGION_LENGTH__+0x2a0>
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,3);
    12c8:	5a d1       	rcall	.+692    	; 0x157e <random>
    12ca:	a3 01       	movw	r20, r6
    12cc:	92 01       	movw	r18, r4
    12ce:	cf d0       	rcall	.+414    	; 0x146e <__divmodsi4>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	86 0f       	add	r24, r22
    12d4:	6e d7       	rcall	.+3804   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    12d6:	8c 01       	movw	r16, r24
    12d8:	52 d1       	rcall	.+676    	; 0x157e <random>
    12da:	a3 01       	movw	r20, r6
    12dc:	92 01       	movw	r18, r4
    12de:	c7 d0       	rcall	.+398    	; 0x146e <__divmodsi4>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	86 0f       	add	r24, r22
    12e4:	66 d7       	rcall	.+3788   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    12e6:	0f 2e       	mov	r0, r31
    12e8:	f3 e0       	ldi	r31, 0x03	; 3
    12ea:	8f 2e       	mov	r8, r31
    12ec:	f0 2d       	mov	r31, r0
    12ee:	9c 01       	movw	r18, r24
    12f0:	4b e2       	ldi	r20, 0x2B	; 43
    12f2:	51 e0       	ldi	r21, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	84 e6       	ldi	r24, 0x64	; 100
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	d1 d7       	rcall	.+4002   	; 0x22a0 <__TEXT_REGION_LENGTH__+0x2a0>
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,2);
    12fe:	3f d1       	rcall	.+638    	; 0x157e <random>
    1300:	a3 01       	movw	r20, r6
    1302:	92 01       	movw	r18, r4
    1304:	b4 d0       	rcall	.+360    	; 0x146e <__divmodsi4>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	86 0f       	add	r24, r22
    130a:	53 d7       	rcall	.+3750   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    130c:	8c 01       	movw	r16, r24
    130e:	37 d1       	rcall	.+622    	; 0x157e <random>
    1310:	a3 01       	movw	r20, r6
    1312:	92 01       	movw	r18, r4
    1314:	ac d0       	rcall	.+344    	; 0x146e <__divmodsi4>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	86 0f       	add	r24, r22
    131a:	4b d7       	rcall	.+3734   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    131c:	68 94       	set
    131e:	88 24       	eor	r8, r8
    1320:	81 f8       	bld	r8, 1
    1322:	9c 01       	movw	r18, r24
    1324:	4b e2       	ldi	r20, 0x2B	; 43
    1326:	51 e0       	ldi	r21, 0x01	; 1
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	84 e6       	ldi	r24, 0x64	; 100
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	b7 d7       	rcall	.+3950   	; 0x22a0 <__TEXT_REGION_LENGTH__+0x2a0>
		gen_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,5,300,1);
    1332:	25 d1       	rcall	.+586    	; 0x157e <random>
    1334:	a3 01       	movw	r20, r6
    1336:	92 01       	movw	r18, r4
    1338:	9a d0       	rcall	.+308    	; 0x146e <__divmodsi4>
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	86 0f       	add	r24, r22
    133e:	39 d7       	rcall	.+3698   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1340:	8c 01       	movw	r16, r24
    1342:	1d d1       	rcall	.+570    	; 0x157e <random>
    1344:	a3 01       	movw	r20, r6
    1346:	92 01       	movw	r18, r4
    1348:	92 d0       	rcall	.+292    	; 0x146e <__divmodsi4>
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	86 0f       	add	r24, r22
    134e:	31 d7       	rcall	.+3682   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1350:	88 24       	eor	r8, r8
    1352:	83 94       	inc	r8
    1354:	9c 01       	movw	r18, r24
    1356:	4b e2       	ldi	r20, 0x2B	; 43
    1358:	51 e0       	ldi	r21, 0x01	; 1
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	84 e6       	ldi	r24, 0x64	; 100
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e d7       	rcall	.+3900   	; 0x22a0 <__TEXT_REGION_LENGTH__+0x2a0>
		
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,0);
    1364:	0c d1       	rcall	.+536    	; 0x157e <random>
    1366:	a3 01       	movw	r20, r6
    1368:	92 01       	movw	r18, r4
    136a:	81 d0       	rcall	.+258    	; 0x146e <__divmodsi4>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	86 0f       	add	r24, r22
    1370:	20 d7       	rcall	.+3648   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1372:	8c 01       	movw	r16, r24
    1374:	04 d1       	rcall	.+520    	; 0x157e <random>
    1376:	a3 01       	movw	r20, r6
    1378:	92 01       	movw	r18, r4
    137a:	79 d0       	rcall	.+242    	; 0x146e <__divmodsi4>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	86 0f       	add	r24, r22
    1380:	18 d7       	rcall	.+3632   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1382:	81 2c       	mov	r8, r1
    1384:	68 94       	set
    1386:	cc 24       	eor	r12, r12
    1388:	c1 f8       	bld	r12, 1
    138a:	9c 01       	movw	r18, r24
    138c:	4b e2       	ldi	r20, 0x2B	; 43
    138e:	51 e0       	ldi	r21, 0x01	; 1
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	84 e6       	ldi	r24, 0x64	; 100
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	68 da       	rcall	.-2864   	; 0x86a <gen_soft_two_color>
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,3);
    139a:	f1 d0       	rcall	.+482    	; 0x157e <random>
    139c:	a3 01       	movw	r20, r6
    139e:	92 01       	movw	r18, r4
    13a0:	66 d0       	rcall	.+204    	; 0x146e <__divmodsi4>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	86 0f       	add	r24, r22
    13a6:	05 d7       	rcall	.+3594   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    13a8:	8c 01       	movw	r16, r24
    13aa:	e9 d0       	rcall	.+466    	; 0x157e <random>
    13ac:	a3 01       	movw	r20, r6
    13ae:	92 01       	movw	r18, r4
    13b0:	5e d0       	rcall	.+188    	; 0x146e <__divmodsi4>
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	86 0f       	add	r24, r22
    13b6:	fd d6       	rcall	.+3578   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    13b8:	0f 2e       	mov	r0, r31
    13ba:	f3 e0       	ldi	r31, 0x03	; 3
    13bc:	8f 2e       	mov	r8, r31
    13be:	f0 2d       	mov	r31, r0
    13c0:	9c 01       	movw	r18, r24
    13c2:	4b e2       	ldi	r20, 0x2B	; 43
    13c4:	51 e0       	ldi	r21, 0x01	; 1
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	84 e6       	ldi	r24, 0x64	; 100
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	4d da       	rcall	.-2918   	; 0x86a <gen_soft_two_color>
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,1);
    13d0:	d6 d0       	rcall	.+428    	; 0x157e <random>
    13d2:	a3 01       	movw	r20, r6
    13d4:	92 01       	movw	r18, r4
    13d6:	4b d0       	rcall	.+150    	; 0x146e <__divmodsi4>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	86 0f       	add	r24, r22
    13dc:	ea d6       	rcall	.+3540   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    13de:	8c 01       	movw	r16, r24
    13e0:	ce d0       	rcall	.+412    	; 0x157e <random>
    13e2:	a3 01       	movw	r20, r6
    13e4:	92 01       	movw	r18, r4
    13e6:	43 d0       	rcall	.+134    	; 0x146e <__divmodsi4>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	86 0f       	add	r24, r22
    13ec:	e2 d6       	rcall	.+3524   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    13ee:	88 24       	eor	r8, r8
    13f0:	83 94       	inc	r8
    13f2:	9c 01       	movw	r18, r24
    13f4:	4b e2       	ldi	r20, 0x2B	; 43
    13f6:	51 e0       	ldi	r21, 0x01	; 1
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	84 e6       	ldi	r24, 0x64	; 100
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	34 da       	rcall	.-2968   	; 0x86a <gen_soft_two_color>
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,2);
    1402:	bd d0       	rcall	.+378    	; 0x157e <random>
    1404:	a3 01       	movw	r20, r6
    1406:	92 01       	movw	r18, r4
    1408:	32 d0       	rcall	.+100    	; 0x146e <__divmodsi4>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	86 0f       	add	r24, r22
    140e:	d1 d6       	rcall	.+3490   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1410:	8c 01       	movw	r16, r24
    1412:	b5 d0       	rcall	.+362    	; 0x157e <random>
    1414:	a3 01       	movw	r20, r6
    1416:	92 01       	movw	r18, r4
    1418:	2a d0       	rcall	.+84     	; 0x146e <__divmodsi4>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	86 0f       	add	r24, r22
    141e:	c9 d6       	rcall	.+3474   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1420:	68 94       	set
    1422:	88 24       	eor	r8, r8
    1424:	81 f8       	bld	r8, 1
    1426:	9c 01       	movw	r18, r24
    1428:	4b e2       	ldi	r20, 0x2B	; 43
    142a:	51 e0       	ldi	r21, 0x01	; 1
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	84 e6       	ldi	r24, 0x64	; 100
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	1a da       	rcall	.-3020   	; 0x86a <gen_soft_two_color>
    1436:	cd 2f       	mov	r28, r29
		
		for (uint8_t i = 0; i < 14; i++)
		{
			color_change_sys(RGB,_BOT,_TOP,base_convert(random()%6+1),50,1,2000);
    1438:	a2 d0       	rcall	.+324    	; 0x157e <random>
    143a:	a3 01       	movw	r20, r6
    143c:	92 01       	movw	r18, r4
    143e:	17 d0       	rcall	.+46     	; 0x146e <__divmodsi4>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	86 0f       	add	r24, r22
    1444:	b6 d6       	rcall	.+3436   	; 0x21b2 <__TEXT_REGION_LENGTH__+0x1b2>
    1446:	0f 2e       	mov	r0, r31
    1448:	f0 ed       	ldi	r31, 0xD0	; 208
    144a:	cf 2e       	mov	r12, r31
    144c:	f7 e0       	ldi	r31, 0x07	; 7
    144e:	df 2e       	mov	r13, r31
    1450:	f0 2d       	mov	r31, r0
    1452:	ee 24       	eor	r14, r14
    1454:	e3 94       	inc	r14
    1456:	02 e3       	ldi	r16, 0x32	; 50
    1458:	9c 01       	movw	r18, r24
    145a:	4b e2       	ldi	r20, 0x2B	; 43
    145c:	51 e0       	ldi	r21, 0x01	; 1
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	84 e6       	ldi	r24, 0x64	; 100
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	1e de       	rcall	.-964    	; 0x10a4 <color_change_sys>
    1468:	c1 50       	subi	r28, 0x01	; 1
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,0);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,3);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,1);
		gen_soft_two_color(RGB,_BOT,_TOP,base_convert(random()%6+1),base_convert(random()%6+1),15,2,300,2);
		
		for (uint8_t i = 0; i < 14; i++)
    146a:	31 f7       	brne	.-52     	; 0x1438 <main+0x242>
    146c:	d7 ce       	rjmp	.-594    	; 0x121c <main+0x26>

0000146e <__divmodsi4>:
    146e:	05 2e       	mov	r0, r21
    1470:	97 fb       	bst	r25, 7
    1472:	16 f4       	brtc	.+4      	; 0x1478 <__divmodsi4+0xa>
    1474:	00 94       	com	r0
    1476:	0f d0       	rcall	.+30     	; 0x1496 <__negsi2>
    1478:	57 fd       	sbrc	r21, 7
    147a:	05 d0       	rcall	.+10     	; 0x1486 <__divmodsi4_neg2>
    147c:	14 d0       	rcall	.+40     	; 0x14a6 <__udivmodsi4>
    147e:	07 fc       	sbrc	r0, 7
    1480:	02 d0       	rcall	.+4      	; 0x1486 <__divmodsi4_neg2>
    1482:	46 f4       	brtc	.+16     	; 0x1494 <__divmodsi4_exit>
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <__negsi2>

00001486 <__divmodsi4_neg2>:
    1486:	50 95       	com	r21
    1488:	40 95       	com	r20
    148a:	30 95       	com	r19
    148c:	21 95       	neg	r18
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	4f 4f       	sbci	r20, 0xFF	; 255
    1492:	5f 4f       	sbci	r21, 0xFF	; 255

00001494 <__divmodsi4_exit>:
    1494:	08 95       	ret

00001496 <__negsi2>:
    1496:	90 95       	com	r25
    1498:	80 95       	com	r24
    149a:	70 95       	com	r23
    149c:	61 95       	neg	r22
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	08 95       	ret

000014a6 <__udivmodsi4>:
    14a6:	a1 e2       	ldi	r26, 0x21	; 33
    14a8:	1a 2e       	mov	r1, r26
    14aa:	aa 1b       	sub	r26, r26
    14ac:	bb 1b       	sub	r27, r27
    14ae:	fd 01       	movw	r30, r26
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <__udivmodsi4_ep>

000014b2 <__udivmodsi4_loop>:
    14b2:	aa 1f       	adc	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	ee 1f       	adc	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	a2 17       	cp	r26, r18
    14bc:	b3 07       	cpc	r27, r19
    14be:	e4 07       	cpc	r30, r20
    14c0:	f5 07       	cpc	r31, r21
    14c2:	20 f0       	brcs	.+8      	; 0x14cc <__udivmodsi4_ep>
    14c4:	a2 1b       	sub	r26, r18
    14c6:	b3 0b       	sbc	r27, r19
    14c8:	e4 0b       	sbc	r30, r20
    14ca:	f5 0b       	sbc	r31, r21

000014cc <__udivmodsi4_ep>:
    14cc:	66 1f       	adc	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	88 1f       	adc	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	1a 94       	dec	r1
    14d6:	69 f7       	brne	.-38     	; 0x14b2 <__udivmodsi4_loop>
    14d8:	60 95       	com	r22
    14da:	70 95       	com	r23
    14dc:	80 95       	com	r24
    14de:	90 95       	com	r25
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	bd 01       	movw	r22, r26
    14e6:	cf 01       	movw	r24, r30
    14e8:	08 95       	ret

000014ea <do_random>:
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	68 81       	ld	r22, Y
    1502:	79 81       	ldd	r23, Y+1	; 0x01
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	61 15       	cp	r22, r1
    150a:	71 05       	cpc	r23, r1
    150c:	81 05       	cpc	r24, r1
    150e:	91 05       	cpc	r25, r1
    1510:	21 f4       	brne	.+8      	; 0x151a <do_random+0x30>
    1512:	64 e2       	ldi	r22, 0x24	; 36
    1514:	79 ed       	ldi	r23, 0xD9	; 217
    1516:	8b e5       	ldi	r24, 0x5B	; 91
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	2d e1       	ldi	r18, 0x1D	; 29
    151c:	33 ef       	ldi	r19, 0xF3	; 243
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	a5 df       	rcall	.-182    	; 0x146e <__divmodsi4>
    1524:	49 01       	movw	r8, r18
    1526:	5a 01       	movw	r10, r20
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	a7 ea       	ldi	r26, 0xA7	; 167
    152e:	b1 e4       	ldi	r27, 0x41	; 65
    1530:	33 d0       	rcall	.+102    	; 0x1598 <__muluhisi3>
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	ac ee       	ldi	r26, 0xEC	; 236
    1538:	b4 ef       	ldi	r27, 0xF4	; 244
    153a:	a5 01       	movw	r20, r10
    153c:	94 01       	movw	r18, r8
    153e:	38 d0       	rcall	.+112    	; 0x15b0 <__mulohisi3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8c 0d       	add	r24, r12
    1546:	9d 1d       	adc	r25, r13
    1548:	ae 1d       	adc	r26, r14
    154a:	bf 1d       	adc	r27, r15
    154c:	b7 ff       	sbrs	r27, 7
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <do_random+0x6c>
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	a1 09       	sbc	r26, r1
    1554:	b0 48       	sbci	r27, 0x80	; 128
    1556:	88 83       	st	Y, r24
    1558:	99 83       	std	Y+1, r25	; 0x01
    155a:	aa 83       	std	Y+2, r26	; 0x02
    155c:	bb 83       	std	Y+3, r27	; 0x03
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	9f 77       	andi	r25, 0x7F	; 127
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	cf 90       	pop	r12
    1570:	bf 90       	pop	r11
    1572:	af 90       	pop	r10
    1574:	9f 90       	pop	r9
    1576:	8f 90       	pop	r8
    1578:	08 95       	ret

0000157a <random_r>:
    157a:	b7 df       	rcall	.-146    	; 0x14ea <do_random>
    157c:	08 95       	ret

0000157e <random>:
    157e:	80 e6       	ldi	r24, 0x60	; 96
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	b3 df       	rcall	.-154    	; 0x14ea <do_random>
    1584:	08 95       	ret

00001586 <srandom>:
    1586:	60 93 60 00 	sts	0x0060, r22
    158a:	70 93 61 00 	sts	0x0061, r23
    158e:	80 93 62 00 	sts	0x0062, r24
    1592:	90 93 63 00 	sts	0x0063, r25
    1596:	08 95       	ret

00001598 <__muluhisi3>:
    1598:	0f d0       	rcall	.+30     	; 0x15b8 <__umulhisi3>
    159a:	a5 9f       	mul	r26, r21
    159c:	90 0d       	add	r25, r0
    159e:	b4 9f       	mul	r27, r20
    15a0:	90 0d       	add	r25, r0
    15a2:	a4 9f       	mul	r26, r20
    15a4:	80 0d       	add	r24, r0
    15a6:	91 1d       	adc	r25, r1
    15a8:	11 24       	eor	r1, r1
    15aa:	08 95       	ret

000015ac <__mulshisi3>:
    15ac:	b7 ff       	sbrs	r27, 7
    15ae:	f4 cf       	rjmp	.-24     	; 0x1598 <__muluhisi3>

000015b0 <__mulohisi3>:
    15b0:	f3 df       	rcall	.-26     	; 0x1598 <__muluhisi3>
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	08 95       	ret

000015b8 <__umulhisi3>:
    15b8:	a2 9f       	mul	r26, r18
    15ba:	b0 01       	movw	r22, r0
    15bc:	b3 9f       	mul	r27, r19
    15be:	c0 01       	movw	r24, r0
    15c0:	a3 9f       	mul	r26, r19
    15c2:	01 d0       	rcall	.+2      	; 0x15c6 <__umulhisi3+0xe>
    15c4:	b2 9f       	mul	r27, r18
    15c6:	70 0d       	add	r23, r0
    15c8:	81 1d       	adc	r24, r1
    15ca:	11 24       	eor	r1, r1
    15cc:	91 1d       	adc	r25, r1
    15ce:	08 95       	ret

000015d0 <_exit>:
    15d0:	f8 94       	cli

000015d2 <__stop_program>:
    15d2:	ff cf       	rjmp	.-2      	; 0x15d2 <__stop_program>
